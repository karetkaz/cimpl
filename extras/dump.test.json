{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 136
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(1)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23320
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(4)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 160
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 304
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 448
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 592
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 736
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 880
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1168
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1312
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34312
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34776
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(20)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36632
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1600
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(26)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(27)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1744
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39024
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(28)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(29)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(30)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40416
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(31)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 1888
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43008
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(36)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(37)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(38)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(39)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29960
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(10)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2176
	, "static": true
	, "const": true
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2320
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2472
	, "static": true
	, "const": true
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "true"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "false"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "uint8"
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "float32"
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "float64"
		, "value": "float64"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3768
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3912
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x1 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x1 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4776
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 4920
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x1 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x1 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x2 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x2 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x4 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x4 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 5496
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 6792
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 7616
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8464
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8880
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9296
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9712
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 10400
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 11392
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 12352
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 13312
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 14544
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 15776
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 16736
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 17696
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 18656
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 19616
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 20032
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25072
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(5)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "3"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "4"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27120
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "void"
	, "size": 0
	, "offs": 30008
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(12)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(13)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(14)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32032
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(15)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32360
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(16)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 17
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 27
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 27
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 28
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 28
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 29
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 29
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 69
	, "offs": 173408
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 33
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 33
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 33
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 34
				}]
			}
		}, {
			"": "NonEqualIntegers"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "stdlib.ci"
			, "line": 36
			, "value": "NonEqualIntegers"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "assertEq.NonEqualIntegers"
			, "file": "stdlib.ci"
			, "line": 41
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 46
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173408
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173410
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 173412
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 173413
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173417
		, "size": 1
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173418
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173422
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173424
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173426
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173428
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173430
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173432
		, "size": 2
	}, {
		"instruction": "load.ref .00b5b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173434
		, "size": 5
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173439
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173444
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173449
		, "size": 5
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173454
		, "size": 5
	}, {
		"instruction": "load.ref .00e370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173459
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 173464
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 173468
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173472
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173476
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 52
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "size"
			}
		}]
	}
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "test.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test.ci"
		, "line": 4
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 3
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 4
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 6
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 7
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 9
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 10
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 11
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(float32(3.140000 / (2)), float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "float32(3.140000 / (2))"
			, "kind": "()"
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "args": [{
				"": "3.140000 / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "left": {
					"": "3.140000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "value": "3.140000"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.inlineEmit.ci"
						, "line": 11
						, "value": "2"
					}]
				}
			}]
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 14
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 14
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 15
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 15
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 17
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 17
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 17
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 18
	, "size": 8
	, "offs": 44
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 18
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 18
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 19
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 19
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 19
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 20
	, "size": 8
	, "offs": 56
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 20
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 20
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 23
	, "size": 8
	, "offs": 64
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "sum(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(sum(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "sum(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "value": "c"
		}]
	}
}, {
	"": "any(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "any(any(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "any(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "value": "c"
		}]
	}
}, {
	"": "min(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "min(min(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "min(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "value": "c"
		}]
	}
}, {
	"": "ma"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "ma"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 68
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 13
		, "value": "3"
	}
}, {
	"": "mb"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mb"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 14
	, "size": 4
	, "offs": 72
	, "static": false
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 14
		, "value": "6"
	}
}, {
	"": "mc"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mc"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 76
	, "static": false
	, "const": false
	, "ast": {
		"": "9"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 15
		, "value": "9"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 80
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "3"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 18
	, "size": 4
	, "offs": 84
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "mb"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 88
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mc"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 92
	, "static": false
	, "const": false
	, "ast": {
		"": "last(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "3"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 22
	, "size": 4
	, "offs": 96
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "mb"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 100
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 104
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "12"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 26
	, "size": 4
	, "offs": 108
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "mb"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 112
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mc"
			}
		}]
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 116
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "12"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 30
	, "size": 4
	, "offs": 120
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "mb"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 124
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mc"
			}
		}]
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 128
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "12"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 34
	, "size": 4
	, "offs": 132
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "mb"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 136
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 140
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 37
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "6"
		}]
	}
}, {
	"": "sum3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 38
	, "size": 4
	, "offs": 144
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mc"
		}]
	}
}, {
	"": "sum3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 39
	, "size": 4
	, "offs": 148
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
		}]
	}
}, {
	"": "any3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 152
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "any3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 156
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mc"
		}]
	}
}, {
	"": "any3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 160
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
		}]
	}
}, {
	"": "min3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 164
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "6"
		}]
	}
}, {
	"": "min3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 168
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mc"
		}]
	}
}, {
	"": "min3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 47
	, "size": 4
	, "offs": 172
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
		}]
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 9
	, "size": 4
	, "offs": 176
	, "static": false
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 10
	, "size": 4
	, "offs": 180
	, "static": false
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 11
	, "size": 4
	, "offs": 184
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 12
	, "size": 4
	, "offs": 188
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 13
	, "size": 4
	, "offs": 192
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 74512
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 74784
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "test/test.inlineOverload.ci"
	, "line": 28
	, "size": 8
	, "offs": 200
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "test/test.inlineOverload.ci"
	, "line": 29
	, "size": 8
	, "offs": 208
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "test/test.inlineOverload.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 7
	, "size": 8
	, "offs": 173480
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initByRef.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 8
	, "size": 4
	, "offs": 212
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 9
	, "size": 4
	, "offs": 216
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 10
	, "size": 8
	, "offs": 224
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 12
	, "size": 8
	, "offs": 232
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 13
	, "size": 4
	, "offs": 236
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 14
	, "size": 4
	, "offs": 240
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 16
	, "size": 4
	, "offs": 244
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 17
	, "size": 4
	, "offs": 248
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 18
	, "size": 8
	, "offs": 256
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 19
	, "size": 4
	, "offs": 260
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "test/lang.initByRef.ci"
	, "line": 20
	, "size": 4
	, "offs": 264
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "test/lang.initByRef.ci"
	, "line": 21
	, "size": 4
	, "offs": 268
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 23
	, "size": 4
	, "offs": 272
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 24
	, "size": 8
	, "offs": 280
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 25
	, "size": 4
	, "offs": 284
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 27
	, "size": 8
	, "offs": 292
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 28
	, "size": 8
	, "offs": 300
	, "static": false
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 29
	, "size": 4
	, "offs": 304
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 30
	, "size": 4
	, "offs": 308
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 31
	, "size": 8
	, "offs": 316
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 32
	, "size": 4
	, "offs": 320
	, "static": false
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 35
	, "size": 4
	, "offs": 324
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 36
	, "size": 4
	, "offs": 328
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 37
	, "size": 4
	, "offs": 332
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 38
	, "size": 4
	, "offs": 336
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 39
	, "size": 4
	, "offs": 340
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 40
	, "size": 4
	, "offs": 344
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 41
	, "size": 4
	, "offs": 348
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 42
	, "size": 4
	, "offs": 352
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 43
	, "size": 4
	, "offs": 356
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 44
	, "size": 4
	, "offs": 360
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 45
	, "size": 4
	, "offs": 364
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 46
	, "size": 4
	, "offs": 368
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 47
	, "size": 4
	, "offs": 372
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 48
	, "size": 4
	, "offs": 376
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 49
	, "size": 4
	, "offs": 380
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 50
	, "size": 4
	, "offs": 384
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 51
	, "size": 4
	, "offs": 388
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 52
	, "size": 4
	, "offs": 392
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 55
	, "size": 8
	, "offs": 400
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 56
	, "size": 8
	, "offs": 408
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 57
	, "size": 8
	, "offs": 416
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 58
	, "size": 8
	, "offs": 424
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 59
	, "size": 8
	, "offs": 432
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 60
	, "size": 8
	, "offs": 440
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 61
	, "size": 8
	, "offs": 448
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 62
	, "size": 8
	, "offs": 456
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 63
	, "size": 8
	, "offs": 464
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 64
	, "size": 8
	, "offs": 472
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 65
	, "size": 8
	, "offs": 480
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 66
	, "size": 8
	, "offs": 488
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 67
	, "size": 8
	, "offs": 496
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 68
	, "size": 8
	, "offs": 504
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 69
	, "size": 8
	, "offs": 512
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 70
	, "size": 8
	, "offs": 520
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 71
	, "size": 8
	, "offs": 528
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 72
	, "size": 8
	, "offs": 536
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 75
	, "size": 4
	, "offs": 540
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 76
	, "size": 4
	, "offs": 544
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 77
	, "size": 4
	, "offs": 548
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 78
	, "size": 4
	, "offs": 552
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 79
	, "size": 4
	, "offs": 556
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 80
	, "size": 4
	, "offs": 560
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 81
	, "size": 4
	, "offs": 564
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 82
	, "size": 4
	, "offs": 568
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 83
	, "size": 4
	, "offs": 572
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 84
	, "size": 4
	, "offs": 576
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 85
	, "size": 4
	, "offs": 580
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 86
	, "size": 4
	, "offs": 584
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 87
	, "size": 4
	, "offs": 588
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 88
	, "size": 4
	, "offs": 592
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 89
	, "size": 4
	, "offs": 596
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 90
	, "size": 4
	, "offs": 600
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 91
	, "size": 4
	, "offs": 604
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 92
	, "size": 4
	, "offs": 608
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 95
	, "size": 4
	, "offs": 612
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 96
	, "size": 8
	, "offs": 620
	, "static": false
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 97
	, "size": 4
	, "offs": 624
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 99
	, "size": 4
	, "offs": 628
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 105
	, "size": 8
	, "offs": 636
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 108
	, "size": 4
	, "offs": 640
	, "static": false
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 3
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 173488
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173488
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173496
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173496
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173498
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 173500
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173501
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173503
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 11
	, "size": 4
	, "offs": 644
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 648
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 17
	, "size": 4
	, "offs": 652
	, "static": false
	, "const": false
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 656
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 23
	, "size": 4
	, "offs": 660
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 664
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 29
	, "size": 4
	, "offs": 668
	, "static": false
	, "const": false
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173504
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 33
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 33
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173504
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173506
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 173508
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173509
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173511
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 55
	, "offs": 173512
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 38
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 38
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "test/lang.function.ci"
					, "line": 39
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 39
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 41
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 41
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173512
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173514
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 173519
		, "size": 1
	}, {
		"instruction": "jnz +9"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 173520
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173524
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173526
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173528
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173529
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173530
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 173532
		, "size": 4
	}, {
		"instruction": "load.ref .02a5c8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173536
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 173541
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173542
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173546
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173547
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 173549
		, "size": 4
	}, {
		"instruction": "load.ref .02a5c8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173553
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 173558
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173559
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 173563
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173564
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173566
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "test/lang.function.ci"
	, "line": 45
	, "size": 4
	, "offs": 672
	, "static": false
	, "const": false
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 45
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 45
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 676
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 680
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 684
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 688
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 692
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 696
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 700
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 704
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 708
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 712
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 716
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 720
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 724
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 728
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 732
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 736
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 740
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 744
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "test/lang.reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 96160
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang.reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "test/lang.reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 96432
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 748
	, "static": false
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "test/lang.reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 752
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 756
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 760
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 764
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 768
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 772
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 776
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 780
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 784
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 788
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 792
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 796
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 800
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 804
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 808
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 812
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 816
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 3
	, "size": 8
	, "offs": 824
	, "static": false
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 4
	, "size": 8
	, "offs": 832
	, "static": false
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 6
	, "size": 4
	, "offs": 836
	, "static": false
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 7
	, "size": 4
	, "offs": 840
	, "static": false
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 14
	, "size": 4
	, "offs": 844
	, "static": false
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 15
	, "size": 4
	, "offs": 848
	, "static": false
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 16
	, "size": 4
	, "offs": 852
	, "static": false
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 18
	, "size": 4
	, "offs": 856
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 19
	, "size": 4
	, "offs": 860
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 21
	, "size": 4
	, "offs": 864
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 22
	, "size": 4
	, "offs": 868
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 23
	, "size": 4
	, "offs": 872
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 25
	, "size": 4
	, "offs": 876
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 26
	, "size": 4
	, "offs": 880
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 27
	, "size": 4
	, "offs": 884
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 29
	, "size": 4
	, "offs": 888
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 30
	, "size": 4
	, "offs": 892
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 31
	, "size": 4
	, "offs": 896
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 33
	, "size": 4
	, "offs": 900
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 34
	, "size": 4
	, "offs": 904
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 35
	, "size": 4
	, "offs": 908
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "sinF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sinF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 37
	, "size": 8
	, "offs": 916
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "cosF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 38
	, "size": 8
	, "offs": 924
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "tanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 39
	, "size": 8
	, "offs": 932
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "logF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 40
	, "size": 8
	, "offs": 940
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "expF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "expF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 41
	, "size": 8
	, "offs": 948
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "powF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 42
	, "size": 8
	, "offs": 956
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sqrtF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 43
	, "size": 8
	, "offs": 964
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "atanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "atanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 44
	, "size": 8
	, "offs": 972
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "sinF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sinF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 46
	, "size": 4
	, "offs": 976
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "cosF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 47
	, "size": 4
	, "offs": 980
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "tanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 48
	, "size": 4
	, "offs": 984
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "logF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 49
	, "size": 4
	, "offs": 988
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "expF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "expF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 50
	, "size": 4
	, "offs": 992
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "powF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 51
	, "size": 4
	, "offs": 996
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sqrtF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 52
	, "size": 4
	, "offs": 1000
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "atanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "atanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 53
	, "size": 4
	, "offs": 1004
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 1008
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 1012
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 1016
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 1020
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 1028
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 1036
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 173568
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173568
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 173576
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[1024]"
			, "file": "test/stdc.execute.ci"
			, "line": 15
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 16
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173576
		, "size": 4
	}, {
		"instruction": "load.sp(+1028)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 173580
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 173584
		, "size": 1
	}, {
		"instruction": "load.ref .02a608"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173585
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 173590
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173591
		, "size": 4
	}, {
		"instruction": "inc.sp(-1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173595
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173599
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 173600
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 20
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173600
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173605
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 173606
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173607
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173611
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 64
	, "offs": 173616
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/stdc.execute.ci"
			, "line": 24
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "test/stdc.execute.ci"
			, "line": 29
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.noTrace, \"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 34
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173616
		, "size": 4
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173620
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173625
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173627
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173632
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173634
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173639
		, "size": 2
	}, {
		"instruction": "load.ref .00eb20"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173641
		, "size": 5
	}, {
		"instruction": "load.c32 34"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173646
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173651
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173656
		, "size": 1
	}, {
		"instruction": "load.ref .01a85e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173657
		, "size": 5
	}, {
		"instruction": "load.ref .01b178"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173662
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 173667
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 173671
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173675
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173679
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 173680
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 38
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 39
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173680
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173685
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 173687
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 173688
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173692
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 42
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 173696
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 43
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173696
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173697
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 46
	, "size": 4
	, "offs": 1040
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 47
	, "size": 4
	, "offs": 1044
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 48
	, "size": 4
	, "offs": 1048
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 49
	, "size": 4
	, "offs": 1052
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 50
	, "size": 4
	, "offs": 1056
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 51
	, "size": 4
	, "offs": 1060
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 52
	, "size": 4
	, "offs": 1064
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "abortExecution"
		}]
	}
}, {
	"": "arrFixedNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedNoInit"
	, "type": "int64[7]"
	, "file": "test/lang.array.ci"
	, "line": 49
	, "size": 56
	, "offs": 1120
	, "static": false
	, "const": false
}, {
	"": "arrArrayNoInit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayNoInit"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 50
	, "size": 4
	, "offs": 1124
	, "static": false
	, "const": false
}, {
	"": "arrSliceNoInit"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceNoInit"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 51
	, "size": 8
	, "offs": 1132
	, "static": false
	, "const": false
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 59
	, "size": 4
	, "offs": 1136
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.array.ci"
		, "line": 59
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 60
	, "size": 8
	, "offs": 1144
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.array.ci"
		, "line": 60
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 63
	, "size": 4
	, "offs": 1148
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 63
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 64
	, "size": 8
	, "offs": 1156
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 64
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 67
	, "size": 4
	, "offs": 1160
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 67
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 68
	, "size": 8
	, "offs": 1168
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 68
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 71
	, "size": 4
	, "offs": 1172
	, "static": false
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "test/lang.array.ci"
		, "line": 71
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "test/lang.array.ci"
	, "line": 81
	, "size": 7
	, "offs": 1180
	, "static": false
	, "const": false
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "test/lang.array.ci"
	, "line": 86
	, "size": 4
	, "offs": 1184
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.array.ci"
		, "line": 86
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "test/lang.array.ci"
	, "line": 90
	, "size": 8
	, "offs": 1192
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.array.ci"
		, "line": 90
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 5
	, "offs": 173704
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "test/lang.array.ci"
					, "line": 103
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.array.ci"
						, "line": 103
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "test/lang.array.ci"
						, "line": 103
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173704
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173706
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173708
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 173712
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 104
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "test/lang.array.ci"
						, "line": 104
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 104
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173712
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173714
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 173716
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 173720
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 173721
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173723
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 173728
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 105
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "test/lang.array.ci"
						, "line": 105
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 105
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173728
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173730
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 173732
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 173736
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 173737
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173739
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 106
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 173744
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 106
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.array.ci"
						, "line": 106
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 106
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173744
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173746
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 173748
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 173752
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 173753
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173755
		, "size": 1
	}]
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang.member.ci"
	, "line": 3
	, "size": 32
	, "offs": 121360
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang.member.ci"
	, "line": 5
	, "size": 8
	, "offs": 121496
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 11
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 14
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 17
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 17
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 20
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 20
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 23
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 26
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 35
	, "size": 4
	, "offs": 173760
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 38
	, "size": 4
	, "offs": 173768
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 38
		, "value": "5"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 41
	, "size": 4
	, "offs": 173776
	, "static": true
	, "const": true
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 41
		, "value": "6"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 44
	, "size": 8
	, "offs": 173784
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 47
	, "size": 8
	, "offs": 173792
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 51;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 47
		}, {
			"": "globalRecInit.constant := 52;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 47
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 50
	, "size": 8
	, "offs": 173800
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 50
		}, {
			"": "globalConstantRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 50
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "test/lang.member.ci"
	, "line": 53
	, "size": 32
	, "offs": 1224
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.memberInit := 8;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.constantInit := 9;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 57
		}, {
			"": "recordMemberTest.memberRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 61
		}, {
			"": "recordMemberTest.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 65
		}, {
			"": "recordMemberTest.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 66
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "test/lang.method.ci"
	, "line": 3
	, "size": 16
	, "offs": 123792
	, "static": true
	, "const": true
}, {
	"": "RecordMethodTest.staticMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173808
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173808
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173810
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 173812
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173813
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173815
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 173816
	, "static": true
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMethodTest.delegateMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173824
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 27
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 27
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 27
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 27
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173824
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173826
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 173828
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173829
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173831
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.virtualMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.forwardMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173832
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 32
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 32
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 32
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 32
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173832
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173834
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 173836
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173837
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173839
		, "size": 1
	}]
}, {
	"": "globalFunction(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 41
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 173840
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 41
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 42
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 42
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 42
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 42
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173840
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173842
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 173844
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 173845
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 173847
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "test/lang.method.ci"
	, "line": 45
	, "size": 16
	, "offs": 1240
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.delegateMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 46
		}, {
			"": "recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 47
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang.method.ci"
					, "line": 45
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}]
	}
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 128072
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 128616
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 129160
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "test/lang.recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "test/lang.recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 129568
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "test/lang.recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 1244
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 1248
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 1252
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "test/lang.recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 1256
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "test/lang.recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 1260
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 130616
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 131568
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 132520
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 133472
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 134424
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 135376
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 1264
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 1268
	, "static": false
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 1272
	, "static": false
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 1276
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 1280
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 1284
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 1288
	, "static": false
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 1292
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 1296
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 1300
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 1304
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 1308
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 1312
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 1316
	, "static": false
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 1320
	, "static": false
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 1324
	, "static": false
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 1328
	, "static": false
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 1332
	, "static": false
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 1336
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 1340
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 1344
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 1348
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 1352
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 1356
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 1360
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 1364
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 1368
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 1372
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 1376
	, "static": false
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 1380
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 1384
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 1388
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 1392
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 1396
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 1400
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 1404
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 1408
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 1412
	, "static": false
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 1416
	, "static": false
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 1420
	, "static": false
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 1424
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 1428
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 1432
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 1436
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 1440
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 1444
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 1448
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 1452
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 1456
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 1460
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 1464
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 1468
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 1472
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 1476
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 1480
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 1484
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 1488
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 1492
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 1496
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 1500
	, "static": false
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 1504
	, "static": false
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 1508
	, "static": false
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 1512
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 1516
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 1520
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 1524
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 1528
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 1532
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 1536
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 1540
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 1544
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 1548
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 1552
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 1556
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 1560
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 1564
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 1568
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 1572
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 1576
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 1580
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 1584
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 1588
	, "static": false
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 1592
	, "static": false
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 1596
	, "static": false
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 1600
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 1604
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 1608
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 1612
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 1616
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 1620
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 1624
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 1628
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 1632
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 1636
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 1640
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 1644
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 1648
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 1652
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 1656
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 1660
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 1664
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 1668
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 1672
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 1676
	, "static": false
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 1680
	, "static": false
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 1684
	, "static": false
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 1688
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 1692
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 1696
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 1700
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 1704
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 1708
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 1712
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 1716
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 1720
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 1724
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 1728
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 1732
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 1736
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 1740
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 1744
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 1748
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 1752
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 1756
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 1760
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 1764
	, "static": false
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 1768
	, "static": false
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 1772
	, "static": false
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 1776
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 1780
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 1784
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 1788
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 1792
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 1796
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 1800
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 1804
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 1808
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 1812
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 1816
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 1820
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 1824
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 1828
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 1832
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 1836
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 1840
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 1844
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 1848
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 1852
	, "static": false
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 1856
	, "static": false
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 1860
	, "static": false
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 1864
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 1868
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 1872
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 1876
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 1880
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 1884
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 1888
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 1892
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 1896
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 1900
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 1904
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 1908
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 1912
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 1916
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 1920
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 1924
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 1928
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 1936
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 1944
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 1952
	, "static": false
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 1960
	, "static": false
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 1968
	, "static": false
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 1976
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 1984
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 1992
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 2000
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 2008
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 2016
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 2024
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 2032
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 2040
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 2048
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 2052
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 2056
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 2060
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 2064
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 2068
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 2072
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 2076
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 2084
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 2092
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 2100
	, "static": false
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 2108
	, "static": false
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 2116
	, "static": false
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 2124
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 2132
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 2140
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 2148
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 2156
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 2164
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 2172
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 2180
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 2188
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 2196
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 2200
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 2204
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 2208
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 2212
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 2216
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 2220
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 2224
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 2228
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 2232
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 2236
	, "static": false
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 2240
	, "static": false
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 2244
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 2248
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 2252
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 2256
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 2260
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 2264
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 2268
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 2272
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 2276
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 2280
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 2284
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 2288
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 2296
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 2304
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 2312
	, "static": false
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 2320
	, "static": false
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 2328
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 2336
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 2344
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 2352
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 2360
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 2364
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 2368
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 2372
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 2376
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 2380
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 2384
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 2388
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 2392
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 2396
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 2400
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 2404
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "test/lang.statementIf.ci"
	, "line": 26
	, "size": 4
	, "offs": 2408
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.statementIf.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "test/lang.statementFor.ci"
	, "line": 12
	, "size": 4
	, "offs": 2412
	, "static": false
	, "const": false
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 7025
	, "offs": 173848
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 3
			, "stmt": [{
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 3
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "stdlib.ci"
					, "line": 3
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "void"
							, "file": "stdlib.ci"
							, "line": 3
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 3
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 5
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 8
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 9
						, "value": "trace(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 11
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 12
						, "value": "debug(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 14
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 15
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 17
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 18
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 20
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 21
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 23
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 24
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 25
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 27
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 28
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 29
						, "value": "assert(condition: bool): void"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "stdlib.ci"
						, "line": 32
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 48
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "sizeof(type: typename): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "test.ci"
			, "line": 4
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test.ci"
				, "line": 4
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 17
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 18
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 19
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 20
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "sum(a: int32, b: int32, c: int32): int32"
			}, {
				"": "any(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "any(a: int32, b: int32, c: int32): int32"
			}, {
				"": "min(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "min(a: int32, b: int32, c: int32): int32"
			}, {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 13
				, "value": "ma"
			}, {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 14
				, "value": "mb"
			}, {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 15
				, "value": "mc"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 17
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 18
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 21
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 22
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 25
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 26
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 29
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 30
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 33
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 34
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "min2Xpr"
			}, {
				"": "sum3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 37
				, "value": "sum3Val"
			}, {
				"": "sum3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 38
				, "value": "sum3Var"
			}, {
				"": "sum3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "sum3Xpr"
			}, {
				"": "any3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 41
				, "value": "any3Val"
			}, {
				"": "any3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 42
				, "value": "any3Var"
			}, {
				"": "any3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "any3Xpr"
			}, {
				"": "min3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 45
				, "value": "min3Val"
			}, {
				"": "min3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 46
				, "value": "min3Var"
			}, {
				"": "min3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "min3Xpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "test/test.inlineOverload.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "test/test.inlineOverload.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.initByRef.ci"
				, "line": 3
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.initByRef.ci"
							, "line": 3
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initByRef.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "test/lang.initByRef.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 3
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 6
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 11
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 14
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 17
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 20
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 23
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 26
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 29
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 32
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 37
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.function.ci"
				, "line": 45
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "sinF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "sinF64"
			}, {
				"": "cosF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "cosF64"
			}, {
				"": "tanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "tanF64"
			}, {
				"": "logF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "logF64"
			}, {
				"": "expF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 41
				, "value": "expF64"
			}, {
				"": "powF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "powF64"
			}, {
				"": "sqrtF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "sqrtF64"
			}, {
				"": "atanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 44
				, "value": "atanF64"
			}, {
				"": "sinF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "sinF32"
			}, {
				"": "cosF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "cosF32"
			}, {
				"": "tanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "tanF32"
			}, {
				"": "logF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "logF32"
			}, {
				"": "expF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 50
				, "value": "expF32"
			}, {
				"": "powF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "powF32"
			}, {
				"": "sqrtF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "sqrtF32"
			}, {
				"": "atanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 53
				, "value": "atanF32"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 19
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 23
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 37
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 42
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 46
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 47
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 48
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 49
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 50
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 51
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 52
				, "value": "tryExecErr6"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 44
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 44
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.array.ci"
						, "line": 44
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.array.ci"
							, "line": 44
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.array.ci"
						, "line": 44
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 44
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.array.ci"
						, "line": 45
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedNoInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "test/lang.array.ci"
				, "line": 49
				, "value": "arrFixedNoInit"
			}, {
				"": "arrArrayNoInit"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 50
				, "value": "arrArrayNoInit"
			}, {
				"": "arrSliceNoInit"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 51
				, "value": "arrSliceNoInit"
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 54
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "stmt": [{
						"": "arrFixedNoInit[i] := (42 + i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 55
					}]
				}
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 59
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 60
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 63
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 64
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 67
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 68
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 71
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "test/lang.array.ci"
				, "line": 81
				, "value": "strFixed"
			}, {
				"": "pointer.copy(strFixed, pointer(\"string\"), 7);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 82
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 83
			}, {
				"": "debug(\"string to variant\", variant(strFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 84
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.array.ci"
				, "line": 86
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 87
			}, {
				"": "debug(\"string to variant\", variant(strArray));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 88
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.array.ci"
				, "line": 90
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 91
			}, {
				"": "debug(\"string to variant\", variant(strSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 92
			}, {
				"": "assert(arrSliceNoInit.length >= (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 98
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 99
			}, {
				"": "assert(arrFixedNoInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 101
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 103
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 104
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 105
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 106
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedNoInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 108
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 109
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 110
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 112
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 113
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 114
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 115
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 116
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 118
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "test/lang.array.ci"
						, "line": 119
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedNoInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 120
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 121
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 122
					}, {
						"": "assert(expected == nthFixed(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 124
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 125
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 126
					}, {
						"": "assert(expected == nthArray(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 128
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 129
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 130
					}, {
						"": "assert(expected == nthSlice(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 132
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 134
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 136
					}]
				}
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.member.ci"
				, "line": 3
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "test/lang.member.ci"
				, "line": 53
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.method.ci"
				, "line": 3
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 41
				, "value": "globalFunction(x: int32, y: int32): int32"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "test/lang.method.ci"
				, "line": 45
				, "value": "recordMethodTest"
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementIf.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 73
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 73
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.statementFor.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 28
					}]
				}
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 173848
		, "size": 9
	}, {
		"instruction": "store.m64 .02a5a8"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 173857
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173861
		, "size": 1
	}, {
		"instruction": "store.m32 .02a6c0"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173862
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173866
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6c8"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173871
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173875
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6d0"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173880
		, "size": 4
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173884
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6e0"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173889
		, "size": 4
	}, {
		"instruction": "load.c32 52"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173893
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6e4"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173898
		, "size": 4
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173902
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6e8"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173907
		, "size": 4
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173911
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6ec"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173916
		, "size": 4
	}, {
		"instruction": "load.ref .02a708"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 173920
		, "size": 5
	}, {
		"instruction": "store.m32 .02a6f8"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 173925
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 173929
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 173930
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173931
		, "size": 5
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173936
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173941
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 173943
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 173945
		, "size": 1
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173946
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 173951
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 173956
		, "size": 1
	}, {
		"instruction": "load.f64 3.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 173957
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 173966
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 173975
		, "size": 1
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 173976
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 173977
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 173981
		, "size": 5
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 173986
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 173991
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 173992
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 174001
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 174002
		, "size": 9
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174011
		, "size": 5
	}, {
		"instruction": "load.ref .00ed1d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174016
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174021
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174026
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174031
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 174036
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 174037
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 174038
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174039
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174044
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174046
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174048
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174050
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174051
		, "size": 5
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 174056
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174060
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174062
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174064
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174065
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174067
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174069
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174070
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174072
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174074
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174075
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174076
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174081
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174083
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174087
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174089
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174093
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174098
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174100
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174102
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174104
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174108
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174110
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174114
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174116
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174118
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174120
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174122
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174123
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174125
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174129
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174131
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174135
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174137
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174139
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174140
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174142
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174147
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174152
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174154
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174156
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174157
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174161
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174163
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174167
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174169
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174171
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174175
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174177
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174179
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174181
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174183
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174184
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174188
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174190
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174194
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174196
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174198
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174202
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174204
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174206
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174207
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174209
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174211
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174212
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174214
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174216
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174217
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174221
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174223
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174227
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174229
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174231
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174235
		, "size": 5
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 174240
		, "size": 4
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 174244
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174248
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174250
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174252
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174253
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174255
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174256
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174258
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174260
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174261
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174263
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174265
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174266
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174267
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174269
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174271
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174272
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174273
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174278
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174280
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174284
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174286
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174290
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174295
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174297
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174299
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174303
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174305
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174309
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174314
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174316
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174318
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174320
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174324
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174326
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174330
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174332
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174334
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174336
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174340
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174342
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174346
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174348
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174350
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174352
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174354
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174355
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174357
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174361
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174363
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174367
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174369
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174371
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174372
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174374
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174376
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174380
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174382
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174386
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174388
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174390
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174391
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174393
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174398
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174403
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174405
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174407
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174408
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174412
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174414
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174418
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174420
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174422
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 174426
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174431
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174433
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174435
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174436
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174440
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174442
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174446
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174448
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174450
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174454
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174456
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174458
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174460
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174462
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174463
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174467
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174469
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174473
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174475
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174477
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174481
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174483
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174485
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174487
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174488
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174492
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174494
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174498
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174500
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174502
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174506
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174508
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174510
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174511
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174513
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174515
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174516
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174518
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174520
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174521
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174525
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174527
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174531
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174533
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174535
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174539
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174541
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 174543
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174544
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174546
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 174548
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 174549
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174553
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 174555
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174559
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 174561
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 174563
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 174567
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 174572
		, "size": 5
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 174577
		, "size": 5
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 174582
		, "size": 5
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 174587
		, "size": 5
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 174592
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 174601
		, "size": 2
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 174603
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 174612
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 174613
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 174622
		, "size": 1
	}, {
		"instruction": "load.ref .02a5a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174623
		, "size": 5
	}, {
		"instruction": "load.ref .02a5a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174628
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174633
		, "size": 5
	}, {
		"instruction": "load.ref .02a5a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174638
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174643
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 174645
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174646
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174648
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174650
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174655
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174660
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174665
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174670
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174675
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174680
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174685
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174690
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174695
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174700
		, "size": 5
	}, {
		"instruction": "load.m64 .02a5a8"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 174705
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 174709
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174711
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174713
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 174715
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 174717
		, "size": 2
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174719
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174724
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174729
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174734
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174739
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174744
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174749
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174754
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174759
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174764
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174769
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174774
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174779
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174784
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174789
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174794
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174799
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174804
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174809
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174814
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174819
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174824
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174829
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174834
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174839
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174844
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174849
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174854
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174859
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174864
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174869
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174874
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174879
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174884
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174889
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174894
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174899
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174904
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174909
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174914
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174919
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174924
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174929
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174934
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174939
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174944
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174949
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174954
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174959
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174964
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174969
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174974
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174979
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174984
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174989
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174994
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 174999
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175004
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175009
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175014
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175019
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175024
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175029
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175034
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175039
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175044
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175049
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175054
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175059
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175064
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175069
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175074
		, "size": 5
	}, {
		"instruction": "load.ref .02a5a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175079
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175084
		, "size": 5
	}, {
		"instruction": "load.ref .02a5a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175089
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175094
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175099
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175104
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(65)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175109
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175111
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175113
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175114
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175119
		, "size": 5
	}, {
		"instruction": "load.ref .02a5b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175124
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 175129
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175130
		, "size": 4
	}, {
		"instruction": "load.ref .02a5b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175134
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175139
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175140
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175145
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175150
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 175152
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175153
		, "size": 4
	}, {
		"instruction": "load.ref .02a5c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175157
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175162
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175163
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175168
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175173
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 175175
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175176
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175180
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175182
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175183
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175188
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175193
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 175195
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175196
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175200
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175201
		, "size": 5
	}, {
		"instruction": "load.ref .02a5c8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175206
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 175211
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175212
		, "size": 4
	}, {
		"instruction": "load.m32 .0000b8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175216
		, "size": 4
	}, {
		"instruction": "load.m32 .000148"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175220
		, "size": 4
	}, {
		"instruction": "load.m32 .0001d8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175224
		, "size": 4
	}, {
		"instruction": "load.m32 .000268"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175228
		, "size": 4
	}, {
		"instruction": "load.m32 .0002f8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175232
		, "size": 4
	}, {
		"instruction": "load.m32 .000388"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175236
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175240
		, "size": 4
	}, {
		"instruction": "load.m32 .0004a8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175244
		, "size": 4
	}, {
		"instruction": "load.m32 .000538"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175248
		, "size": 4
	}, {
		"instruction": "load.m32 .0005c8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175252
		, "size": 4
	}, {
		"instruction": "load.m32 .000658"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175256
		, "size": 4
	}, {
		"instruction": "load.m32 .0006e8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175260
		, "size": 4
	}, {
		"instruction": "load.m32 .000778"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175264
		, "size": 4
	}, {
		"instruction": "load.m32 .000808"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175268
		, "size": 4
	}, {
		"instruction": "load.m32 .000898"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175272
		, "size": 4
	}, {
		"instruction": "load.m32 .000020"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175276
		, "size": 4
	}, {
		"instruction": "load.m32 .000928"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175280
		, "size": 4
	}, {
		"instruction": "load.m32 .0009c0"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 175284
		, "size": 4
	}, {
		"instruction": "load.ref .0178b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175288
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175293
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175295
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175299
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175301
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175305
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175306
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175308
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175312
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175313
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175315
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175319
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175321
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175325
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175327
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175331
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175333
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175337
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175339
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175343
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175344
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175346
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175350
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175351
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175353
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175357
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175359
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175363
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175365
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175369
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175371
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175375
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175376
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175378
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175382
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175383
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175385
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175389
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175391
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175395
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175396
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 175398
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 175402
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175403
		, "size": 9
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175412
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175421
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 175423
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175424
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 175426
		, "size": 1
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175427
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175432
		, "size": 2
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175434
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175439
		, "size": 2
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175441
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175446
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175448
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175450
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175452
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 175457
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175458
		, "size": 2
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175460
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175462
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 175467
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 175468
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175469
		, "size": 2
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175471
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175473
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 175475
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175476
		, "size": 2
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175478
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175480
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 175485
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175486
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175488
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175490
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 175495
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 175496
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175497
		, "size": 2
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 175499
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 175501
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175502
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175504
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175509
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175514
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175518
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175520
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175525
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175530
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175534
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175536
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175537
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175542
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175546
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175548
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175553
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175558
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175562
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175564
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175569
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175574
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175578
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175580
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175581
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175586
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175590
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175592
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175597
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175602
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175606
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175608
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175613
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175618
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175622
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175624
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175625
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175630
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175634
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175636
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175641
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175646
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175650
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175652
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175657
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175662
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175666
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175668
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175669
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175674
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175678
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175680
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 175689
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175690
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(23)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175694
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175696
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 175705
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175706
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175710
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175712
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 175721
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175722
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175726
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175728
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 175730
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175731
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 175733
		, "size": 1
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175734
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175738
		, "size": 9
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175747
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175751
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175753
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 175755
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175756
		, "size": 9
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175765
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175769
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175771
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 175773
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175774
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 175778
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 175780
		, "size": 9
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175789
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(34)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175793
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175795
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 175800
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175801
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175805
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175807
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 175812
		, "size": 1
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175813
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175817
		, "size": 2
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175819
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 175824
		, "size": 1
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175825
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175829
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175831
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 175833
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175834
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 175836
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175837
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175841
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175846
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(39)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175850
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175852
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 175854
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175855
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175860
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175864
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175866
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 175868
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175869
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175873
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 175875
		, "size": 5
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175880
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175884
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175889
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175894
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175898
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175903
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175908
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175912
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175917
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175922
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 175926
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175931
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175936
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175940
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175942
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175943
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175948
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175952
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175956
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175958
		, "size": 2
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 175960
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175965
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175969
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175973
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175975
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175976
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175980
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175984
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175986
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175987
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 175991
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 175995
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 175997
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 175998
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176002
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176006
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176008
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176009
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176013
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 176017
		, "size": 9
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 176026
		, "size": 9
	}, {
		"instruction": "load.ref .00eb0c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176035
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176040
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176045
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176050
		, "size": 1
	}, {
		"instruction": "load.ref .019f95"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176051
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176056
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176061
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176065
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176069
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176074
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176079
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176084
		, "size": 1
	}, {
		"instruction": "load.ref .019f9a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176085
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176090
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176095
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176099
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176103
		, "size": 4
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176107
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 176111
		, "size": 4
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176115
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176119
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176123
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176127
		, "size": 1
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 176128
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176132
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176136
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176140
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176145
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176150
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176155
		, "size": 1
	}, {
		"instruction": "load.ref .019f95"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176156
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176161
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176166
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176170
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176174
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176179
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176184
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176189
		, "size": 1
	}, {
		"instruction": "load.ref .019f9a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176190
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176195
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176200
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176204
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176208
		, "size": 5
	}, {
		"instruction": "load.ref .02a600"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176213
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176218
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176222
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176227
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176232
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176236
		, "size": 5
	}, {
		"instruction": "load.ref .02a608"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176241
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176246
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176250
		, "size": 5
	}, {
		"instruction": "load.ref .02a620"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176255
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176260
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176264
		, "size": 5
	}, {
		"instruction": "load.ref .02a680"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176269
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176274
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176278
		, "size": 5
	}, {
		"instruction": "load.ref .02a670"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176283
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176288
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176292
		, "size": 5
	}, {
		"instruction": "load.ref .02a630"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176297
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176302
		, "size": 4
	}, {
		"instruction": "inc.sp(+56)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176306
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176310
		, "size": 4
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176314
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176318
		, "size": 1
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 176319
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176323
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176328
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 176330
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 176331
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176332
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176336
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 176338
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 176342
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 176343
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176347
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176349
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 176354
		, "size": 1
	}, {
		"instruction": "jnz -32"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 176355
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176359
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176363
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176368
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176369
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176374
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176378
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176383
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176387
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 176389
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176391
		, "size": 2
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176393
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176397
		, "size": 4
	}, {
		"instruction": "load.ref .00ed1d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176401
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176406
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176411
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176415
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176419
		, "size": 5
	}, {
		"instruction": "load.c32 83"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176424
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176429
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176434
		, "size": 1
	}, {
		"instruction": "load.ref .01bd52"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176435
		, "size": 5
	}, {
		"instruction": "load.ref .01c9f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176440
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176445
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176449
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176453
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176458
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176463
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176468
		, "size": 1
	}, {
		"instruction": "load.ref .01bd64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176469
		, "size": 5
	}, {
		"instruction": "load.ref .01c9f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176474
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176479
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176483
		, "size": 4
	}, {
		"instruction": "load.ref .00ed1d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176487
		, "size": 5
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176492
		, "size": 5
	}, {
		"instruction": "load.c32 87"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176497
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176502
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176507
		, "size": 1
	}, {
		"instruction": "load.ref .01bd52"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176508
		, "size": 5
	}, {
		"instruction": "load.ref .01cb88"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176513
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176518
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176520
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176524
		, "size": 5
	}, {
		"instruction": "load.c32 88"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176529
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176534
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176539
		, "size": 1
	}, {
		"instruction": "load.ref .01bd64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176540
		, "size": 5
	}, {
		"instruction": "load.ref .01cb88"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176545
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176550
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176552
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176556
		, "size": 5
	}, {
		"instruction": "load.ref .00ed1d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176561
		, "size": 5
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176566
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176571
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176576
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176581
		, "size": 1
	}, {
		"instruction": "load.ref .01bd52"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176582
		, "size": 5
	}, {
		"instruction": "load.ref .01cc98"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176587
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176592
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176594
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176598
		, "size": 5
	}, {
		"instruction": "load.c32 92"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176603
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176608
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176613
		, "size": 1
	}, {
		"instruction": "load.ref .01bd64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176614
		, "size": 5
	}, {
		"instruction": "load.ref .01cc98"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176619
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176624
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176626
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176630
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176632
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 176633
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 176634
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 176638
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176642
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176647
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176652
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176657
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176662
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176667
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176672
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176677
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176681
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176683
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 176684
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 176685
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 176689
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176693
		, "size": 5
	}, {
		"instruction": "load.c32 99"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176698
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176703
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176708
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176713
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176718
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176723
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176728
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 176732
		, "size": 2
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 176734
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 176743
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 176744
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 176748
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176752
		, "size": 5
	}, {
		"instruction": "load.c32 101"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176757
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176762
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176767
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176772
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176777
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176782
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 176787
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176791
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176796
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176801
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176806
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176811
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176812
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176816
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176821
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176823
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176828
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176833
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176834
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176838
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 176843
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176845
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176850
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176855
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176856
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176860
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 176861
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176862
		, "size": 5
	}, {
		"instruction": "load.ref .02a688"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176867
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176872
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176873
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176877
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176882
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176887
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176888
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176892
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176893
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 176894
		, "size": 2
	}, {
		"instruction": "load.ref .02a688"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176896
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176901
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176902
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176906
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176911
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176916
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176917
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176921
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176926
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176927
		, "size": 5
	}, {
		"instruction": "load.sp(+84)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 176932
		, "size": 4
	}, {
		"instruction": "load.ref .02a688"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176936
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176941
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176942
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176946
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176951
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176956
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176957
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176961
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176966
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 176967
		, "size": 2
	}, {
		"instruction": "load.ref .02a688"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176969
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176974
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176975
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176979
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 176984
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 176989
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 176990
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 176994
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 176999
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177000
		, "size": 2
	}, {
		"instruction": "load.ref .02a688"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177002
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177007
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177008
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177012
		, "size": 5
	}, {
		"instruction": "load.ref .02a560"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177017
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177022
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177023
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177027
		, "size": 1
	}, {
		"instruction": "jmp +790"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177028
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177032
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177037
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 177039
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 177040
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177041
		, "size": 2
	}, {
		"instruction": "load.sp(+92)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177043
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177047
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 177049
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 177053
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177054
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177055
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177059
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177063
		, "size": 5
	}, {
		"instruction": "load.c32 120"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177068
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177073
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177078
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177083
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177088
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177093
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177098
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177102
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177104
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177106
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 177108
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 177112
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177113
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177114
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177118
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177122
		, "size": 5
	}, {
		"instruction": "load.c32 121"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177127
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177132
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177137
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177142
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177147
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177152
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177157
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177161
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177163
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177165
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 177167
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 177171
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177172
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177173
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177177
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177181
		, "size": 5
	}, {
		"instruction": "load.c32 122"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177186
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177191
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177196
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177201
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177206
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177211
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177216
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177220
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177222
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177223
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177225
		, "size": 4
	}, {
		"instruction": "load.ref .02a690"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177229
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177234
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177235
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177239
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177240
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177244
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177248
		, "size": 5
	}, {
		"instruction": "load.c32 124"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177253
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177258
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177263
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177268
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177273
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177278
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177283
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177287
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177289
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177290
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177292
		, "size": 2
	}, {
		"instruction": "load.ref .02a690"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177294
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177299
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177300
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177304
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177305
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177309
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177313
		, "size": 5
	}, {
		"instruction": "load.c32 125"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177318
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177323
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177328
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177333
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177338
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177343
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177348
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177352
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177354
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177355
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177357
		, "size": 2
	}, {
		"instruction": "load.ref .02a690"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177359
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177364
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177365
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177369
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177370
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177374
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177378
		, "size": 5
	}, {
		"instruction": "load.c32 126"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177383
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177388
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177393
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177398
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177403
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177408
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177413
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177417
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177419
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177420
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177422
		, "size": 4
	}, {
		"instruction": "load.ref .02a6a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177426
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177431
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177432
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177436
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177437
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177441
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177445
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177450
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177455
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177460
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177465
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177470
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177475
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177480
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177484
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177486
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177487
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177489
		, "size": 2
	}, {
		"instruction": "load.ref .02a6a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177491
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177496
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177497
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177501
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177502
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177506
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177510
		, "size": 5
	}, {
		"instruction": "load.c32 129"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177515
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177520
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177525
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177530
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177535
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177540
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177545
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177549
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177551
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177552
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177554
		, "size": 2
	}, {
		"instruction": "load.ref .02a6a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177556
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177561
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177562
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177566
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177567
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177571
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177575
		, "size": 5
	}, {
		"instruction": "load.c32 130"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177580
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177585
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177590
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177595
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177600
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177605
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177610
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177614
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177616
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177617
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177619
		, "size": 5
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177624
		, "size": 4
	}, {
		"instruction": "load.ref .02a6b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177628
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177633
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177634
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177638
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177639
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177643
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177647
		, "size": 5
	}, {
		"instruction": "load.c32 132"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177652
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177657
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177662
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177667
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177672
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177677
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177682
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177686
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 177688
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177689
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177691
		, "size": 2
	}, {
		"instruction": "load.ref .02a6b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177693
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177698
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177699
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177703
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177704
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177708
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177712
		, "size": 5
	}, {
		"instruction": "load.c32 134"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177717
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177722
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177727
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177732
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177737
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177742
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177747
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 177751
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177753
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177755
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 177757
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 177761
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 177762
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177763
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 177767
		, "size": 4
	}, {
		"instruction": "load.ref .00eb35"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177771
		, "size": 5
	}, {
		"instruction": "load.c32 136"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177776
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177781
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177786
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177791
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177796
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177801
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177806
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177810
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 177814
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177818
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177820
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 177825
		, "size": 1
	}, {
		"instruction": "jnz -794"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 177826
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177830
		, "size": 4
	}, {
		"instruction": "inc.sp(+32)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177834
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177838
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177843
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177845
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177850
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177852
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177857
		, "size": 2
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177859
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177864
		, "size": 2
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177866
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177871
		, "size": 2
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177873
		, "size": 5
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177878
		, "size": 2
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177880
		, "size": 5
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177885
		, "size": 2
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177887
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177892
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177894
		, "size": 4
	}, {
		"instruction": "load.ref .02a710"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177898
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177903
		, "size": 2
	}, {
		"instruction": "load.ref .02a6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177905
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177910
		, "size": 2
	}, {
		"instruction": "load.ref .02a700"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177912
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177917
		, "size": 2
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177919
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177923
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177924
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177928
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177929
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177930
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177934
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177935
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177936
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177940
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177941
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177945
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177946
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177950
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177951
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177956
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177960
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177961
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177962
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177966
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177967
		, "size": 4
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177971
		, "size": 5
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177976
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177980
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177981
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177986
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 177990
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177991
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177996
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 178000
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178001
		, "size": 4
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178005
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178010
		, "size": 2
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178012
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178016
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178017
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 178021
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178022
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178023
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 178027
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178028
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178033
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 178037
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178038
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178043
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178048
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178049
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178050
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178054
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178055
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178059
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 178060
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178061
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178065
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178066
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178070
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 178071
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178072
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178076
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178077
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178081
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 178082
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178083
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178087
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178088
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178089
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178093
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178094
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178098
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178099
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178100
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178104
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178105
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178109
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178110
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178111
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178112
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178116
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178117
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178121
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178122
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178123
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178127
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178128
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178132
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178133
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178134
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178135
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178139
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178140
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178144
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178145
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178146
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178150
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178151
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178155
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178156
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178157
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178158
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178163
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178168
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178172
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178173
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178177
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 178178
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178179
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178183
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 178184
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178185
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178189
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178190
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178194
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 178195
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178196
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178200
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178201
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178205
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 178206
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178207
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178211
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178212
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178216
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 178217
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178218
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178222
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178223
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178227
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 178228
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178229
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178233
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178234
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178238
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 178239
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178240
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178244
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178245
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178249
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 178250
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178251
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178255
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178256
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178260
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 178261
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178262
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178266
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178267
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178271
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 178272
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178273
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178277
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178278
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 178280
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178281
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178285
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178286
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 178288
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178289
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178293
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 178294
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178295
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178296
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178300
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178301
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178305
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178306
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178307
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178311
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178312
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178316
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178317
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178318
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178319
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178323
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178324
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178328
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178329
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178330
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178334
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178335
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178339
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178340
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178341
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178342
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178346
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178347
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178351
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178352
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178353
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178357
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178358
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178362
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178363
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178364
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178365
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178370
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178375
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178379
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178380
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178384
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 178385
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178386
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178390
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 178391
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178392
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178396
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178397
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178401
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 178402
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178403
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178407
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178408
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178412
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 178413
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178414
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178418
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178419
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178423
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 178424
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178425
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178429
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178430
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178434
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 178435
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178436
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178440
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178441
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178445
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 178446
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178447
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178451
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178452
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178456
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 178457
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178458
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178462
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178463
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178467
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 178468
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178469
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178473
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178474
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178478
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 178479
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178480
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178484
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(48)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178485
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 178487
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178488
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178492
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(49)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178493
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 178495
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178496
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178500
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 178501
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178502
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178503
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178507
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178508
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178512
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178513
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178514
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178518
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178519
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178523
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178524
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178525
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178526
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178530
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178531
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178535
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178536
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178537
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178541
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178542
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178546
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178547
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178548
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178549
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178553
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178554
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178558
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178559
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178560
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178564
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178565
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178569
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178570
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178571
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178572
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178577
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178582
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178586
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178587
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178591
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 178592
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178593
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178597
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 178598
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178599
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178603
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178604
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178608
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 178609
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178610
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178614
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178615
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178619
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 178620
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178621
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178625
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178626
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178630
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 178631
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178632
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178636
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178637
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178641
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 178642
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178643
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178647
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178648
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178652
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 178653
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178654
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178658
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178659
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178663
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 178664
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178665
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178669
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178670
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178674
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 178675
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178676
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178680
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178681
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178685
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 178686
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178687
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178691
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(70)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178692
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 178694
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178695
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178699
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(71)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178700
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 178702
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178703
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178707
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 178708
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178709
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178710
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178714
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178715
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178719
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178720
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178721
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178725
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178726
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178730
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178731
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178732
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178733
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178737
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178738
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178742
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 178743
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178744
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178748
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178749
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178753
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 178754
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178755
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178756
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178760
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178761
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178765
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 178766
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178767
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178771
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178772
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178776
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 178777
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178778
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178779
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178784
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178789
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178793
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178794
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178798
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 178799
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178800
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178804
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 178805
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178806
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178810
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178811
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178815
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 178816
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178817
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178821
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178822
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178826
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 178827
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178828
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178832
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178833
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178837
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 178838
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178839
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178843
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178844
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178848
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 178849
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178850
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178854
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178855
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178859
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 178860
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178861
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178865
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178866
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178870
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 178871
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178872
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178876
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178877
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178881
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 178882
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178883
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178887
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178888
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178892
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 178893
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178894
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178898
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(92)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178899
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 178901
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178902
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178906
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(93)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178907
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 178909
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178910
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178914
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 178915
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178916
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178917
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178921
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178922
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178926
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178927
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178928
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178932
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178933
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178937
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 178938
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178939
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178940
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178944
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178945
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178949
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178950
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178951
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178955
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178956
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178960
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178961
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178962
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178963
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178967
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178968
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178972
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 178973
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178974
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178978
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178979
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 178983
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 178984
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 178985
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178986
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178991
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178996
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179000
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179001
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179005
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 179006
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179007
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179011
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 179012
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179013
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179017
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179018
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179022
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179023
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179024
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179028
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179029
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179033
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 179034
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179035
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179039
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179040
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179044
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 179045
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179046
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179050
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179051
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179055
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 179056
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179057
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179061
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179062
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179066
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 179067
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179068
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179072
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179073
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179077
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 179078
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179079
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179083
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179084
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179088
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 179089
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179090
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179094
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179095
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179099
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 179100
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179101
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179105
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(114)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179106
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 179108
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179109
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179113
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(115)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179114
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 179116
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179117
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179121
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 179122
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179123
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179124
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179128
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179129
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179133
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179134
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179135
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179139
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179140
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179144
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179145
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179146
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179147
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179151
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179152
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179156
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 179157
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179158
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179162
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179163
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179167
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 179168
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179169
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179170
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179174
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179175
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179179
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 179180
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179181
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179185
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179186
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 179190
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 179191
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179192
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179193
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179198
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179203
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179205
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 179207
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179208
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 179210
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179211
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179213
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179215
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179216
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179218
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 179220
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179221
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179223
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 179225
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179226
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179228
		, "size": 2
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 179230
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179231
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179233
		, "size": 2
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 179235
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179236
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179238
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 179240
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179241
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179243
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 179245
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179246
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179248
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 179250
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179251
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(136)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179253
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 179255
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179256
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(137)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179258
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 179260
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179261
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 179263
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179264
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179265
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179267
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179269
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179270
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179272
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179274
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179275
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179276
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179278
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179280
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179281
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179283
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 179285
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179286
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179287
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179289
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 179291
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179292
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179294
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179296
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179297
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179298
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179303
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179308
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179310
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 179312
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179313
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 179315
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179316
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179318
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179320
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179321
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179323
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 179325
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179326
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179328
		, "size": 2
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 179330
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179331
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179333
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 179335
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179336
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179338
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 179340
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179341
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179343
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 179345
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179346
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179348
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 179350
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179351
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179353
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 179355
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179356
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(158)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179358
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 179360
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179361
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(159)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179363
		, "size": 2
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 179365
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179366
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 179368
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179369
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179370
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179372
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179374
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179375
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179377
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179379
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179380
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179381
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179383
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 179385
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179386
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179388
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 179390
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179391
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179392
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179394
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 179396
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179397
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179399
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 179401
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179402
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 179403
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 179412
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179421
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179423
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 179425
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179426
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 179428
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179429
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179431
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 179433
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179434
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179436
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 179438
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179439
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179441
		, "size": 2
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 179443
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179444
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179446
		, "size": 2
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 179448
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179449
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179451
		, "size": 2
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 179453
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179454
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179456
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 179458
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179459
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179461
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 179463
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179464
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179466
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 179468
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179469
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(194)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179471
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 179473
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179474
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(196)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179476
		, "size": 2
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 179478
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179479
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 179481
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179482
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179483
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179485
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 179487
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179488
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179490
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 179492
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179493
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179494
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179496
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 179498
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179499
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179501
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 179503
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179504
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179505
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179507
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 179509
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179510
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179512
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 179514
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179515
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 179516
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 179525
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179534
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179536
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 179538
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179539
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 179541
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179542
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179544
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 179546
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179547
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179549
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 179551
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179552
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179554
		, "size": 2
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 179556
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179557
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179559
		, "size": 2
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 179561
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179562
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179564
		, "size": 2
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 179566
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179567
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179569
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 179571
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179572
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179574
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 179576
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179577
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179579
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 179581
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179582
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(231)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179584
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 179586
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179587
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(233)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179589
		, "size": 2
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 179591
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179592
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 179594
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179595
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179596
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179598
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 179600
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179601
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179603
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 179605
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179606
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179607
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179609
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 179611
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179612
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179614
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 179616
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179617
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179618
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179620
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 179622
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179623
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179625
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 179627
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179628
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179629
		, "size": 5
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179634
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179639
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179641
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 179643
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179644
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179646
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 179648
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179649
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179651
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 179653
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179654
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179656
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 179658
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179659
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179661
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 179663
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179664
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179666
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 179668
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179669
		, "size": 2
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7b"
		, "offs": 179671
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179672
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179673
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179675
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 179677
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179678
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179680
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 179682
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179683
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179684
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179686
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 179688
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179689
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179691
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 179693
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179694
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179695
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179697
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 179699
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179700
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179702
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 179704
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179705
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179706
		, "size": 9
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179715
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179724
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179726
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 179728
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179729
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179731
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 179733
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179734
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179736
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 179738
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179739
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179741
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 179743
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179744
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179746
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 179748
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179749
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179751
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 179753
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179754
		, "size": 2
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 179756
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179757
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179758
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179760
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 179762
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179763
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179765
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 179767
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179768
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179769
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179771
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 179773
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179774
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179776
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 179778
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179779
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179780
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179782
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 179784
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179785
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179787
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 179789
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179790
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179791
		, "size": 5
	}, {
		"instruction": "load.sp(+1128)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179796
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179800
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179802
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179804
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179805
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179807
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179809
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 179810
		, "size": 1
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179811
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179816
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179821
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179826
		, "size": 5
	}, {
		"instruction": "load.ref .029f40"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179831
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179836
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179841
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 179846
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179850
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179855
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179860
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179865
		, "size": 5
	}, {
		"instruction": "load.ref .029f40"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179870
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179875
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179880
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 179885
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179889
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179894
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179899
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179904
		, "size": 5
	}, {
		"instruction": "load.ref .029f40"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179909
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179914
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179919
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 179924
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179928
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179929
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179931
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179932
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179933
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179937
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179942
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179947
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179952
		, "size": 5
	}, {
		"instruction": "load.ref .029f50"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179957
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179962
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179967
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 179971
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179975
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179977
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 179978
		, "size": 1
	}, {
		"instruction": "jnz +42"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 179979
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179983
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179988
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179993
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179998
		, "size": 5
	}, {
		"instruction": "load.ref .029f57"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180003
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180008
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180013
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180017
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180021
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180023
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180024
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180025
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180029
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180034
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180039
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180044
		, "size": 5
	}, {
		"instruction": "load.ref .029f50"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180049
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180054
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180059
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180063
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180067
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180071
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180076
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180081
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180086
		, "size": 5
	}, {
		"instruction": "load.ref .029f57"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180091
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180096
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180101
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180105
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180109
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180111
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180112
		, "size": 1
	}, {
		"instruction": "jnz +46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 180113
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180117
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180122
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180127
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180132
		, "size": 5
	}, {
		"instruction": "load.ref .029f57"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180137
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180142
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180147
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180151
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180155
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180159
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180164
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180169
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180174
		, "size": 5
	}, {
		"instruction": "load.ref .029f50"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180179
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180184
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180189
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180193
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180197
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180199
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180200
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180201
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180205
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180210
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180215
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180220
		, "size": 5
	}, {
		"instruction": "load.ref .029f50"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180225
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180230
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180235
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180239
		, "size": 4
	}, {
		"instruction": "jmp +312"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180243
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180247
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180249
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180254
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180255
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180259
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180264
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180269
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180274
		, "size": 5
	}, {
		"instruction": "load.ref .029f5e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180279
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180284
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180289
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180293
		, "size": 4
	}, {
		"instruction": "jmp +258"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180297
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180301
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180303
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180308
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180309
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180313
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180318
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180323
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180328
		, "size": 5
	}, {
		"instruction": "load.ref .029f65"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180333
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180338
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180343
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180347
		, "size": 4
	}, {
		"instruction": "jmp +204"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180351
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180355
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180357
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180362
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180363
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180367
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180372
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180377
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180382
		, "size": 5
	}, {
		"instruction": "load.ref .029f6c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180387
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180392
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180397
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180401
		, "size": 4
	}, {
		"instruction": "jmp +150"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180405
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180409
		, "size": 2
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180411
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180416
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180417
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180421
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180426
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180431
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180436
		, "size": 5
	}, {
		"instruction": "load.ref .029f73"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180441
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180446
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180451
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180455
		, "size": 4
	}, {
		"instruction": "jmp +96"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180459
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180463
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180465
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 180470
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180471
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180475
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180480
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180485
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180490
		, "size": 5
	}, {
		"instruction": "load.ref .029f7a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180495
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180500
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180505
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180509
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180513
		, "size": 4
	}, {
		"instruction": "load.ref .00ebb7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180517
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180522
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180527
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180532
		, "size": 5
	}, {
		"instruction": "load.ref .029f81"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180537
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180542
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180547
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180551
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180555
		, "size": 4
	}, {
		"instruction": "load.ref .00ebd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180559
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180564
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180569
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180574
		, "size": 1
	}, {
		"instruction": "load.ref .02a058"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180575
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180580
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180585
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180590
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180594
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180598
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180602
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180603
		, "size": 4
	}, {
		"instruction": "load.ref .00ebd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180607
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180612
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180617
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180622
		, "size": 1
	}, {
		"instruction": "load.ref .02a064"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180623
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180628
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180633
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180637
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180641
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180645
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180647
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 180652
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 180653
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180657
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180661
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180662
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 180663
		, "size": 2
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180665
		, "size": 4
	}, {
		"instruction": "load.ref .00ebd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180669
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180674
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180679
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180684
		, "size": 1
	}, {
		"instruction": "load.ref .02a08a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180685
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180690
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180695
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180699
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180703
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180707
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180709
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 180714
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 180715
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180719
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180720
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180724
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180726
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 180731
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180732
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180736
		, "size": 4
	}, {
		"instruction": "load.ref .00ebd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180740
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180745
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180750
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180755
		, "size": 1
	}, {
		"instruction": "load.ref .02a0b4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180756
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180761
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180766
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180770
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180774
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180778
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180780
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 180785
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 180786
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180790
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180794
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180795
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180799
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180801
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 180806
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 180807
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 180811
		, "size": 4
	}, {
		"instruction": "load.ref .00ebd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180815
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180820
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180825
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180830
		, "size": 1
	}, {
		"instruction": "load.ref .02a0c6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180831
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180836
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 180841
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180845
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180849
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180853
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180855
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 180860
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 180861
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180865
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180869
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
105583,0,173848,
 105589,0,39024,
 105607,0,-1,
 105616,0,173496,
 105622,0,-1,
 105628,0,173496,
 105634,0,-1,
 105640,0,173504,
 105646,0,-1,
 105652,0,173504,
 105657,0,-1,
 105663,0,173512,
  105669,0,173512,
   105675,0,173512,
    105681,0,173512,
     105687,0,173512,
      105693,0,173512,
       105698,0,173512,
        105704,0,173512,
         105710,0,173512,
          105716,0,173512,
           105722,0,173512,
            105728,0,173512,
             105733,0,173512,
             105739,0,-1,
             105745,0,173512,
             105751,0,-1,
            105757,0,-1,
            105763,0,173512,
            105769,0,-1,
           105774,0,-1,
           105780,0,173512,
            105786,0,173512,
            105792,0,-1,
            105798,0,173512,
            105804,0,-1,
           105809,0,-1,
          105815,0,-1,
          105821,0,173512,
           105827,0,173512,
            105833,0,173512,
            105838,0,-1,
            105844,0,173512,
            105850,0,-1,
           105856,0,-1,
           105862,0,173512,
           105867,0,-1,
          105873,0,-1,
         105879,0,-1,
         105885,0,173512,
          105891,0,173512,
           105897,0,173512,
            105902,0,173512,
            105908,0,-1,
            105914,0,173512,
            105920,0,-1,
           105926,0,-1,
           105931,0,173512,
           105937,0,-1,
          105943,0,-1,
          105949,0,173512,
           105955,0,173512,
           105961,0,-1,
           105966,0,173512,
           105972,0,-1,
          105978,0,-1,
         105984,0,-1,
        105990,0,-1,
        105995,0,173512,
         106001,0,173512,
          106007,0,173512,
           106013,0,173512,
            106019,0,173512,
            106025,0,-1,
            106030,0,173512,
            106036,0,-1,
           106042,0,-1,
           106048,0,173512,
           106054,0,-1,
          106060,0,-1,
          106066,0,173512,
           106071,0,173512,
           106077,0,-1,
           106083,0,173512,
           106089,0,-1,
          106095,0,-1,
         106101,0,-1,
         106106,0,173512,
          106112,0,173512,
           106118,0,173512,
           106124,0,-1,
           106130,0,173512,
           106136,0,-1,
          106141,0,-1,
          106147,0,173512,
          106153,0,-1,
         106159,0,-1,
        106165,0,-1,
       106170,0,-1,
       106176,0,173512,
        106182,0,173512,
         106188,0,173512,
          106194,0,173512,
           106200,0,173512,
            106205,0,173512,
            106211,0,-1,
            106217,0,173512,
            106223,0,-1,
           106229,0,-1,
           106235,0,173512,
           106240,0,-1,
          106246,0,-1,
          106252,0,173512,
           106258,0,173512,
           106264,0,-1,
           106270,0,173512,
           106275,0,-1,
          106281,0,-1,
         106287,0,-1,
         106293,0,173512,
          106299,0,173512,
           106305,0,173512,
           106310,0,-1,
           106316,0,173512,
           106326,0,-1,
          106332,0,-1,
          106338,0,173512,
          106344,0,-1,
         106349,0,-1,
        106355,0,-1,
        106361,0,173512,
         106367,0,173512,
          106373,0,173512,
           106379,0,173512,
           106384,0,-1,
           106390,0,173512,
           106396,0,-1,
          106402,0,-1,
          106408,0,173512,
          106414,0,-1,
         106419,0,-1,
         106425,0,173512,
          106431,0,173512,
          106437,0,-1,
          106443,0,173512,
          106449,0,-1,
         106454,0,-1,
        106460,0,-1,
       106466,0,-1,
      106472,0,-1,
      106478,0,173512,
       106483,0,173512,
        106489,0,173512,
         106495,0,173512,
          106501,0,173512,
           106507,0,173512,
            106513,0,173512,
            106518,0,-1,
            106524,0,173512,
            106530,0,-1,
           106536,0,-1,
           106542,0,173512,
           106548,0,-1,
          106553,0,-1,
          106559,0,173512,
           106567,0,173512,
           106573,0,-1,
           106579,0,173512,
           106585,0,-1,
          106590,0,-1,
         106596,0,-1,
         106602,0,173512,
          106608,0,173512,
           106614,0,173512,
           106619,0,-1,
           106625,0,173512,
           106631,0,-1,
          106637,0,-1,
          106643,0,173512,
          106648,0,-1,
         106654,0,-1,
        106660,0,-1,
        106666,0,173512,
         106672,0,173512,
          106677,0,173512,
           106683,0,173512,
           106689,0,-1,
           106695,0,173512,
           106701,0,-1,
          106707,0,-1,
          106712,0,173512,
          106718,0,-1,
         106724,0,-1,
         106730,0,173512,
          106736,0,173512,
          106741,0,-1,
          106747,0,173512,
          106753,0,-1,
         106759,0,-1,
        106765,0,-1,
       106770,0,-1,
       106776,0,173512,
        106782,0,173512,
         106788,0,173512,
          106794,0,173512,
           106799,0,173512,
           106805,0,-1,
           106811,0,173512,
           106817,0,-1,
          106823,0,-1,
          106828,0,173512,
          106834,0,-1,
         106840,0,-1,
         106846,0,173512,
          106852,0,173512,
          106857,0,-1,
          106863,0,173512,
          106869,0,-1,
         106875,0,-1,
        106881,0,-1,
        106886,0,173512,
         106892,0,173512,
          106898,0,173512,
          106904,0,-1,
          106910,0,173512,
          106915,0,-1,
         106921,0,-1,
         106927,0,173512,
         106933,0,-1,
        106939,0,-1,
       106944,0,-1,
      106950,0,-1,
     106956,0,-1,
     106962,0,173512,
      106968,0,173512,
       106973,0,173512,
        106979,0,173512,
         106985,0,173512,
          106991,0,173512,
           106997,0,173512,
            107002,0,173512,
            107008,0,-1,
            107014,0,173512,
            107020,0,-1,
           107026,0,-1,
           107031,0,173512,
           107037,0,-1,
          107043,0,-1,
          107049,0,173512,
           107055,0,173512,
           107060,0,-1,
           107066,0,173512,
           107072,0,-1,
          107078,0,-1,
         107083,0,-1,
         107089,0,173512,
          107095,0,173512,
           107101,0,173512,
           107107,0,-1,
           107112,0,173512,
           107118,0,-1,
          107124,0,-1,
          107130,0,173512,
          107136,0,-1,
         107141,0,-1,
        107147,0,-1,
        107153,0,173512,
         107159,0,173512,
          107165,0,173512,
           107170,0,173512,
           107176,0,-1,
           107182,0,173512,
           107188,0,-1,
          107194,0,-1,
          107199,0,173512,
          107205,0,-1,
         107211,0,-1,
         107217,0,173512,
          107222,0,173512,
          107228,0,-1,
          107234,0,173512,
          107240,0,-1,
         107246,0,-1,
        107251,0,-1,
       107257,0,-1,
       107263,0,173512,
        107269,0,173512,
         107275,0,173512,
          107280,0,173512,
           107286,0,173512,
           107292,0,-1,
           107298,0,173512,
           107304,0,-1,
          107309,0,-1,
          107315,0,173512,
          107321,0,-1,
         107327,0,-1,
         107337,0,173512,
          107343,0,173512,
          107349,0,-1,
          107355,0,173512,
          107361,0,-1,
         107366,0,-1,
        107372,0,-1,
        107378,0,173512,
         107384,0,173512,
          107390,0,173512,
          107395,0,-1,
          107401,0,173512,
          107407,0,-1,
         107413,0,-1,
         107419,0,173512,
         107424,0,-1,
        107430,0,-1,
       107436,0,-1,
      107442,0,-1,
      107447,0,173512,
       107453,0,173512,
        107459,0,173512,
         107465,0,173512,
          107471,0,173512,
           107477,0,173512,
           107482,0,-1,
           107488,0,173512,
           107494,0,-1,
          107500,0,-1,
          107506,0,173512,
          107511,0,-1,
         107517,0,-1,
         107523,0,173512,
          107529,0,173512,
          107537,0,-1,
          107543,0,173512,
          107549,0,-1,
         107555,0,-1,
        107561,0,-1,
        107566,0,173512,
         107572,0,173512,
          107578,0,173512,
          107584,0,-1,
          107590,0,173512,
          107595,0,-1,
         107601,0,-1,
         107607,0,173512,
         107613,0,-1,
        107619,0,-1,
       107624,0,-1,
       107630,0,173512,
        107636,0,173512,
         107642,0,173512,
          107648,0,173512,
          107653,0,-1,
          107659,0,173512,
          107665,0,-1,
         107671,0,-1,
         107677,0,173512,
         107682,0,-1,
        107688,0,-1,
        107694,0,173512,
         107700,0,173512,
         107706,0,-1,
         107711,0,173512,
         107717,0,-1,
        107723,0,-1,
       107729,0,-1,
      107735,0,-1,
     107740,0,-1,
    107746,0,-1,
    107752,0,173512,
     107758,0,173512,
      107764,0,173512,
       107769,0,173512,
        107775,0,173512,
         107781,0,173512,
          107787,0,173512,
           107793,0,173512,
            107798,0,173512,
            107804,0,-1,
            107810,0,173512,
            107816,0,-1,
           107822,0,-1,
           107827,0,173512,
           107833,0,-1,
          107839,0,-1,
          107845,0,173512,
           107851,0,173512,
           107857,0,-1,
           107862,0,173512,
           107868,0,-1,
          107874,0,-1,
         107880,0,-1,
         107885,0,173512,
          107891,0,173512,
           107897,0,173512,
           107903,0,-1,
           107909,0,173512,
           107915,0,-1,
          107920,0,-1,
          107926,0,173512,
          107932,0,-1,
         107938,0,-1,
        107944,0,-1,
        107949,0,173512,
         107955,0,173512,
          107961,0,173512,
           107967,0,173512,
           107973,0,-1,
           107978,0,173512,
           107984,0,-1,
          107990,0,-1,
          107996,0,173512,
          108002,0,-1,
         108007,0,-1,
         108013,0,173512,
          108019,0,173512,
          108025,0,-1,
          108030,0,173512,
          108036,0,-1,
         108042,0,-1,
        108048,0,-1,
       108054,0,-1,
       108059,0,173512,
        108065,0,173512,
         108071,0,173512,
          108077,0,173512,
           108083,0,173512,
           108089,0,-1,
           108094,0,173512,
           108100,0,-1,
          108106,0,-1,
          108112,0,173512,
          108118,0,-1,
         108123,0,-1,
         108129,0,173512,
          108135,0,173512,
          108141,0,-1,
          108146,0,173512,
          108152,0,-1,
         108158,0,-1,
        108164,0,-1,
        108170,0,173512,
         108176,0,173512,
          108181,0,173512,
          108187,0,-1,
          108193,0,173512,
          108199,0,-1,
         108205,0,-1,
         108210,0,173512,
         108216,0,-1,
        108222,0,-1,
       108228,0,-1,
      108234,0,-1,
      108239,0,173512,
       108245,0,173512,
        108251,0,173512,
         108257,0,173512,
          108263,0,173512,
           108268,0,173512,
           108274,0,-1,
           108280,0,173512,
           108286,0,-1,
          108292,0,-1,
          108297,0,173512,
          108303,0,-1,
         108309,0,-1,
         108315,0,173512,
          108321,0,173512,
          108326,0,-1,
          108332,0,173512,
          108338,0,-1,
         108344,0,-1,
        108350,0,-1,
        108355,0,173512,
         108361,0,173512,
          108367,0,173512,
          108373,0,-1,
          108379,0,173512,
          108385,0,-1,
         108390,0,-1,
         108396,0,173512,
         108402,0,-1,
        108408,0,-1,
       108414,0,-1,
       108420,0,173512,
        108426,0,173512,
         108432,0,173512,
          108437,0,173512,
          108443,0,-1,
          108449,0,173512,
          108455,0,-1,
         108461,0,-1,
         108467,0,173512,
         108473,0,-1,
        108479,0,-1,
        108485,0,173512,
         108490,0,173512,
         108496,0,-1,
         108502,0,173512,
         108508,0,-1,
        108514,0,-1,
       108521,0,-1,
      108527,0,-1,
     108533,0,-1,
     108539,0,173512,
      108545,0,173512,
       108551,0,173512,
        108556,0,173512,
         108562,0,173512,
          108568,0,173512,
           108574,0,173512,
           108580,0,-1,
           108585,0,173512,
           108591,0,-1,
          108597,0,-1,
          108603,0,173512,
          108609,0,-1,
         108615,0,-1,
         108620,0,173512,
          108626,0,173512,
          108632,0,-1,
          108638,0,173512,
          108644,0,-1,
         108649,0,-1,
        108655,0,-1,
        108661,0,173512,
         108667,0,173512,
          108673,0,173512,
          108679,0,-1,
          108685,0,173512,
          108690,0,-1,
         108696,0,-1,
         108702,0,173512,
         108708,0,-1,
        108714,0,-1,
       108720,0,-1,
       108726,0,173512,
        108732,0,173512,
         108738,0,173512,
          108744,0,173512,
          108749,0,-1,
          108755,0,173512,
          108761,0,-1,
         108767,0,-1,
         108773,0,173512,
         108779,0,-1,
        108785,0,-1,
        108791,0,173512,
         108797,0,173512,
         108803,0,-1,
         108809,0,173512,
         108815,0,-1,
        108821,0,-1,
       108827,0,-1,
      108833,0,-1,
      108839,0,173512,
       108845,0,173512,
        108851,0,173512,
         108857,0,173512,
          108863,0,173512,
          108869,0,-1,
          108874,0,173512,
          108881,0,-1,
         108887,0,-1,
         108892,0,173512,
         108899,0,-1,
        108905,0,-1,
        108910,0,173512,
         108916,0,173512,
         108922,0,-1,
         108928,0,173512,
         108934,0,-1,
        108940,0,-1,
       108946,0,-1,
       108952,0,173512,
        108958,0,173512,
         108964,0,173512,
         108970,0,-1,
         108976,0,173512,
         108982,0,-1,
        108988,0,-1,
        108994,0,173512,
        109000,0,-1,
       109006,0,-1,
      109012,0,-1,
     109017,0,-1,
    109023,0,-1,
   109029,0,-1,
   109035,0,173512,
    109041,0,173512,
     109047,0,173512,
      109053,0,173512,
       109058,0,173512,
        109064,0,173512,
         109070,0,173512,
          109076,0,173512,
           109082,0,173512,
            109088,0,173512,
            109094,0,-1,
            109099,0,173512,
            109105,0,-1,
           109111,0,-1,
           109117,0,173512,
           109123,0,-1,
          109128,0,-1,
          109136,0,173512,
           109142,0,173512,
           109148,0,-1,
           109153,0,173512,
           109159,0,-1,
          109170,0,-1,
         109176,0,-1,
         109182,0,173512,
          109189,0,173512,
           109195,0,173512,
           109201,0,-1,
           109207,0,173512,
           109213,0,-1,
          109218,0,-1,
          109224,0,173512,
          109230,0,-1,
         109236,0,-1,
        109242,0,-1,
        109248,0,173512,
         109253,0,173512,
          109259,0,173512,
           109265,0,173512,
           109271,0,-1,
           109277,0,173512,
           109283,0,-1,
          109289,0,-1,
          109294,0,173512,
          109300,0,-1,
         109306,0,-1,
         109312,0,173512,
          109318,0,173512,
          109323,0,-1,
          109329,0,173512,
          109335,0,-1,
         109341,0,-1,
        109347,0,-1,
       109353,0,-1,
       109358,0,173512,
        109364,0,173512,
         109370,0,173512,
          109376,0,173512,
           109382,0,173512,
           109387,0,-1,
           109393,0,173512,
           109399,0,-1,
          109405,0,-1,
          109411,0,173512,
          109416,0,-1,
         109422,0,-1,
         109428,0,173512,
          109434,0,173512,
          109440,0,-1,
          109445,0,173512,
          109451,0,-1,
         109457,0,-1,
        109463,0,-1,
        109469,0,173512,
         109474,0,173512,
          109480,0,173512,
          109486,0,-1,
          109492,0,173512,
          109498,0,-1,
         109503,0,-1,
         109509,0,173512,
         109515,0,-1,
        109521,0,-1,
       109527,0,-1,
      109534,0,-1,
      109540,0,173512,
       109546,0,173512,
        109552,0,173512,
         109557,0,173512,
          109563,0,173512,
           109569,0,173512,
           109575,0,-1,
           109581,0,173512,
           109586,0,-1,
          109592,0,-1,
          109598,0,173512,
          109604,0,-1,
         109610,0,-1,
         109615,0,173512,
          109621,0,173512,
          109627,0,-1,
          109633,0,173512,
          109638,0,-1,
         109644,0,-1,
        109650,0,-1,
        109656,0,173512,
         109662,0,173512,
          109667,0,173512,
          109673,0,-1,
          109679,0,173512,
          109685,0,-1,
         109691,0,-1,
         109696,0,173512,
         109702,0,-1,
        109708,0,-1,
       109714,0,-1,
       109720,0,173512,
        109725,0,173512,
         109731,0,173512,
          109737,0,173512,
          109743,0,-1,
          109749,0,173512,
          109754,0,-1,
         109760,0,-1,
         109766,0,173512,
         109772,0,-1,
        109778,0,-1,
        109783,0,173512,
         109789,0,173512,
         109795,0,-1,
         109801,0,173512,
         109807,0,-1,
        109812,0,-1,
       109818,0,-1,
      109824,0,-1,
     109830,0,-1,
     109835,0,173512,
      109841,0,173512,
       109847,0,173512,
        109853,0,173512,
         109859,0,173512,
          109864,0,173512,
           109870,0,173512,
           109876,0,-1,
           109882,0,173512,
           109888,0,-1,
          109893,0,-1,
          109899,0,173512,
          109905,0,-1,
         109911,0,-1,
         109917,0,173512,
          109922,0,173512,
          109928,0,-1,
          109934,0,173512,
          109940,0,-1,
         109946,0,-1,
        109951,0,-1,
        109957,0,173512,
         109963,0,173512,
          109969,0,173512,
          109975,0,-1,
          109980,0,173512,
          109986,0,-1,
         109992,0,-1,
         109998,0,173512,
         110004,0,-1,
        110009,0,-1,
       110015,0,-1,
       110021,0,173512,
        110027,0,173512,
         110032,0,173512,
          110038,0,173512,
          110044,0,-1,
          110050,0,173512,
          110056,0,-1,
         110062,0,-1,
         110068,0,173512,
         110073,0,-1,
        110079,0,-1,
        110085,0,173512,
         110091,0,173512,
         110097,0,-1,
         110102,0,173512,
         110108,0,-1,
        110114,0,-1,
       110120,0,-1,
      110126,0,-1,
      110131,0,173512,
       110137,0,173512,
        110143,0,173512,
         110149,0,173512,
          110155,0,173512,
          110160,0,-1,
          110166,0,173512,
          110172,0,-1,
         110178,0,-1,
         110184,0,173512,
         110189,0,-1,
        110195,0,-1,
        110201,0,173512,
         110207,0,173512,
         110213,0,-1,
         110218,0,173512,
         110224,0,-1,
        110230,0,-1,
       110236,0,-1,
       110242,0,173512,
        110247,0,173512,
         110253,0,173512,
         110259,0,-1,
         110265,0,173512,
         110271,0,-1,
        110276,0,-1,
        110282,0,173512,
        110288,0,-1,
       110294,0,-1,
      110300,0,-1,
     110305,0,-1,
    110311,0,-1,
    110317,0,173512,
     110329,0,173512,
      110335,0,173512,
       110340,0,173512,
        110346,0,173512,
         110352,0,173512,
          110358,0,173512,
           110364,0,173512,
           110369,0,-1,
           110375,0,173512,
           110381,0,-1,
          110387,0,-1,
          110393,0,173512,
          110398,0,-1,
         110404,0,-1,
         110410,0,173512,
          110416,0,173512,
          110422,0,-1,
          110427,0,173512,
          110433,0,-1,
         110439,0,-1,
        110445,0,-1,
        110451,0,173512,
         110456,0,173512,
          110462,0,173512,
          110468,0,-1,
          110474,0,173512,
          110486,0,-1,
         110491,0,-1,
         110497,0,173512,
         110503,0,-1,
        110509,0,-1,
       110515,0,-1,
       110520,0,173512,
        110526,0,173512,
         110532,0,173512,
          110538,0,173512,
          110546,0,-1,
          110552,0,173512,
          110557,0,-1,
         110563,0,-1,
         110569,0,173512,
         110575,0,-1,
        110580,0,-1,
        110586,0,173512,
         110592,0,173512,
         110598,0,-1,
         110604,0,173512,
         110609,0,-1,
        110615,0,-1,
       110621,0,-1,
      110627,0,-1,
      110632,0,173512,
       110638,0,173512,
        110644,0,173512,
         110650,0,173512,
          110656,0,173512,
          110661,0,-1,
          110667,0,173512,
          110673,0,-1,
         110679,0,-1,
         110685,0,173512,
         110690,0,-1,
        110696,0,-1,
        110702,0,173512,
         110708,0,173512,
         110714,0,-1,
         110719,0,173512,
         110725,0,-1,
        110731,0,-1,
       110737,0,-1,
       110743,0,173512,
        110748,0,173512,
         110754,0,173512,
         110760,0,-1,
         110766,0,173512,
         110772,0,-1,
        110777,0,-1,
        110783,0,173512,
        110789,0,-1,
       110795,0,-1,
      110800,0,-1,
     110806,0,-1,
     110812,0,173512,
      110818,0,173512,
       110824,0,173512,
        110829,0,173512,
         110835,0,173512,
          110841,0,173512,
          110847,0,-1,
          110853,0,173512,
          110858,0,-1,
         110864,0,-1,
         110870,0,173512,
         110876,0,-1,
        110882,0,-1,
        110887,0,173512,
         110893,0,173512,
         110899,0,-1,
         110905,0,173512,
         110911,0,-1,
        110916,0,-1,
       110922,0,-1,
       110928,0,173512,
        110934,0,173512,
         110939,0,173512,
         110945,0,-1,
         110951,0,173512,
         110957,0,-1,
        110963,0,-1,
        110969,0,173512,
        110975,0,-1,
       110981,0,-1,
      110987,0,-1,
      110993,0,173512,
       110999,0,173512,
        111005,0,173512,
         111010,0,173512,
         111016,0,-1,
         111022,0,173512,
         111028,0,-1,
        111033,0,-1,
        111039,0,173512,
        111045,0,-1,
       111051,0,-1,
       111057,0,173512,
        111062,0,173512,
        111068,0,-1,
        111074,0,173512,
        111080,0,-1,
       111086,0,-1,
      111091,0,-1,
     111097,0,-1,
    111103,0,-1,
   111109,0,-1,
  111114,0,-1,
  111120,0,173512,
   111126,0,173512,
    111132,0,173512,
     111138,0,173512,
      111143,0,173512,
       111149,0,173512,
        111155,0,173512,
         111161,0,173512,
          111167,0,173512,
           111172,0,173512,
            111178,0,173512,
            111184,0,-1,
            111190,0,173512,
            111196,0,-1,
           111201,0,-1,
           111207,0,173512,
           111213,0,-1,
          111219,0,-1,
          111225,0,173512,
           111230,0,173512,
           111236,0,-1,
           111242,0,173512,
           111248,0,-1,
          111254,0,-1,
         111259,0,-1,
         111265,0,173512,
          111271,0,173512,
           111277,0,173512,
           111283,0,-1,
           111288,0,173512,
           111294,0,-1,
          111300,0,-1,
          111306,0,173512,
          111311,0,-1,
         111317,0,-1,
        111323,0,-1,
        111329,0,173512,
         111335,0,173512,
          111340,0,173512,
           111346,0,173512,
           111352,0,-1,
           111358,0,173512,
           111364,0,-1,
          111369,0,-1,
          111375,0,173512,
          111381,0,-1,
         111387,0,-1,
         111392,0,173512,
          111398,0,173512,
          111404,0,-1,
          111410,0,173512,
          111416,0,-1,
         111421,0,-1,
        111427,0,-1,
       111433,0,-1,
       111439,0,173512,
        111445,0,173512,
         111450,0,173512,
          111456,0,173512,
           111462,0,173512,
           111468,0,-1,
           111474,0,173512,
           111479,0,-1,
          111485,0,-1,
          111491,0,173512,
          111497,0,-1,
         111502,0,-1,
         111508,0,173512,
          111514,0,173512,
          111520,0,-1,
          111526,0,173512,
          111531,0,-1,
         111537,0,-1,
        111543,0,-1,
        111550,0,173512,
         111556,0,173512,
          111562,0,173512,
          111568,0,-1,
          111574,0,173512,
          111579,0,-1,
         111585,0,-1,
         111591,0,173512,
         111597,0,-1,
        111603,0,-1,
       111608,0,-1,
      111614,0,-1,
      111620,0,173512,
       111626,0,173512,
        111631,0,173512,
         111637,0,173512,
          111643,0,173512,
           111649,0,173512,
           111655,0,-1,
           111660,0,173512,
           111666,0,-1,
          111672,0,-1,
          111678,0,173512,
          111684,0,-1,
         111690,0,-1,
         111695,0,173512,
          111701,0,173512,
          111707,0,-1,
          111713,0,173512,
          111718,0,-1,
         111724,0,-1,
        111730,0,-1,
        111736,0,173512,
         111742,0,173512,
          111748,0,173512,
          111753,0,-1,
          111759,0,173512,
          111765,0,-1,
         111771,0,-1,
         111777,0,173512,
         111782,0,-1,
        111788,0,-1,
       111794,0,-1,
       111800,0,173512,
        111805,0,173512,
         111811,0,173512,
          111817,0,173512,
          111823,0,-1,
          111829,0,173512,
          111834,0,-1,
         111840,0,-1,
         111846,0,173512,
         111852,0,-1,
        111858,0,-1,
        111863,0,173512,
         111869,0,173512,
         111875,0,-1,
         111881,0,173512,
         111887,0,-1,
        111892,0,-1,
       111898,0,-1,
      111904,0,-1,
     111910,0,-1,
     111915,0,173512,
      111921,0,173512,
       111927,0,173512,
        111933,0,173512,
         111939,0,173512,
          111944,0,173512,
           111950,0,173512,
           111956,0,-1,
           111962,0,173512,
           111968,0,-1,
          111973,0,-1,
          111979,0,173512,
          111985,0,-1,
         111991,0,-1,
         111997,0,173512,
          112002,0,173512,
          112008,0,-1,
          112014,0,173512,
          112020,0,-1,
         112026,0,-1,
        112031,0,-1,
        112037,0,173512,
         112043,0,173512,
          112049,0,173512,
          112054,0,-1,
          112060,0,173512,
          112066,0,-1,
         112072,0,-1,
         112078,0,173512,
         112083,0,-1,
        112089,0,-1,
       112095,0,-1,
       112101,0,173512,
        112107,0,173512,
         112112,0,173512,
          112118,0,173512,
          112124,0,-1,
          112130,0,173512,
          112135,0,-1,
         112141,0,-1,
         112147,0,173512,
         112153,0,-1,
        112159,0,-1,
        112164,0,173512,
         112170,0,173512,
         112176,0,-1,
         112182,0,173512,
         112188,0,-1,
        112193,0,-1,
       112199,0,-1,
      112205,0,-1,
      112211,0,173512,
       112216,0,173512,
        112222,0,173512,
         112228,0,173512,
          112234,0,173512,
          112240,0,-1,
          112245,0,173512,
          112251,0,-1,
         112257,0,-1,
         112263,0,173512,
         112269,0,-1,
        112274,0,-1,
        112280,0,173512,
         112286,0,173512,
         112292,0,-1,
         112298,0,173512,
         112303,0,-1,
        112309,0,-1,
       112315,0,-1,
       112321,0,173512,
        112326,0,173512,
         112332,0,173512,
         112338,0,-1,
         112344,0,173512,
         112350,0,-1,
        112356,0,-1,
        112362,0,173512,
        112367,0,-1,
       112373,0,-1,
      112379,0,-1,
     112385,0,-1,
    112391,0,-1,
    112396,0,173512,
     112402,0,173512,
      112408,0,173512,
       112414,0,173512,
        112420,0,173512,
         112425,0,173512,
          112431,0,173512,
           112437,0,173512,
           112443,0,-1,
           112449,0,173512,
           112454,0,-1,
          112460,0,-1,
          112466,0,173512,
          112472,0,-1,
         112478,0,-1,
         112483,0,173512,
          112489,0,173512,
          112495,0,-1,
          112501,0,173512,
          112506,0,-1,
         112512,0,-1,
        112518,0,-1,
        112524,0,173512,
         112530,0,173512,
          112535,0,173512,
          112541,0,-1,
          112549,0,173512,
          112555,0,-1,
         112560,0,-1,
         112566,0,173512,
         112572,0,-1,
        112578,0,-1,
       112584,0,-1,
       112589,0,173512,
        112595,0,173512,
         112601,0,173512,
          112607,0,173512,
          112613,0,-1,
          112618,0,173512,
          112624,0,-1,
         112630,0,-1,
         112636,0,173512,
         112642,0,-1,
        112647,0,-1,
        112653,0,173512,
         112659,0,173512,
         112665,0,-1,
         112671,0,173512,
         112676,0,-1,
        112682,0,-1,
       112688,0,-1,
      112694,0,-1,
      112700,0,173512,
       112705,0,173512,
        112711,0,173512,
         112717,0,173512,
          112723,0,173512,
          112729,0,-1,
          112734,0,173512,
          112740,0,-1,
         112746,0,-1,
         112752,0,173512,
         112757,0,-1,
        112763,0,-1,
        112769,0,173512,
         112775,0,173512,
         112781,0,-1,
         112786,0,173512,
         112792,0,-1,
        112798,0,-1,
       112804,0,-1,
       112809,0,173512,
        112815,0,173512,
         112821,0,173512,
         112827,0,-1,
         112833,0,173512,
         112838,0,-1,
        112844,0,-1,
        112850,0,173512,
        112856,0,-1,
       112862,0,-1,
      112867,0,-1,
     112873,0,-1,
     112879,0,173512,
      112885,0,173512,
       112891,0,173512,
        112896,0,173512,
         112902,0,173512,
          112908,0,173512,
          112914,0,-1,
          112920,0,173512,
          112925,0,-1,
         112931,0,-1,
         112937,0,173512,
         112943,0,-1,
        112949,0,-1,
        112954,0,173512,
         112960,0,173512,
         112966,0,-1,
         112972,0,173512,
         112977,0,-1,
        112983,0,-1,
       112989,0,-1,
       112995,0,173512,
        113001,0,173512,
         113006,0,173512,
         113012,0,-1,
         113018,0,173512,
         113024,0,-1,
        113030,0,-1,
        113035,0,173512,
        113041,0,-1,
       113047,0,-1,
      113053,0,-1,
      113058,0,173512,
       113064,0,173512,
        113070,0,173512,
         113076,0,173512,
         113082,0,-1,
         113087,0,173512,
         113093,0,-1,
        113099,0,-1,
        113105,0,173512,
        113111,0,-1,
       113116,0,-1,
       113122,0,173512,
        113128,0,173512,
        113134,0,-1,
        113139,0,173512,
        113145,0,-1,
       113151,0,-1,
      113157,0,-1,
     113163,0,-1,
    113168,0,-1,
   113174,0,-1,
   113180,0,173512,
    113186,0,173512,
     113192,0,173512,
      113198,0,173512,
       113204,0,173512,
        113210,0,173512,
         113216,0,173512,
          113222,0,173512,
           113228,0,173512,
           113234,0,-1,
           113240,0,173512,
           113246,0,-1,
          113252,0,-1,
          113257,0,173512,
          113263,0,-1,
         113269,0,-1,
         113275,0,173512,
          113281,0,173512,
          113286,0,-1,
          113292,0,173512,
          113298,0,-1,
         113304,0,-1,
        113310,0,-1,
        113315,0,173512,
         113321,0,173512,
          113327,0,173512,
          113333,0,-1,
          113338,0,173512,
          113344,0,-1,
         113350,0,-1,
         113356,0,173512,
         113362,0,-1,
        113367,0,-1,
       113373,0,-1,
       113379,0,173512,
        113385,0,173512,
         113391,0,173512,
          113396,0,173512,
          113402,0,-1,
          113408,0,173512,
          113414,0,-1,
         113420,0,-1,
         113426,0,173512,
         113431,0,-1,
        113437,0,-1,
        113443,0,173512,
         113449,0,173512,
         113454,0,-1,
         113460,0,173512,
         113466,0,-1,
        113472,0,-1,
       113478,0,-1,
      113483,0,-1,
      113489,0,173512,
       113495,0,173512,
        113501,0,173512,
         113507,0,173512,
          113512,0,173512,
          113518,0,-1,
          113524,0,173512,
          113530,0,-1,
         113536,0,-1,
         113541,0,173512,
         113547,0,-1,
        113553,0,-1,
        113559,0,173512,
         113566,0,173512,
         113572,0,-1,
         113578,0,173512,
         113584,0,-1,
        113590,0,-1,
       113595,0,-1,
       113601,0,173512,
        113607,0,173512,
         113613,0,173512,
         113619,0,-1,
         113624,0,173512,
         113630,0,-1,
        113636,0,-1,
        113642,0,173512,
        113648,0,-1,
       113654,0,-1,
      113659,0,-1,
     113665,0,-1,
     113671,0,173512,
      113677,0,173512,
       113683,0,173512,
        113689,0,173512,
         113694,0,173512,
          113700,0,173512,
          113706,0,-1,
          113712,0,173512,
          113718,0,-1,
         113723,0,-1,
         113729,0,173512,
         113735,0,-1,
        113741,0,-1,
        113746,0,173512,
         113752,0,173512,
         113758,0,-1,
         113764,0,173512,
         113770,0,-1,
        113775,0,-1,
       113781,0,-1,
       113787,0,173512,
        113793,0,173512,
         113799,0,173512,
         113804,0,-1,
         113810,0,173512,
         113816,0,-1,
        113822,0,-1,
        113827,0,173512,
        113833,0,-1,
       113839,0,-1,
      113845,0,-1,
      113851,0,173512,
       113856,0,173512,
        113862,0,173512,
         113868,0,173512,
         113874,0,-1,
         113879,0,173512,
         113885,0,-1,
        113891,0,-1,
        113897,0,173512,
        113903,0,-1,
       113908,0,-1,
       113914,0,173512,
        113920,0,173512,
        113926,0,-1,
        113932,0,173512,
        113937,0,-1,
       113943,0,-1,
      113949,0,-1,
     113955,0,-1,
    113960,0,-1,
    113966,0,173512,
     113972,0,173512,
      113978,0,173512,
       113984,0,173512,
        113989,0,173512,
         113995,0,173512,
          114001,0,173512,
          114007,0,-1,
          114013,0,173512,
          114018,0,-1,
         114024,0,-1,
         114030,0,173512,
         114036,0,-1,
        114042,0,-1,
        114047,0,173512,
         114053,0,173512,
         114059,0,-1,
         114065,0,173512,
         114070,0,-1,
        114076,0,-1,
       114082,0,-1,
       114088,0,173512,
        114094,0,173512,
         114099,0,173512,
         114105,0,-1,
         114111,0,173512,
         114117,0,-1,
        114122,0,-1,
        114128,0,173512,
        114134,0,-1,
       114140,0,-1,
      114146,0,-1,
      114151,0,173512,
       114157,0,173512,
        114163,0,173512,
         114169,0,173512,
         114175,0,-1,
         114180,0,173512,
         114186,0,-1,
        114192,0,-1,
        114198,0,173512,
        114204,0,-1,
       114209,0,-1,
       114215,0,173512,
        114221,0,173512,
        114227,0,-1,
        114232,0,173512,
        114238,0,-1,
       114244,0,-1,
      114250,0,-1,
     114256,0,-1,
     114261,0,173512,
      114267,0,173512,
       114273,0,173512,
        114279,0,173512,
         114285,0,173512,
         114290,0,-1,
         114296,0,173512,
         114302,0,-1,
        114308,0,-1,
        114313,0,173512,
        114322,0,-1,
       114328,0,-1,
       114334,0,173512,
        114340,0,173512,
        114346,0,-1,
        114351,0,173512,
        114357,0,-1,
       114363,0,-1,
      114369,0,-1,
      114374,0,173512,
       114380,0,173512,
        114386,0,173512,
        114392,0,-1,
        114398,0,173512,
        114403,0,-1,
       114409,0,-1,
       114415,0,173512,
       114421,0,-1,
      114427,0,-1,
     114432,0,-1,
    114438,0,-1,
   114444,0,-1,
  114450,0,-1,
 114455,0,-1,
 114462,0,23320,
 114471,0,-1,
 114477,0,22392,
 114483,0,-1,
 114489,0,22856,
 114495,0,-1,
 114501,0,21928,
 114507,0,-1,
 114513,0,23320,
 114519,0,-1,
 114525,0,22392,
 114531,0,-1,
 114537,0,22856,
 114543,0,-1,
 114548,0,21928,
 114554,0,-1,
 114560,0,21928,
 114566,0,-1,
 114572,0,33576,
 114578,0,-1,
 114584,0,33576,
 114590,0,-1,
 114596,0,33576,
 114601,0,-1,
 114607,0,34312,
 114613,0,-1,
 114619,0,34312,
 114625,0,-1,
 114630,0,34312,
 114636,0,-1,
 114642,0,33576,
 114647,0,-1,
 114653,0,33576,
 114659,0,-1,
 114665,0,33576,
 114670,0,-1,
 114676,0,34312,
 114682,0,-1,
 114687,0,34312,
 114696,0,-1,
 114701,0,34312,
 114707,0,-1,
 114713,0,43008,
 114725,0,-1,
 114731,0,43464,
 114740,0,-1,
 114746,0,43920,
 114752,0,-1,
 114758,0,44376,
 114764,0,-1,
 114770,0,44832,
 114776,0,-1,
 114782,0,45424,
 114790,0,-1,
 114797,0,45880,
 114802,0,-1,
 114808,0,46472,
 114816,0,-1,
 114822,0,39024,
 114828,0,-1,
 114834,0,39488,
 114840,0,-1,
 114846,0,39952,
 114854,0,-1,
 114860,0,40416,
 114865,0,-1,
 114871,0,40880,
 114877,0,-1,
 114883,0,41488,
 114889,0,-1,
 114895,0,41952,
 114901,0,-1,
 114907,0,42552,
 114915,0,-1,
 114921,0,27728,
 114927,1024,-1,
 114933,1024,27728,
 114939,1104,-1,
 114945,1104,27728,
 114951,1264,-1,
 114956,1264,27728,
 114962,2096,-1,
 114968,2096,28480,
 114974,2096,-1,
 114980,2096,29224,
 114986,2096,-1,
 114992,2096,27728,
 114998,1072,-1,
 115003,1072,27728,
 115009,992,-1,
 115015,992,27728,
 115021,832,-1,
 115026,832,27728,
 115032,0,-1,
 115038,0,25072,
 115054,0,-1,
 115060,0,25072,
 115073,0,-1,
 115079,0,29960,
 115085,0,-1,
 115091,0,28480,
 115097,0,-1,
 115102,0,25072,
 115115,0,-1,
 115121,0,25072,
 115133,0,-1,
 115139,0,27120,
  115146,0,173568,
  115152,0,-1,
  115158,0,21168,
  115164,0,-1,
 115170,0,-1,
 115175,0,27120,
 115188,0,-1,
 115193,0,27120,
  115200,0,173576,
   115206,0,173576,
    115211,0,173576,
     115217,0,173576,
      115223,0,173576,
       115229,0,173576,
        115235,0,173576,
         115241,0,173576,
          115246,0,173576,
           115252,0,173576,
            115258,0,173576,
             115264,0,173576,
              115270,0,173576,
               115275,0,173576,
                115281,0,173576,
                 115287,0,173576,
                  115293,0,173576,
                   115299,0,173576,
                    115304,0,173576,
                     115310,0,173576,
                      115316,0,173576,
                       115322,0,173576,
                        115328,0,173576,
                         115333,0,173576,
                          115339,0,173576,
                           115345,0,173576,
                            115351,0,173576,
                             115357,0,173576,
                              115363,0,173576,
                               115368,0,173576,
                                115374,0,173576,
                                 115380,0,173576,
                                  115386,0,173576,
                                   115392,0,173576,
                                    115398,0,173576,
                                     115403,0,173576,
                                      115409,0,173576,
                                       115415,0,173576,
                                        115421,0,173576,
                                         115427,0,173576,
                                          115433,0,173576,
                                           115439,0,173576,
                                            115444,0,173576,
                                             115450,0,173576,
                                              115456,0,173576,
                                               115462,0,173576,
                                                115468,0,173576,
                                                 115474,0,173576,
                                                  115480,0,173576,
                                                   115485,0,173576,
                                                    115491,0,173576,
                                                     115497,0,173576,
                                                      115503,0,173576,
                                                       115509,0,173576,
                                                        115515,0,173576,
                                                         115521,0,173576,
                                                          115527,0,173576,
                                                           115532,0,173576,
                                                            115538,0,173576,
                                                             115544,0,173576,
                                                              115555,0,173576,
                                                               115561,0,173576,
                                                                115567,0,173576,
                                                                 115573,0,173576,
                                                                  115579,0,173576,
                                                                   115585,0,173576,
                                                                    115591,0,173576,
                                                                     115597,0,173576,
                                                                      115603,0,173576,
                                                                       115609,0,173576,
                                                                        115615,0,173576,
                                                                         115620,0,173576,
                                                                          115626,0,173576,
                                                                           115632,0,173576,
                                                                            115638,0,173576,
                                                                             115645,0,173576,
                                                                              115650,0,173576,
                                                                               115656,0,173576,
                                                                                115662,0,173576,
                                                                                 115668,0,173576,
                                                                                  115674,0,173576,
                                                                                   115680,0,173576,
                                                                                    115686,0,173576,
                                                                                     115692,0,173576,
                                                                                      115698,0,173576,
                                                                                       115704,0,173576,
                                                                                        115710,0,173576,
                                                                                         115716,0,173576,
                                                                                          115722,0,173576,
                                                                                           115728,0,173576,
                                                                                            115734,0,173576,
                                                                                             115740,0,173576,
                                                                                              115746,0,173576,
                                                                                               115752,0,173576,
                                                                                                115758,0,173576,
                                                                                                 115764,0,173576,
                                                                                                  115770,0,173576,
                                                                                                   115776,0,173576,
                                                                                                    115782,0,173576,
                                                                                                     115788,0,173576,
                                                                                                      115795,0,173576,
                                                                                                       115802,0,173576,
                                                                                                        115808,0,173576,
                                                                                                         115815,0,173576,
                                                                                                          115821,0,173576,
                                                                                                           115827,0,173576,
                                                                                                            115833,0,173576,
                                                                                                             115839,0,173576,
                                                                                                              115845,0,173576,
                                                                                                               115851,0,173576,
                                                                                                                115856,0,173576,
                                                                                                                 115862,0,173576,
                                                                                                                  115868,0,173576,
                                                                                                                   115874,0,173576,
                                                                                                                    115880,0,173576,
                                                                                                                     115886,0,173576,
                                                                                                                      115892,0,173576,
                                                                                                                       115898,0,173576,
                                                                                                                        115904,0,173576,
                                                                                                                         115910,0,173576,
                                                                                                                          115916,0,173576,
                                                                                                                           115922,0,173576,
                                                                                                                            115928,0,173576,
                                                                                                                             115935,0,173576,
                                                                                                                              115941,0,173576,
                                                                                                                               115947,0,173576,
                                                                                                                                115953,0,173576,
                                                                                                                                 115959,0,173576,
                                                                                                                                  115965,0,173576,
                                                                                                                                   115971,0,173576,
                                                                                                                                    115977,0,173576,
                                                                                                                                     115983,0,173576,
                                                                                                                                      115991,0,173576,
                                                                                                                                       115997,0,173576,
                                                                                                                                        116003,0,173576,
                                                                                                                                         116009,0,173576,
                                                                                                                                          116015,0,173576,
                                                                                                                                           116021,0,173576,
                                                                                                                                            116027,0,173576,
                                                                                                                                             116034,0,173576,
                                                                                                                                              116040,0,173576,
                                                                                                                                               116046,0,173576,
                                                                                                                                                116052,0,173576,
                                                                                                                                                 116058,0,173576,
                                                                                                                                                  116064,0,173576,
                                                                                                                                                   116070,0,173576,
                                                                                                                                                    116076,0,173576,
                                                                                                                                                     116082,0,173576,
                                                                                                                                                      116088,0,173576,
                                                                                                                                                       116094,0,173576,
                                                                                                                                                        116100,0,173576,
                                                                                                                                                         116106,0,173576,
                                                                                                                                                          116113,0,173576,
                                                                                                                                                           116119,0,173576,
                                                                                                                                                            116125,0,173576,
                                                                                                                                                             116131,0,173576,
                                                                                                                                                              116137,0,173576,
                                                                                                                                                               116145,0,173576,
                                                                                                                                                                116151,0,173576,
                                                                                                                                                                 116157,0,173576,
                                                                                                                                                                  116163,0,173576,
                                                                                                                                                                   116169,0,173576,
                                                                                                                                                                    116176,0,173576,
                                                                                                                                                                     116182,0,173576,
                                                                                                                                                                      116188,0,173576,
                                                                                                                                                                       116194,0,173576,
                                                                                                                                                                        116200,0,173576,
                                                                                                                                                                         116206,0,173576,
                                                                                                                                                                          116212,0,173576,
                                                                                                                                                                           116218,0,173576,
                                                                                                                                                                            116225,0,173576,
                                                                                                                                                                             116231,0,173576,
                                                                                                                                                                              116237,0,173576,
                                                                                                                                                                               116243,0,173576,
                                                                                                                                                                                116249,0,173576,
                                                                                                                                                                                 116256,0,173576,
                                                                                                                                                                                  116262,0,173576,
                                                                                                                                                                                   116268,0,173576,
                                                                                                                                                                                    116274,0,173576,
                                                                                                                                                                                     116282,0,173576,
                                                                                                                                                                                      116288,0,173576,
                                                                                                                                                                                       116294,0,173576,
                                                                                                                                                                                        116300,0,173576,
                                                                                                                                                                                         116307,0,173576,
                                                                                                                                                                                          116313,0,173576,
                                                                                                                                                                                           116319,0,173576,
                                                                                                                                                                                            116325,0,173576,
                                                                                                                                                                                             116331,0,173576,
                                                                                                                                                                                              116337,0,173576,
                                                                                                                                                                                               116343,0,173576,
                                                                                                                                                                                                116350,0,173576,
                                                                                                                                                                                                 116356,0,173576,
                                                                                                                                                                                                  116362,0,173576,
                                                                                                                                                                                                   116368,0,173576,
                                                                                                                                                                                                    116374,0,173576,
                                                                                                                                                                                                     116381,0,173576,
                                                                                                                                                                                                      116387,0,173576,
                                                                                                                                                                                                       116393,0,173576,
                                                                                                                                                                                                        116399,0,173576,
                                                                                                                                                                                                         116407,0,173576,
                                                                                                                                                                                                          116413,0,173576,
                                                                                                                                                                                                           116419,0,173576,
                                                                                                                                                                                                            116426,0,173576,
                                                                                                                                                                                                             116432,0,173576,
                                                                                                                                                                                                              116438,0,173576,
                                                                                                                                                                                                               116444,0,173576,
                                                                                                                                                                                                                116450,0,173576,
                                                                                                                                                                                                                 116456,0,173576,
                                                                                                                                                                                                                  116463,0,173576,
                                                                                                                                                                                                                   116469,0,173576,
                                                                                                                                                                                                                    116475,0,173576,
                                                                                                                                                                                                                     116481,0,173576,
                                                                                                                                                                                                                      116487,0,173576,
                                                                                                                                                                                                                       116494,0,173576,
                                                                                                                                                                                                                        116500,0,173576,
                                                                                                                                                                                                                         116506,0,173576,
                                                                                                                                                                                                                          116512,0,173576,
                                                                                                                                                                                                                           116521,0,173576,
                                                                                                                                                                                                                            116527,0,173576,
                                                                                                                                                                                                                             116534,0,173576,
                                                                                                                                                                                                                              116540,0,173576,
                                                                                                                                                                                                                               116546,0,173576,
                                                                                                                                                                                                                                116552,0,173576,
                                                                                                                                                                                                                                 116559,0,173576,
                                                                                                                                                                                                                                  116565,0,173576,
                                                                                                                                                                                                                                   116571,0,173576,
                                                                                                                                                                                                                                    116577,0,173576,
                                                                                                                                                                                                                                     116583,0,173576,
                                                                                                                                                                                                                                      116590,0,173576,
                                                                                                                                                                                                                                       116596,0,173576,
                                                                                                                                                                                                                                        116602,0,173576,
                                                                                                                                                                                                                                         116608,0,173576,
                                                                                                                                                                                                                                          116615,0,173576,
                                                                                                                                                                                                                                           116621,0,173576,
                                                                                                                                                                                                                                            116629,0,173576,
                                                                                                                                                                                                                                             116635,0,173576,
                                                                                                                                                                                                                                              116641,0,173576,
                                                                                                                                                                                                                                               116648,0,173576,
                                                                                                                                                                                                                                                116654,0,173576,
                                                                                                                                                                                                                                                 116660,0,173576,
                                                                                                                                                                                                                                                  116666,0,173576,
                                                                                                                                                                                                                                                   116673,0,173576,
                                                                                                                                                                                                                                                    116679,0,173576,
                                                                                                                                                                                                                                                     116685,0,173576,
                                                                                                                                                                                                                                                      116691,0,173576,
                                                                                                                                                                                                                                                       116698,0,173576,
                                                                                                                                                                                                                                                        116704,0,173576,
                                                                                                                                                                                                                                                         116710,0,173576,
                                                                                                                                                                                                                                                          116717,0,173576,
                                                                                                                                                                                                                                                           116723,0,173576,
                                                                                                                                                                                                                                                            116731,0,173576,
                                                                                                                                                                                                                                                             116737,0,173576,
                                                                                                                                                                                                                                                              116744,0,173576,
                                                                                                                                                                                                                                                               116750,0,173576,
                                                                                                                                                                                                                                                                116756,0,173576,
                                                                                                                                                                                                                                                                 116763,0,173576,
                                                                                                                                                                                                                                                                  116769,0,173576,
                                                                                                                                                                                                                                                                   116775,0,173576,
                                                                                                                                                                                                                                                                    116782,0,173576,
                                                                                                                                                                                                                                                                     116788,0,173576,
                                                                                                                                                                                                                                                                      116794,0,173576,
                                                                                                                                                                                                                                                                       116801,0,173576,
                                                                                                                                                                                                                                                                        116807,0,173576,
                                                                                                                                                                                                                                                                         116813,0,173576,
                                                                                                                                                                                                                                                                          116821,0,173576,
                                                                                                                                                                                                                                                                           116828,0,173576,
                                                                                                                                                                                                                                                                            116834,0,173576,
                                                                                                                                                                                                                                                                             116840,0,173576,
                                                                                                                                                                                                                                                                              116847,0,173576,
                                                                                                                                                                                                                                                                               116853,0,173576,
                                                                                                                                                                                                                                                                                116859,0,173576,
                                                                                                                                                                                                                                                                                 116866,0,173576,
                                                                                                                                                                                                                                                                                  116872,0,173576,
                                                                                                                                                                                                                                                                                   116878,0,173576,
                                                                                                                                                                                                                                                                                    116885,0,173576,
                                                                                                                                                                                                                                                                                     116891,0,173576,
                                                                                                                                                                                                                                                                                      116897,0,173576,
                                                                                                                                                                                                                                                                                       116904,0,173576,
                                                                                                                                                                                                                                                                                        116910,0,173576,
                                                                                                                                                                                                                                                                                         116918,0,173576,
                                                                                                                                                                                                                                                                                          116925,0,173576,
                                                                                                                                                                                                                                                                                           116931,0,173576,
                                                                                                                                                                                                                                                                                            116937,0,173576,
                                                                                                                                                                                                                                                                                             116944,0,173576,
                                                                                                                                                                                                                                                                                              116950,0,173576,
                                                                                                                                                                                                                                                                                               116956,0,173576,
                                                                                                                                                                                                                                                                                                116963,0,173576,
                                                                                                                                                                                                                                                                                                 116969,0,173576,
                                                                                                                                                                                                                                                                                                  116976,0,173576,
                                                                                                                                                                                                                                                                                                   116983,0,173576,
                                                                                                                                                                                                                                                                                                    116989,0,173576,
                                                                                                                                                                                                                                                                                                     116995,0,173576,
                                                                                                                                                                                                                                                                                                      117004,0,173576,
                                                                                                                                                                                                                                                                                                       117012,0,173576,
                                                                                                                                                                                                                                                                                                        117021,0,173576,
                                                                                                                                                                                                                                                                                                         117028,0,173576,
                                                                                                                                                                                                                                                                                                          117034,0,173576,
                                                                                                                                                                                                                                                                                                           117041,0,173576,
                                                                                                                                                                                                                                                                                                            117047,0,173576,
                                                                                                                                                                                                                                                                                                             117054,0,173576,
                                                                                                                                                                                                                                                                                                              117060,0,173576,
                                                                                                                                                                                                                                                                                                               117067,0,173576,
                                                                                                                                                                                                                                                                                                                117073,0,173576,
                                                                                                                                                                                                                                                                                                                 117079,0,173576,
                                                                                                                                                                                                                                                                                                                  117086,0,173576,
                                                                                                                                                                                                                                                                                                                   117094,0,173576,
                                                                                                                                                                                                                                                                                                                    117100,0,173576,
                                                                                                                                                                                                                                                                                                                     117107,0,173576,
                                                                                                                                                                                                                                                                                                                      117113,0,173576,
                                                                                                                                                                                                                                                                                                                       117120,0,173576,
                                                                                                                                                                                                                                                                                                                        117126,0,173576,
                                                                                                                                                                                                                                                                                                                         117132,0,173576,
                                                                                                                                                                                                                                                                                                                          117139,0,173576,
                                                                                                                                                                                                                                                                                                                           117145,0,173576,
                                                                                                                                                                                                                                                                                                                            117152,0,173576,
                                                                                                                                                                                                                                                                                                                             117158,0,173576,
                                                                                                                                                                                                                                                                                                                              117165,0,173576,
                                                                                                                                                                                                                                                                                                                               117172,0,173576,
                                                                                                                                                                                                                                                                                                                                117179,0,173576,
                                                                                                                                                                                                                                                                                                                                 117185,0,173576,
                                                                                                                                                                                                                                                                                                                                  117192,0,173576,
                                                                                                                                                                                                                                                                                                                                   117198,0,173576,
                                                                                                                                                                                                                                                                                                                                    117205,0,173576,
                                                                                                                                                                                                                                                                                                                                     117211,0,173576,
                                                                                                                                                                                                                                                                                                                                      117217,0,173576,
                                                                                                                                                                                                                                                                                                                                       117224,0,173576,
                                                                                                                                                                                                                                                                                                                                        117230,0,173576,
                                                                                                                                                                                                                                                                                                                                         117237,0,173576,
                                                                                                                                                                                                                                                                                                                                          117243,0,173576,
                                                                                                                                                                                                                                                                                                                                           117251,0,173576,
                                                                                                                                                                                                                                                                                                                                            117258,0,173576,
                                                                                                                                                                                                                                                                                                                                             117264,0,173576,
                                                                                                                                                                                                                                                                                                                                              117271,0,173576,
                                                                                                                                                                                                                                                                                                                                               117277,0,173576,
                                                                                                                                                                                                                                                                                                                                                117284,0,173576,
                                                                                                                                                                                                                                                                                                                                                 117290,0,173576,
                                                                                                                                                                                                                                                                                                                                                  117297,0,173576,
                                                                                                                                                                                                                                                                                                                                                   117304,0,173576,
                                                                                                                                                                                                                                                                                                                                                    117310,0,173576,
                                                                                                                                                                                                                                                                                                                                                     117317,0,173576,
                                                                                                                                                                                                                                                                                                                                                      117324,0,173576,
                                                                                                                                                                                                                                                                                                                                                       117333,0,173576,
                                                                                                                                                                                                                                                                                                                                                        117339,0,173576,
                                                                                                                                                                                                                                                                                                                                                         117346,0,173576,
                                                                                                                                                                                                                                                                                                                                                          117352,0,173576,
                                                                                                                                                                                                                                                                                                                                                           117359,0,173576,
                                                                                                                                                                                                                                                                                                                                                            117365,0,173576,
                                                                                                                                                                                                                                                                                                                                                             117372,0,173576,
                                                                                                                                                                                                                                                                                                                                                              117378,0,173576,
                                                                                                                                                                                                                                                                                                                                                               117385,0,173576,
                                                                                                                                                                                                                                                                                                                                                                117392,0,173576,
                                                                                                                                                                                                                                                                                                                                                                 117398,0,173576,
                                                                                                                                                                                                                                                                                                                                                                  117406,0,173576,
                                                                                                                                                                                                                                                                                                                                                                   117413,0,173576,
                                                                                                                                                                                                                                                                                                                                                                    117419,0,173576,
                                                                                                                                                                                                                                                                                                                                                                     117426,0,173576,
                                                                                                                                                                                                                                                                                                                                                                      117432,0,173576,
                                                                                                                                                                                                                                                                                                                                                                       117439,0,173576,
                                                                                                                                                                                                                                                                                                                                                                        117445,0,173576,
                                                                                                                                                                                                                                                                                                                                                                         117452,0,173576,
                                                                                                                                                                                                                                                                                                                                                                          117458,0,173576,
                                                                                                                                                                                                                                                                                                                                                                           117465,0,173576,
                                                                                                                                                                                                                                                                                                                                                                            117471,0,173576,
                                                                                                                                                                                                                                                                                                                                                                             117480,0,173576,
                                                                                                                                                                                                                                                                                                                                                                              117486,0,173576,
                                                                                                                                                                                                                                                                                                                                                                               117493,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                117499,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                 117506,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                  117512,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                   117519,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                    117525,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                     117532,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                      117539,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                       117545,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                        117554,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                         117560,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                          117567,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                           117573,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                            117580,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                             117587,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                              117593,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                               117600,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                117607,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                 117613,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                  117621,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                   117628,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                    117635,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                     117641,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                      117648,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                       117654,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                        117661,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                         117667,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                          117674,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                           117681,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                            117690,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                             117697,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                              117703,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                               117710,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                117716,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                 117723,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                  117730,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                   117736,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                    117743,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                     117749,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                      117758,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                       117765,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                        117771,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                         117778,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                          117784,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                           117791,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                            117798,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                             117804,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                              117811,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                               117818,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                117826,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                 117833,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                  117839,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                   117846,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                    117853,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                     117859,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                      117866,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                       117873,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                        117879,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                         117887,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                          117894,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                           117901,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                            117908,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                             117914,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                              117921,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                               117928,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                117934,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 117941,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  117950,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   117956,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    117963,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     117970,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      117976,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       117983,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        117990,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         117996,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          118003,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           118011,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            118018,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             118025,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              118032,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               118038,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                118045,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118052,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118058,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118065,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118073,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     118080,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      118087,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       118094,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        118100,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         118107,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          118114,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           118121,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            118127,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             118136,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              118142,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               118149,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                118156,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118163,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118169,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118176,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118183,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     118191,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      118198,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       118205,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        118212,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         118218,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          118225,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           118232,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            118239,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             118245,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              118254,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               118261,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                118267,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118274,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118281,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118288,0,173576,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118294,0,173576,







                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       118355,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      118361,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     118372,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118379,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118386,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118393,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118400,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                118406,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               118413,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              118420,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             118428,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            118435,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           118442,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          118448,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         118455,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        118462,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       118469,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      118481,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     118488,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118496,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118503,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118510,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118517,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                118523,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               118530,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              118537,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             118544,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            118553,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           118559,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          118566,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         118573,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        118579,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       118586,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      118593,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     118599,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    118606,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   118614,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  118621,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 118628,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                118635,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               118641,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              118648,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             118655,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            118661,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           118668,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          118676,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         118683,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        118690,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       118696,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      118703,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     118709,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    118716,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   118723,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  118729,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 118738,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                118744,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                               118751,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                              118758,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                             118764,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                            118771,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                           118777,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                          118784,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                         118791,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                        118799,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                       118806,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                      118812,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                     118819,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                    118825,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                   118832,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                  118839,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 118845,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                118852,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                               118859,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                              118867,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                             118874,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                            118881,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                           118887,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                          118894,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                         118901,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                        118907,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                       118914,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                      118921,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                     118929,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                    118935,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                   118942,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                  118949,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                 118955,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                118962,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                               118968,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                              118975,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                             118981,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                            118988,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                           118997,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                          119003,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                         119010,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                        119016,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                       119023,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                      119029,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                     119036,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                    119042,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                   119049,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                  119056,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                 119064,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                119070,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                               119077,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                              119083,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                             119090,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                            119097,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                           119103,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                          119110,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                         119116,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                        119123,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                       119129,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                      119138,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                     119144,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                    119151,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                   119157,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                  119164,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                 119170,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                119177,0,-1,
                                                                                                                                                                                                                                                                                                                                                                               119183,0,-1,
                                                                                                                                                                                                                                                                                                                                                                              119190,0,-1,
                                                                                                                                                                                                                                                                                                                                                                             119196,0,-1,
                                                                                                                                                                                                                                                                                                                                                                            119205,0,-1,
                                                                                                                                                                                                                                                                                                                                                                           119211,0,-1,
                                                                                                                                                                                                                                                                                                                                                                          119218,0,-1,
                                                                                                                                                                                                                                                                                                                                                                         119224,0,-1,
                                                                                                                                                                                                                                                                                                                                                                        119231,0,-1,
                                                                                                                                                                                                                                                                                                                                                                       119237,0,-1,
                                                                                                                                                                                                                                                                                                                                                                      119244,0,-1,
                                                                                                                                                                                                                                                                                                                                                                     119250,0,-1,
                                                                                                                                                                                                                                                                                                                                                                    119256,0,-1,
                                                                                                                                                                                                                                                                                                                                                                   119263,0,-1,
                                                                                                                                                                                                                                                                                                                                                                  119269,0,-1,
                                                                                                                                                                                                                                                                                                                                                                 119278,0,-1,
                                                                                                                                                                                                                                                                                                                                                                119284,0,-1,
                                                                                                                                                                                                                                                                                                                                                               119291,0,-1,
                                                                                                                                                                                                                                                                                                                                                              119297,0,-1,
                                                                                                                                                                                                                                                                                                                                                             119303,0,-1,
                                                                                                                                                                                                                                                                                                                                                            119310,0,-1,
                                                                                                                                                                                                                                                                                                                                                           119316,0,-1,
                                                                                                                                                                                                                                                                                                                                                          119323,0,-1,
                                                                                                                                                                                                                                                                                                                                                         119329,0,-1,
                                                                                                                                                                                                                                                                                                                                                        119336,0,-1,
                                                                                                                                                                                                                                                                                                                                                       119342,0,-1,
                                                                                                                                                                                                                                                                                                                                                      119349,0,-1,
                                                                                                                                                                                                                                                                                                                                                     119357,0,-1,
                                                                                                                                                                                                                                                                                                                                                    119364,0,-1,
                                                                                                                                                                                                                                                                                                                                                   119370,0,-1,
                                                                                                                                                                                                                                                                                                                                                  119377,0,-1,
                                                                                                                                                                                                                                                                                                                                                 119383,0,-1,
                                                                                                                                                                                                                                                                                                                                                119390,0,-1,
                                                                                                                                                                                                                                                                                                                                               119396,0,-1,
                                                                                                                                                                                                                                                                                                                                              119403,0,-1,
                                                                                                                                                                                                                                                                                                                                             119409,0,-1,
                                                                                                                                                                                                                                                                                                                                            119416,0,-1,
                                                                                                                                                                                                                                                                                                                                           119422,0,-1,
                                                                                                                                                                                                                                                                                                                                          119428,0,-1,
                                                                                                                                                                                                                                                                                                                                         119437,0,-1,
                                                                                                                                                                                                                                                                                                                                        119443,0,-1,
                                                                                                                                                                                                                                                                                                                                       119449,0,-1,
                                                                                                                                                                                                                                                                                                                                      119456,0,-1,
                                                                                                                                                                                                                                                                                                                                     119462,0,-1,
                                                                                                                                                                                                                                                                                                                                    119469,0,-1,
                                                                                                                                                                                                                                                                                                                                   119475,0,-1,
                                                                                                                                                                                                                                                                                                                                  119481,0,-1,
                                                                                                                                                                                                                                                                                                                                 119488,0,-1,
                                                                                                                                                                                                                                                                                                                                119494,0,-1,
                                                                                                                                                                                                                                                                                                                               119501,0,-1,
                                                                                                                                                                                                                                                                                                                              119507,0,-1,
                                                                                                                                                                                                                                                                                                                             119516,0,-1,
                                                                                                                                                                                                                                                                                                                            119522,0,-1,
                                                                                                                                                                                                                                                                                                                           119529,0,-1,
                                                                                                                                                                                                                                                                                                                          119535,0,-1,
                                                                                                                                                                                                                                                                                                                         119541,0,-1,
                                                                                                                                                                                                                                                                                                                        119548,0,-1,
                                                                                                                                                                                                                                                                                                                       119554,0,-1,
                                                                                                                                                                                                                                                                                                                      119561,0,-1,
                                                                                                                                                                                                                                                                                                                     119567,0,-1,
                                                                                                                                                                                                                                                                                                                    119573,0,-1,
                                                                                                                                                                                                                                                                                                                   119580,0,-1,
                                                                                                                                                                                                                                                                                                                  119586,0,-1,
                                                                                                                                                                                                                                                                                                                 119594,0,-1,
                                                                                                                                                                                                                                                                                                                119600,0,-1,
                                                                                                                                                                                                                                                                                                               119607,0,-1,
                                                                                                                                                                                                                                                                                                              119613,0,-1,
                                                                                                                                                                                                                                                                                                             119619,0,-1,
                                                                                                                                                                                                                                                                                                            119626,0,-1,
                                                                                                                                                                                                                                                                                                           119632,0,-1,
                                                                                                                                                                                                                                                                                                          119639,0,-1,
                                                                                                                                                                                                                                                                                                         119645,0,-1,
                                                                                                                                                                                                                                                                                                        119651,0,-1,
                                                                                                                                                                                                                                                                                                       119658,0,-1,
                                                                                                                                                                                                                                                                                                      119664,0,-1,
                                                                                                                                                                                                                                                                                                     119670,0,-1,
                                                                                                                                                                                                                                                                                                    119678,0,-1,
                                                                                                                                                                                                                                                                                                   119685,0,-1,
                                                                                                                                                                                                                                                                                                  119691,0,-1,
                                                                                                                                                                                                                                                                                                 119697,0,-1,
                                                                                                                                                                                                                                                                                                119704,0,-1,
                                                                                                                                                                                                                                                                                               119710,0,-1,
                                                                                                                                                                                                                                                                                              119716,0,-1,
                                                                                                                                                                                                                                                                                             119722,0,-1,
                                                                                                                                                                                                                                                                                            119729,0,-1,
                                                                                                                                                                                                                                                                                           119735,0,-1,
                                                                                                                                                                                                                                                                                          119741,0,-1,
                                                                                                                                                                                                                                                                                         119748,0,-1,
                                                                                                                                                                                                                                                                                        119754,0,-1,
                                                                                                                                                                                                                                                                                       119760,0,-1,
                                                                                                                                                                                                                                                                                      119768,0,-1,
                                                                                                                                                                                                                                                                                     119775,0,-1,
                                                                                                                                                                                                                                                                                    119781,0,-1,
                                                                                                                                                                                                                                                                                   119787,0,-1,
                                                                                                                                                                                                                                                                                  119794,0,-1,
                                                                                                                                                                                                                                                                                 119800,0,-1,
                                                                                                                                                                                                                                                                                119806,0,-1,
                                                                                                                                                                                                                                                                               119812,0,-1,
                                                                                                                                                                                                                                                                              119819,0,-1,
                                                                                                                                                                                                                                                                             119825,0,-1,
                                                                                                                                                                                                                                                                            119831,0,-1,
                                                                                                                                                                                                                                                                           119838,0,-1,
                                                                                                                                                                                                                                                                          119844,0,-1,
                                                                                                                                                                                                                                                                         119850,0,-1,
                                                                                                                                                                                                                                                                        119856,0,-1,
                                                                                                                                                                                                                                                                       119865,0,-1,
                                                                                                                                                                                                                                                                      119871,0,-1,
                                                                                                                                                                                                                                                                     119877,0,-1,
                                                                                                                                                                                                                                                                    119883,0,-1,
                                                                                                                                                                                                                                                                   119890,0,-1,
                                                                                                                                                                                                                                                                  119896,0,-1,
                                                                                                                                                                                                                                                                 119902,0,-1,
                                                                                                                                                                                                                                                                119908,0,-1,
                                                                                                                                                                                                                                                               119915,0,-1,
                                                                                                                                                                                                                                                              119921,0,-1,
                                                                                                                                                                                                                                                             119927,0,-1,
                                                                                                                                                                                                                                                            119934,0,-1,
                                                                                                                                                                                                                                                           119940,0,-1,
                                                                                                                                                                                                                                                          119946,0,-1,
                                                                                                                                                                                                                                                         119952,0,-1,
                                                                                                                                                                                                                                                        119960,0,-1,
                                                                                                                                                                                                                                                       119967,0,-1,
                                                                                                                                                                                                                                                      119973,0,-1,
                                                                                                                                                                                                                                                     119979,0,-1,
                                                                                                                                                                                                                                                    119985,0,-1,
                                                                                                                                                                                                                                                   119991,0,-1,
                                                                                                                                                                                                                                                  119998,0,-1,
                                                                                                                                                                                                                                                 120004,0,-1,
                                                                                                                                                                                                                                                120010,0,-1,
                                                                                                                                                                                                                                               120016,0,-1,
                                                                                                                                                                                                                                              120023,0,-1,
                                                                                                                                                                                                                                             120029,0,-1,
                                                                                                                                                                                                                                            120035,0,-1,
                                                                                                                                                                                                                                           120041,0,-1,
                                                                                                                                                                                                                                          120048,0,-1,
                                                                                                                                                                                                                                         120054,0,-1,
                                                                                                                                                                                                                                        120062,0,-1,
                                                                                                                                                                                                                                       120068,0,-1,
                                                                                                                                                                                                                                      120074,0,-1,
                                                                                                                                                                                                                                     120080,0,-1,
                                                                                                                                                                                                                                    120086,0,-1,
                                                                                                                                                                                                                                   120093,0,-1,
                                                                                                                                                                                                                                  120099,0,-1,
                                                                                                                                                                                                                                 120105,0,-1,
                                                                                                                                                                                                                                120111,0,-1,
                                                                                                                                                                                                                               120117,0,-1,
                                                                                                                                                                                                                              120124,0,-1,
                                                                                                                                                                                                                             120130,0,-1,
                                                                                                                                                                                                                            120136,0,-1,
                                                                                                                                                                                                                           120142,0,-1,
                                                                                                                                                                                                                          120148,0,-1,
                                                                                                                                                                                                                         120154,0,-1,
                                                                                                                                                                                                                        120161,0,-1,
                                                                                                                                                                                                                       120168,0,-1,
                                                                                                                                                                                                                      120175,0,-1,
                                                                                                                                                                                                                     120181,0,-1,
                                                                                                                                                                                                                    120187,0,-1,
                                                                                                                                                                                                                   120193,0,-1,
                                                                                                                                                                                                                  120199,0,-1,
                                                                                                                                                                                                                 120205,0,-1,
                                                                                                                                                                                                                120212,0,-1,
                                                                                                                                                                                                               120218,0,-1,
                                                                                                                                                                                                              120224,0,-1,
                                                                                                                                                                                                             120230,0,-1,
                                                                                                                                                                                                            120236,0,-1,
                                                                                                                                                                                                           120242,0,-1,
                                                                                                                                                                                                          120248,0,-1,
                                                                                                                                                                                                         120255,0,-1,
                                                                                                                                                                                                        120261,0,-1,
                                                                                                                                                                                                       120267,0,-1,
                                                                                                                                                                                                      120273,0,-1,
                                                                                                                                                                                                     120279,0,-1,
                                                                                                                                                                                                    120287,0,-1,
                                                                                                                                                                                                   120293,0,-1,
                                                                                                                                                                                                  120299,0,-1,
                                                                                                                                                                                                 120305,0,-1,
                                                                                                                                                                                                120311,0,-1,
                                                                                                                                                                                               120318,0,-1,
                                                                                                                                                                                              120324,0,-1,
                                                                                                                                                                                             120330,0,-1,
                                                                                                                                                                                            120336,0,-1,
                                                                                                                                                                                           120342,0,-1,
                                                                                                                                                                                          120348,0,-1,
                                                                                                                                                                                         120355,0,-1,
                                                                                                                                                                                        120361,0,-1,
                                                                                                                                                                                       120367,0,-1,
                                                                                                                                                                                      120373,0,-1,
                                                                                                                                                                                     120379,0,-1,
                                                                                                                                                                                    120386,0,-1,
                                                                                                                                                                                   120392,0,-1,
                                                                                                                                                                                  120398,0,-1,
                                                                                                                                                                                 120404,0,-1,
                                                                                                                                                                                120412,0,-1,
                                                                                                                                                                               120418,0,-1,
                                                                                                                                                                              120424,0,-1,
                                                                                                                                                                             120430,0,-1,
                                                                                                                                                                            120436,0,-1,
                                                                                                                                                                           120443,0,-1,
                                                                                                                                                                          120449,0,-1,
                                                                                                                                                                         120455,0,-1,
                                                                                                                                                                        120461,0,-1,
                                                                                                                                                                       120467,0,-1,
                                                                                                                                                                      120473,0,-1,
                                                                                                                                                                     120479,0,-1,
                                                                                                                                                                    120485,0,-1,
                                                                                                                                                                   120491,0,-1,
                                                                                                                                                                  120497,0,-1,
                                                                                                                                                                 120504,0,-1,
                                                                                                                                                                120510,0,-1,
                                                                                                                                                               120516,0,-1,
                                                                                                                                                              120522,0,-1,
                                                                                                                                                             120528,0,-1,
                                                                                                                                                            120534,0,-1,
                                                                                                                                                           120540,0,-1,
                                                                                                                                                          120546,0,-1,
                                                                                                                                                         120554,0,-1,
                                                                                                                                                        120560,0,-1,
                                                                                                                                                       120566,0,-1,
                                                                                                                                                      120572,0,-1,
                                                                                                                                                     120578,0,-1,
                                                                                                                                                    120584,0,-1,
                                                                                                                                                   120590,0,-1,
                                                                                                                                                  120596,0,-1,
                                                                                                                                                 120602,0,-1,
                                                                                                                                                120608,0,-1,
                                                                                                                                               120614,0,-1,
                                                                                                                                              120620,0,-1,
                                                                                                                                             120626,0,-1,
                                                                                                                                            120632,0,-1,
                                                                                                                                           120638,0,-1,
                                                                                                                                          120644,0,-1,
                                                                                                                                         120650,0,-1,
                                                                                                                                        120656,0,-1,
                                                                                                                                       120663,0,-1,
                                                                                                                                      120669,0,-1,
                                                                                                                                     120675,0,-1,
                                                                                                                                    120681,0,-1,
                                                                                                                                   120687,0,-1,
                                                                                                                                  120693,0,-1,
                                                                                                                                 120699,0,-1,
                                                                                                                                120705,0,-1,
                                                                                                                               120711,0,-1,
                                                                                                                              120718,0,-1,
                                                                                                                             120724,0,-1,
                                                                                                                            120730,0,-1,
                                                                                                                           120736,0,-1,
                                                                                                                          120742,0,-1,
                                                                                                                         120748,0,-1,
                                                                                                                        120754,0,-1,
                                                                                                                       120760,0,-1,
                                                                                                                      120766,0,-1,
                                                                                                                     120772,0,-1,
                                                                                                                    120778,0,-1,
                                                                                                                   120784,0,-1,
                                                                                                                  120790,0,-1,
                                                                                                                 120796,0,-1,
                                                                                                                120802,0,-1,
                                                                                                               120808,0,-1,
                                                                                                              120814,0,-1,
                                                                                                             120820,0,-1,
                                                                                                            120826,0,-1,
                                                                                                           120832,0,-1,
                                                                                                          120838,0,-1,
                                                                                                         120844,0,-1,
                                                                                                        120850,0,-1,
                                                                                                       120856,0,-1,
                                                                                                      120861,0,-1,
                                                                                                     120867,0,-1,
                                                                                                    120873,0,-1,
                                                                                                   120879,0,-1,
                                                                                                  120885,0,-1,
                                                                                                 120891,0,-1,
                                                                                                120897,0,-1,
                                                                                               120903,0,-1,
                                                                                              120909,0,-1,
                                                                                             120917,0,-1,
                                                                                            120923,0,-1,
                                                                                           120928,0,-1,
                                                                                          120934,0,-1,
                                                                                         120940,0,-1,
                                                                                        120946,0,-1,
                                                                                       120952,0,-1,
                                                                                      120958,0,-1,
                                                                                     120964,0,-1,
                                                                                    120970,0,-1,
                                                                                   120976,0,-1,
                                                                                  120982,0,-1,
                                                                                 120987,0,-1,
                                                                                120993,0,-1,
                                                                               120999,0,-1,
                                                                              121005,0,-1,
                                                                             121011,0,-1,
                                                                            121017,0,-1,
                                                                           121023,0,-1,
                                                                          121029,0,-1,
                                                                         121034,0,-1,
                                                                        121040,0,-1,
                                                                       121046,0,-1,
                                                                      121052,0,-1,
                                                                     121058,0,-1,
                                                                    121064,0,-1,
                                                                   121070,0,-1,
                                                                  121075,0,-1,
                                                                 121081,0,-1,
                                                                121087,0,-1,
                                                               121093,0,-1,
                                                              121099,0,-1,
                                                             121105,0,-1,
                                                            121111,0,-1,
                                                           121116,0,-1,
                                                          121122,0,-1,
                                                         121128,0,-1,
                                                        121134,0,-1,
                                                       121140,0,-1,
                                                      121146,0,-1,
                                                     121151,0,-1,
                                                    121157,0,-1,
                                                   121163,0,-1,
                                                  121169,0,-1,
                                                 121175,0,-1,
                                                121181,0,-1,
                                               121186,0,-1,
                                              121192,0,-1,
                                             121198,0,-1,
                                            121204,0,-1,
                                           121211,0,-1,
                                          121217,0,-1,
                                         121223,0,-1,
                                        121229,0,-1,
                                       121235,0,-1,
                                      121240,0,-1,
                                     121246,0,-1,
                                    121252,0,-1,
                                   121258,0,-1,
                                  121264,0,-1,
                                 121269,0,-1,
                                121275,0,-1,
                               121281,0,-1,
                              121287,0,-1,
                             121292,0,-1,
                            121298,0,-1,
                           121304,0,-1,
                          121310,0,-1,
                         121316,0,-1,
                        121321,0,-1,
                       121327,0,-1,
                      121333,0,-1,
                     121339,0,-1,
                    121345,0,-1,
                   121350,0,-1,
                  121356,0,-1,
                 121362,0,-1,
                121369,0,-1,
               121377,0,-1,
              121385,0,-1,
             121392,0,-1,
            121398,0,-1,
           121403,0,-1,
          121409,0,-1,
         121415,0,-1,
        121421,0,-1,
       121426,0,-1,
      121432,0,-1,
     121438,0,-1,
    121444,0,-1,
   121449,0,-1,
  121455,0,-1,
 121461,0,-1,
 121467,0,27120,
  121474,0,173600,
  121480,0,-1,
 121486,0,-1,
 121491,0,27120,
  121498,0,173696,
  121504,0,-1,
 121509,0,-1,
 121515,0,27120,
  121521,0,173680,
  121527,0,-1,
 121533,0,-1,
 121538,0,27120,
  121544,0,173616,
   121550,0,25072,
   121588,0,-1,
  121594,0,-1,
 121599,0,-1,
 121606,0,29224,
 121612,0,-1,
 121618,0,25072,
 121648,0,-1,
 121654,0,25072,
 121684,0,-1,
 121689,0,25072,
 121706,0,-1,
 121712,0,25072,
 121729,0,-1,
 121734,0,25072,
 121750,0,-1,
 121756,0,25072,
 121771,0,-1,
 121778,0,173408,
 121784,0,-1,
 121790,0,173408,
 121795,0,-1,
 121801,0,173408,
 121807,0,-1,
 121813,0,173704,
 121819,0,-1,
 121825,0,173408,
 121830,0,-1,
 121836,0,173704,
 121842,0,-1,
 121848,0,173408,
 121853,0,-1,
 121859,0,173704,
 121865,0,-1,
 121871,0,173408,
 121876,0,-1,
 121882,0,173704,
 121888,0,-1,
 121894,0,173408,
 121899,0,-1,
 121905,0,173704,
 121911,0,-1,
 121917,0,173408,
 121922,0,-1,
 121929,0,173712,
 121934,0,-1,
 121940,0,173712,
 121946,0,-1,
 121952,0,173712,
 121958,0,-1,
 121963,0,173728,
 121969,0,-1,
 121975,0,173728,
 121981,0,-1,
 121986,0,173728,
 121992,0,-1,
 121998,0,173744,
 122004,0,-1,
 122010,0,173744,
 122016,0,-1,
 122022,0,173712,
 122028,0,-1,
 122033,0,173712,
 122039,0,-1,
 122045,0,173712,
 122051,0,-1,
 122056,0,173728,
 122062,0,-1,
 122068,0,173728,
 122074,0,-1,
 122079,0,173728,
 122085,0,-1,
 122091,0,173744,
 122097,0,-1,
 122102,0,173744,
 122108,0,-1,
 122114,0,173712,
 122120,0,-1,
 122126,0,173712,
 122132,0,-1,
 122137,0,173712,
 122143,0,-1,
 122149,0,173728,
 122155,0,-1,
 122160,0,173728,
 122166,0,-1,
 122172,0,173728,
 122178,0,-1,
 122184,0,173744,
 122189,0,-1,
 122195,0,173744,
 122201,0,-1,
 122207,0,173712,
 122213,0,-1,
 122219,0,173712,
 122224,0,-1,
 122230,0,173712,
 122236,0,-1,
 122242,0,173728,
 122248,0,-1,
 122253,0,173728,
 122259,0,-1,
 122265,0,173728,
 122271,0,-1,
 122277,0,173744,
 122282,0,-1,
 122288,0,173744,
 122294,0,-1,
 122300,0,173712,
 122306,0,-1,
 122312,0,173712,
 122320,0,-1,
 122327,0,173712,
 122333,0,-1,
 122339,0,173728,
 122344,0,-1,
 122350,0,173728,
 122356,0,-1,
 122362,0,173728,
 122368,0,-1,
 122373,0,173744,
 122379,0,-1,
 122385,0,173744,
 122391,0,-1,
 122397,0,173712,
 122403,0,-1,
 122408,0,173712,
 122414,0,-1,
 122420,0,173712,
 122426,0,-1,
 122431,0,173728,
 122437,0,-1,
 122443,0,173728,
 122449,0,-1,
 122454,0,173728,
 122460,0,-1,
 122466,0,173744,
 122472,0,-1,
 122478,0,173744,
 122484,0,-1,
 122490,0,173712,
 122495,0,-1,
 122501,0,173712,
 122507,0,-1,
 122513,0,173712,
 122519,0,-1,
 122530,0,173728,
 122536,0,-1,
 122542,0,173728,
 122548,0,-1,
 122554,0,173728,
 122559,0,-1,
 122565,0,173744,
 122572,0,-1,
 122578,0,173744,
 122583,0,-1,
 122600,0,25072,
 122615,0,-1,
 122621,0,25072,
 122639,0,-1,
 122645,0,25072,
 122659,0,-1,
 122665,0,25072,
 122682,0,-1,
 122688,0,25072,
 122704,0,-1,
 122710,0,25072,
 122727,0,-1,
 122733,0,25072,
 122749,0,-1,
 122755,0,25072,
 122765,0,-1,
 122771,0,25072,
 122784,0,-1,
 122789,0,25072,
 122802,0,-1,
 122808,0,25072,
 122821,0,-1,
 122827,0,25072,
 122839,0,-1,
 122845,0,25072,
 122858,0,-1,
 122864,0,25072,
 122876,0,-1,
 122882,0,25072,
 122895,0,-1,
 122900,0,25072,
 122913,0,-1,
 122919,0,25072,
 122931,0,-1,
 122937,0,25072,
 122950,0,-1,
 122956,0,25072,
 122968,0,-1,
 122974,0,25072,
 122987,0,-1,
 122992,0,21168,
 122998,0,-1,
123004,0,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21168
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21928
		, "static": true
		, "const": true
		, "time": 17
		, "total": 17
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22392
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22856
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23320
		, "static": true
		, "const": true
		, "time": 15
		, "total": 15
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25072
		, "static": true
		, "const": true
		, "time": 488
		, "total": 488
		, "hits": 31
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27120
		, "static": true
		, "const": true
		, "time": 6424
		, "total": 6424
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27728
		, "static": true
		, "const": true
		, "time": 47
		, "total": 47
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28480
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29224
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29960
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33576
		, "static": true
		, "const": true
		, "time": 34
		, "total": 34
		, "hits": 6
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34312
		, "static": true
		, "const": true
		, "time": 37
		, "total": 37
		, "hits": 6
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39024
		, "static": true
		, "const": true
		, "time": 23
		, "total": 23
		, "hits": 2
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39488
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39952
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40416
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40880
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41488
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41952
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42552
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43008
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43464
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43920
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44376
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44832
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45424
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45880
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46472
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "stdlib.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 69
		, "offs": 173408
		, "static": true
		, "const": true
		, "time": 48
		, "total": 48
		, "hits": 8
		, "fails": 0
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 173496
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 173504
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 55
		, "offs": 173512
		, "static": true
		, "const": true
		, "time": 8792
		, "total": 8792
		, "hits": 753
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 173568
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 173576
		, "static": true
		, "const": true
		, "time": 6256
		, "total": 6256
		, "hits": 488
		, "fails": -488
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 173600
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 64
		, "offs": 173616
		, "static": true
		, "const": true
		, "time": 12
		, "total": 49
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 173680
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 173696
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": -1
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 5
		, "offs": 173704
		, "static": true
		, "const": true
		, "time": 26
		, "total": 26
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 173712
		, "static": true
		, "const": true
		, "time": 122
		, "total": 122
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 173728
		, "static": true
		, "const": true
		, "time": 120
		, "total": 120
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 173744
		, "static": true
		, "const": true
		, "time": 80
		, "total": 80
		, "hits": 14
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 7025
		, "offs": 173848
		, "static": true
		, "const": false
		, "time": 992
		, "total": 17421
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 64
	, "statementCount": 654
}
}

{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 136
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(1)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23320
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(4)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 160
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 304
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 448
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 592
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 736
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 880
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1168
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1312
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34312
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34776
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(20)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36632
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1600
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(26)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(27)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1744
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39024
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(28)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(29)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(30)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40416
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(31)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 1888
	, "static": true
	, "const": true
	, "ast": {
		"": "(0)"
		, "kind": "()"
		, "type": "int32"
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int64"
			, "value": "0"
		}]
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43008
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(36)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(37)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(38)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(39)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29960
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(10)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2176
	, "static": true
	, "const": true
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2320
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2472
	, "static": true
	, "const": true
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "true"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "false"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "uint8"
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "float32"
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "float64"
		, "value": "float64"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3768
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3912
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x1 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x1 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4776
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 4920
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x1 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x1 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x2 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x2 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x4 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x4 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 5496
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 6792
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 7616
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8464
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8880
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9296
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9712
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 10400
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 11392
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 12352
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 13312
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 14544
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 15776
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 16736
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 17696
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 18656
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 19616
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 20032
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25072
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(5)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "3"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "4"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27120
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "void"
	, "size": 0
	, "offs": 30008
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(12)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(13)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(14)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32032
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(15)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32360
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(16)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 17
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 27
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 27
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 28
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 28
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 29
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 29
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 69
	, "offs": 177832
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 33
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 33
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 33
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 34
				}]
			}
		}, {
			"": "NonEqualIntegers"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "stdlib.ci"
			, "line": 36
			, "value": "NonEqualIntegers"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "assertEq.NonEqualIntegers"
			, "file": "stdlib.ci"
			, "line": 41
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 46
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177832
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177834
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 177836
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 177837
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177841
		, "size": 1
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177842
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177846
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177848
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177850
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177852
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177854
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177856
		, "size": 2
	}, {
		"instruction": "load.ref .00b5b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177858
		, "size": 5
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177863
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177868
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177873
		, "size": 5
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177878
		, "size": 5
	}, {
		"instruction": "load.ref .00e370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177883
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 177888
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 177892
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177896
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177900
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 52
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "size"
			}
		}]
	}
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "test.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test.ci"
		, "line": 4
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 3
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 4
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 6
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 7
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 9
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 10
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 11
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(float32(3.140000 / (2)), float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "float32(3.140000 / (2))"
			, "kind": "()"
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "args": [{
				"": "3.140000 / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "left": {
					"": "3.140000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "value": "3.140000"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.inlineEmit.ci"
						, "line": 11
						, "value": "2"
					}]
				}
			}]
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 14
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 14
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 15
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 15
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 17
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 17
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 17
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 18
	, "size": 8
	, "offs": 44
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 18
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 18
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 19
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 19
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 19
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 20
	, "size": 8
	, "offs": 56
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 20
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 20
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 23
	, "size": 8
	, "offs": 64
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "sum(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(sum(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "sum(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "value": "c"
		}]
	}
}, {
	"": "any(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "any(any(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "any(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "value": "c"
		}]
	}
}, {
	"": "min(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "min(min(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "min(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "value": "c"
		}]
	}
}, {
	"": "ma"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "ma"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 68
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 13
		, "value": "3"
	}
}, {
	"": "mb"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mb"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 14
	, "size": 4
	, "offs": 72
	, "static": false
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 14
		, "value": "6"
	}
}, {
	"": "mc"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mc"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 76
	, "static": false
	, "const": false
	, "ast": {
		"": "9"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 15
		, "value": "9"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 80
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "3"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 18
	, "size": 4
	, "offs": 84
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "mb"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 88
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mc"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 92
	, "static": false
	, "const": false
	, "ast": {
		"": "last(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "3"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 22
	, "size": 4
	, "offs": 96
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "mb"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 100
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 104
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "12"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 26
	, "size": 4
	, "offs": 108
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "mb"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 112
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mc"
			}
		}]
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 116
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "12"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 30
	, "size": 4
	, "offs": 120
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "mb"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 124
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mc"
			}
		}]
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 128
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "12"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 34
	, "size": 4
	, "offs": 132
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "mb"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 136
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 140
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 37
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "6"
		}]
	}
}, {
	"": "sum3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 38
	, "size": 4
	, "offs": 144
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mc"
		}]
	}
}, {
	"": "sum3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 39
	, "size": 4
	, "offs": 148
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
		}]
	}
}, {
	"": "any3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 152
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "any3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 156
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mc"
		}]
	}
}, {
	"": "any3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 160
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
		}]
	}
}, {
	"": "min3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 164
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "6"
		}]
	}
}, {
	"": "min3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 168
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mc"
		}]
	}
}, {
	"": "min3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 47
	, "size": 4
	, "offs": 172
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
		}]
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 9
	, "size": 4
	, "offs": 176
	, "static": false
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 10
	, "size": 4
	, "offs": 180
	, "static": false
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 11
	, "size": 4
	, "offs": 184
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 12
	, "size": 4
	, "offs": 188
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 13
	, "size": 4
	, "offs": 192
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 74496
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 74768
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "test/test.inlineOverload.ci"
	, "line": 28
	, "size": 8
	, "offs": 200
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "test/test.inlineOverload.ci"
	, "line": 29
	, "size": 8
	, "offs": 208
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "test/test.inlineOverload.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 7
	, "size": 8
	, "offs": 177904
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initByRef.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 8
	, "size": 4
	, "offs": 212
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 9
	, "size": 4
	, "offs": 216
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 10
	, "size": 8
	, "offs": 224
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 12
	, "size": 8
	, "offs": 232
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 13
	, "size": 4
	, "offs": 236
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 14
	, "size": 4
	, "offs": 240
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 16
	, "size": 4
	, "offs": 244
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 17
	, "size": 4
	, "offs": 248
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 18
	, "size": 8
	, "offs": 256
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 19
	, "size": 4
	, "offs": 260
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "test/lang.initByRef.ci"
	, "line": 20
	, "size": 4
	, "offs": 264
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "test/lang.initByRef.ci"
	, "line": 21
	, "size": 4
	, "offs": 268
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 23
	, "size": 4
	, "offs": 272
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 24
	, "size": 8
	, "offs": 280
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 25
	, "size": 4
	, "offs": 284
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 27
	, "size": 8
	, "offs": 292
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 28
	, "size": 8
	, "offs": 300
	, "static": false
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 29
	, "size": 4
	, "offs": 304
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 30
	, "size": 4
	, "offs": 308
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 31
	, "size": 8
	, "offs": 316
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 32
	, "size": 4
	, "offs": 320
	, "static": false
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 35
	, "size": 4
	, "offs": 324
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 36
	, "size": 4
	, "offs": 328
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 37
	, "size": 4
	, "offs": 332
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 38
	, "size": 4
	, "offs": 336
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 39
	, "size": 4
	, "offs": 340
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 40
	, "size": 4
	, "offs": 344
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 41
	, "size": 4
	, "offs": 348
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 42
	, "size": 4
	, "offs": 352
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 43
	, "size": 4
	, "offs": 356
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 44
	, "size": 4
	, "offs": 360
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 45
	, "size": 4
	, "offs": 364
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 46
	, "size": 4
	, "offs": 368
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 47
	, "size": 4
	, "offs": 372
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 48
	, "size": 4
	, "offs": 376
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 49
	, "size": 4
	, "offs": 380
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 50
	, "size": 4
	, "offs": 384
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 51
	, "size": 4
	, "offs": 388
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 52
	, "size": 4
	, "offs": 392
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 55
	, "size": 8
	, "offs": 400
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 56
	, "size": 8
	, "offs": 408
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 57
	, "size": 8
	, "offs": 416
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 58
	, "size": 8
	, "offs": 424
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 59
	, "size": 8
	, "offs": 432
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 60
	, "size": 8
	, "offs": 440
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 61
	, "size": 8
	, "offs": 448
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 62
	, "size": 8
	, "offs": 456
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 63
	, "size": 8
	, "offs": 464
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 64
	, "size": 8
	, "offs": 472
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 65
	, "size": 8
	, "offs": 480
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 66
	, "size": 8
	, "offs": 488
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 67
	, "size": 8
	, "offs": 496
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 68
	, "size": 8
	, "offs": 504
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 69
	, "size": 8
	, "offs": 512
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 70
	, "size": 8
	, "offs": 520
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 71
	, "size": 8
	, "offs": 528
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 72
	, "size": 8
	, "offs": 536
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 75
	, "size": 4
	, "offs": 540
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 76
	, "size": 4
	, "offs": 544
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 77
	, "size": 4
	, "offs": 548
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 78
	, "size": 4
	, "offs": 552
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 79
	, "size": 4
	, "offs": 556
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 80
	, "size": 4
	, "offs": 560
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 81
	, "size": 4
	, "offs": 564
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 82
	, "size": 4
	, "offs": 568
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 83
	, "size": 4
	, "offs": 572
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 84
	, "size": 4
	, "offs": 576
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 85
	, "size": 4
	, "offs": 580
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 86
	, "size": 4
	, "offs": 584
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 87
	, "size": 4
	, "offs": 588
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 88
	, "size": 4
	, "offs": 592
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 89
	, "size": 4
	, "offs": 596
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 90
	, "size": 4
	, "offs": 600
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 91
	, "size": 4
	, "offs": 604
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 92
	, "size": 4
	, "offs": 608
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 95
	, "size": 4
	, "offs": 612
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 96
	, "size": 8
	, "offs": 620
	, "static": false
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 97
	, "size": 4
	, "offs": 624
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 99
	, "size": 4
	, "offs": 628
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 105
	, "size": 8
	, "offs": 636
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 108
	, "size": 4
	, "offs": 640
	, "static": false
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 3
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 177912
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177912
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 177920
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177920
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177922
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 177924
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177925
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177927
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 11
	, "size": 4
	, "offs": 644
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 648
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 17
	, "size": 4
	, "offs": 652
	, "static": false
	, "const": false
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 656
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 23
	, "size": 4
	, "offs": 660
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 664
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 29
	, "size": 4
	, "offs": 668
	, "static": false
	, "const": false
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 177928
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 33
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 33
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177928
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177930
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 177932
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177933
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177935
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 55
	, "offs": 177936
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 38
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 38
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "test/lang.function.ci"
					, "line": 39
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 39
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 41
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 41
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177936
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 177938
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 177943
		, "size": 1
	}, {
		"instruction": "jnz +9"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 177944
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177948
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177950
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177952
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177953
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177954
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 177956
		, "size": 4
	}, {
		"instruction": "load.ref .02b710"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177960
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177965
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177966
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 177970
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 177971
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 177973
		, "size": 4
	}, {
		"instruction": "load.ref .02b710"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 177977
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 177982
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 177983
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 177987
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 177988
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177990
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "test/lang.function.ci"
	, "line": 45
	, "size": 4
	, "offs": 672
	, "static": false
	, "const": false
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 45
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 45
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 3
	, "size": 4
	, "offs": 676
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 4
	, "size": 4
	, "offs": 680
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 5
	, "size": 4
	, "offs": 684
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 6
	, "size": 4
	, "offs": 688
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 7
	, "size": 4
	, "offs": 692
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 8
	, "size": 4
	, "offs": 696
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 9
	, "size": 4
	, "offs": 700
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 10
	, "size": 4
	, "offs": 704
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 11
	, "size": 4
	, "offs": 708
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 12
	, "size": 4
	, "offs": 712
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 13
	, "size": 4
	, "offs": 716
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 14
	, "size": 4
	, "offs": 720
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 15
	, "size": 4
	, "offs": 724
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 16
	, "size": 4
	, "offs": 728
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 17
	, "size": 4
	, "offs": 732
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 18
	, "size": 4
	, "offs": 736
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 19
	, "size": 4
	, "offs": 740
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 20
	, "size": 4
	, "offs": 744
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "test/lang.reflection.ci"
	, "line": 22
	, "size": 12
	, "offs": 96144
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang.reflection.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "test/lang.reflection.ci"
	, "line": 26
	, "size": 16
	, "offs": 96416
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "test/lang.reflection.ci"
	, "line": 30
	, "size": 4
	, "offs": 748
	, "static": false
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "test/lang.reflection.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflection.ci"
	, "line": 31
	, "size": 4
	, "offs": 752
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 32
	, "size": 4
	, "offs": 756
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 33
	, "size": 4
	, "offs": 760
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflection.ci"
	, "line": 34
	, "size": 4
	, "offs": 764
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 35
	, "size": 4
	, "offs": 768
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "test/lang.reflection.ci"
	, "line": 37
	, "size": 4
	, "offs": 772
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflection.ci"
	, "line": 38
	, "size": 4
	, "offs": 776
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 39
	, "size": 4
	, "offs": 780
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 40
	, "size": 4
	, "offs": 784
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflection.ci"
	, "line": 41
	, "size": 4
	, "offs": 788
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 42
	, "size": 4
	, "offs": 792
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "test/lang.reflection.ci"
	, "line": 44
	, "size": 4
	, "offs": 796
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 45
	, "size": 4
	, "offs": 800
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 46
	, "size": 4
	, "offs": 804
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "test/lang.reflection.ci"
	, "line": 48
	, "size": 4
	, "offs": 808
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflection.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 49
	, "size": 4
	, "offs": 812
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflection.ci"
	, "line": 50
	, "size": 4
	, "offs": 816
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflection.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflection.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflection.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 3
	, "size": 8
	, "offs": 824
	, "static": false
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 4
	, "size": 8
	, "offs": 832
	, "static": false
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 6
	, "size": 4
	, "offs": 836
	, "static": false
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 7
	, "size": 4
	, "offs": 840
	, "static": false
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 14
	, "size": 4
	, "offs": 844
	, "static": false
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 15
	, "size": 4
	, "offs": 848
	, "static": false
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 16
	, "size": 4
	, "offs": 852
	, "static": false
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 18
	, "size": 4
	, "offs": 856
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 19
	, "size": 4
	, "offs": 860
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 21
	, "size": 4
	, "offs": 864
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 22
	, "size": 4
	, "offs": 868
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 23
	, "size": 4
	, "offs": 872
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 25
	, "size": 4
	, "offs": 876
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 26
	, "size": 4
	, "offs": 880
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 27
	, "size": 4
	, "offs": 884
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 29
	, "size": 4
	, "offs": 888
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 30
	, "size": 4
	, "offs": 892
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 31
	, "size": 4
	, "offs": 896
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 33
	, "size": 4
	, "offs": 900
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 34
	, "size": 4
	, "offs": 904
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 35
	, "size": 4
	, "offs": 908
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "sinF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sinF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 37
	, "size": 8
	, "offs": 916
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "cosF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 38
	, "size": 8
	, "offs": 924
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "tanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 39
	, "size": 8
	, "offs": 932
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "logF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 40
	, "size": 8
	, "offs": 940
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "expF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "expF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 41
	, "size": 8
	, "offs": 948
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "powF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 42
	, "size": 8
	, "offs": 956
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sqrtF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 43
	, "size": 8
	, "offs": 964
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "atanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "atanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 44
	, "size": 8
	, "offs": 972
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "sinF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sinF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 46
	, "size": 4
	, "offs": 976
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "cosF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 47
	, "size": 4
	, "offs": 980
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "tanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 48
	, "size": 4
	, "offs": 984
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "logF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 49
	, "size": 4
	, "offs": 988
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "expF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "expF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 50
	, "size": 4
	, "offs": 992
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "powF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 51
	, "size": 4
	, "offs": 996
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sqrtF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 52
	, "size": 4
	, "offs": 1000
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "atanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "atanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 53
	, "size": 4
	, "offs": 1004
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 1008
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 1012
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 1016
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 1020
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 1028
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 1036
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 177992
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 177992
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 178000
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[1024]"
			, "file": "test/stdc.execute.ci"
			, "line": 15
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 16
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178000
		, "size": 4
	}, {
		"instruction": "load.sp(+1028)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178004
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 178008
		, "size": 1
	}, {
		"instruction": "load.ref .02b750"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178009
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 178014
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178015
		, "size": 4
	}, {
		"instruction": "inc.sp(-1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178019
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178023
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 178024
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 20
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178024
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178029
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 178030
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178031
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178035
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 64
	, "offs": 178040
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/stdc.execute.ci"
			, "line": 24
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "test/stdc.execute.ci"
			, "line": 29
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.noTrace, \"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 34
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178040
		, "size": 4
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178044
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178049
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178051
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178056
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178058
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178063
		, "size": 2
	}, {
		"instruction": "load.ref .00eb23"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178065
		, "size": 5
	}, {
		"instruction": "load.c32 34"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178070
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178075
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178080
		, "size": 1
	}, {
		"instruction": "load.ref .01a84e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178081
		, "size": 5
	}, {
		"instruction": "load.ref .01b168"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178086
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178091
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 178095
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178099
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178103
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 178104
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 38
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 39
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178104
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178109
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 178111
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178112
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178116
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 42
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 178120
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 43
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178120
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178121
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 46
	, "size": 4
	, "offs": 1040
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 47
	, "size": 4
	, "offs": 1044
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 48
	, "size": 4
	, "offs": 1048
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 49
	, "size": 4
	, "offs": 1052
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 50
	, "size": 4
	, "offs": 1056
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 51
	, "size": 4
	, "offs": 1060
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 52
	, "size": 4
	, "offs": 1064
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "abortExecution"
		}]
	}
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "test/lang.record.ci"
	, "line": 2
	, "size": 16
	, "offs": 113872
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.record.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.record.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.record.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "test/lang.record.ci"
	, "line": 9
	, "size": 3
	, "offs": 114416
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.record.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.record.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.record.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "test/lang.record.ci"
	, "line": 16
	, "size": 4
	, "offs": 114960
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "test/lang.record.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "test/lang.record.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "test/lang.record.ci"
	, "line": 22
	, "size": 20
	, "offs": 115368
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "test/lang.record.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "test/lang.record.ci"
	, "line": 26
	, "size": 3
	, "offs": 1068
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "test/lang.record.ci"
	, "line": 27
	, "size": 3
	, "offs": 1072
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "test/lang.record.ci"
	, "line": 28
	, "size": 3
	, "offs": 1076
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "test/lang.record.ci"
	, "line": 30
	, "size": 4
	, "offs": 1080
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "test/lang.record.ci"
	, "line": 31
	, "size": 4
	, "offs": 1084
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.record.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 116416
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 117368
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 118320
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 119272
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 120224
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 121176
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "arrFixedNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedNoInit"
	, "type": "int64[7]"
	, "file": "test/lang.initArray.ci"
	, "line": 8
	, "size": 56
	, "offs": 1140
	, "static": false
	, "const": false
}, {
	"": "arrArrayNoInit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayNoInit"
	, "type": "int64[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 9
	, "size": 4
	, "offs": 1144
	, "static": false
	, "const": false
}, {
	"": "arrSliceNoInit"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceNoInit"
	, "type": "int64[]"
	, "file": "test/lang.initArray.ci"
	, "line": 10
	, "size": 8
	, "offs": 1152
	, "static": false
	, "const": false
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 18
	, "size": 4
	, "offs": 1156
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initArray.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "test/lang.initArray.ci"
	, "line": 19
	, "size": 8
	, "offs": 1164
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initArray.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 22
	, "size": 4
	, "offs": 1168
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.initArray.ci"
		, "line": 22
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "test/lang.initArray.ci"
	, "line": 23
	, "size": 8
	, "offs": 1176
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.initArray.ci"
		, "line": 23
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 26
	, "size": 4
	, "offs": 1180
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.initArray.ci"
		, "line": 26
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "test/lang.initArray.ci"
	, "line": 27
	, "size": 8
	, "offs": 1188
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.initArray.ci"
		, "line": 27
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 30
	, "size": 4
	, "offs": 1192
	, "static": false
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "test/lang.initArray.ci"
		, "line": 30
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "test/lang.initArray.ci"
	, "line": 40
	, "size": 7
	, "offs": 1200
	, "static": false
	, "const": false
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "test/lang.initArray.ci"
	, "line": 45
	, "size": 4
	, "offs": 1204
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.initArray.ci"
		, "line": 45
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "test/lang.initArray.ci"
	, "line": 49
	, "size": 8
	, "offs": 1212
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.initArray.ci"
		, "line": 49
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "test/lang.initArray.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initArray.ci"
		, "line": 62
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.initArray.ci"
		, "line": 62
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 5
	, "offs": 178128
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initArray.ci"
		, "line": 62
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initArray.ci"
			, "line": 62
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "test/lang.initArray.ci"
					, "line": 62
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.initArray.ci"
						, "line": 62
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "test/lang.initArray.ci"
						, "line": 62
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178128
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178130
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178132
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "test/lang.initArray.ci"
	, "line": 63
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.initArray.ci"
		, "line": 63
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.initArray.ci"
		, "line": 63
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "test/lang.initArray.ci"
		, "line": 63
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 178136
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initArray.ci"
		, "line": 63
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initArray.ci"
			, "line": 63
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.initArray.ci"
					, "line": 63
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "test/lang.initArray.ci"
						, "line": 63
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 63
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178136
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178138
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 178140
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 178144
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 178145
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178147
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "test/lang.initArray.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.initArray.ci"
		, "line": 64
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.initArray.ci"
		, "line": 64
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "test/lang.initArray.ci"
		, "line": 64
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 178152
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initArray.ci"
		, "line": 64
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initArray.ci"
			, "line": 64
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.initArray.ci"
					, "line": 64
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "test/lang.initArray.ci"
						, "line": 64
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 64
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178152
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178154
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 178156
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 178160
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 178161
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178163
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "test/lang.initArray.ci"
	, "line": 65
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.initArray.ci"
		, "line": 65
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.initArray.ci"
		, "line": 65
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.initArray.ci"
		, "line": 65
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 178168
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initArray.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initArray.ci"
			, "line": 65
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.initArray.ci"
					, "line": 65
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.initArray.ci"
						, "line": 65
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 65
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178168
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178170
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 178172
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 178176
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 178177
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178179
		, "size": 1
	}]
}, {
	"": "globalCounter"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalCounter"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 8
	, "size": 8
	, "offs": 178184
	, "static": true
	, "const": false
	, "ast": {
		"": "33"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 8
		, "value": "33"
	}
}, {
	"": "globalInitCounter1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalInitCounter1"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 10
	, "size": 8
	, "offs": 178192
	, "static": true
	, "const": false
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 10
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 10
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 10
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 10
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 10
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 10
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "Record"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Record"
	, "type": "typename"
	, "file": "test/lang.initRecord.ci"
	, "line": 12
	, "size": 48
	, "offs": 130552
	, "static": true
	, "const": true
}, {
	"": "Record.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "Record"
	, "type": "typename"
	, "file": "test/lang.initRecord.ci"
	, "line": 15
	, "size": 8
	, "offs": 130688
	, "static": true
	, "const": true
}, {
	"": "Record.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "Record.Inner"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 16
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Record.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "Record.Inner"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 17
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "Record.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 22
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Record.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 28
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "Record.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 32
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 32
		, "value": "2"
	}
}, {
	"": "Record.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 37
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 37
		, "value": "3"
	}
}, {
	"": "Record.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "Record"
	, "type": "Record.Inner"
	, "file": "test/lang.initRecord.ci"
	, "line": 40
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "Record.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "Record"
	, "type": "Record.Inner"
	, "file": "test/lang.initRecord.ci"
	, "line": 43
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "Record.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 53
	, "size": 4
	, "offs": 178200
	, "static": true
	, "const": false
}, {
	"": "Record.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 57
	, "size": 4
	, "offs": 178208
	, "static": true
	, "const": false
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 57
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 57
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 57
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 57
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 57
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 57
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "Record.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "Record"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 63
	, "size": 4
	, "offs": 178216
	, "static": true
	, "const": true
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 63
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 63
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 63
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 63
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 63
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 63
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "Record.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "Record"
	, "type": "Record.Inner"
	, "file": "test/lang.initRecord.ci"
	, "line": 67
	, "size": 8
	, "offs": 178224
	, "static": true
	, "const": false
}, {
	"": "Record.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "Record"
	, "type": "Record.Inner"
	, "file": "test/lang.initRecord.ci"
	, "line": 71
	, "size": 8
	, "offs": 178232
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 51;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 71
		}, {
			"": "globalRecInit.constant := 52;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 71
		}]
	}
}, {
	"": "Record.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "Record"
	, "type": "Record.Inner"
	, "file": "test/lang.initRecord.ci"
	, "line": 77
	, "size": 8
	, "offs": 178240
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 77
		}, {
			"": "globalConstantRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 77
		}]
	}
}, {
	"": "Record.staticMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 82
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 178248
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initRecord.ci"
		, "line": 82
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 83
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 83
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 83
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 83
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178248
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178250
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 178252
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178253
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178255
		, "size": 1
	}]
}, {
	"": "Record.forwardMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 87
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 87
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 87
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 178256
	, "static": true
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "Record.virtualMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 90
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 90
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "Record.virtualMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 93
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 93
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 178264
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initRecord.ci"
		, "line": 93
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 94
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 94
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 94
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 94
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178264
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178266
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 178268
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178269
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178271
		, "size": 1
	}]
}, {
	"": "Record.abstractMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 99
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 99
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 99
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 99
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
}, {
	"": "Record.methodReference(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "methodReference"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 102
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 102
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 102
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "ast": {
		"": "staticMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.initRecord.ci"
		, "line": 102
		, "value": "staticMethod"
	}
}, {
	"": "Record.forwardMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "Record"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 105
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 105
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 105
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 178272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initRecord.ci"
		, "line": 105
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 106
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 106
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 106
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initRecord.ci"
						, "line": 106
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178272
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 178274
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 178276
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 178277
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178279
		, "size": 1
	}]
}, {
	"": "globalInitCounter2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalInitCounter2"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 110
	, "size": 8
	, "offs": 178280
	, "static": true
	, "const": false
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 110
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 110
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 110
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 110
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 110
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 110
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "initMethod(getRecord: bool): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "initMethod"
	, "type": "function"
	, "file": "test/lang.initRecord.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 112
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "getRecord"
		, "kind": "variable"
		, "cast": "bool"
		, "name": "getRecord"
		, "type": "bool"
		, "file": "test/lang.initRecord.ci"
		, "line": 112
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 178336
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.initRecord.ci"
		, "line": 112
		, "stmt": [{
			"": "initInner(getRecord: bool): int64"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/lang.initRecord.ci"
			, "line": 114
			, "value": "initInner(getRecord: bool): int64"
		}, {
			"": "return .result := initInner(getRecord);"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 127
			, "stmt": {
				"": ".result := initInner(getRecord)"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "initInner(getRecord)"
					, "kind": "()"
					, "type": "int64"
					, "file": "test/lang.initRecord.ci"
					, "line": 127
					, "args": [{
						"": "getRecord"
						, "kind": ".variable"
						, "type": "bool"
						, "file": "test/lang.initRecord.ci"
						, "line": 127
						, "value": "getRecord"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 178336
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 178337
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 178341
		, "size": 1
	}, {
		"instruction": "load.ref .02b880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178342
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 178347
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 178348
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 178352
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 178354
		, "size": 1
	}]
}, {
	"": "localNoInit"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localNoInit"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 130
	, "size": 8
	, "offs": 1220
	, "static": false
	, "const": false
}, {
	"": "localInitGlobal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localInitGlobal"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 131
	, "size": 8
	, "offs": 1228
	, "static": false
	, "const": false
	, "ast": {
		"": "globalCounter"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 131
		, "value": "globalCounter"
	}
}, {
	"": "localInitCounter"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localInitCounter"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 132
	, "size": 8
	, "offs": 1236
	, "static": false
	, "const": false
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 132
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 132
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 132
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 132
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 132
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 132
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "localInitLocal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localInitLocal"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 133
	, "size": 8
	, "offs": 1244
	, "static": false
	, "const": false
	, "ast": {
		"": "localInitCounter"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 133
		, "value": "localInitCounter"
	}
}, {
	"": "globalNoInit"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalNoInit"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 135
	, "size": 8
	, "offs": 178360
	, "static": true
	, "const": false
}, {
	"": "globalInitCounter"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalInitCounter"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 136
	, "size": 8
	, "offs": 178368
	, "static": true
	, "const": false
	, "ast": {
		"": "globalCounter := globalCounter + (1)"
		, "kind": ":="
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 136
		, "left": {
			"": "globalCounter"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 136
			, "value": "globalCounter"
		}
		, "right": {
			"": "globalCounter + (1)"
			, "kind": "+"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 136
			, "left": {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 136
				, "value": "globalCounter"
			}
			, "right": {
				"": "(1)"
				, "kind": "()"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 136
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang.initRecord.ci"
					, "line": 136
					, "value": "1"
				}]
			}
		}
	}
}, {
	"": "globalInitGlobal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "globalInitGlobal"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 137
	, "size": 8
	, "offs": 178376
	, "static": true
	, "const": false
	, "ast": {
		"": "globalCounter"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 137
		, "value": "globalCounter"
	}
}, {
	"": "localInitMethodGlobal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localInitMethodGlobal"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 140
	, "size": 8
	, "offs": 1252
	, "static": false
	, "const": false
	, "ast": {
		"": "initMethod(false)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 140
		, "args": [{
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.initRecord.ci"
			, "line": 140
			, "value": "false"
		}]
	}
}, {
	"": "localInitMethodRecordGlobal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "localInitMethodRecordGlobal"
	, "type": "int64"
	, "file": "test/lang.initRecord.ci"
	, "line": 141
	, "size": 8
	, "offs": 1260
	, "static": false
	, "const": false
	, "ast": {
		"": "initMethod(true)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.initRecord.ci"
		, "line": 141
		, "args": [{
			"": "true"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.initRecord.ci"
			, "line": 141
			, "value": "true"
		}]
	}
}, {
	"": "localObjNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "localObjNoInit"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 143
	, "size": 48
	, "offs": 1308
	, "static": false
	, "const": false
}, {
	"": "globalObjNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalObjNoInit"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 144
	, "size": 48
	, "offs": 178384
	, "static": true
	, "const": false
}, {
	"": "localObj"
	, "kind": "variable"
	, "cast": "val"
	, "name": "localObj"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 146
	, "size": 48
	, "offs": 1356
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record"
		, "stmt": [{
			"": "localObj.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 148
		}, {
			"": "localObj.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 154
		}, {
			"": "localObj.memberRec.member := (0)"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.memberRec.member"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localObj.memberRec"
					, "kind": "."
					, "type": "Record.Inner"
					, "file": "test/lang.initRecord.ci"
					, "line": 152
					, "left": {
						"": "localObj"
						, "kind": ".variable"
						, "type": "Record"
						, "file": "test/lang.initRecord.ci"
						, "line": 146
						, "value": "localObj"
					}
					, "right": {
						"": "memberRec"
						, "kind": ".variable"
						, "type": "Record.Inner"
						, "file": "test/lang.initRecord.ci"
						, "line": 152
						, "value": "memberRec"
					}
				}
				, "right": {
					"": "member"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "member"
				}
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int32"
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int64"
					, "value": "0"
				}]
			}
		}, {
			"": "localObj.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 158
		}, {
			"": "localObj.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 159
		}, {
			"": "localObj.abstractMethod := (null);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 162
		}, {
			"": "localObj.member := (0)"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.member"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 146
					, "value": "localObj"
				}
				, "right": {
					"": "member"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "member"
				}
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int32"
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int64"
					, "value": "0"
				}]
			}
		}, {
			"": "localObj.memberInit := 2"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.memberInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 146
					, "value": "localObj"
				}
				, "right": {
					"": "memberInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "memberInit"
				}
			}
			, "right": {
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 32
				, "value": "2"
			}
		}, {
			"": "localObj.constantInit := 3"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.constantInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 146
					, "value": "localObj"
				}
				, "right": {
					"": "constantInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "constantInit"
				}
			}
			, "right": {
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 37
				, "value": "3"
			}
		}, {
			"": "localObj.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "localObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 146
					, "value": "localObj"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}, {
			"": "localObj.methodReference := staticMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localObj.methodReference"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "localObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 146
					, "value": "localObj"
				}
				, "right": {
					"": "methodReference"
					, "kind": ".variable"
					, "type": "function"
					, "value": "methodReference"
				}
			}
			, "right": {
				"": "staticMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initRecord.ci"
				, "line": 102
				, "value": "staticMethod"
			}
		}]
	}
}, {
	"": "localConstObj"
	, "kind": "variable"
	, "cast": "val"
	, "name": "localConstObj"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 169
	, "size": 48
	, "offs": 1404
	, "static": false
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record"
		, "stmt": [{
			"": "localConstObj.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 170
		}, {
			"": "localConstObj.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 171
		}, {
			"": "localConstObj.memberRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 173
		}, {
			"": "localConstObj.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 174
		}, {
			"": "localConstObj.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 177
		}, {
			"": "localConstObj.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 178
		}, {
			"": "localConstObj.abstractMethod := (null);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 181
		}, {
			"": "localConstObj.memberInit := 2"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localConstObj.memberInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 169
					, "value": "localConstObj"
				}
				, "right": {
					"": "memberInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "memberInit"
				}
			}
			, "right": {
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 32
				, "value": "2"
			}
		}, {
			"": "localConstObj.constantInit := 3"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localConstObj.constantInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "localConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 169
					, "value": "localConstObj"
				}
				, "right": {
					"": "constantInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "constantInit"
				}
			}
			, "right": {
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 37
				, "value": "3"
			}
		}, {
			"": "localConstObj.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localConstObj.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "localConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 169
					, "value": "localConstObj"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}, {
			"": "localConstObj.methodReference := staticMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "localConstObj.methodReference"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "localConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 169
					, "value": "localConstObj"
				}
				, "right": {
					"": "methodReference"
					, "kind": ".variable"
					, "type": "function"
					, "value": "methodReference"
				}
			}
			, "right": {
				"": "staticMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initRecord.ci"
				, "line": 102
				, "value": "staticMethod"
			}
		}]
	}
}, {
	"": "globalObj"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalObj"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 183
	, "size": 48
	, "offs": 178432
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record"
		, "stmt": [{
			"": "globalObj.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 184
		}, {
			"": "globalObj.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 187
		}, {
			"": "globalObj.memberRec.member := (0)"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.memberRec.member"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalObj.memberRec"
					, "kind": "."
					, "type": "Record.Inner"
					, "file": "test/lang.initRecord.ci"
					, "line": 186
					, "left": {
						"": "globalObj"
						, "kind": ".variable"
						, "type": "Record"
						, "file": "test/lang.initRecord.ci"
						, "line": 183
						, "value": "globalObj"
					}
					, "right": {
						"": "memberRec"
						, "kind": ".variable"
						, "type": "Record.Inner"
						, "file": "test/lang.initRecord.ci"
						, "line": 186
						, "value": "memberRec"
					}
				}
				, "right": {
					"": "member"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "member"
				}
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int32"
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int64"
					, "value": "0"
				}]
			}
		}, {
			"": "globalObj.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 190
		}, {
			"": "globalObj.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 191
		}, {
			"": "globalObj.abstractMethod := (null);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 194
		}, {
			"": "globalObj.member := (0)"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.member"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 183
					, "value": "globalObj"
				}
				, "right": {
					"": "member"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "member"
				}
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int32"
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int64"
					, "value": "0"
				}]
			}
		}, {
			"": "globalObj.memberInit := 2"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.memberInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 183
					, "value": "globalObj"
				}
				, "right": {
					"": "memberInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "memberInit"
				}
			}
			, "right": {
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 32
				, "value": "2"
			}
		}, {
			"": "globalObj.constantInit := 3"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.constantInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 183
					, "value": "globalObj"
				}
				, "right": {
					"": "constantInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "constantInit"
				}
			}
			, "right": {
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 37
				, "value": "3"
			}
		}, {
			"": "globalObj.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "globalObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 183
					, "value": "globalObj"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}, {
			"": "globalObj.methodReference := staticMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalObj.methodReference"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "globalObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 183
					, "value": "globalObj"
				}
				, "right": {
					"": "methodReference"
					, "kind": ".variable"
					, "type": "function"
					, "value": "methodReference"
				}
			}
			, "right": {
				"": "staticMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initRecord.ci"
				, "line": 102
				, "value": "staticMethod"
			}
		}]
	}
}, {
	"": "globalConstObj"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstObj"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 196
	, "size": 48
	, "offs": 178480
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "Record"
		, "stmt": [{
			"": "globalConstObj.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 197
		}, {
			"": "globalConstObj.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 198
		}, {
			"": "globalConstObj.memberRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 200
		}, {
			"": "globalConstObj.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 201
		}, {
			"": "globalConstObj.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 204
		}, {
			"": "globalConstObj.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 205
		}, {
			"": "globalConstObj.abstractMethod := (null);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.initRecord.ci"
			, "line": 208
		}, {
			"": "globalConstObj.memberInit := 2"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalConstObj.memberInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 196
					, "value": "globalConstObj"
				}
				, "right": {
					"": "memberInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "memberInit"
				}
			}
			, "right": {
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 32
				, "value": "2"
			}
		}, {
			"": "globalConstObj.constantInit := 3"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalConstObj.constantInit"
				, "kind": "."
				, "type": "int32"
				, "left": {
					"": "globalConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 196
					, "value": "globalConstObj"
				}
				, "right": {
					"": "constantInit"
					, "kind": ".variable"
					, "type": "int32"
					, "value": "constantInit"
				}
			}
			, "right": {
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 37
				, "value": "3"
			}
		}, {
			"": "globalConstObj.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalConstObj.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "globalConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 196
					, "value": "globalConstObj"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}, {
			"": "globalConstObj.methodReference := staticMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "globalConstObj.methodReference"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "globalConstObj"
					, "kind": ".variable"
					, "type": "Record"
					, "file": "test/lang.initRecord.ci"
					, "line": 196
					, "value": "globalConstObj"
				}
				, "right": {
					"": "methodReference"
					, "kind": ".variable"
					, "type": "function"
					, "value": "methodReference"
				}
			}
			, "right": {
				"": "staticMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initRecord.ci"
				, "line": 102
				, "value": "staticMethod"
			}
		}]
	}
}, {
	"": "localObjCopy"
	, "kind": "variable"
	, "cast": "val"
	, "name": "localObjCopy"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 211
	, "size": 48
	, "offs": 1452
	, "static": false
	, "const": false
	, "ast": {
		"": "localObj"
		, "kind": ".variable"
		, "type": "Record"
		, "file": "test/lang.initRecord.ci"
		, "line": 211
		, "value": "localObj"
	}
}, {
	"": "localConstObjCopy"
	, "kind": "variable"
	, "cast": "val"
	, "name": "localConstObjCopy"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 212
	, "size": 48
	, "offs": 1500
	, "static": false
	, "const": true
	, "ast": {
		"": "localConstObj"
		, "kind": ".variable"
		, "type": "Record"
		, "file": "test/lang.initRecord.ci"
		, "line": 212
		, "value": "localConstObj"
	}
}, {
	"": "globalObjCopy"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalObjCopy"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 213
	, "size": 48
	, "offs": 178528
	, "static": true
	, "const": false
	, "ast": {
		"": "globalObj"
		, "kind": ".variable"
		, "type": "Record"
		, "file": "test/lang.initRecord.ci"
		, "line": 213
		, "value": "globalObj"
	}
}, {
	"": "globalConstObjCopy"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstObjCopy"
	, "type": "Record"
	, "file": "test/lang.initRecord.ci"
	, "line": 214
	, "size": 48
	, "offs": 178576
	, "static": true
	, "const": true
	, "ast": {
		"": "globalConstObj"
		, "kind": ".variable"
		, "type": "Record"
		, "file": "test/lang.initRecord.ci"
		, "line": 214
		, "value": "globalConstObj"
	}
}, {
	"": "localStaticCallStaticMethod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "localStaticCallStaticMethod"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 228
	, "size": 4
	, "offs": 1504
	, "static": false
	, "const": false
	, "ast": {
		"": "Record.staticMethod(2, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 228
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 228
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 228
			, "value": "5"
		}]
	}
}, {
	"": "localStaticCallForwardMethod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "localStaticCallForwardMethod"
	, "type": "int32"
	, "file": "test/lang.initRecord.ci"
	, "line": 229
	, "size": 4
	, "offs": 1508
	, "static": false
	, "const": false
	, "ast": {
		"": "Record.forwardMethod(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.initRecord.ci"
		, "line": 229
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 229
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 229
			, "value": "6"
		}]
	}
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 1512
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 1516
	, "static": false
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 1520
	, "static": false
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 1524
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 1528
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 1532
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 1536
	, "static": false
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 1540
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 1544
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 1548
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 1552
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 1556
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 1560
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 1564
	, "static": false
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 1568
	, "static": false
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 1572
	, "static": false
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 1576
	, "static": false
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 1580
	, "static": false
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 1584
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 1588
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 1592
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 1596
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 1600
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 1604
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 1608
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 1612
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 1616
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 1620
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 1624
	, "static": false
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 1628
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 1632
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 1636
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 1640
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 1644
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 1648
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 1652
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 1656
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 1660
	, "static": false
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 1664
	, "static": false
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 1668
	, "static": false
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 1672
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 1676
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 1680
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 1684
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 1688
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 1692
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 1696
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 1700
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 1704
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 1708
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 1712
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 1716
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 1720
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 1724
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 1728
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 1732
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 1736
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 1740
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 1744
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 1748
	, "static": false
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 1752
	, "static": false
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 1756
	, "static": false
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 1760
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 1764
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 1768
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 1772
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 1776
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 1780
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 1784
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 1788
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 1792
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 1796
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 1800
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 1804
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 1808
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 1812
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 1816
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 1820
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 1824
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 1828
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 1832
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 1836
	, "static": false
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 1840
	, "static": false
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 1844
	, "static": false
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 1848
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 1852
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 1856
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 1860
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 1864
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 1868
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 1872
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 1876
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 1880
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 1884
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 1888
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 1892
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 1896
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 1900
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 1904
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 1908
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 1912
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 1916
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 1920
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 1924
	, "static": false
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 1928
	, "static": false
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 1932
	, "static": false
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 1936
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 1940
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 1944
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 1948
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 1952
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 1956
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 1960
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 1964
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 1968
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 1972
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 1976
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 1980
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 1984
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 1988
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 1992
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 1996
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 2000
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 2004
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 2008
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 2012
	, "static": false
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 2016
	, "static": false
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 2020
	, "static": false
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 2024
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 2028
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 2032
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 2036
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 2040
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 2044
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 2048
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 2052
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 2056
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 2060
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 2064
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 2068
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 2072
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 2076
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 2080
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 2084
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 2088
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 2092
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 2096
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 2100
	, "static": false
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 2104
	, "static": false
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 2108
	, "static": false
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 2112
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 2116
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 2120
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 2124
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 2128
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 2132
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 2136
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 2140
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 2144
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 2148
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 2152
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 2156
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 2160
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 2164
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 2168
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 2172
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 2176
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 2184
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 2192
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 2200
	, "static": false
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 2208
	, "static": false
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 2216
	, "static": false
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 2224
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 2232
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 2240
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 2248
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 2256
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 2264
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 2272
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 2280
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 2288
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 2296
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 2300
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 2304
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 2308
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 2312
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 2316
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 2320
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 2324
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 2332
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 2340
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 2348
	, "static": false
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 2356
	, "static": false
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 2364
	, "static": false
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 2372
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 2380
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 2388
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 2396
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 2404
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 2412
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 2420
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 2428
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 2436
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 2444
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 2448
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 2452
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 2456
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 2460
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 2464
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 2468
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 2472
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 2476
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 2480
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 2484
	, "static": false
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 2488
	, "static": false
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 2492
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 2496
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 2500
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 2504
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 2508
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 2512
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 2516
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 2520
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 2524
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 2528
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 2532
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 2536
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 2544
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 2552
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 2560
	, "static": false
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 2568
	, "static": false
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 2576
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 2584
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 2592
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 2600
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 2608
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 2612
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 2616
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 2620
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 2624
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 2628
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 2632
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 2636
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 2640
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 2644
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 2648
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 2652
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "test/lang.statementIf.ci"
	, "line": 26
	, "size": 4
	, "offs": 2656
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.statementIf.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "test/lang.statementFor.ci"
	, "line": 12
	, "size": 4
	, "offs": 2660
	, "static": false
	, "const": false
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 7726
	, "offs": 178624
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 3
			, "stmt": [{
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 3
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "stdlib.ci"
					, "line": 3
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "void"
							, "file": "stdlib.ci"
							, "line": 3
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 3
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 5
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 8
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 9
						, "value": "trace(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 11
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 12
						, "value": "debug(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 14
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 15
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 17
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 18
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 20
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 21
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 23
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 24
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 25
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 27
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 28
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 29
						, "value": "assert(condition: bool): void"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "stdlib.ci"
						, "line": 32
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 48
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "sizeof(type: typename): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "test.ci"
			, "line": 4
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test.ci"
				, "line": 4
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 17
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 18
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 19
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 20
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "sum(a: int32, b: int32, c: int32): int32"
			}, {
				"": "any(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "any(a: int32, b: int32, c: int32): int32"
			}, {
				"": "min(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "min(a: int32, b: int32, c: int32): int32"
			}, {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 13
				, "value": "ma"
			}, {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 14
				, "value": "mb"
			}, {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 15
				, "value": "mc"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 17
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 18
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 21
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 22
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 25
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 26
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 29
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 30
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 33
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 34
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "min2Xpr"
			}, {
				"": "sum3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 37
				, "value": "sum3Val"
			}, {
				"": "sum3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 38
				, "value": "sum3Var"
			}, {
				"": "sum3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "sum3Xpr"
			}, {
				"": "any3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 41
				, "value": "any3Val"
			}, {
				"": "any3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 42
				, "value": "any3Var"
			}, {
				"": "any3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "any3Xpr"
			}, {
				"": "min3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 45
				, "value": "min3Val"
			}, {
				"": "min3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 46
				, "value": "min3Var"
			}, {
				"": "min3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "min3Xpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "test/test.inlineOverload.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "test/test.inlineOverload.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.initByRef.ci"
				, "line": 3
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.initByRef.ci"
							, "line": 3
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initByRef.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "test/lang.initByRef.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 3
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 6
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 11
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 14
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 17
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 20
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 23
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 26
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 29
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 32
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 37
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.function.ci"
				, "line": 45
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflection.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflection.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflection.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflection.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflection.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflection.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "sinF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "sinF64"
			}, {
				"": "cosF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "cosF64"
			}, {
				"": "tanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "tanF64"
			}, {
				"": "logF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "logF64"
			}, {
				"": "expF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 41
				, "value": "expF64"
			}, {
				"": "powF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "powF64"
			}, {
				"": "sqrtF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "sqrtF64"
			}, {
				"": "atanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 44
				, "value": "atanF64"
			}, {
				"": "sinF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "sinF32"
			}, {
				"": "cosF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "cosF32"
			}, {
				"": "tanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "tanF32"
			}, {
				"": "logF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "logF32"
			}, {
				"": "expF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 50
				, "value": "expF32"
			}, {
				"": "powF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "powF32"
			}, {
				"": "sqrtF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "sqrtF32"
			}, {
				"": "atanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 53
				, "value": "atanF32"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 19
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 23
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 37
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 42
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 46
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 47
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 48
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 49
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 50
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 51
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 52
				, "value": "tryExecErr6"
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.record.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.record.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.record.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.record.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.record.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.record.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.record.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.record.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.record.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 3
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.initArray.ci"
					, "line": 3
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.initArray.ci"
						, "line": 3
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.initArray.ci"
							, "line": 3
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.initArray.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initArray.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.initArray.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedNoInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "test/lang.initArray.ci"
				, "line": 8
				, "value": "arrFixedNoInit"
			}, {
				"": "arrArrayNoInit"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 9
				, "value": "arrArrayNoInit"
			}, {
				"": "arrSliceNoInit"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.initArray.ci"
				, "line": 10
				, "value": "arrSliceNoInit"
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 13
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.initArray.ci"
					, "line": 13
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.initArray.ci"
					, "line": 13
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 13
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 13
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.initArray.ci"
							, "line": 13
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 13
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.initArray.ci"
					, "line": 13
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 13
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 13
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 13
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initArray.ci"
					, "line": 13
					, "stmt": [{
						"": "arrFixedNoInit[i] := (42 + i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 14
					}]
				}
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 18
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.initArray.ci"
				, "line": 19
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 22
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.initArray.ci"
				, "line": 23
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 26
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.initArray.ci"
				, "line": 27
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 30
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "test/lang.initArray.ci"
				, "line": 40
				, "value": "strFixed"
			}, {
				"": "pointer.copy(strFixed, pointer(\"string\"), 7);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 41
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 42
			}, {
				"": "debug(\"string to variant\", variant(strFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 43
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.initArray.ci"
				, "line": 45
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 46
			}, {
				"": "debug(\"string to variant\", variant(strArray));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 47
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.initArray.ci"
				, "line": 49
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 50
			}, {
				"": "debug(\"string to variant\", variant(strSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 51
			}, {
				"": "assert(arrSliceNoInit.length >= (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 57
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 58
			}, {
				"": "assert(arrFixedNoInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 60
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initArray.ci"
				, "line": 62
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initArray.ci"
				, "line": 63
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initArray.ci"
				, "line": 64
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initArray.ci"
				, "line": 65
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedNoInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 67
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 68
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 69
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 71
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 72
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 73
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 74
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 75
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.initArray.ci"
				, "line": 77
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.initArray.ci"
					, "line": 77
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.initArray.ci"
					, "line": 77
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 77
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 77
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.initArray.ci"
							, "line": 77
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 77
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.initArray.ci"
					, "line": 77
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 77
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.initArray.ci"
						, "line": 77
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 77
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.initArray.ci"
							, "line": 77
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initArray.ci"
					, "line": 77
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "test/lang.initArray.ci"
						, "line": 78
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedNoInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 79
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 80
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 81
					}, {
						"": "assert(expected == nthFixed(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 83
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 84
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 85
					}, {
						"": "assert(expected == nthArray(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 87
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 88
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 89
					}, {
						"": "assert(expected == nthSlice(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 91
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 93
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.initArray.ci"
						, "line": 95
					}]
				}
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.initRecord.ci"
				, "line": 4
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.initRecord.ci"
					, "line": 4
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.initRecord.ci"
						, "line": 4
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.initRecord.ci"
							, "line": 4
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.initRecord.ci"
						, "line": 4
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initRecord.ci"
					, "line": 4
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.initRecord.ci"
						, "line": 5
						, "value": "integer"
					}]
				}
			}, {
				"": "globalCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 8
				, "value": "globalCounter"
			}, {
				"": "globalInitCounter1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 10
				, "value": "globalInitCounter1"
			}, {
				"": "Record"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initRecord.ci"
				, "line": 12
				, "value": "Record"
			}, {
				"": "globalInitCounter2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 110
				, "value": "globalInitCounter2"
			}, {
				"": "initMethod(getRecord: bool): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initRecord.ci"
				, "line": 112
				, "value": "initMethod(getRecord: bool): int64"
			}, {
				"": "localNoInit"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 130
				, "value": "localNoInit"
			}, {
				"": "localInitGlobal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 131
				, "value": "localInitGlobal"
			}, {
				"": "localInitCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 132
				, "value": "localInitCounter"
			}, {
				"": "localInitLocal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 133
				, "value": "localInitLocal"
			}, {
				"": "globalNoInit"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 135
				, "value": "globalNoInit"
			}, {
				"": "globalInitCounter"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 136
				, "value": "globalInitCounter"
			}, {
				"": "globalInitGlobal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 137
				, "value": "globalInitGlobal"
			}, {
				"": "localInitMethodGlobal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 140
				, "value": "localInitMethodGlobal"
			}, {
				"": "localInitMethodRecordGlobal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initRecord.ci"
				, "line": 141
				, "value": "localInitMethodRecordGlobal"
			}, {
				"": "localObjNoInit"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 143
				, "value": "localObjNoInit"
			}, {
				"": "globalObjNoInit"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 144
				, "value": "globalObjNoInit"
			}, {
				"": "localObj"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 146
				, "value": "localObj"
			}, {
				"": "localConstObj"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 169
				, "value": "localConstObj"
			}, {
				"": "globalObj"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 183
				, "value": "globalObj"
			}, {
				"": "globalConstObj"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 196
				, "value": "globalConstObj"
			}, {
				"": "localObjCopy"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 211
				, "value": "localObjCopy"
			}, {
				"": "localConstObjCopy"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 212
				, "value": "localConstObjCopy"
			}, {
				"": "globalObjCopy"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 213
				, "value": "globalObjCopy"
			}, {
				"": "globalConstObjCopy"
				, "kind": ".variable"
				, "type": "Record"
				, "file": "test/lang.initRecord.ci"
				, "line": 214
				, "value": "globalConstObjCopy"
			}, {
				"": "localStaticCallStaticMethod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 228
				, "value": "localStaticCallStaticMethod"
			}, {
				"": "localStaticCallForwardMethod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.initRecord.ci"
				, "line": 229
				, "value": "localStaticCallForwardMethod"
			}, {
				"": "assert(globalCounter == (33 + 8));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.initRecord.ci"
				, "line": 245
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementIf.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 73
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 73
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.statementFor.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 28
					}]
				}
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178624
		, "size": 9
	}, {
		"instruction": "store.m64 .02b6f0"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178633
		, "size": 4
	}, {
		"instruction": "load.c64 33"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178637
		, "size": 9
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178646
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178650
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178654
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178663
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178664
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178666
		, "size": 4
	}, {
		"instruction": "store.m64 .02b810"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178670
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178674
		, "size": 1
	}, {
		"instruction": "store.m32 .02b818"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178675
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178679
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178683
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178692
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178693
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178695
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 178699
		, "size": 1
	}, {
		"instruction": "store.m32 .02b820"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178700
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178704
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178708
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178717
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178718
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178720
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 178724
		, "size": 1
	}, {
		"instruction": "store.m32 .02b828"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178725
		, "size": 4
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178729
		, "size": 5
	}, {
		"instruction": "store.m32 .02b838"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178734
		, "size": 4
	}, {
		"instruction": "load.c32 52"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178738
		, "size": 5
	}, {
		"instruction": "store.m32 .02b83c"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178743
		, "size": 4
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178747
		, "size": 5
	}, {
		"instruction": "store.m32 .02b840"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178752
		, "size": 4
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178756
		, "size": 5
	}, {
		"instruction": "store.m32 .02b844"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178761
		, "size": 4
	}, {
		"instruction": "load.ref .02b860"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178765
		, "size": 5
	}, {
		"instruction": "store.m32 .02b850"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178770
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178774
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178778
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178787
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178788
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178790
		, "size": 4
	}, {
		"instruction": "store.m64 .02b868"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178794
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178798
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178802
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178811
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178812
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178814
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 178818
		, "size": 1
	}, {
		"instruction": "store.m32 .02b870"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178819
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178823
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178827
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178836
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178837
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178839
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 178843
		, "size": 1
	}, {
		"instruction": "store.m32 .02b878"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178844
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 178848
		, "size": 1
	}, {
		"instruction": "store.m64 .02b8b8"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178849
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178853
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 178857
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 178866
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 178867
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178869
		, "size": 4
	}, {
		"instruction": "store.m64 .02b8c0"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178873
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 178877
		, "size": 4
	}, {
		"instruction": "store.m64 .02b8c8"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 178881
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178885
		, "size": 5
	}, {
		"instruction": "store.m32 .02b904"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178890
		, "size": 4
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178894
		, "size": 5
	}, {
		"instruction": "store.m32 .02b914"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178899
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178903
		, "size": 1
	}, {
		"instruction": "store.m32 .02b910"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178904
		, "size": 4
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178908
		, "size": 5
	}, {
		"instruction": "store.m32 .02b918"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178913
		, "size": 4
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178917
		, "size": 5
	}, {
		"instruction": "store.m32 .02b91c"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178922
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178926
		, "size": 5
	}, {
		"instruction": "store.m32 .02b924"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178931
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 178935
		, "size": 1
	}, {
		"instruction": "store.m32 .02b900"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178936
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178940
		, "size": 5
	}, {
		"instruction": "store.m32 .02b908"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178945
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178949
		, "size": 5
	}, {
		"instruction": "store.m32 .02b90c"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178954
		, "size": 4
	}, {
		"instruction": "load.ref .02b858"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178958
		, "size": 5
	}, {
		"instruction": "store.m32 .02b920"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178963
		, "size": 4
	}, {
		"instruction": "load.ref .02b848"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 178967
		, "size": 5
	}, {
		"instruction": "store.m32 .02b928"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178972
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178976
		, "size": 5
	}, {
		"instruction": "store.m32 .02b930"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178981
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178985
		, "size": 5
	}, {
		"instruction": "store.m32 .02b934"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178990
		, "size": 4
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 178994
		, "size": 5
	}, {
		"instruction": "store.m32 .02b940"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 178999
		, "size": 4
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179003
		, "size": 5
	}, {
		"instruction": "store.m32 .02b944"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179008
		, "size": 4
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179012
		, "size": 5
	}, {
		"instruction": "store.m32 .02b948"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179017
		, "size": 4
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179021
		, "size": 5
	}, {
		"instruction": "store.m32 .02b94c"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179026
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179030
		, "size": 5
	}, {
		"instruction": "store.m32 .02b954"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179035
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179039
		, "size": 5
	}, {
		"instruction": "store.m32 .02b938"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179044
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179048
		, "size": 5
	}, {
		"instruction": "store.m32 .02b93c"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179053
		, "size": 4
	}, {
		"instruction": "load.ref .02b858"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179057
		, "size": 5
	}, {
		"instruction": "store.m32 .02b950"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179062
		, "size": 4
	}, {
		"instruction": "load.ref .02b848"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179066
		, "size": 5
	}, {
		"instruction": "store.m32 .02b958"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 179071
		, "size": 4
	}, {
		"instruction": "load.ref .02b900"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179075
		, "size": 5
	}, {
		"instruction": "load.sp(-44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179080
		, "size": 4
	}, {
		"instruction": "copy.mem -48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 179084
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179088
		, "size": 4
	}, {
		"instruction": "load.ref .02b960"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179092
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179097
		, "size": 4
	}, {
		"instruction": "copy.mem 48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 179101
		, "size": 4
	}, {
		"instruction": "inc.sp(-48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179105
		, "size": 4
	}, {
		"instruction": "load.ref .02b930"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179109
		, "size": 5
	}, {
		"instruction": "load.sp(-44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179114
		, "size": 4
	}, {
		"instruction": "copy.mem -48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 179118
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179122
		, "size": 4
	}, {
		"instruction": "load.ref .02b990"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179126
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 179131
		, "size": 4
	}, {
		"instruction": "copy.mem 48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 179135
		, "size": 4
	}, {
		"instruction": "inc.sp(-48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179139
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179143
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 179144
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179145
		, "size": 5
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179150
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179155
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179157
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179159
		, "size": 1
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179160
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179165
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 179170
		, "size": 1
	}, {
		"instruction": "load.f64 3.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179171
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179180
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 179189
		, "size": 1
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 179190
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 179191
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179195
		, "size": 5
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179200
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 179205
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179206
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 179215
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179216
		, "size": 9
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179225
		, "size": 5
	}, {
		"instruction": "load.ref .00ed0d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179230
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179235
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179240
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179245
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179250
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179251
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 179252
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179253
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179258
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179260
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179262
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179264
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179265
		, "size": 5
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 179270
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179274
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179276
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179278
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179279
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179281
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179283
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179284
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179286
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179288
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179289
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179290
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179295
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179297
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179301
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179303
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179307
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179312
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179314
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179316
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179318
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179322
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179324
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179328
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179330
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179332
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179334
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179336
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179337
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179339
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179343
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179345
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179349
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179351
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179353
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179354
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179356
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179361
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179366
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179368
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179370
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179371
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179375
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179377
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179381
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179383
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179385
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179389
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179391
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179393
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179395
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179397
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179398
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179402
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179404
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179408
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179410
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179412
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179416
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179418
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179420
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179421
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179423
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179425
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179426
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179428
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179430
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179431
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179435
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179437
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179441
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179443
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179445
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179449
		, "size": 5
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 179454
		, "size": 4
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 179458
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179462
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179464
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179466
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179467
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179469
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179470
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179472
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179474
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179475
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179477
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179479
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179480
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179481
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179483
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179485
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179486
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179487
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179492
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179494
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179498
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179500
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179504
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179509
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179511
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179513
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179517
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179519
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179523
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179528
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179530
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179532
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179534
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179538
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179540
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179544
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179546
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179548
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179550
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179554
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179556
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179560
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179562
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179564
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179566
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179568
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179569
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179571
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179575
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179577
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179581
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179583
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179585
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179586
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179588
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179590
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179594
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179596
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179600
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179602
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179604
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179605
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179607
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179612
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179617
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179619
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179621
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179622
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179626
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179628
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179632
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179634
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179636
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 179640
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179645
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179647
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179649
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179650
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179654
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179656
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179660
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179662
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179664
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179668
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179670
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179672
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179674
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179676
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179677
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179681
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179683
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179687
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179689
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179691
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179695
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179697
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179699
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179701
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179702
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179706
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179708
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179712
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179714
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179716
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179720
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179722
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179724
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179725
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179727
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179729
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179730
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179732
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179734
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179735
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179739
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179741
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179745
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179747
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179749
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179753
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179755
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 179757
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179758
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179760
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 179762
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 179763
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179767
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 179769
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179773
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 179775
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 179777
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179781
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179786
		, "size": 5
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179791
		, "size": 5
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179796
		, "size": 5
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 179801
		, "size": 5
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179806
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179815
		, "size": 2
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179817
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 179826
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 179827
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 179836
		, "size": 1
	}, {
		"instruction": "load.ref .02b6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179837
		, "size": 5
	}, {
		"instruction": "load.ref .02b6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179842
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179847
		, "size": 5
	}, {
		"instruction": "load.ref .02b6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179852
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179857
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 179859
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179860
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179862
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179864
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179869
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179874
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179879
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179884
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179889
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179894
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179899
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179904
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179909
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179914
		, "size": 5
	}, {
		"instruction": "load.m64 .02b6f0"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 179919
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179923
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179925
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179927
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 179929
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 179931
		, "size": 2
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179933
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179938
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179943
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179948
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179953
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179958
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179963
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179968
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179973
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179978
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179983
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179988
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179993
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 179998
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180003
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180008
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180013
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180018
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180023
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180028
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180033
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180038
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180043
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180048
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180053
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180058
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180063
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180068
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180073
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180078
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180083
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180088
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180093
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180098
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180103
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180108
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180113
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180118
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180123
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180128
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180133
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180138
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180143
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180148
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180153
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180158
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180163
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180168
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180173
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180178
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180183
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180188
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180193
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180198
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180203
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180208
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180213
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180218
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180223
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180228
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180233
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180238
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180243
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180248
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180253
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180258
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180263
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180268
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180273
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180278
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180283
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180288
		, "size": 5
	}, {
		"instruction": "load.ref .02b6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180293
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180298
		, "size": 5
	}, {
		"instruction": "load.ref .02b6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180303
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180308
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180313
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180318
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(65)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180323
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180325
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180327
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180328
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180333
		, "size": 5
	}, {
		"instruction": "load.ref .02b700"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180338
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 180343
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180344
		, "size": 4
	}, {
		"instruction": "load.ref .02b700"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180348
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180353
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180354
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180359
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180364
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 180366
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180367
		, "size": 4
	}, {
		"instruction": "load.ref .02b708"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180371
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180376
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180377
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180382
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180387
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 180389
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180390
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180394
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180396
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180397
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180402
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180407
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 180409
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180410
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180414
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180415
		, "size": 5
	}, {
		"instruction": "load.ref .02b710"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180420
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 180425
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 180426
		, "size": 4
	}, {
		"instruction": "load.m32 .0000b8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180430
		, "size": 4
	}, {
		"instruction": "load.m32 .000148"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180434
		, "size": 4
	}, {
		"instruction": "load.m32 .0001d8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180438
		, "size": 4
	}, {
		"instruction": "load.m32 .000268"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180442
		, "size": 4
	}, {
		"instruction": "load.m32 .0002f8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180446
		, "size": 4
	}, {
		"instruction": "load.m32 .000388"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180450
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180454
		, "size": 4
	}, {
		"instruction": "load.m32 .0004a8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180458
		, "size": 4
	}, {
		"instruction": "load.m32 .000538"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180462
		, "size": 4
	}, {
		"instruction": "load.m32 .0005c8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180466
		, "size": 4
	}, {
		"instruction": "load.m32 .000658"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180470
		, "size": 4
	}, {
		"instruction": "load.m32 .0006e8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180474
		, "size": 4
	}, {
		"instruction": "load.m32 .000778"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180478
		, "size": 4
	}, {
		"instruction": "load.m32 .000808"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180482
		, "size": 4
	}, {
		"instruction": "load.m32 .000898"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180486
		, "size": 4
	}, {
		"instruction": "load.m32 .000020"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180490
		, "size": 4
	}, {
		"instruction": "load.m32 .000928"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180494
		, "size": 4
	}, {
		"instruction": "load.m32 .0009c0"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 180498
		, "size": 4
	}, {
		"instruction": "load.ref .0178a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 180502
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180507
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180509
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180513
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180515
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180519
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180520
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180522
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180526
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180527
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180529
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180533
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180535
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180539
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180541
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180545
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180547
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180551
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180553
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180557
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180558
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180560
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180564
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180565
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180567
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180571
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180573
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180577
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180579
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180583
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180585
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180589
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180590
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180592
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180596
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180597
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180599
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180603
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180605
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180609
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180610
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 180612
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 180616
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180617
		, "size": 9
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180626
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180635
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 180637
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180638
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 180640
		, "size": 1
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180641
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180646
		, "size": 2
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180648
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180653
		, "size": 2
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180655
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180660
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180662
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180664
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180666
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 180671
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180672
		, "size": 2
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180674
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180676
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 180681
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 180682
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180683
		, "size": 2
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180685
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180687
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 180689
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180690
		, "size": 2
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180692
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180694
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 180699
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180700
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180702
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180704
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 180709
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 180710
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180711
		, "size": 2
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 180713
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 180715
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180716
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180718
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180723
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180728
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180732
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180734
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180739
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180744
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180748
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180750
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180751
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180756
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180760
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180762
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180767
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180772
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180776
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180778
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180783
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180788
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180792
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180794
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180795
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180800
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180804
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180806
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180811
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180816
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180820
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180822
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180827
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180832
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180836
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180838
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180839
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180844
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180848
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180850
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180855
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180860
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180864
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180866
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180871
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180876
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 180880
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 180882
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 180883
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180888
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180892
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180894
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 180903
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180904
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(23)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180908
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180910
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 180919
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180920
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180924
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180926
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 180935
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180936
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180940
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180942
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 180944
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180945
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 180947
		, "size": 1
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180948
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180952
		, "size": 9
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180961
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180965
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180967
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 180969
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180970
		, "size": 9
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180979
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180983
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180985
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 180987
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 180988
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 180992
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 180994
		, "size": 9
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181003
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(34)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181007
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181009
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 181014
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181015
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181019
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181021
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 181026
		, "size": 1
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181027
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181031
		, "size": 2
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181033
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 181038
		, "size": 1
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181039
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181043
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181045
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 181047
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181048
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 181050
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181051
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181055
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181060
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(39)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181064
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181066
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 181068
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181069
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181074
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181078
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181080
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 181082
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181083
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181087
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 181089
		, "size": 5
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181094
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181098
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181103
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181108
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181112
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181117
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181122
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181126
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181131
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181136
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181140
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181145
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181150
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181154
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181156
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181157
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181162
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181166
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181170
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181172
		, "size": 2
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181174
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181179
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181183
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181187
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181189
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181190
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181194
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181198
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181200
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181201
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181205
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181209
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181211
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181212
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181216
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181220
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181222
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181223
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181227
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 181231
		, "size": 9
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 181240
		, "size": 9
	}, {
		"instruction": "load.ref .00eb0f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181249
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181254
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181259
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181264
		, "size": 1
	}, {
		"instruction": "load.ref .019f85"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181265
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181270
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181275
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181279
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181283
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181288
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181293
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181298
		, "size": 1
	}, {
		"instruction": "load.ref .019f8a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181299
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181304
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181309
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181313
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181317
		, "size": 4
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181321
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 181325
		, "size": 4
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181329
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181333
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181337
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181341
		, "size": 1
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 181342
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181346
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181350
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181354
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181359
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181364
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181369
		, "size": 1
	}, {
		"instruction": "load.ref .019f85"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181370
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181375
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181380
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181384
		, "size": 4
	}, {
		"instruction": "load.ref .00eb0f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181388
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181393
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181398
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181403
		, "size": 1
	}, {
		"instruction": "load.ref .019f8a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181404
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181409
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181414
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181418
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181422
		, "size": 5
	}, {
		"instruction": "load.ref .02b748"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181427
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181432
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181436
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181441
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181446
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181450
		, "size": 5
	}, {
		"instruction": "load.ref .02b750"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181455
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181460
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181464
		, "size": 5
	}, {
		"instruction": "load.ref .02b768"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181469
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181474
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181478
		, "size": 5
	}, {
		"instruction": "load.ref .02b7c8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181483
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181488
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181492
		, "size": 5
	}, {
		"instruction": "load.ref .02b7b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181497
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181502
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181506
		, "size": 5
	}, {
		"instruction": "load.ref .02b778"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181511
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181516
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181520
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181524
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181525
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181529
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181530
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181531
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181535
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181536
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181537
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181541
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181542
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181546
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181547
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181551
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181552
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181557
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181561
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181562
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181563
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181567
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181568
		, "size": 4
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181572
		, "size": 5
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181577
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181581
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181582
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181587
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181591
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181592
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181597
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181601
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181602
		, "size": 4
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181606
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 181611
		, "size": 2
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181613
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181617
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181618
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181622
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181623
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181624
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181628
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181629
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181634
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 181638
		, "size": 1
	}, {
		"instruction": "inc.sp(+56)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181639
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181643
		, "size": 4
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181647
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181651
		, "size": 1
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 181652
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181656
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181661
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 181663
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 181664
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181665
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181669
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 181671
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 181675
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 181676
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181680
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181682
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 181687
		, "size": 1
	}, {
		"instruction": "jnz -32"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 181688
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181692
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181696
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181701
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181702
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181707
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181711
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181716
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181720
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 181722
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181724
		, "size": 2
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181726
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181730
		, "size": 4
	}, {
		"instruction": "load.ref .00ed0d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181734
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181739
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181744
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 181748
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181752
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181757
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181762
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181767
		, "size": 1
	}, {
		"instruction": "load.ref .01ddc2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181768
		, "size": 5
	}, {
		"instruction": "load.ref .01ea60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181773
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181778
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181782
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181786
		, "size": 5
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181791
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181796
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181801
		, "size": 1
	}, {
		"instruction": "load.ref .01ddd4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181802
		, "size": 5
	}, {
		"instruction": "load.ref .01ea60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181807
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 181812
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181816
		, "size": 4
	}, {
		"instruction": "load.ref .00ed0d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181820
		, "size": 5
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181825
		, "size": 5
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181830
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181835
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181840
		, "size": 1
	}, {
		"instruction": "load.ref .01ddc2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181841
		, "size": 5
	}, {
		"instruction": "load.ref .01ebf8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181846
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181851
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181853
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181857
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181862
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181867
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181872
		, "size": 1
	}, {
		"instruction": "load.ref .01ddd4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181873
		, "size": 5
	}, {
		"instruction": "load.ref .01ebf8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181878
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181883
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181885
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181889
		, "size": 5
	}, {
		"instruction": "load.ref .00ed0d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181894
		, "size": 5
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181899
		, "size": 5
	}, {
		"instruction": "load.c32 50"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181904
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181909
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181914
		, "size": 1
	}, {
		"instruction": "load.ref .01ddc2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181915
		, "size": 5
	}, {
		"instruction": "load.ref .01ed08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181920
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181925
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181927
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181931
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181936
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181941
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181946
		, "size": 1
	}, {
		"instruction": "load.ref .01ddd4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181947
		, "size": 5
	}, {
		"instruction": "load.ref .01ed08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181952
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181957
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 181959
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 181963
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 181965
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 181966
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 181967
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 181971
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181975
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181980
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181985
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 181990
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 181995
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182000
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182005
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182010
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182014
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182016
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 182017
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182018
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182022
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182026
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182031
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182036
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182041
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182046
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182051
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182056
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182061
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182065
		, "size": 2
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 182067
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182076
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182077
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182081
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182085
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182090
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182095
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182100
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182105
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182110
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182115
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182120
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182124
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182129
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182134
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182139
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182144
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182145
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182149
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182154
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182156
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182161
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182166
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182167
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182171
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182176
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182178
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182183
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182188
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182189
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182193
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182194
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182195
		, "size": 5
	}, {
		"instruction": "load.ref .02b7d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182200
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182205
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182206
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182210
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182215
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182220
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182221
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182225
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182226
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182227
		, "size": 2
	}, {
		"instruction": "load.ref .02b7d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182229
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182234
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182235
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182239
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182244
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182249
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182250
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182254
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182259
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182260
		, "size": 5
	}, {
		"instruction": "load.sp(+84)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 182265
		, "size": 4
	}, {
		"instruction": "load.ref .02b7d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182269
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182274
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182275
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182279
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182284
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182289
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182290
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182294
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182299
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182300
		, "size": 2
	}, {
		"instruction": "load.ref .02b7d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182302
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182307
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182308
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182312
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182317
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182322
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182323
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182327
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182332
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182333
		, "size": 2
	}, {
		"instruction": "load.ref .02b7d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182335
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182340
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182341
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182345
		, "size": 5
	}, {
		"instruction": "load.ref .02b6a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182350
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182355
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182356
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 182360
		, "size": 1
	}, {
		"instruction": "jmp +790"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182361
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182365
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182370
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 182372
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 182373
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182374
		, "size": 2
	}, {
		"instruction": "load.sp(+92)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 182376
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182380
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 182382
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 182386
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182387
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182388
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182392
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182396
		, "size": 5
	}, {
		"instruction": "load.c32 79"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182401
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182406
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182411
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182416
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182421
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182426
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182431
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182435
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182437
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182439
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 182441
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 182445
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182446
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182447
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182451
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182455
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182460
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182465
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182470
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182475
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182480
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182485
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182490
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182494
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182496
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182498
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 182500
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 182504
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182505
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182506
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182510
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182514
		, "size": 5
	}, {
		"instruction": "load.c32 81"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182519
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182524
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182529
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182534
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182539
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182544
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182549
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182553
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182555
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182556
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 182558
		, "size": 4
	}, {
		"instruction": "load.ref .02b7d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182562
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182567
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182568
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182572
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182573
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182577
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182581
		, "size": 5
	}, {
		"instruction": "load.c32 83"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182586
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182591
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182596
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182601
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182606
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182611
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182616
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182620
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182622
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182623
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182625
		, "size": 2
	}, {
		"instruction": "load.ref .02b7d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182627
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182632
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182633
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182637
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182638
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182642
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182646
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182651
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182656
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182661
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182666
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182671
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182676
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182681
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182685
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182687
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182688
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182690
		, "size": 2
	}, {
		"instruction": "load.ref .02b7d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182692
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182697
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182698
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182702
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182703
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182707
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182711
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182716
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182721
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182726
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182731
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182736
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182741
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182746
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182750
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182752
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182753
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 182755
		, "size": 4
	}, {
		"instruction": "load.ref .02b7e8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182759
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182764
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182765
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182769
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182770
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182774
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182778
		, "size": 5
	}, {
		"instruction": "load.c32 87"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182783
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182788
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182793
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182798
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182803
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182808
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182813
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182817
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182819
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182820
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182822
		, "size": 2
	}, {
		"instruction": "load.ref .02b7e8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182824
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182829
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182830
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182834
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182835
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182839
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182843
		, "size": 5
	}, {
		"instruction": "load.c32 88"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182848
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182853
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182858
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182863
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182868
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182873
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182878
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182882
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182884
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182885
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182887
		, "size": 2
	}, {
		"instruction": "load.ref .02b7e8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182889
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182894
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182895
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182899
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182900
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182904
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182908
		, "size": 5
	}, {
		"instruction": "load.c32 89"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182913
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182918
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182923
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182928
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182933
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182938
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 182943
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 182947
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 182949
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 182950
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182952
		, "size": 5
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 182957
		, "size": 4
	}, {
		"instruction": "load.ref .02b7f8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182961
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 182966
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 182967
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 182971
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 182972
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 182976
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 182980
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182985
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182990
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 182995
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183000
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183005
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183010
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 183015
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 183019
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 183021
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183022
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 183024
		, "size": 2
	}, {
		"instruction": "load.ref .02b7f8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183026
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 183031
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183032
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 183036
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 183037
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 183041
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183045
		, "size": 5
	}, {
		"instruction": "load.c32 93"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183050
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183055
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183060
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183065
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183070
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183075
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 183080
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 183084
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183086
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183088
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 183090
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 183094
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 183095
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 183096
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 183100
		, "size": 4
	}, {
		"instruction": "load.ref .00eb64"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183104
		, "size": 5
	}, {
		"instruction": "load.c32 95"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183109
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183114
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183119
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183124
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183129
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183134
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 183139
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183143
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 183147
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183151
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183153
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 183158
		, "size": 1
	}, {
		"instruction": "jnz -794"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 183159
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183163
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 183167
		, "size": 1
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 183168
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 183172
		, "size": 4
	}, {
		"instruction": "load.c64 1"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 183176
		, "size": 9
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 183185
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 183186
		, "size": 2
	}, {
		"instruction": "store.m64 .02b808"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 183188
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 183192
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1a"
		, "offs": 183194
		, "size": 1
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 183195
		, "size": 1
	}, {
		"instruction": "load.ref .02b8a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183196
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 183201
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183202
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 183206
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183207
		, "size": 5
	}, {
		"instruction": "load.ref .02b8a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183212
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 183217
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183218
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183222
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183226
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183230
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183235
		, "size": 2
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183237
		, "size": 5
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183242
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 183244
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183245
		, "size": 2
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183247
		, "size": 5
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183252
		, "size": 2
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183254
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183259
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183261
		, "size": 5
	}, {
		"instruction": "set.x1 sp(10)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183266
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 183268
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183269
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183271
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183276
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183278
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183283
		, "size": 2
	}, {
		"instruction": "load.ref .02b858"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183285
		, "size": 5
	}, {
		"instruction": "set.x1 sp(9)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183290
		, "size": 2
	}, {
		"instruction": "load.ref .02b848"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183292
		, "size": 5
	}, {
		"instruction": "set.x1 sp(11)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183297
		, "size": 2
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183299
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183303
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183308
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183310
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183315
		, "size": 2
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183317
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183322
		, "size": 2
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183324
		, "size": 5
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183329
		, "size": 2
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183331
		, "size": 5
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183336
		, "size": 2
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183338
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183343
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183345
		, "size": 5
	}, {
		"instruction": "set.x1 sp(10)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183350
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183352
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183357
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183359
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183364
		, "size": 2
	}, {
		"instruction": "load.ref .02b858"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183366
		, "size": 5
	}, {
		"instruction": "set.x1 sp(9)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183371
		, "size": 2
	}, {
		"instruction": "load.ref .02b848"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183373
		, "size": 5
	}, {
		"instruction": "set.x1 sp(11)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 183378
		, "size": 2
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183380
		, "size": 4
	}, {
		"instruction": "load.sp(-44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183384
		, "size": 4
	}, {
		"instruction": "copy.mem -48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 183388
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183392
		, "size": 4
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183396
		, "size": 4
	}, {
		"instruction": "load.sp(-44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183400
		, "size": 4
	}, {
		"instruction": "copy.mem -48"
		, "name": "copy.mem"
		, "code": "0x2f"
		, "offs": 183404
		, "size": 4
	}, {
		"instruction": "inc.sp(+48)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183408
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 183412
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183413
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183418
		, "size": 5
	}, {
		"instruction": "load.ref .02b848"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183423
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 183428
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183429
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 183433
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183434
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183439
		, "size": 5
	}, {
		"instruction": "load.m32 .02b850"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 183444
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 183448
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 183449
		, "size": 4
	}, {
		"instruction": "load.m64 .02b808"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 183453
		, "size": 4
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183457
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 183462
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 183466
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 183467
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 183468
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 183472
		, "size": 4
	}, {
		"instruction": "load.ref .00eb7b"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183476
		, "size": 5
	}, {
		"instruction": "load.c32 245"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183481
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183486
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183491
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183496
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183501
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 183506
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 183511
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183515
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183520
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 183525
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183526
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183527
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183531
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183532
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183536
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 183537
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183538
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183542
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183543
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183547
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 183548
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183549
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183553
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183554
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183558
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 183559
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183560
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183564
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183565
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183566
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183570
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183571
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183575
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 183576
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183577
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183581
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183582
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 183587
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183588
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183589
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183593
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183594
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183598
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 183599
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183600
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183604
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183605
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183609
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 183610
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183611
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183612
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183616
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183617
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183621
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 183622
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183623
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183627
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183628
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183632
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 183633
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183634
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183635
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183640
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183645
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183649
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183650
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183654
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 183655
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183656
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183660
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 183661
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183662
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183666
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183667
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183671
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 183672
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183673
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183677
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183678
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183682
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 183683
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183684
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183688
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183689
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183693
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 183694
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183695
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183699
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183700
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183704
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 183705
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183706
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183710
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183711
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183715
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 183716
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183717
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183721
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183722
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183726
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 183727
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183728
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183732
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183733
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183737
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 183738
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183739
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183743
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183744
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183748
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 183749
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183750
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183754
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183755
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 183757
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183758
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183762
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183763
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 183765
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183766
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183770
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 183771
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183772
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183773
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183777
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183778
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183782
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 183783
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183784
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183788
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183789
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183793
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 183794
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183795
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183796
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183800
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183801
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183805
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 183806
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183807
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183811
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183812
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183816
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 183817
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183818
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183819
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183823
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183824
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183828
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 183829
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183830
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183834
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183835
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183839
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 183840
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183841
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183842
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 183847
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183852
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183856
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183857
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183861
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 183862
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183863
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183867
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 183868
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183869
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183873
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183874
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183878
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 183879
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183880
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183884
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183885
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183889
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 183890
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183891
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183895
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183896
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183900
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 183901
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183902
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183906
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183907
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183911
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 183912
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183913
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183917
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183918
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183922
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 183923
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183924
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183928
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183929
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183933
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 183934
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183935
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183939
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183940
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183944
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 183945
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183946
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183950
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183951
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183955
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 183956
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183957
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183961
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(48)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183962
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 183964
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183965
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183969
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(49)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 183970
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 183972
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183973
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183977
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 183978
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 183979
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183980
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183984
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183985
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183989
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 183990
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183991
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 183995
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 183996
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184000
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184001
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184002
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184003
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184007
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184008
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184012
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184013
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184014
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184018
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184019
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184023
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184024
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184025
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184026
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184030
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184031
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184035
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184036
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184037
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184041
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184042
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184046
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184047
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184048
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184049
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184054
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184059
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184063
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184064
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184068
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 184069
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184070
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184074
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 184075
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184076
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184080
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184081
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184085
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 184086
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184087
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184091
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184092
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184096
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 184097
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184098
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184102
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184103
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184107
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 184108
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184109
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184113
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184114
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184118
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 184119
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184120
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184124
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184125
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184129
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 184130
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184131
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184135
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184136
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184140
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 184141
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184142
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184146
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184147
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184151
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 184152
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184153
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184157
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184158
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184162
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 184163
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184164
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184168
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(70)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184169
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 184171
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184172
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184176
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(71)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184177
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 184179
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184180
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184184
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 184185
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184186
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184187
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184191
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184192
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184196
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184197
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184198
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184202
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184203
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184207
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184208
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184209
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184210
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184214
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184215
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184219
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184220
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184221
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184225
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184226
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184230
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184231
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184232
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184233
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184237
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184238
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184242
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184243
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184244
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184248
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184249
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 184253
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184254
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184255
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184256
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184261
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184266
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184270
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184271
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184275
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 184276
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184277
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184281
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 184282
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184283
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184287
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184288
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184292
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 184293
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184294
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184298
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184299
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184303
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 184304
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184305
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184309
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184310
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184314
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 184315
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184316
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184320
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184321
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184325
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 184326
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184327
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184331
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184332
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184336
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 184337
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184338
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184342
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184343
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184347
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 184348
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184349
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184353
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184354
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184358
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 184359
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184360
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184364
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184365
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184369
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 184370
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184371
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184375
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(92)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184376
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 184378
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184379
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184383
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(93)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184384
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 184386
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184387
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184391
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 184392
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184393
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184394
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184398
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184399
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184403
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184404
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184405
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184409
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184410
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184414
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184415
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184416
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184417
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184421
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184422
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184426
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184427
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184428
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184432
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184433
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184437
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184438
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184439
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184440
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184444
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184445
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184449
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184450
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184451
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184455
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184456
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184460
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184461
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184462
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184463
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184468
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184473
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184477
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184478
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184482
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 184483
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184484
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184488
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 184489
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184490
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184494
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184495
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184499
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 184500
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184501
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184505
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184506
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184510
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 184511
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184512
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184516
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184517
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184521
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 184522
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184523
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184527
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184528
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184532
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 184533
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184534
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184538
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184539
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184543
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 184544
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184545
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184549
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184550
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184554
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 184555
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184556
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184560
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184561
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184565
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 184566
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184567
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184571
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184572
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184576
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 184577
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184578
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184582
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(114)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184583
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 184585
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184586
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184590
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(115)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184591
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 184593
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184594
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184598
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 184599
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184600
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184601
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184605
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184606
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184610
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184611
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184612
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184616
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184617
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184621
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184622
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184623
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184624
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184628
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184629
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184633
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184634
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184635
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184639
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184640
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184644
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184645
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184646
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184647
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184651
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184652
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184656
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184657
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184658
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184662
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 184663
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 184667
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184668
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184669
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184670
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184675
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184680
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184682
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 184684
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184685
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 184687
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184688
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184690
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 184692
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184693
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184695
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 184697
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184698
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184700
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 184702
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184703
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184705
		, "size": 2
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 184707
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184708
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184710
		, "size": 2
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 184712
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184713
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184715
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 184717
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184718
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184720
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 184722
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184723
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184725
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 184727
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184728
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(136)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184730
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 184732
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184733
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(137)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184735
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 184737
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184738
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 184740
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184741
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184742
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184744
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184746
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184747
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184749
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184751
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184752
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184753
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184755
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184757
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184758
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184760
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184762
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184763
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184764
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184766
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 184768
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184769
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184771
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 184773
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184774
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184775
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 184780
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184785
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184787
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 184789
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184790
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 184792
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184793
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184795
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 184797
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184798
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184800
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 184802
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184803
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184805
		, "size": 2
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 184807
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184808
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184810
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 184812
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184813
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184815
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 184817
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184818
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184820
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 184822
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184823
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184825
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 184827
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184828
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184830
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 184832
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184833
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(158)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184835
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 184837
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184838
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(159)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184840
		, "size": 2
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 184842
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184843
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 184845
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184846
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184847
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184849
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184851
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184852
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184854
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 184856
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184857
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184858
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184860
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184862
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184863
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184865
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184867
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184868
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184869
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184871
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 184873
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184874
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184876
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 184878
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184879
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 184880
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 184889
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184898
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184900
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 184902
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184903
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 184905
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184906
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184908
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 184910
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184911
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184913
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 184915
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184916
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184918
		, "size": 2
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 184920
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184921
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184923
		, "size": 2
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 184925
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184926
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184928
		, "size": 2
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 184930
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184931
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184933
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 184935
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184936
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184938
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 184940
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184941
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184943
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 184945
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184946
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(194)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184948
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 184950
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184951
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(196)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 184953
		, "size": 2
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 184955
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184956
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 184958
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184959
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184960
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184962
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 184964
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184965
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184967
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 184969
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184970
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184971
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184973
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 184975
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184976
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184978
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 184980
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184981
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184982
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184984
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 184986
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184987
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 184989
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 184991
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 184992
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 184993
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 185002
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185011
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185013
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 185015
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185016
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 185018
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185019
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185021
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 185023
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185024
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185026
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 185028
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185029
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185031
		, "size": 2
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 185033
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185034
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185036
		, "size": 2
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 185038
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185039
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185041
		, "size": 2
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 185043
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185044
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185046
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 185048
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185049
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185051
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 185053
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185054
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185056
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 185058
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185059
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(231)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185061
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 185063
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185064
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(233)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185066
		, "size": 2
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 185068
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185069
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 185071
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185072
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185073
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185075
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 185077
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185078
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185080
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 185082
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185083
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185084
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185086
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 185088
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185089
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185091
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 185093
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185094
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185095
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185097
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 185099
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185100
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185102
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 185104
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185105
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 185106
		, "size": 5
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 185111
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185116
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185118
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 185120
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185121
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185123
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 185125
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185126
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185128
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 185130
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185131
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185133
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 185135
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185136
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185138
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 185140
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185141
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185143
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 185145
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185146
		, "size": 2
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7b"
		, "offs": 185148
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185149
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185150
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185152
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 185154
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185155
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185157
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 185159
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185160
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185161
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185163
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 185165
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185166
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185168
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 185170
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185171
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185172
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185174
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 185176
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185177
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185179
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 185181
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185182
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 185183
		, "size": 9
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 185192
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185201
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185203
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 185205
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185206
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185208
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 185210
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185211
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185213
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 185215
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185216
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185218
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 185220
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185221
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185223
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 185225
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185226
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185228
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 185230
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185231
		, "size": 2
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 185233
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185234
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185235
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185237
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 185239
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185240
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185242
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 185244
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185245
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185246
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185248
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 185250
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185251
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185253
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 185255
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185256
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185257
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185259
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 185261
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185262
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 185264
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 185266
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185267
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185268
		, "size": 5
	}, {
		"instruction": "load.sp(+1128)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185273
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185277
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185279
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185281
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185282
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185284
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185286
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 185287
		, "size": 1
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185288
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185293
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185298
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185303
		, "size": 5
	}, {
		"instruction": "load.ref .02b088"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185308
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185313
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185318
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185323
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185327
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185332
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185337
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185342
		, "size": 5
	}, {
		"instruction": "load.ref .02b088"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185347
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185352
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185357
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185362
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185366
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185371
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185376
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185381
		, "size": 5
	}, {
		"instruction": "load.ref .02b088"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185386
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185391
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185396
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185401
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185405
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185406
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185408
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185409
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185410
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185414
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185419
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185424
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185429
		, "size": 5
	}, {
		"instruction": "load.ref .02b098"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185434
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185439
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185444
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185448
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185452
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185454
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185455
		, "size": 1
	}, {
		"instruction": "jnz +42"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 185456
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185460
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185465
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185470
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185475
		, "size": 5
	}, {
		"instruction": "load.ref .02b09f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185480
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185485
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185490
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185494
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185498
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185500
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185501
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185502
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185506
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185511
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185516
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185521
		, "size": 5
	}, {
		"instruction": "load.ref .02b098"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185526
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185531
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185536
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185540
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185544
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185548
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185553
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185558
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185563
		, "size": 5
	}, {
		"instruction": "load.ref .02b09f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185568
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185573
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185578
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185582
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185586
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185588
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185589
		, "size": 1
	}, {
		"instruction": "jnz +46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 185590
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185594
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185599
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185604
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185609
		, "size": 5
	}, {
		"instruction": "load.ref .02b09f"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185614
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185619
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185624
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185628
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185632
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185636
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185641
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185646
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185651
		, "size": 5
	}, {
		"instruction": "load.ref .02b098"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185656
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185661
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185666
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185670
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185674
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 185676
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185677
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185678
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185682
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185687
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185692
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185697
		, "size": 5
	}, {
		"instruction": "load.ref .02b098"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185702
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185707
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185712
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185716
		, "size": 4
	}, {
		"instruction": "jmp +312"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185720
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185724
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185726
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185731
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185732
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185736
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185741
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185746
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185751
		, "size": 5
	}, {
		"instruction": "load.ref .02b0a6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185756
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185761
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185766
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185770
		, "size": 4
	}, {
		"instruction": "jmp +258"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185774
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185778
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185780
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185785
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185786
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185790
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185795
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185800
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185805
		, "size": 5
	}, {
		"instruction": "load.ref .02b0ad"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185810
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185815
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185820
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185824
		, "size": 4
	}, {
		"instruction": "jmp +204"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185828
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185832
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185834
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185839
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185840
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185844
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185849
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185854
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185859
		, "size": 5
	}, {
		"instruction": "load.ref .02b0b4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185864
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185869
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185874
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185878
		, "size": 4
	}, {
		"instruction": "jmp +150"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185882
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185886
		, "size": 2
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185888
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185893
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185894
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185898
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185903
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185908
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185913
		, "size": 5
	}, {
		"instruction": "load.ref .02b0bb"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185918
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185923
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185928
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185932
		, "size": 4
	}, {
		"instruction": "jmp +96"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185936
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 185940
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185942
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 185947
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 185948
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185952
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185957
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185962
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185967
		, "size": 5
	}, {
		"instruction": "load.ref .02b0c2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185972
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185977
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 185982
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 185986
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 185990
		, "size": 4
	}, {
		"instruction": "load.ref .00ebac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 185994
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 185999
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186004
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186009
		, "size": 5
	}, {
		"instruction": "load.ref .02b0c9"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186014
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186019
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 186024
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186028
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186032
		, "size": 4
	}, {
		"instruction": "load.ref .00ebc5"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186036
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186041
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186046
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186051
		, "size": 1
	}, {
		"instruction": "load.ref .02b1a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186052
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186057
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186062
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186067
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186071
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186075
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186079
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186080
		, "size": 4
	}, {
		"instruction": "load.ref .00ebc5"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186084
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186089
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186094
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186099
		, "size": 1
	}, {
		"instruction": "load.ref .02b1ac"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186100
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186105
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 186110
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186114
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 186118
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186122
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186124
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 186129
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 186130
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 186134
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186138
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186139
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 186140
		, "size": 2
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186142
		, "size": 4
	}, {
		"instruction": "load.ref .00ebc5"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186146
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186151
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186156
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186161
		, "size": 1
	}, {
		"instruction": "load.ref .02b1d2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186162
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186167
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 186172
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186176
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 186180
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186184
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186186
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 186191
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 186192
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186196
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186197
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186201
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186203
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 186208
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 186209
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186213
		, "size": 4
	}, {
		"instruction": "load.ref .00ebc5"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186217
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186222
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186227
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186232
		, "size": 1
	}, {
		"instruction": "load.ref .02b1fc"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186233
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186238
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 186243
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186247
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 186251
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186255
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186257
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 186262
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 186263
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 186267
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186271
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186272
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186276
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186278
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 186283
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 186284
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 186288
		, "size": 4
	}, {
		"instruction": "load.ref .00ebc5"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186292
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186297
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186302
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 186307
		, "size": 1
	}, {
		"instruction": "load.ref .02b20e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186308
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 186313
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 186318
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186322
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 186326
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 186330
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 186332
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 186337
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 186338
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 186342
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 186346
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
384621,0,178624,
 384631,0,39024,
 384648,0,-1,
 384661,0,177920,
 384667,0,-1,
 384673,0,177920,
 384680,0,-1,
 384687,0,177928,
 384693,0,-1,
 384700,0,177928,
 384706,0,-1,
 384712,0,177936,
  384718,0,177936,
   384725,0,177936,
    384731,0,177936,
     384737,0,177936,
      384744,0,177936,
       384750,0,177936,
        384756,0,177936,
         384762,0,177936,
          384769,0,177936,
           384775,0,177936,
            384781,0,177936,
             384787,0,177936,
             384794,0,-1,
             384800,0,177936,
             384806,0,-1,
            384813,0,-1,
            384819,0,177936,
            384825,0,-1,
           384831,0,-1,
           384837,0,177936,
            384844,0,177936,
            384850,0,-1,
            384856,0,177936,
            384862,0,-1,
           384868,0,-1,
          384875,0,-1,
          384881,0,177936,
           384887,0,177936,
            384893,0,177936,
            384900,0,-1,
            384906,0,177936,
            384912,0,-1,
           384918,0,-1,
           384924,0,177936,
           384931,0,-1,
          384938,0,-1,
         384945,0,-1,
         384951,0,177936,
          384958,0,177936,
           384965,0,177936,
            384972,0,177936,
            384978,0,-1,
            384985,0,177936,
            384994,0,-1,
           385000,0,-1,
           385006,0,177936,
           385012,0,-1,
          385019,0,-1,
          385025,0,177936,
           385031,0,177936,
           385037,0,-1,
           385043,0,177936,
           385050,0,-1,
          385056,0,-1,
         385062,0,-1,
        385068,0,-1,
        385074,0,177936,
         385081,0,177936,
          385087,0,177936,
           385093,0,177936,
            385100,0,177936,
            385106,0,-1,
            385113,0,177936,
            385120,0,-1,
           385127,0,-1,
           385134,0,177936,
           385140,0,-1,
          385147,0,-1,
          385154,0,177936,
           385161,0,177936,
           385167,0,-1,
           385173,0,177936,
           385180,0,-1,
          385186,0,-1,
         385192,0,-1,
         385198,0,177936,
          385204,0,177936,
           385211,0,177936,
           385217,0,-1,
           385223,0,177936,
           385229,0,-1,
          385236,0,-1,
          385242,0,177936,
          385248,0,-1,
         385254,0,-1,
        385261,0,-1,
       385268,0,-1,
       385274,0,177936,
        385280,0,177936,
         385287,0,177936,
          385293,0,177936,
           385299,0,177936,
            385306,0,177936,
            385312,0,-1,
            385319,0,177936,
            385326,0,-1,
           385332,0,-1,
           385338,0,177936,
           385344,0,-1,
          385351,0,-1,
          385357,0,177936,
           385363,0,177936,
           385369,0,-1,
           385376,0,177936,
           385382,0,-1,
          385388,0,-1,
         385394,0,-1,
         385401,0,177936,
          385407,0,177936,
           385413,0,177936,
           385420,0,-1,
           385426,0,177936,
           385432,0,-1,
          385438,0,-1,
          385445,0,177936,
          385451,0,-1,
         385457,0,-1,
        385463,0,-1,
        385469,0,177936,
         385476,0,177936,
          385482,0,177936,
           385488,0,177936,
           385495,0,-1,
           385501,0,177936,
           385507,0,-1,
          385513,0,-1,
          385519,0,177936,
          385526,0,-1,
         385532,0,-1,
         385538,0,177936,
          385544,0,177936,
          385551,0,-1,
          385557,0,177936,
          385563,0,-1,
         385569,0,-1,
        385575,0,-1,
       385582,0,-1,
      385588,0,-1,
      385594,0,177936,
       385600,0,177936,
        385607,0,177936,
         385613,0,177936,
          385619,0,177936,
           385626,0,177936,
            385632,0,177936,
            385639,0,-1,
            385645,0,177936,
            385652,0,-1,
           385658,0,-1,
           385664,0,177936,
           385670,0,-1,
          385676,0,-1,
          385683,0,177936,
           385689,0,177936,
           385695,0,-1,
           385701,0,177936,
           385708,0,-1,
          385714,0,-1,
         385720,0,-1,
         385726,0,177936,
          385732,0,177936,
           385739,0,177936,
           385745,0,-1,
           385751,0,177936,
           385758,0,-1,
          385764,0,-1,
          385770,0,177936,
          385776,0,-1,
         385782,0,-1,
        385789,0,-1,
        385795,0,177936,
         385801,0,177936,
          385808,0,177936,
           385814,0,177936,
           385820,0,-1,
           385826,0,177936,
           385833,0,-1,
          385839,0,-1,
          385845,0,177936,
          385851,0,-1,
         385858,0,-1,
         385864,0,177936,
          385870,0,177936,
          385876,0,-1,
          385882,0,177936,
          385889,0,-1,
         385895,0,-1,
        385901,0,-1,
       385907,0,-1,
       385913,0,177936,
        385920,0,177936,
         385926,0,177936,
          385932,0,177936,
           385938,0,177936,
           385945,0,-1,
           385951,0,177936,
           385957,0,-1,
          385964,0,-1,
          385970,0,177936,
          385976,0,-1,
         385982,0,-1,
         385988,0,177936,
          385995,0,177936,
          386001,0,-1,
          386007,0,177936,
          386013,0,-1,
         386020,0,-1,
        386027,0,-1,
        386034,0,177936,
         386040,0,177936,
          386046,0,177936,
          386053,0,-1,
          386059,0,177936,
          386065,0,-1,
         386072,0,-1,
         386078,0,177936,
         386085,0,-1,
        386091,0,-1,
       386097,0,-1,
      386104,0,-1,
     386110,0,-1,
     386116,0,177936,
      386122,0,177936,
       386128,0,177936,
        386135,0,177936,
         386141,0,177936,
          386147,0,177936,
           386153,0,177936,
            386160,0,177936,
            386166,0,-1,
            386172,0,177936,
            386179,0,-1,
           386185,0,-1,
           386191,0,177936,
           386197,0,-1,
          386203,0,-1,
          386209,0,177936,
           386216,0,177936,
           386222,0,-1,
           386228,0,177936,
           386234,0,-1,
          386241,0,-1,
         386247,0,-1,
         386253,0,177936,
          386259,0,177936,
           386265,0,177936,
           386272,0,-1,
           386278,0,177936,
           386284,0,-1,
          386290,0,-1,
          386296,0,177936,
          386303,0,-1,
         386309,0,-1,
        386315,0,-1,
        386322,0,177936,
         386328,0,177936,
          386335,0,177936,
           386342,0,177936,
           386349,0,-1,
           386355,0,177936,
           386362,0,-1,
          386368,0,-1,
          386375,0,177936,
          386382,0,-1,
         386388,0,-1,
         386394,0,177936,
          386401,0,177936,
          386407,0,-1,
          386413,0,177936,
          386419,0,-1,
         386425,0,-1,
        386432,0,-1,
       386438,0,-1,
       386444,0,177936,
        386450,0,177936,
         386456,0,177936,
          386463,0,177936,
           386469,0,177936,
           386475,0,-1,
           386481,0,177936,
           386488,0,-1,
          386494,0,-1,
          386500,0,177936,
          386506,0,-1,
         386513,0,-1,
         386520,0,177936,
          386527,0,177936,
          386534,0,-1,
          386541,0,177936,
          386548,0,-1,
         386555,0,-1,
        386561,0,-1,
        386567,0,177936,
         386574,0,177936,
          386580,0,177936,
          386586,0,-1,
          386593,0,177936,
          386599,0,-1,
         386605,0,-1,
         386611,0,177936,
         386617,0,-1,
        386624,0,-1,
       386630,0,-1,
      386636,0,-1,
      386642,0,177936,
       386648,0,177936,
        386654,0,177936,
         386661,0,177936,
          386667,0,177936,
           386674,0,177936,
           386680,0,-1,
           386686,0,177936,
           386693,0,-1,
          386699,0,-1,
          386705,0,177936,
          386712,0,-1,
         386718,0,-1,
         386725,0,177936,
          386731,0,177936,
          386737,0,-1,
          386743,0,177936,
          386750,0,-1,
         386756,0,-1,
        386762,0,-1,
        386768,0,177936,
         386774,0,177936,
          386781,0,177936,
          386787,0,-1,
          386793,0,177936,
          386800,0,-1,
         386806,0,-1,
         386812,0,177936,
         386819,0,-1,
        386825,0,-1,
       386831,0,-1,
       386837,0,177936,
        386843,0,177936,
         386850,0,177936,
          386856,0,177936,
          386862,0,-1,
          386868,0,177936,
          386875,0,-1,
         386881,0,-1,
         386887,0,177936,
         386893,0,-1,
        386899,0,-1,
        386905,0,177936,
         386912,0,177936,
         386918,0,-1,
         386924,0,177936,
         386930,0,-1,
        386937,0,-1,
       386943,0,-1,
      386949,0,-1,
     386955,0,-1,
    386961,0,-1,
    386967,0,177936,
     386973,0,177936,
      386980,0,177936,
       386986,0,177936,
        386992,0,177936,
         386999,0,177936,
          387005,0,177936,
           387012,0,177936,
            387018,0,177936,
            387025,0,-1,
            387031,0,177936,
            387037,0,-1,
           387044,0,-1,
           387050,0,177936,
           387056,0,-1,
          387062,0,-1,
          387069,0,177936,
           387075,0,177936,
           387081,0,-1,
           387087,0,177936,
           387097,0,-1,
          387103,0,-1,
         387109,0,-1,
         387115,0,177936,
          387121,0,177936,
           387128,0,177936,
           387134,0,-1,
           387140,0,177936,
           387146,0,-1,
          387153,0,-1,
          387159,0,177936,
          387165,0,-1,
         387171,0,-1,
        387177,0,-1,
        387183,0,177936,
         387190,0,177936,
          387196,0,177936,
           387203,0,177936,
           387209,0,-1,
           387215,0,177936,
           387222,0,-1,
          387228,0,-1,
          387234,0,177936,
          387240,0,-1,
         387246,0,-1,
         387252,0,177936,
          387259,0,177936,
          387265,0,-1,
          387271,0,177936,
          387277,0,-1,
         387284,0,-1,
        387290,0,-1,
       387296,0,-1,
       387302,0,177936,
        387308,0,177936,
         387315,0,177936,
          387321,0,177936,
           387327,0,177936,
           387333,0,-1,
           387339,0,177936,
           387346,0,-1,
          387352,0,-1,
          387358,0,177936,
          387364,0,-1,
         387371,0,-1,
         387377,0,177936,
          387383,0,177936,
          387390,0,-1,
          387396,0,177936,
          387402,0,-1,
         387409,0,-1,
        387415,0,-1,
        387421,0,177936,
         387427,0,177936,
          387434,0,177936,
          387440,0,-1,
          387446,0,177936,
          387452,0,-1,
         387459,0,-1,
         387465,0,177936,
         387471,0,-1,
        387477,0,-1,
       387483,0,-1,
      387489,0,-1,
      387495,0,177936,
       387502,0,177936,
        387508,0,177936,
         387514,0,177936,
          387521,0,177936,
           387527,0,177936,
           387534,0,-1,
           387540,0,177936,
           387546,0,-1,
          387553,0,-1,
          387559,0,177936,
          387565,0,-1,
         387572,0,-1,
         387578,0,177936,
          387585,0,177936,
          387591,0,-1,
          387597,0,177936,
          387603,0,-1,
         387610,0,-1,
        387616,0,-1,
        387622,0,177936,
         387628,0,177936,
          387634,0,177936,
          387641,0,-1,
          387647,0,177936,
          387653,0,-1,
         387659,0,-1,
         387665,0,177936,
         387672,0,-1,
        387678,0,-1,
       387684,0,-1,
       387690,0,177936,
        387696,0,177936,
         387703,0,177936,
          387709,0,177936,
          387715,0,-1,
          387722,0,177936,
          387728,0,-1,
         387734,0,-1,
         387740,0,177936,
         387746,0,-1,
        387753,0,-1,
        387759,0,177936,
         387765,0,177936,
         387771,0,-1,
         387777,0,177936,
         387784,0,-1,
        387790,0,-1,
       387796,0,-1,
      387802,0,-1,
     387808,0,-1,
     387814,0,177936,
      387821,0,177936,
       387827,0,177936,
        387833,0,177936,
         387839,0,177936,
          387846,0,177936,
           387852,0,177936,
           387859,0,-1,
           387865,0,177936,
           387871,0,-1,
          387877,0,-1,
          387883,0,177936,
          387890,0,-1,
         387896,0,-1,
         387902,0,177936,
          387908,0,177936,
          387914,0,-1,
          387921,0,177936,
          387927,0,-1,
         387933,0,-1,
        387940,0,-1,
        387946,0,177936,
         387953,0,177936,
          387960,0,177936,
          387966,0,-1,
          387973,0,177936,
          387980,0,-1,
         387987,0,-1,
         387993,0,177936,
         388000,0,-1,
        388007,0,-1,
       388013,0,-1,
       388019,0,177936,
        388025,0,177936,
         388032,0,177936,
          388038,0,177936,
          388044,0,-1,
          388050,0,177936,
          388057,0,-1,
         388063,0,-1,
         388069,0,177936,
         388075,0,-1,
        388081,0,-1,
        388088,0,177936,
         388094,0,177936,
         388100,0,-1,
         388106,0,177936,
         388113,0,-1,
        388119,0,-1,
       388125,0,-1,
      388131,0,-1,
      388137,0,177936,
       388143,0,177936,
        388150,0,177936,
         388158,0,177936,
          388164,0,177936,
          388170,0,-1,
          388176,0,177936,
          388183,0,-1,
         388189,0,-1,
         388195,0,177936,
         388201,0,-1,
        388208,0,-1,
        388214,0,177936,
         388221,0,177936,
         388228,0,-1,
         388234,0,177936,
         388241,0,-1,
        388248,0,-1,
       388255,0,-1,
       388261,0,177936,
        388268,0,177936,
         388275,0,177936,
         388282,0,-1,
         388289,0,177936,
         388296,0,-1,
        388302,0,-1,
        388308,0,177936,
        388315,0,-1,
       388321,0,-1,
      388327,0,-1,
     388333,0,-1,
    388339,0,-1,
   388345,0,-1,
   388351,0,177936,
    388358,0,177936,
     388364,0,177936,
      388370,0,177936,
       388377,0,177936,
        388383,0,177936,
         388389,0,177936,
          388395,0,177936,
           388402,0,177936,
            388408,0,177936,
            388419,0,-1,
            388428,0,177936,
            388434,0,-1,
           388441,0,-1,
           388447,0,177936,
           388453,0,-1,
          388459,0,-1,
          388465,0,177936,
           388472,0,177936,
           388478,0,-1,
           388485,0,177936,
           388492,0,-1,
          388498,0,-1,
         388504,0,-1,
         388510,0,177936,
          388517,0,177936,
           388523,0,177936,
           388530,0,-1,
           388537,0,177936,
           388543,0,-1,
          388549,0,-1,
          388556,0,177936,
          388562,0,-1,
         388568,0,-1,
        388575,0,-1,
        388581,0,177936,
         388587,0,177936,
          388594,0,177936,
           388600,0,177936,
           388606,0,-1,
           388613,0,177936,
           388619,0,-1,
          388625,0,-1,
          388631,0,177936,
          388637,0,-1,
         388644,0,-1,
         388650,0,177936,
          388656,0,177936,
          388662,0,-1,
          388668,0,177936,
          388675,0,-1,
         388681,0,-1,
        388687,0,-1,
       388693,0,-1,
       388700,0,177936,
        388706,0,177936,
         388713,0,177936,
          388719,0,177936,
           388725,0,177936,
           388732,0,-1,
           388738,0,177936,
           388744,0,-1,
          388750,0,-1,
          388756,0,177936,
          388763,0,-1,
         388769,0,-1,
         388775,0,177936,
          388781,0,177936,
          388787,0,-1,
          388793,0,177936,
          388800,0,-1,
         388806,0,-1,
        388812,0,-1,
        388818,0,177936,
         388824,0,177936,
          388831,0,177936,
          388837,0,-1,
          388843,0,177936,
          388849,0,-1,
         388856,0,-1,
         388862,0,177936,
         388868,0,-1,
        388874,0,-1,
       388880,0,-1,
      388886,0,-1,
      388892,0,177936,
       388899,0,177936,
        388905,0,177936,
         388911,0,177936,
          388917,0,177936,
           388924,0,177936,
           388930,0,-1,
           388936,0,177936,
           388943,0,-1,
          388949,0,-1,
          388955,0,177936,
          388961,0,-1,
         388967,0,-1,
         388973,0,177936,
          388980,0,177936,
          388986,0,-1,
          388992,0,177936,
          388999,0,-1,
         389005,0,-1,
        389011,0,-1,
        389017,0,177936,
         389023,0,177936,
          389030,0,177936,
          389036,0,-1,
          389042,0,177936,
          389049,0,-1,
         389055,0,-1,
         389061,0,177936,
         389068,0,-1,
        389074,0,-1,
       389080,0,-1,
       389086,0,177936,
        389093,0,177936,
         389100,0,177936,
          389106,0,177936,
          389113,0,-1,
          389119,0,177936,
          389125,0,-1,
         389131,0,-1,
         389137,0,177936,
         389144,0,-1,
        389150,0,-1,
        389156,0,177936,
         389162,0,177936,
         389168,0,-1,
         389175,0,177936,
         389181,0,-1,
        389187,0,-1,
       389193,0,-1,
      389199,0,-1,
     389205,0,-1,
     389211,0,177936,
      389218,0,177936,
       389224,0,177936,
        389230,0,177936,
         389237,0,177936,
          389245,0,177936,
           389251,0,177936,
           389257,0,-1,
           389264,0,177936,
           389270,0,-1,
          389276,0,-1,
          389282,0,177936,
          389289,0,-1,
         389295,0,-1,
         389301,0,177936,
          389307,0,177936,
          389314,0,-1,
          389320,0,177936,
          389326,0,-1,
         389332,0,-1,
        389338,0,-1,
        389344,0,177936,
         389350,0,177936,
          389357,0,177936,
          389363,0,-1,
          389369,0,177936,
          389376,0,-1,
         389382,0,-1,
         389388,0,177936,
         389394,0,-1,
        389400,0,-1,
       389406,0,-1,
       389412,0,177936,
        389419,0,177936,
         389425,0,177936,
          389431,0,177936,
          389438,0,-1,
          389444,0,177936,
          389450,0,-1,
         389456,0,-1,
         389463,0,177936,
         389469,0,-1,
        389475,0,-1,
        389481,0,177936,
         389487,0,177936,
         389494,0,-1,
         389500,0,177936,
         389506,0,-1,
        389512,0,-1,
       389518,0,-1,
      389524,0,-1,
      389530,0,177936,
       389537,0,177936,
        389543,0,177936,
         389549,0,177936,
          389555,0,177936,
          389562,0,-1,
          389568,0,177936,
          389575,0,-1,
         389581,0,-1,
         389587,0,177936,
         389594,0,-1,
        389600,0,-1,
        389606,0,177936,
         389613,0,177936,
         389619,0,-1,
         389625,0,177936,
         389632,0,-1,
        389638,0,-1,
       389644,0,-1,
       389650,0,177936,
        389656,0,177936,
         389662,0,177936,
         389669,0,-1,
         389675,0,177936,
         389681,0,-1,
        389687,0,-1,
        389693,0,177936,
        389700,0,-1,
       389706,0,-1,
      389712,0,-1,
     389718,0,-1,
    389724,0,-1,
    389730,0,177936,
     389736,0,177936,
      389743,0,177936,
       389749,0,177936,
        389755,0,177936,
         389761,0,177936,
          389768,0,177936,
           389774,0,177936,
           389780,0,-1,
           389786,0,177936,
           389793,0,-1,
          389799,0,-1,
          389805,0,177936,
          389811,0,-1,
         389817,0,-1,
         389823,0,177936,
          389830,0,177936,
          389836,0,-1,
          389842,0,177936,
          389848,0,-1,
         389854,0,-1,
        389861,0,-1,
        389867,0,177936,
         389874,0,177936,
          389880,0,177936,
          389886,0,-1,
          389892,0,177936,
          389899,0,-1,
         389905,0,-1,
         389911,0,177936,
         389917,0,-1,
        389923,0,-1,
       389929,0,-1,
       389935,0,177936,
        389942,0,177936,
         389948,0,177936,
          389955,0,177936,
          389962,0,-1,
          389968,0,177936,
          389975,0,-1,
         389982,0,-1,
         389988,0,177936,
         389995,0,-1,
        390002,0,-1,
        390009,0,177936,
         390015,0,177936,
         390022,0,-1,
         390028,0,177936,
         390034,0,-1,
        390041,0,-1,
       390047,0,-1,
      390053,0,-1,
      390059,0,177936,
       390065,0,177936,
        390071,0,177936,
         390078,0,177936,
          390084,0,177936,
          390090,0,-1,
          390096,0,177936,
          390103,0,-1,
         390109,0,-1,
         390115,0,177936,
         390121,0,-1,
        390127,0,-1,
        390133,0,177936,
         390140,0,177936,
         390146,0,-1,
         390152,0,177936,
         390158,0,-1,
        390164,0,-1,
       390171,0,-1,
       390177,0,177936,
        390183,0,177936,
         390190,0,177936,
         390197,0,-1,
         390203,0,177936,
         390210,0,-1,
        390217,0,-1,
        390224,0,177936,
        390231,0,-1,
       390237,0,-1,
      390244,0,-1,
     390251,0,-1,
     390257,0,177936,
      390264,0,177936,
       390270,0,177936,
        390276,0,177936,
         390283,0,177936,
          390289,0,177936,
          390295,0,-1,
          390301,0,177936,
          390308,0,-1,
         390314,0,-1,
         390320,0,177936,
         390326,0,-1,
        390334,0,-1,
        390340,0,177936,
         390346,0,177936,
         390353,0,-1,
         390359,0,177936,
         390365,0,-1,
        390371,0,-1,
       390377,0,-1,
       390383,0,177936,
        390390,0,177936,
         390396,0,177936,
         390403,0,-1,
         390410,0,177936,
         390417,0,-1,
        390423,0,-1,
        390430,0,177936,
        390436,0,-1,
       390442,0,-1,
      390449,0,-1,
      390455,0,177936,
       390461,0,177936,
        390468,0,177936,
         390474,0,177936,
         390480,0,-1,
         390486,0,177936,
         390493,0,-1,
        390499,0,-1,
        390505,0,177936,
        390511,0,-1,
       390517,0,-1,
       390523,0,177936,
        390530,0,177936,
        390536,0,-1,
        390542,0,177936,
        390548,0,-1,
       390554,0,-1,
      390561,0,-1,
     390567,0,-1,
    390573,0,-1,
   390579,0,-1,
  390585,0,-1,
  390592,0,177936,
   390598,0,177936,
    390605,0,177936,
     390611,0,177936,
      390617,0,177936,
       390623,0,177936,
        390629,0,177936,
         390636,0,177936,
          390642,0,177936,
           390648,0,177936,
            390654,0,177936,
            390661,0,-1,
            390667,0,177936,
            390673,0,-1,
           390679,0,-1,
           390685,0,177936,
           390692,0,-1,
          390698,0,-1,
          390704,0,177936,
           390710,0,177936,
           390717,0,-1,
           390723,0,177936,
           390729,0,-1,
          390735,0,-1,
         390741,0,-1,
         390747,0,177936,
          390754,0,177936,
           390760,0,177936,
           390766,0,-1,
           390772,0,177936,
           390779,0,-1,
          390785,0,-1,
          390791,0,177936,
          390797,0,-1,
         390803,0,-1,
        390809,0,-1,
        390815,0,177936,
         390822,0,177936,
          390828,0,177936,
           390834,0,177936,
           390841,0,-1,
           390847,0,177936,
           390853,0,-1,
          390859,0,-1,
          390865,0,177936,
          390872,0,-1,
         390878,0,-1,
         390884,0,177936,
          390890,0,177936,
          390896,0,-1,
          390903,0,177936,
          390909,0,-1,
         390915,0,-1,
        390922,0,-1,
       390928,0,-1,
       390934,0,177936,
        390940,0,177936,
         390946,0,177936,
          390953,0,177936,
           390959,0,177936,
           390966,0,-1,
           390972,0,177936,
           390978,0,-1,
          390984,0,-1,
          390990,0,177936,
          390997,0,-1,
         391003,0,-1,
         391010,0,177936,
          391016,0,177936,
          391022,0,-1,
          391028,0,177936,
          391035,0,-1,
         391041,0,-1,
        391047,0,-1,
        391053,0,177936,
         391059,0,177936,
          391066,0,177936,
          391072,0,-1,
          391078,0,177936,
          391084,0,-1,
         391090,0,-1,
         391096,0,177936,
         391103,0,-1,
        391109,0,-1,
       391115,0,-1,
      391121,0,-1,
      391127,0,177936,
       391133,0,177936,
        391140,0,177936,
         391146,0,177936,
          391152,0,177936,
           391158,0,177936,
           391165,0,-1,
           391171,0,177936,
           391177,0,-1,
          391184,0,-1,
          391190,0,177936,
          391196,0,-1,
         391202,0,-1,
         391208,0,177936,
          391214,0,177936,
          391221,0,-1,
          391227,0,177936,
          391233,0,-1,
         391239,0,-1,
        391245,0,-1,
        391251,0,177936,
         391258,0,177936,
          391264,0,177936,
          391270,0,-1,
          391276,0,177936,
          391283,0,-1,
         391289,0,-1,
         391295,0,177936,
         391301,0,-1,
        391307,0,-1,
       391313,0,-1,
       391319,0,177936,
        391326,0,177936,
         391332,0,177936,
          391338,0,177936,
          391345,0,-1,
          391351,0,177936,
          391357,0,-1,
         391363,0,-1,
         391369,0,177936,
         391376,0,-1,
        391382,0,-1,
        391388,0,177936,
         391394,0,177936,
         391402,0,-1,
         391408,0,177936,
         391415,0,-1,
        391421,0,-1,
       391427,0,-1,
      391433,0,-1,
     391439,0,-1,
     391445,0,177936,
      391451,0,177936,
       391458,0,177936,
        391464,0,177936,
         391471,0,177936,
          391477,0,177936,
           391483,0,177936,
           391490,0,-1,
           391496,0,177936,
           391503,0,-1,
          391509,0,-1,
          391515,0,177936,
          391521,0,-1,
         391528,0,-1,
         391534,0,177936,
          391540,0,177936,
          391546,0,-1,
          391552,0,177936,
          391559,0,-1,
         391565,0,-1,
        391571,0,-1,
        391577,0,177936,
         391583,0,177936,
          391589,0,177936,
          391596,0,-1,
          391602,0,177936,
          391608,0,-1,
         391614,0,-1,
         391620,0,177936,
         391627,0,-1,
        391633,0,-1,
       391639,0,-1,
       391645,0,177936,
        391651,0,177936,
         391658,0,177936,
          391664,0,177936,
          391670,0,-1,
          391676,0,177936,
          391683,0,-1,
         391689,0,-1,
         391695,0,177936,
         391701,0,-1,
        391707,0,-1,
        391713,0,177936,
         391720,0,177936,
         391726,0,-1,
         391732,0,177936,
         391739,0,-1,
        391745,0,-1,
       391751,0,-1,
      391757,0,-1,
      391763,0,177936,
       391770,0,177936,
        391776,0,177936,
         391782,0,177936,
          391788,0,177936,
          391795,0,-1,
          391801,0,177936,
          391807,0,-1,
         391813,0,-1,
         391820,0,177936,
         391827,0,-1,
        391834,0,-1,
        391840,0,177936,
         391847,0,177936,
         391853,0,-1,
         391860,0,177936,
         391867,0,-1,
        391874,0,-1,
       391881,0,-1,
       391887,0,177936,
        391893,0,177936,
         391900,0,177936,
         391906,0,-1,
         391913,0,177936,
         391919,0,-1,
        391925,0,-1,
        391931,0,177936,
        391937,0,-1,
       391944,0,-1,
      391950,0,-1,
     391956,0,-1,
    391962,0,-1,
    391968,0,177936,
     391974,0,177936,
      391981,0,177936,
       391987,0,177936,
        391993,0,177936,
         391999,0,177936,
          392006,0,177936,
           392012,0,177936,
           392018,0,-1,
           392024,0,177936,
           392031,0,-1,
          392037,0,-1,
          392043,0,177936,
          392049,0,-1,
         392055,0,-1,
         392061,0,177936,
          392068,0,177936,
          392074,0,-1,
          392081,0,177936,
          392088,0,-1,
         392095,0,-1,
        392102,0,-1,
        392109,0,177936,
         392116,0,177936,
          392123,0,177936,
          392130,0,-1,
          392137,0,177936,
          392143,0,-1,
         392150,0,-1,
         392156,0,177936,
         392163,0,-1,
        392169,0,-1,
       392175,0,-1,
       392181,0,177936,
        392187,0,177936,
         392194,0,177936,
          392200,0,177936,
          392206,0,-1,
          392212,0,177936,
          392219,0,-1,
         392225,0,-1,
         392231,0,177936,
         392237,0,-1,
        392243,0,-1,
        392249,0,177936,
         392256,0,177936,
         392262,0,-1,
         392268,0,177936,
         392274,0,-1,
        392281,0,-1,
       392288,0,-1,
      392294,0,-1,
      392300,0,177936,
       392307,0,177936,
        392314,0,177936,
         392320,0,177936,
          392326,0,177936,
          392333,0,-1,
          392339,0,177936,
          392346,0,-1,
         392352,0,-1,
         392359,0,177936,
         392365,0,-1,
        392371,0,-1,
        392377,0,177936,
         392383,0,177936,
         392390,0,-1,
         392396,0,177936,
         392402,0,-1,
        392408,0,-1,
       392419,0,-1,
       392427,0,177936,
        392434,0,177936,
         392440,0,177936,
         392446,0,-1,
         392452,0,177936,
         392459,0,-1,
        392465,0,-1,
        392471,0,177936,
        392478,0,-1,
       392487,0,-1,
      392493,0,-1,
     392499,0,-1,
     392506,0,177936,
      392514,0,177936,
       392520,0,177936,
        392526,0,177936,
         392532,0,177936,
          392539,0,177936,
          392545,0,-1,
          392551,0,177936,
          392558,0,-1,
         392564,0,-1,
         392570,0,177936,
         392576,0,-1,
        392582,0,-1,
        392588,0,177936,
         392594,0,177936,
         392601,0,-1,
         392607,0,177936,
         392613,0,-1,
        392619,0,-1,
       392625,0,-1,
       392631,0,177936,
        392638,0,177936,
         392644,0,177936,
         392650,0,-1,
         392656,0,177936,
         392663,0,-1,
        392669,0,-1,
        392675,0,177936,
        392681,0,-1,
       392687,0,-1,
      392694,0,-1,
      392700,0,177936,
       392706,0,177936,
        392712,0,177936,
         392718,0,177936,
         392725,0,-1,
         392731,0,177936,
         392737,0,-1,
        392743,0,-1,
        392749,0,177936,
        392756,0,-1,
       392762,0,-1,
       392768,0,177936,
        392774,0,177936,
        392781,0,-1,
        392787,0,177936,
        392793,0,-1,
       392800,0,-1,
      392806,0,-1,
     392812,0,-1,
    392818,0,-1,
   392824,0,-1,
   392830,0,177936,
    392837,0,177936,
     392843,0,177936,
      392849,0,177936,
       392855,0,177936,
        392862,0,177936,
         392868,0,177936,
          392874,0,177936,
           392880,0,177936,
           392887,0,-1,
           392893,0,177936,
           392899,0,-1,
          392906,0,-1,
          392912,0,177936,
          392918,0,-1,
         392924,0,-1,
         392930,0,177936,
          392936,0,177936,
          392943,0,-1,
          392949,0,177936,
          392955,0,-1,
         392961,0,-1,
        392967,0,-1,
        392974,0,177936,
         392980,0,177936,
          392986,0,177936,
          392992,0,-1,
          392998,0,177936,
          393005,0,-1,
         393011,0,-1,
         393017,0,177936,
         393023,0,-1,
        393030,0,-1,
       393036,0,-1,
       393042,0,177936,
        393049,0,177936,
         393055,0,177936,
          393061,0,177936,
          393067,0,-1,
          393074,0,177936,
          393080,0,-1,
         393086,0,-1,
         393092,0,177936,
         393099,0,-1,
        393105,0,-1,
        393111,0,177936,
         393117,0,177936,
         393123,0,-1,
         393129,0,177936,
         393136,0,-1,
        393142,0,-1,
       393148,0,-1,
      393154,0,-1,
      393160,0,177936,
       393167,0,177936,
        393173,0,177936,
         393179,0,177936,
          393185,0,177936,
          393192,0,-1,
          393198,0,177936,
          393204,0,-1,
         393210,0,-1,
         393216,0,177936,
         393223,0,-1,
        393229,0,-1,
        393235,0,177936,
         393241,0,177936,
         393247,0,-1,
         393254,0,177936,
         393260,0,-1,
        393266,0,-1,
       393272,0,-1,
       393279,0,177936,
        393285,0,177936,
         393291,0,177936,
         393298,0,-1,
         393304,0,177936,
         393310,0,-1,
        393316,0,-1,
        393322,0,177936,
        393329,0,-1,
       393335,0,-1,
      393341,0,-1,
     393347,0,-1,
     393353,0,177936,
      393359,0,177936,
       393366,0,177936,
        393372,0,177936,
         393378,0,177936,
          393384,0,177936,
          393391,0,-1,
          393397,0,177936,
          393403,0,-1,
         393409,0,-1,
         393415,0,177936,
         393422,0,-1,
        393428,0,-1,
        393434,0,177936,
         393440,0,177936,
         393446,0,-1,
         393452,0,177936,
         393459,0,-1,
        393465,0,-1,
       393471,0,-1,
       393477,0,177936,
        393484,0,177936,
         393491,0,177936,
         393498,0,-1,
         393504,0,177936,
         393510,0,-1,
        393516,0,-1,
        393522,0,177936,
        393529,0,-1,
       393535,0,-1,
      393541,0,-1,
      393547,0,177936,
       393553,0,177936,
        393560,0,177936,
         393566,0,177936,
         393572,0,-1,
         393578,0,177936,
         393585,0,-1,
        393591,0,-1,
        393597,0,177936,
        393605,0,-1,
       393611,0,-1,
       393617,0,177936,
        393623,0,177936,
        393629,0,-1,
        393636,0,177936,
        393642,0,-1,
       393648,0,-1,
      393654,0,-1,
     393660,0,-1,
    393666,0,-1,
    393672,0,177936,
     393679,0,177936,
      393685,0,177936,
       393691,0,177936,
        393697,0,177936,
         393703,0,177936,
          393710,0,177936,
          393716,0,-1,
          393722,0,177936,
          393728,0,-1,
         393735,0,-1,
         393741,0,177936,
         393747,0,-1,
        393754,0,-1,
        393760,0,177936,
         393766,0,177936,
         393772,0,-1,
         393778,0,177936,
         393785,0,-1,
        393791,0,-1,
       393797,0,-1,
       393803,0,177936,
        393809,0,177936,
         393815,0,177936,
         393822,0,-1,
         393828,0,177936,
         393834,0,-1,
        393841,0,-1,
        393848,0,177936,
        393854,0,-1,
       393861,0,-1,
      393868,0,-1,
      393874,0,177936,
       393881,0,177936,
        393888,0,177936,
         393895,0,177936,
         393901,0,-1,
         393908,0,177936,
         393914,0,-1,
        393921,0,-1,
        393927,0,177936,
        393933,0,-1,
       393939,0,-1,
       393945,0,177936,
        393951,0,177936,
        393958,0,-1,
        393964,0,177936,
        393970,0,-1,
       393976,0,-1,
      393982,0,-1,
     393988,0,-1,
     393995,0,177936,
      394001,0,177936,
       394007,0,177936,
        394013,0,177936,
         394020,0,177936,
         394026,0,-1,
         394032,0,177936,
         394038,0,-1,
        394044,0,-1,
        394050,0,177936,
        394057,0,-1,
       394063,0,-1,
       394069,0,177936,
        394075,0,177936,
        394081,0,-1,
        394088,0,177936,
        394095,0,-1,
       394102,0,-1,
      394108,0,-1,
      394115,0,177936,
       394122,0,177936,
        394130,0,177936,
        394137,0,-1,
        394143,0,177936,
        394150,0,-1,
       394156,0,-1,
       394163,0,177936,
       394169,0,-1,
      394176,0,-1,
     394182,0,-1,
    394189,0,-1,
   394195,0,-1,
  394201,0,-1,
 394207,0,-1,
 394214,0,23320,
 394224,0,-1,
 394230,0,22392,
 394237,0,-1,
 394242,0,22856,
 394249,0,-1,
 394255,0,21928,
 394261,0,-1,
 394267,0,23320,
 394274,0,-1,
 394280,0,22392,
 394286,0,-1,
 394292,0,22856,
 394298,0,-1,
 394304,0,21928,
 394311,0,-1,
 394317,0,21928,
 394323,0,-1,
 394331,0,33576,
 394338,0,-1,
 394344,0,33576,
 394350,0,-1,
 394356,0,33576,
 394362,0,-1,
 394368,0,34312,
 394375,0,-1,
 394381,0,34312,
 394387,0,-1,
 394393,0,34312,
 394399,0,-1,
 394406,0,33576,
 394412,0,-1,
 394418,0,33576,
 394424,0,-1,
 394430,0,33576,
 394436,0,-1,
 394442,0,34312,
 394448,0,-1,
 394454,0,34312,
 394460,0,-1,
 394466,0,34312,
 394472,0,-1,
 394478,0,43008,
 394490,0,-1,
 394497,0,43464,
 394505,0,-1,
 394512,0,43920,
 394518,0,-1,
 394524,0,44376,
 394533,0,-1,
 394540,0,44832,
 394546,0,-1,
 394552,0,45424,
 394561,0,-1,
 394567,0,45880,
 394574,0,-1,
 394580,0,46472,
 394587,0,-1,
 394593,0,39024,
 394599,0,-1,
 394605,0,39488,
 394611,0,-1,
 394617,0,39952,
 394624,0,-1,
 394630,0,40416,
 394637,0,-1,
 394643,0,40880,
 394649,0,-1,
 394655,0,41488,
 394662,0,-1,
 394668,0,41952,
 394676,0,-1,
 394682,0,42552,
 394689,0,-1,
 394694,0,27728,
 394702,1024,-1,
 394708,1024,27728,
 394714,1104,-1,
 394720,1104,27728,
 394726,1264,-1,
 394732,1264,27728,
 394740,2096,-1,
 394747,2096,28480,
 394753,2096,-1,
 394759,2096,29224,
 394766,2096,-1,
 394772,2096,27728,
 394778,1072,-1,
 394784,1072,27728,
 394790,992,-1,
 394796,992,27728,
 394802,832,-1,
 394808,832,27728,
 394815,0,-1,
 394821,0,25072,
 394848,0,-1,
 394855,0,25072,
 394882,0,-1,
 394888,0,29960,
 394895,0,-1,
 394901,0,28480,
 394907,0,-1,
 394913,0,25072,
 394940,0,-1,
 394947,0,25072,
 394976,0,-1,
 394982,0,27120,
  394989,0,177992,
  394996,0,-1,
  395002,0,21168,
  395008,0,-1,
 395014,0,-1,
 395020,0,27120,
 395033,0,-1,
 395039,0,27120,
  395046,0,178000,
   395052,0,178000,
    395058,0,178000,
     395065,0,178000,
      395071,0,178000,
       395077,0,178000,
        395086,0,178000,
         395092,0,178000,
          395098,0,178000,
           395105,0,178000,
            395111,0,178000,
             395117,0,178000,
              395123,0,178000,
               395130,0,178000,
                395136,0,178000,
                 395142,0,178000,
                  395148,0,178000,
                   395155,0,178000,
                    395161,0,178000,
                     395167,0,178000,
                      395173,0,178000,
                       395180,0,178000,
                        395186,0,178000,
                         395192,0,178000,
                          395198,0,178000,
                           395205,0,178000,
                            395211,0,178000,
                             395217,0,178000,
                              395223,0,178000,
                               395230,0,178000,
                                395236,0,178000,
                                 395243,0,178000,
                                  395249,0,178000,
                                   395255,0,178000,
                                    395261,0,178000,
                                     395268,0,178000,
                                      395274,0,178000,
                                       395280,0,178000,
                                        395287,0,178000,
                                         395293,0,178000,
                                          395299,0,178000,
                                           395306,0,178000,
                                            395312,0,178000,
                                             395318,0,178000,
                                              395324,0,178000,
                                               395331,0,178000,
                                                395337,0,178000,
                                                 395344,0,178000,
                                                  395350,0,178000,
                                                   395356,0,178000,
                                                    395362,0,178000,
                                                     395369,0,178000,
                                                      395375,0,178000,
                                                       395382,0,178000,
                                                        395388,0,178000,
                                                         395394,0,178000,
                                                          395401,0,178000,
                                                           395407,0,178000,
                                                            395413,0,178000,
                                                             395420,0,178000,
                                                              395426,0,178000,
                                                               395433,0,178000,
                                                                395439,0,178000,
                                                                 395445,0,178000,
                                                                  395452,0,178000,
                                                                   395458,0,178000,
                                                                    395465,0,178000,
                                                                     395471,0,178000,
                                                                      395477,0,178000,
                                                                       395484,0,178000,
                                                                        395490,0,178000,
                                                                         395496,0,178000,
                                                                          395503,0,178000,
                                                                           395509,0,178000,
                                                                            395516,0,178000,
                                                                             395522,0,178000,
                                                                              395530,0,178000,
                                                                               395537,0,178000,
                                                                                395543,0,178000,
                                                                                 395550,0,178000,
                                                                                  395556,0,178000,
                                                                                   395562,0,178000,
                                                                                    395569,0,178000,
                                                                                     395575,0,178000,
                                                                                      395582,0,178000,
                                                                                       395588,0,178000,
                                                                                        395595,0,178000,
                                                                                         395601,0,178000,
                                                                                          395608,0,178000,
                                                                                           395614,0,178000,
                                                                                            395621,0,178000,
                                                                                             395627,0,178000,
                                                                                              395634,0,178000,
                                                                                               395640,0,178000,
                                                                                                395647,0,178000,
                                                                                                 395653,0,178000,
                                                                                                  395660,0,178000,
                                                                                                   395667,0,178000,
                                                                                                    395673,0,178000,
                                                                                                     395680,0,178000,
                                                                                                      395686,0,178000,
                                                                                                       395693,0,178000,
                                                                                                        395699,0,178000,
                                                                                                         395706,0,178000,
                                                                                                          395712,0,178000,
                                                                                                           395719,0,178000,
                                                                                                            395725,0,178000,
                                                                                                             395732,0,178000,
                                                                                                              395739,0,178000,
                                                                                                               395747,0,178000,
                                                                                                                395753,0,178000,
                                                                                                                 395760,0,178000,
                                                                                                                  395768,0,178000,
                                                                                                                   395775,0,178000,
                                                                                                                    395781,0,178000,
                                                                                                                     395788,0,178000,
                                                                                                                      395795,0,178000,
                                                                                                                       395801,0,178000,
                                                                                                                        395808,0,178000,
                                                                                                                         395814,0,178000,
                                                                                                                          395821,0,178000,
                                                                                                                           395828,0,178000,
                                                                                                                            395834,0,178000,
                                                                                                                             395841,0,178000,
                                                                                                                              395848,0,178000,
                                                                                                                               395854,0,178000,
                                                                                                                                395861,0,178000,
                                                                                                                                 395868,0,178000,
                                                                                                                                  395874,0,178000,
                                                                                                                                   395881,0,178000,
                                                                                                                                    395887,0,178000,
                                                                                                                                     395894,0,178000,
                                                                                                                                      395901,0,178000,
                                                                                                                                       395907,0,178000,
                                                                                                                                        395914,0,178000,
                                                                                                                                         395921,0,178000,
                                                                                                                                          395928,0,178000,
                                                                                                                                           395934,0,178000,
                                                                                                                                            395941,0,178000,
                                                                                                                                             395948,0,178000,
                                                                                                                                              395954,0,178000,
                                                                                                                                               395963,0,178000,
                                                                                                                                                395969,0,178000,
                                                                                                                                                 395976,0,178000,
                                                                                                                                                  395983,0,178000,
                                                                                                                                                   395990,0,178000,
                                                                                                                                                    395996,0,178000,
                                                                                                                                                     396003,0,178000,
                                                                                                                                                      396010,0,178000,
                                                                                                                                                       396016,0,178000,
                                                                                                                                                        396023,0,178000,
                                                                                                                                                         396030,0,178000,
                                                                                                                                                          396037,0,178000,
                                                                                                                                                           396043,0,178000,
                                                                                                                                                            396050,0,178000,
                                                                                                                                                             396057,0,178000,
                                                                                                                                                              396064,0,178000,
                                                                                                                                                               396070,0,178000,
                                                                                                                                                                396077,0,178000,
                                                                                                                                                                 396084,0,178000,
                                                                                                                                                                  396091,0,178000,
                                                                                                                                                                   396097,0,178000,
                                                                                                                                                                    396104,0,178000,
                                                                                                                                                                     396111,0,178000,
                                                                                                                                                                      396118,0,178000,
                                                                                                                                                                       396126,0,178000,
                                                                                                                                                                        396133,0,178000,
                                                                                                                                                                         396140,0,178000,
                                                                                                                                                                          396147,0,178000,
                                                                                                                                                                           396153,0,178000,
                                                                                                                                                                            396160,0,178000,
                                                                                                                                                                             396167,0,178000,
                                                                                                                                                                              396174,0,178000,
                                                                                                                                                                               396181,0,178000,
                                                                                                                                                                                396188,0,178000,
                                                                                                                                                                                 396194,0,178000,
                                                                                                                                                                                  396201,0,178000,
                                                                                                                                                                                   396208,0,178000,
                                                                                                                                                                                    396215,0,178000,
                                                                                                                                                                                     396222,0,178000,
                                                                                                                                                                                      396229,0,178000,
                                                                                                                                                                                       396236,0,178000,
                                                                                                                                                                                        396242,0,178000,
                                                                                                                                                                                         396249,0,178000,
                                                                                                                                                                                          396256,0,178000,
                                                                                                                                                                                           396263,0,178000,
                                                                                                                                                                                            396272,0,178000,
                                                                                                                                                                                             396279,0,178000,
                                                                                                                                                                                              396286,0,178000,
                                                                                                                                                                                               396292,0,178000,
                                                                                                                                                                                                396299,0,178000,
                                                                                                                                                                                                 396306,0,178000,
                                                                                                                                                                                                  396313,0,178000,
                                                                                                                                                                                                   396320,0,178000,
                                                                                                                                                                                                    396327,0,178000,
                                                                                                                                                                                                     396334,0,178000,
                                                                                                                                                                                                      396341,0,178000,
                                                                                                                                                                                                       396348,0,178000,
                                                                                                                                                                                                        396355,0,178000,
                                                                                                                                                                                                         396362,0,178000,
                                                                                                                                                                                                          396369,0,178000,
                                                                                                                                                                                                           396376,0,178000,
                                                                                                                                                                                                            396383,0,178000,
                                                                                                                                                                                                             396390,0,178000,
                                                                                                                                                                                                              396397,0,178000,
                                                                                                                                                                                                               396406,0,178000,
                                                                                                                                                                                                                396419,0,178000,
                                                                                                                                                                                                                 396429,0,178000,
                                                                                                                                                                                                                  396436,0,178000,
                                                                                                                                                                                                                   396443,0,178000,
                                                                                                                                                                                                                    396450,0,178000,
                                                                                                                                                                                                                     396457,0,178000,
                                                                                                                                                                                                                      396464,0,178000,
                                                                                                                                                                                                                       396471,0,178000,
                                                                                                                                                                                                                        396478,0,178000,
                                                                                                                                                                                                                         396485,0,178000,
                                                                                                                                                                                                                          396492,0,178000,
                                                                                                                                                                                                                           396499,0,178000,
                                                                                                                                                                                                                            396506,0,178000,
                                                                                                                                                                                                                             396513,0,178000,
                                                                                                                                                                                                                              396520,0,178000,
                                                                                                                                                                                                                               396527,0,178000,
                                                                                                                                                                                                                                396534,0,178000,
                                                                                                                                                                                                                                 396543,0,178000,
                                                                                                                                                                                                                                  396551,0,178000,
                                                                                                                                                                                                                                   396558,0,178000,
                                                                                                                                                                                                                                    396565,0,178000,
                                                                                                                                                                                                                                     396572,0,178000,
                                                                                                                                                                                                                                      396579,0,178000,
                                                                                                                                                                                                                                       396586,0,178000,
                                                                                                                                                                                                                                        396593,0,178000,
                                                                                                                                                                                                                                         396600,0,178000,
                                                                                                                                                                                                                                          396608,0,178000,
                                                                                                                                                                                                                                           396615,0,178000,
                                                                                                                                                                                                                                            396622,0,178000,
                                                                                                                                                                                                                                             396630,0,178000,
                                                                                                                                                                                                                                              396637,0,178000,
                                                                                                                                                                                                                                               396644,0,178000,
                                                                                                                                                                                                                                                396651,0,178000,
                                                                                                                                                                                                                                                 396660,0,178000,
                                                                                                                                                                                                                                                  396667,0,178000,
                                                                                                                                                                                                                                                   396674,0,178000,
                                                                                                                                                                                                                                                    396681,0,178000,
                                                                                                                                                                                                                                                     396688,0,178000,
                                                                                                                                                                                                                                                      396696,0,178000,
                                                                                                                                                                                                                                                       396703,0,178000,
                                                                                                                                                                                                                                                        396710,0,178000,
                                                                                                                                                                                                                                                         396717,0,178000,
                                                                                                                                                                                                                                                          396724,0,178000,
                                                                                                                                                                                                                                                           396731,0,178000,
                                                                                                                                                                                                                                                            396739,0,178000,
                                                                                                                                                                                                                                                             396746,0,178000,
                                                                                                                                                                                                                                                              396753,0,178000,
                                                                                                                                                                                                                                                               396760,0,178000,
                                                                                                                                                                                                                                                                396768,0,178000,
                                                                                                                                                                                                                                                                 396776,0,178000,
                                                                                                                                                                                                                                                                  396784,0,178000,
                                                                                                                                                                                                                                                                   396791,0,178000,
                                                                                                                                                                                                                                                                    396798,0,178000,
                                                                                                                                                                                                                                                                     396805,0,178000,
                                                                                                                                                                                                                                                                      396812,0,178000,
                                                                                                                                                                                                                                                                       396820,0,178000,
                                                                                                                                                                                                                                                                        396827,0,178000,
                                                                                                                                                                                                                                                                         396834,0,178000,
                                                                                                                                                                                                                                                                          396841,0,178000,
                                                                                                                                                                                                                                                                           396849,0,178000,
                                                                                                                                                                                                                                                                            396856,0,178000,
                                                                                                                                                                                                                                                                             396863,0,178000,
                                                                                                                                                                                                                                                                              396871,0,178000,
                                                                                                                                                                                                                                                                               396880,0,178000,
                                                                                                                                                                                                                                                                                396887,0,178000,
                                                                                                                                                                                                                                                                                 396894,0,178000,
                                                                                                                                                                                                                                                                                  396902,0,178000,
                                                                                                                                                                                                                                                                                   396911,0,178000,
                                                                                                                                                                                                                                                                                    396918,0,178000,
                                                                                                                                                                                                                                                                                     396925,0,178000,
                                                                                                                                                                                                                                                                                      396932,0,178000,
                                                                                                                                                                                                                                                                                       396939,0,178000,
                                                                                                                                                                                                                                                                                        396947,0,178000,
                                                                                                                                                                                                                                                                                         396954,0,178000,
                                                                                                                                                                                                                                                                                          396961,0,178000,
                                                                                                                                                                                                                                                                                           396969,0,178000,
                                                                                                                                                                                                                                                                                            396976,0,178000,
                                                                                                                                                                                                                                                                                             396986,0,178000,
                                                                                                                                                                                                                                                                                              396993,0,178000,
                                                                                                                                                                                                                                                                                               397000,0,178000,
                                                                                                                                                                                                                                                                                                397008,0,178000,
                                                                                                                                                                                                                                                                                                 397015,0,178000,
                                                                                                                                                                                                                                                                                                  397022,0,178000,
                                                                                                                                                                                                                                                                                                   397030,0,178000,
                                                                                                                                                                                                                                                                                                    397037,0,178000,
                                                                                                                                                                                                                                                                                                     397044,0,178000,
                                                                                                                                                                                                                                                                                                      397052,0,178000,
                                                                                                                                                                                                                                                                                                       397059,0,178000,
                                                                                                                                                                                                                                                                                                        397066,0,178000,
                                                                                                                                                                                                                                                                                                         397074,0,178000,
                                                                                                                                                                                                                                                                                                          397083,0,178000,
                                                                                                                                                                                                                                                                                                           397090,0,178000,
                                                                                                                                                                                                                                                                                                            397098,0,178000,
                                                                                                                                                                                                                                                                                                             397105,0,178000,
                                                                                                                                                                                                                                                                                                              397113,0,178000,
                                                                                                                                                                                                                                                                                                               397120,0,178000,
                                                                                                                                                                                                                                                                                                                397127,0,178000,
                                                                                                                                                                                                                                                                                                                 397135,0,178000,
                                                                                                                                                                                                                                                                                                                  397142,0,178000,
                                                                                                                                                                                                                                                                                                                   397150,0,178000,
                                                                                                                                                                                                                                                                                                                    397157,0,178000,
                                                                                                                                                                                                                                                                                                                     397165,0,178000,
                                                                                                                                                                                                                                                                                                                      397172,0,178000,
                                                                                                                                                                                                                                                                                                                       397184,0,178000,
                                                                                                                                                                                                                                                                                                                        397191,0,178000,
                                                                                                                                                                                                                                                                                                                         397199,0,178000,
                                                                                                                                                                                                                                                                                                                          397206,0,178000,
                                                                                                                                                                                                                                                                                                                           397214,0,178000,
                                                                                                                                                                                                                                                                                                                            397221,0,178000,
                                                                                                                                                                                                                                                                                                                             397229,0,178000,
                                                                                                                                                                                                                                                                                                                              397236,0,178000,
                                                                                                                                                                                                                                                                                                                               397244,0,178000,
                                                                                                                                                                                                                                                                                                                                397251,0,178000,
                                                                                                                                                                                                                                                                                                                                 397259,0,178000,
                                                                                                                                                                                                                                                                                                                                  397267,0,178000,
                                                                                                                                                                                                                                                                                                                                   397274,0,178000,
                                                                                                                                                                                                                                                                                                                                    397283,0,178000,
                                                                                                                                                                                                                                                                                                                                     397291,0,178000,
                                                                                                                                                                                                                                                                                                                                      397298,0,178000,
                                                                                                                                                                                                                                                                                                                                       397306,0,178000,
                                                                                                                                                                                                                                                                                                                                        397314,0,178000,
                                                                                                                                                                                                                                                                                                                                         397321,0,178000,
                                                                                                                                                                                                                                                                                                                                          397329,0,178000,
                                                                                                                                                                                                                                                                                                                                           397336,0,178000,
                                                                                                                                                                                                                                                                                                                                            397344,0,178000,
                                                                                                                                                                                                                                                                                                                                             397351,0,178000,
                                                                                                                                                                                                                                                                                                                                              397359,0,178000,
                                                                                                                                                                                                                                                                                                                                               397368,0,178000,
                                                                                                                                                                                                                                                                                                                                                397376,0,178000,
                                                                                                                                                                                                                                                                                                                                                 397383,0,178000,
                                                                                                                                                                                                                                                                                                                                                  397391,0,178000,
                                                                                                                                                                                                                                                                                                                                                   397398,0,178000,
                                                                                                                                                                                                                                                                                                                                                    397406,0,178000,
                                                                                                                                                                                                                                                                                                                                                     397413,0,178000,
                                                                                                                                                                                                                                                                                                                                                      397421,0,178000,
                                                                                                                                                                                                                                                                                                                                                       397429,0,178000,
                                                                                                                                                                                                                                                                                                                                                        397436,0,178000,
                                                                                                                                                                                                                                                                                                                                                         397444,0,178000,
                                                                                                                                                                                                                                                                                                                                                          397452,0,178000,
                                                                                                                                                                                                                                                                                                                                                           397461,0,178000,
                                                                                                                                                                                                                                                                                                                                                            397468,0,178000,
                                                                                                                                                                                                                                                                                                                                                             397476,0,178000,
                                                                                                                                                                                                                                                                                                                                                              397483,0,178000,
                                                                                                                                                                                                                                                                                                                                                               397491,0,178000,
                                                                                                                                                                                                                                                                                                                                                                397499,0,178000,
                                                                                                                                                                                                                                                                                                                                                                 397506,0,178000,
                                                                                                                                                                                                                                                                                                                                                                  397514,0,178000,
                                                                                                                                                                                                                                                                                                                                                                   397522,0,178000,
                                                                                                                                                                                                                                                                                                                                                                    397529,0,178000,
                                                                                                                                                                                                                                                                                                                                                                     397537,0,178000,
                                                                                                                                                                                                                                                                                                                                                                      397546,0,178000,
                                                                                                                                                                                                                                                                                                                                                                       397554,0,178000,
                                                                                                                                                                                                                                                                                                                                                                        397561,0,178000,
                                                                                                                                                                                                                                                                                                                                                                         397569,0,178000,
                                                                                                                                                                                                                                                                                                                                                                          397577,0,178000,
                                                                                                                                                                                                                                                                                                                                                                           397584,0,178000,
                                                                                                                                                                                                                                                                                                                                                                            397592,0,178000,
                                                                                                                                                                                                                                                                                                                                                                             397599,0,178000,
                                                                                                                                                                                                                                                                                                                                                                              397607,0,178000,
                                                                                                                                                                                                                                                                                                                                                                               397615,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                397623,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                 397632,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                  397639,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                   397647,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                    397655,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                     397662,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                      397670,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                       397678,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                        397686,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                         397693,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                          397701,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                           397710,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                            397718,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                             397726,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                              397733,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                               397741,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                397749,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                 397757,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                  397764,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                   397772,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                    397780,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                     397790,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                      397798,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                       397806,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                        397814,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                         397821,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                          397829,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                           397837,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                            397845,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                             397853,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                              397860,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                               397870,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                397878,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                 397886,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                  397893,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                   397901,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                    397909,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                     397917,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                      397925,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                       397933,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                        397940,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                         397950,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                          397958,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                           397966,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                            397974,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                             397982,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                              397989,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                               397997,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                398005,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                 398013,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                  398021,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                   398031,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                    398039,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                     398047,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                      398055,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                       398062,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                        398070,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                         398078,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                          398086,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                           398094,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                            398104,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                             398112,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                              398120,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                               398128,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                398136,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 398143,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  398151,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   398159,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    398167,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     398177,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      398185,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       398193,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        398201,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         398209,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          398217,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           398225,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            398233,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             398241,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              398252,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               398260,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                398268,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398276,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398284,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398292,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    398300,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398308,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      398316,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       398326,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        398334,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         398342,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          398351,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           398359,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            398367,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             398375,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              398383,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               398391,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                398401,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398409,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398417,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398425,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    398433,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398441,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      398449,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       398457,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        398467,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         398475,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          398483,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           398492,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            398500,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             398508,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              398516,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               398524,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                398534,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398542,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398550,0,178000,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398559,0,178000,

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398575,0,178000,


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        398599,0,178000,



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       398635,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      398643,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398651,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    398659,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398667,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398677,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398685,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                398693,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               398701,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              398709,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             398718,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            398726,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           398734,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          398743,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         398751,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        398759,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       398767,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      398775,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398783,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    398791,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398799,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398810,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398818,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                398826,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               398834,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              398842,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             398850,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            398858,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           398866,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          398873,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         398883,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        398891,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       398899,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      398907,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     398915,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    398923,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   398931,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  398939,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 398947,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                398956,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               398965,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              398972,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             398980,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            398988,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           398996,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          399004,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         399012,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        399020,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       399029,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      399037,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     399045,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    399053,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   399061,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  399069,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 399076,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                399084,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                               399092,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                              399102,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                             399109,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                            399117,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                           399125,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                          399133,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                         399141,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                        399149,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                       399156,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                      399164,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                     399174,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                    399181,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                   399189,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                  399197,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 399205,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                399213,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                               399220,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                              399228,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                             399236,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                            399244,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                           399253,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                          399261,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                         399269,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                        399277,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                       399284,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                      399292,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                     399300,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                    399308,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                   399315,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                  399323,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                 399333,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                399340,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                               399348,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                              399356,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                             399364,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                            399371,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                           399379,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                          399387,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                         399395,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                        399402,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                       399412,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                      399419,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                     399427,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                    399435,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                   399442,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                  399450,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                 399458,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                399465,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                               399473,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                              399481,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                             399490,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                            399497,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                           399505,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                          399513,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                         399520,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                        399528,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                       399536,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                      399543,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                     399551,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                    399558,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                   399570,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                  399578,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                 399585,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                399593,0,-1,
                                                                                                                                                                                                                                                                                                                                                                               399600,0,-1,
                                                                                                                                                                                                                                                                                                                                                                              399608,0,-1,
                                                                                                                                                                                                                                                                                                                                                                             399615,0,-1,
                                                                                                                                                                                                                                                                                                                                                                            399623,0,-1,
                                                                                                                                                                                                                                                                                                                                                                           399631,0,-1,
                                                                                                                                                                                                                                                                                                                                                                          399638,0,-1,
                                                                                                                                                                                                                                                                                                                                                                         399646,0,-1,
                                                                                                                                                                                                                                                                                                                                                                        399655,0,-1,
                                                                                                                                                                                                                                                                                                                                                                       399663,0,-1,
                                                                                                                                                                                                                                                                                                                                                                      399670,0,-1,
                                                                                                                                                                                                                                                                                                                                                                     399678,0,-1,
                                                                                                                                                                                                                                                                                                                                                                    399685,0,-1,
                                                                                                                                                                                                                                                                                                                                                                   399693,0,-1,
                                                                                                                                                                                                                                                                                                                                                                  399700,0,-1,
                                                                                                                                                                                                                                                                                                                                                                 399708,0,-1,
                                                                                                                                                                                                                                                                                                                                                                399715,0,-1,
                                                                                                                                                                                                                                                                                                                                                               399723,0,-1,
                                                                                                                                                                                                                                                                                                                                                              399730,0,-1,
                                                                                                                                                                                                                                                                                                                                                             399739,0,-1,
                                                                                                                                                                                                                                                                                                                                                            399747,0,-1,
                                                                                                                                                                                                                                                                                                                                                           399754,0,-1,
                                                                                                                                                                                                                                                                                                                                                          399762,0,-1,
                                                                                                                                                                                                                                                                                                                                                         399769,0,-1,
                                                                                                                                                                                                                                                                                                                                                        399777,0,-1,
                                                                                                                                                                                                                                                                                                                                                       399784,0,-1,
                                                                                                                                                                                                                                                                                                                                                      399792,0,-1,
                                                                                                                                                                                                                                                                                                                                                     399799,0,-1,
                                                                                                                                                                                                                                                                                                                                                    399807,0,-1,
                                                                                                                                                                                                                                                                                                                                                   399814,0,-1,
                                                                                                                                                                                                                                                                                                                                                  399822,0,-1,
                                                                                                                                                                                                                                                                                                                                                 399831,0,-1,
                                                                                                                                                                                                                                                                                                                                                399838,0,-1,
                                                                                                                                                                                                                                                                                                                                               399846,0,-1,
                                                                                                                                                                                                                                                                                                                                              399853,0,-1,
                                                                                                                                                                                                                                                                                                                                             399860,0,-1,
                                                                                                                                                                                                                                                                                                                                            399868,0,-1,
                                                                                                                                                                                                                                                                                                                                           399875,0,-1,
                                                                                                                                                                                                                                                                                                                                          399883,0,-1,
                                                                                                                                                                                                                                                                                                                                         399890,0,-1,
                                                                                                                                                                                                                                                                                                                                        399898,0,-1,
                                                                                                                                                                                                                                                                                                                                       399905,0,-1,
                                                                                                                                                                                                                                                                                                                                      399912,0,-1,
                                                                                                                                                                                                                                                                                                                                     399922,0,-1,
                                                                                                                                                                                                                                                                                                                                    399930,0,-1,
                                                                                                                                                                                                                                                                                                                                   399937,0,-1,
                                                                                                                                                                                                                                                                                                                                  399944,0,-1,
                                                                                                                                                                                                                                                                                                                                 399952,0,-1,
                                                                                                                                                                                                                                                                                                                                399959,0,-1,
                                                                                                                                                                                                                                                                                                                               399967,0,-1,
                                                                                                                                                                                                                                                                                                                              399974,0,-1,
                                                                                                                                                                                                                                                                                                                             399981,0,-1,
                                                                                                                                                                                                                                                                                                                            399989,0,-1,
                                                                                                                                                                                                                                                                                                                           399996,0,-1,
                                                                                                                                                                                                                                                                                                                          400003,0,-1,
                                                                                                                                                                                                                                                                                                                         400012,0,-1,
                                                                                                                                                                                                                                                                                                                        400020,0,-1,
                                                                                                                                                                                                                                                                                                                       400027,0,-1,
                                                                                                                                                                                                                                                                                                                      400034,0,-1,
                                                                                                                                                                                                                                                                                                                     400042,0,-1,
                                                                                                                                                                                                                                                                                                                    400049,0,-1,
                                                                                                                                                                                                                                                                                                                   400056,0,-1,
                                                                                                                                                                                                                                                                                                                  400064,0,-1,
                                                                                                                                                                                                                                                                                                                 400071,0,-1,
                                                                                                                                                                                                                                                                                                                400078,0,-1,
                                                                                                                                                                                                                                                                                                               400086,0,-1,
                                                                                                                                                                                                                                                                                                              400093,0,-1,
                                                                                                                                                                                                                                                                                                             400100,0,-1,
                                                                                                                                                                                                                                                                                                            400109,0,-1,
                                                                                                                                                                                                                                                                                                           400116,0,-1,
                                                                                                                                                                                                                                                                                                          400124,0,-1,
                                                                                                                                                                                                                                                                                                         400131,0,-1,
                                                                                                                                                                                                                                                                                                        400138,0,-1,
                                                                                                                                                                                                                                                                                                       400146,0,-1,
                                                                                                                                                                                                                                                                                                      400153,0,-1,
                                                                                                                                                                                                                                                                                                     400160,0,-1,
                                                                                                                                                                                                                                                                                                    400167,0,-1,
                                                                                                                                                                                                                                                                                                   400175,0,-1,
                                                                                                                                                                                                                                                                                                  400182,0,-1,
                                                                                                                                                                                                                                                                                                 400189,0,-1,
                                                                                                                                                                                                                                                                                                400196,0,-1,
                                                                                                                                                                                                                                                                                               400205,0,-1,
                                                                                                                                                                                                                                                                                              400212,0,-1,
                                                                                                                                                                                                                                                                                             400220,0,-1,
                                                                                                                                                                                                                                                                                            400227,0,-1,
                                                                                                                                                                                                                                                                                           400234,0,-1,
                                                                                                                                                                                                                                                                                          400241,0,-1,
                                                                                                                                                                                                                                                                                         400249,0,-1,
                                                                                                                                                                                                                                                                                        400256,0,-1,
                                                                                                                                                                                                                                                                                       400263,0,-1,
                                                                                                                                                                                                                                                                                      400270,0,-1,
                                                                                                                                                                                                                                                                                     400277,0,-1,
                                                                                                                                                                                                                                                                                    400285,0,-1,
                                                                                                                                                                                                                                                                                   400292,0,-1,
                                                                                                                                                                                                                                                                                  400299,0,-1,
                                                                                                                                                                                                                                                                                 400308,0,-1,
                                                                                                                                                                                                                                                                                400315,0,-1,
                                                                                                                                                                                                                                                                               400322,0,-1,
                                                                                                                                                                                                                                                                              400329,0,-1,
                                                                                                                                                                                                                                                                             400337,0,-1,
                                                                                                                                                                                                                                                                            400344,0,-1,
                                                                                                                                                                                                                                                                           400351,0,-1,
                                                                                                                                                                                                                                                                          400358,0,-1,
                                                                                                                                                                                                                                                                         400365,0,-1,
                                                                                                                                                                                                                                                                        400372,0,-1,
                                                                                                                                                                                                                                                                       400379,0,-1,
                                                                                                                                                                                                                                                                      400387,0,-1,
                                                                                                                                                                                                                                                                     400394,0,-1,
                                                                                                                                                                                                                                                                    400401,0,-1,
                                                                                                                                                                                                                                                                   400413,0,-1,
                                                                                                                                                                                                                                                                  400425,0,-1,
                                                                                                                                                                                                                                                                 400432,0,-1,
                                                                                                                                                                                                                                                                400439,0,-1,
                                                                                                                                                                                                                                                               400447,0,-1,
                                                                                                                                                                                                                                                              400454,0,-1,
                                                                                                                                                                                                                                                             400461,0,-1,
                                                                                                                                                                                                                                                            400468,0,-1,
                                                                                                                                                                                                                                                           400475,0,-1,
                                                                                                                                                                                                                                                          400482,0,-1,
                                                                                                                                                                                                                                                         400489,0,-1,
                                                                                                                                                                                                                                                        400496,0,-1,
                                                                                                                                                                                                                                                       400503,0,-1,
                                                                                                                                                                                                                                                      400510,0,-1,
                                                                                                                                                                                                                                                     400517,0,-1,
                                                                                                                                                                                                                                                    400524,0,-1,
                                                                                                                                                                                                                                                   400533,0,-1,
                                                                                                                                                                                                                                                  400540,0,-1,
                                                                                                                                                                                                                                                 400547,0,-1,
                                                                                                                                                                                                                                                400554,0,-1,
                                                                                                                                                                                                                                               400561,0,-1,
                                                                                                                                                                                                                                              400568,0,-1,
                                                                                                                                                                                                                                             400576,0,-1,
                                                                                                                                                                                                                                            400583,0,-1,
                                                                                                                                                                                                                                           400590,0,-1,
                                                                                                                                                                                                                                          400597,0,-1,
                                                                                                                                                                                                                                         400604,0,-1,
                                                                                                                                                                                                                                        400611,0,-1,
                                                                                                                                                                                                                                       400618,0,-1,
                                                                                                                                                                                                                                      400625,0,-1,
                                                                                                                                                                                                                                     400632,0,-1,
                                                                                                                                                                                                                                    400639,0,-1,
                                                                                                                                                                                                                                   400647,0,-1,
                                                                                                                                                                                                                                  400654,0,-1,
                                                                                                                                                                                                                                 400661,0,-1,
                                                                                                                                                                                                                                400668,0,-1,
                                                                                                                                                                                                                               400675,0,-1,
                                                                                                                                                                                                                              400682,0,-1,
                                                                                                                                                                                                                             400689,0,-1,
                                                                                                                                                                                                                            400696,0,-1,
                                                                                                                                                                                                                           400703,0,-1,
                                                                                                                                                                                                                          400710,0,-1,
                                                                                                                                                                                                                         400717,0,-1,
                                                                                                                                                                                                                        400724,0,-1,
                                                                                                                                                                                                                       400731,0,-1,
                                                                                                                                                                                                                      400738,0,-1,
                                                                                                                                                                                                                     400745,0,-1,
                                                                                                                                                                                                                    400752,0,-1,
                                                                                                                                                                                                                   400759,0,-1,
                                                                                                                                                                                                                  400765,0,-1,
                                                                                                                                                                                                                 400774,0,-1,
                                                                                                                                                                                                                400781,0,-1,
                                                                                                                                                                                                               400788,0,-1,
                                                                                                                                                                                                              400795,0,-1,
                                                                                                                                                                                                             400802,0,-1,
                                                                                                                                                                                                            400809,0,-1,
                                                                                                                                                                                                           400816,0,-1,
                                                                                                                                                                                                          400823,0,-1,
                                                                                                                                                                                                         400830,0,-1,
                                                                                                                                                                                                        400836,0,-1,
                                                                                                                                                                                                       400843,0,-1,
                                                                                                                                                                                                      400850,0,-1,
                                                                                                                                                                                                     400857,0,-1,
                                                                                                                                                                                                    400864,0,-1,
                                                                                                                                                                                                   400871,0,-1,
                                                                                                                                                                                                  400878,0,-1,
                                                                                                                                                                                                 400884,0,-1,
                                                                                                                                                                                                400891,0,-1,
                                                                                                                                                                                               400898,0,-1,
                                                                                                                                                                                              400907,0,-1,
                                                                                                                                                                                             400913,0,-1,
                                                                                                                                                                                            400920,0,-1,
                                                                                                                                                                                           400927,0,-1,
                                                                                                                                                                                          400934,0,-1,
                                                                                                                                                                                         400941,0,-1,
                                                                                                                                                                                        400947,0,-1,
                                                                                                                                                                                       400954,0,-1,
                                                                                                                                                                                      400961,0,-1,
                                                                                                                                                                                     400968,0,-1,
                                                                                                                                                                                    400975,0,-1,
                                                                                                                                                                                   400981,0,-1,
                                                                                                                                                                                  400988,0,-1,
                                                                                                                                                                                 400995,0,-1,
                                                                                                                                                                                401002,0,-1,
                                                                                                                                                                               401008,0,-1,
                                                                                                                                                                              401015,0,-1,
                                                                                                                                                                             401022,0,-1,
                                                                                                                                                                            401029,0,-1,
                                                                                                                                                                           401035,0,-1,
                                                                                                                                                                          401042,0,-1,
                                                                                                                                                                         401051,0,-1,
                                                                                                                                                                        401057,0,-1,
                                                                                                                                                                       401064,0,-1,
                                                                                                                                                                      401071,0,-1,
                                                                                                                                                                     401077,0,-1,
                                                                                                                                                                    401084,0,-1,
                                                                                                                                                                   401091,0,-1,
                                                                                                                                                                  401098,0,-1,
                                                                                                                                                                 401104,0,-1,
                                                                                                                                                                401111,0,-1,
                                                                                                                                                               401118,0,-1,
                                                                                                                                                              401124,0,-1,
                                                                                                                                                             401131,0,-1,
                                                                                                                                                            401138,0,-1,
                                                                                                                                                           401144,0,-1,
                                                                                                                                                          401151,0,-1,
                                                                                                                                                         401158,0,-1,
                                                                                                                                                        401164,0,-1,
                                                                                                                                                       401171,0,-1,
                                                                                                                                                      401178,0,-1,
                                                                                                                                                     401184,0,-1,
                                                                                                                                                    401191,0,-1,
                                                                                                                                                   401198,0,-1,
                                                                                                                                                  401204,0,-1,
                                                                                                                                                 401213,0,-1,
                                                                                                                                                401219,0,-1,
                                                                                                                                               401226,0,-1,
                                                                                                                                              401232,0,-1,
                                                                                                                                             401239,0,-1,
                                                                                                                                            401246,0,-1,
                                                                                                                                           401252,0,-1,
                                                                                                                                          401259,0,-1,
                                                                                                                                         401265,0,-1,
                                                                                                                                        401272,0,-1,
                                                                                                                                       401279,0,-1,
                                                                                                                                      401285,0,-1,
                                                                                                                                     401292,0,-1,
                                                                                                                                    401298,0,-1,
                                                                                                                                   401305,0,-1,
                                                                                                                                  401311,0,-1,
                                                                                                                                 401318,0,-1,
                                                                                                                                401324,0,-1,
                                                                                                                               401331,0,-1,
                                                                                                                              401338,0,-1,
                                                                                                                             401344,0,-1,
                                                                                                                            401351,0,-1,
                                                                                                                           401357,0,-1,
                                                                                                                          401364,0,-1,
                                                                                                                         401370,0,-1,
                                                                                                                        401377,0,-1,
                                                                                                                       401383,0,-1,
                                                                                                                      401390,0,-1,
                                                                                                                     401396,0,-1,
                                                                                                                    401404,0,-1,
                                                                                                                   401411,0,-1,
                                                                                                                  401417,0,-1,
                                                                                                                 401424,0,-1,
                                                                                                                401430,0,-1,
                                                                                                               401437,0,-1,
                                                                                                              401443,0,-1,
                                                                                                             401450,0,-1,
                                                                                                            401456,0,-1,
                                                                                                           401463,0,-1,
                                                                                                          401469,0,-1,
                                                                                                         401476,0,-1,
                                                                                                        401482,0,-1,
                                                                                                       401489,0,-1,
                                                                                                      401495,0,-1,
                                                                                                     401502,0,-1,
                                                                                                    401508,0,-1,
                                                                                                   401515,0,-1,
                                                                                                  401521,0,-1,
                                                                                                 401527,0,-1,
                                                                                                401534,0,-1,
                                                                                               401540,0,-1,
                                                                                              401547,0,-1,
                                                                                             401553,0,-1,
                                                                                            401560,0,-1,
                                                                                           401566,0,-1,
                                                                                          401573,0,-1,
                                                                                         401579,0,-1,
                                                                                        401585,0,-1,
                                                                                       401592,0,-1,
                                                                                      401598,0,-1,
                                                                                     401604,0,-1,
                                                                                    401611,0,-1,
                                                                                   401617,0,-1,
                                                                                  401624,0,-1,
                                                                                 401630,0,-1,
                                                                                401638,0,-1,
                                                                               401644,0,-1,
                                                                              401651,0,-1,
                                                                             401657,0,-1,
                                                                            401664,0,-1,
                                                                           401670,0,-1,
                                                                          401676,0,-1,
                                                                         401683,0,-1,
                                                                        401689,0,-1,
                                                                       401696,0,-1,
                                                                      401702,0,-1,
                                                                     401709,0,-1,
                                                                    401715,0,-1,
                                                                   401721,0,-1,
                                                                  401728,0,-1,
                                                                 401734,0,-1,
                                                                401740,0,-1,
                                                               401747,0,-1,
                                                              401753,0,-1,
                                                             401759,0,-1,
                                                            401765,0,-1,
                                                           401772,0,-1,
                                                          401778,0,-1,
                                                         401784,0,-1,
                                                        401791,0,-1,
                                                       401797,0,-1,
                                                      401803,0,-1,
                                                     401809,0,-1,
                                                    401816,0,-1,
                                                   401822,0,-1,
                                                  401828,0,-1,
                                                 401835,0,-1,
                                                401841,0,-1,
                                               401847,0,-1,
                                              401853,0,-1,
                                             401860,0,-1,
                                            401866,0,-1,
                                           401872,0,-1,
                                          401878,0,-1,
                                         401885,0,-1,
                                        401891,0,-1,
                                       401897,0,-1,
                                      401903,0,-1,
                                     401910,0,-1,
                                    401916,0,-1,
                                   401922,0,-1,
                                  401928,0,-1,
                                 401934,0,-1,
                                401941,0,-1,
                               401947,0,-1,
                              401953,0,-1,
                             401959,0,-1,
                            401965,0,-1,
                           401971,0,-1,
                          401978,0,-1,
                         401984,0,-1,
                        401990,0,-1,
                       401996,0,-1,
                      402002,0,-1,
                     402008,0,-1,
                    402015,0,-1,
                   402021,0,-1,
                  402027,0,-1,
                 402033,0,-1,
                402039,0,-1,
               402045,0,-1,
              402051,0,-1,
             402057,0,-1,
            402064,0,-1,
           402070,0,-1,
          402078,0,-1,
         402085,0,-1,
        402091,0,-1,
       402097,0,-1,
      402103,0,-1,
     402109,0,-1,
    402115,0,-1,
   402121,0,-1,
  402127,0,-1,
 402133,0,-1,
 402139,0,27120,
  402147,0,178024,
  402153,0,-1,
 402159,0,-1,
 402165,0,27120,
  402172,0,178120,
  402178,0,-1,
 402184,0,-1,
 402190,0,27120,
  402197,0,178104,
  402203,0,-1,
 402209,0,-1,
 402215,0,27120,
  402222,0,178040,
   402228,0,25072,
   402314,0,-1,
  402321,0,-1,
 402327,0,-1,
 402336,0,29224,
 402343,0,-1,
 402349,0,25072,
 402427,0,-1,
 402434,0,25072,
 402509,0,-1,
 402515,0,25072,
 402554,0,-1,
 402560,0,25072,
 402595,0,-1,
 402602,0,25072,
 402636,0,-1,
 402642,0,25072,
 402676,0,-1,
 402683,0,177832,
 402689,0,-1,
 402695,0,177832,
 402702,0,-1,
 402708,0,177832,
 402714,0,-1,
 402720,0,178128,
 402726,0,-1,
 402732,0,177832,
 402738,0,-1,
 402744,0,178128,
 402751,0,-1,
 402756,0,177832,
 402763,0,-1,
 402769,0,178128,
 402775,0,-1,
 402781,0,177832,
 402787,0,-1,
 402793,0,178128,
 402800,0,-1,
 402805,0,177832,
 402812,0,-1,
 402818,0,178128,
 402824,0,-1,
 402830,0,177832,
 402836,0,-1,
 402843,0,178136,
 402849,0,-1,
 402855,0,178136,
 402862,0,-1,
 402868,0,178136,
 402874,0,-1,
 402880,0,178152,
 402887,0,-1,
 402893,0,178152,
 402899,0,-1,
 402905,0,178152,
 402911,0,-1,
 402918,0,178168,
 402924,0,-1,
 402930,0,178168,
 402936,0,-1,
 402943,0,178136,
 402949,0,-1,
 402956,0,178136,
 402962,0,-1,
 402968,0,178136,
 402974,0,-1,
 402980,0,178152,
 402987,0,-1,
 402993,0,178152,
 402999,0,-1,
 403006,0,178152,
 403012,0,-1,
 403018,0,178168,
 403024,0,-1,
 403031,0,178168,
 403037,0,-1,
 403044,0,178136,
 403050,0,-1,
 403056,0,178136,
 403062,0,-1,
 403069,0,178136,
 403075,0,-1,
 403081,0,178152,
 403087,0,-1,
 403093,0,178152,
 403100,0,-1,
 403106,0,178152,
 403112,0,-1,
 403118,0,178168,
 403124,0,-1,
 403131,0,178168,
 403137,0,-1,
 403144,0,178136,
 403150,0,-1,
 403156,0,178136,
 403163,0,-1,
 403169,0,178136,
 403175,0,-1,
 403181,0,178152,
 403188,0,-1,
 403194,0,178152,
 403200,0,-1,
 403206,0,178152,
 403212,0,-1,
 403219,0,178168,
 403225,0,-1,
 403231,0,178168,
 403237,0,-1,
 403244,0,178136,
 403251,0,-1,
 403257,0,178136,
 403263,0,-1,
 403269,0,178136,
 403275,0,-1,
 403281,0,178152,
 403288,0,-1,
 403294,0,178152,
 403300,0,-1,
 403306,0,178152,
 403312,0,-1,
 403319,0,178168,
 403325,0,-1,
 403331,0,178168,
 403337,0,-1,
 403344,0,178136,
 403351,0,-1,
 403357,0,178136,
 403363,0,-1,
 403369,0,178136,
 403376,0,-1,
 403382,0,178152,
 403388,0,-1,
 403394,0,178152,
 403400,0,-1,
 403407,0,178152,
 403413,0,-1,
 403419,0,178168,
 403425,0,-1,
 403431,0,178168,
 403438,0,-1,
 403445,0,178136,
 403451,0,-1,
 403457,0,178136,
 403463,0,-1,
 403470,0,178136,
 403476,0,-1,
 403482,0,178152,
 403488,0,-1,
 403494,0,178152,
 403501,0,-1,
 403507,0,178152,
 403513,0,-1,
 403519,0,178168,
 403525,0,-1,
 403531,0,178168,
 403538,0,-1,
 403544,0,178336,
  403551,0,178304,
  403557,0,-1,
 403563,0,-1,
 403569,0,178336,
  403576,0,178304,
  403582,0,-1,
 403588,0,-1,
 403595,0,178248,
 403602,0,-1,
 403608,0,178272,
 403614,0,-1,
 403638,0,25072,
 403667,0,-1,
 403673,0,25072,
 403700,0,-1,
 403706,0,25072,
 403726,0,-1,
 403732,0,25072,
 403769,0,-1,
 403775,0,25072,
 403809,0,-1,
 403815,0,25072,
 403853,0,-1,
 403859,0,25072,
 403894,0,-1,
 403901,0,25072,
 403918,0,-1,
 403924,0,25072,
 403949,0,-1,
 403955,0,25072,
 403981,0,-1,
 403988,0,25072,
 404015,0,-1,
 404021,0,25072,
 404047,0,-1,
 404053,0,25072,
 404080,0,-1,
 404086,0,25072,
 404112,0,-1,
 404118,0,25072,
 404143,0,-1,
 404150,0,25072,
 404176,0,-1,
 404183,0,25072,
 404208,0,-1,
 404214,0,25072,
 404240,0,-1,
 404247,0,25072,
 404274,0,-1,
 404280,0,25072,
 404305,0,-1,
 404312,0,21168,
 404318,0,-1,
404324,0,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21168
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21928
		, "static": true
		, "const": true
		, "time": 19
		, "total": 19
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22392
		, "static": true
		, "const": true
		, "time": 14
		, "total": 14
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22856
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23320
		, "static": true
		, "const": true
		, "time": 16
		, "total": 16
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25072
		, "static": true
		, "const": true
		, "time": 1034
		, "total": 1034
		, "hits": 31
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27120
		, "static": true
		, "const": true
		, "time": 7309
		, "total": 7309
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27728
		, "static": true
		, "const": true
		, "time": 52
		, "total": 52
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28480
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29224
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29960
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33576
		, "static": true
		, "const": true
		, "time": 36
		, "total": 36
		, "hits": 6
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34312
		, "static": true
		, "const": true
		, "time": 35
		, "total": 35
		, "hits": 6
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39024
		, "static": true
		, "const": true
		, "time": 22
		, "total": 22
		, "hits": 2
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39488
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39952
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40416
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40880
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41488
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41952
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42552
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43008
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43464
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43920
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44376
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44832
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45424
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45880
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46472
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "stdlib.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 69
		, "offs": 177832
		, "static": true
		, "const": true
		, "time": 48
		, "total": 48
		, "hits": 8
		, "fails": 0
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 177920
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 177928
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 55
		, "offs": 177936
		, "static": true
		, "const": true
		, "time": 9494
		, "total": 9494
		, "hits": 753
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 177992
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 178000
		, "static": true
		, "const": true
		, "time": 7081
		, "total": 7081
		, "hits": 488
		, "fails": -488
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 178024
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 64
		, "offs": 178040
		, "static": true
		, "const": true
		, "time": 14
		, "total": 100
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 178104
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 178120
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": -1
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "test/lang.initArray.ci"
		, "line": 62
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.initArray.ci"
			, "line": 62
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.initArray.ci"
			, "line": 62
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 5
		, "offs": 178128
		, "static": true
		, "const": true
		, "time": 30
		, "total": 30
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "test/lang.initArray.ci"
		, "line": 63
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.initArray.ci"
			, "line": 63
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.initArray.ci"
			, "line": 63
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "test/lang.initArray.ci"
			, "line": 63
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 178136
		, "static": true
		, "const": true
		, "time": 130
		, "total": 130
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "test/lang.initArray.ci"
		, "line": 64
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.initArray.ci"
			, "line": 64
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.initArray.ci"
			, "line": 64
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "test/lang.initArray.ci"
			, "line": 64
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 178152
		, "static": true
		, "const": true
		, "time": 129
		, "total": 129
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "test/lang.initArray.ci"
		, "line": 65
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.initArray.ci"
			, "line": 65
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.initArray.ci"
			, "line": 65
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.initArray.ci"
			, "line": 65
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 178168
		, "static": true
		, "const": true
		, "time": 87
		, "total": 87
		, "hits": 14
		, "fails": 0
	}, {
		"": "Record.staticMethod(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "Record"
		, "type": "function"
		, "file": "test/lang.initRecord.ci"
		, "line": 82
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 82
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 82
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 82
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 178248
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "Record.forwardMethod(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "forwardMethod"
		, "owner": "Record"
		, "type": "function"
		, "file": "test/lang.initRecord.ci"
		, "line": 105
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 105
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 105
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.initRecord.ci"
			, "line": 105
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 178272
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "initMethod.initInner(getRecord: bool): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "initInner"
		, "owner": "initMethod(getRecord: bool): int64"
		, "type": "function"
		, "file": "test/lang.initRecord.ci"
		, "line": 114
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 114
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "getRecord"
			, "kind": "variable"
			, "cast": "bool"
			, "name": "getRecord"
			, "type": "bool"
			, "file": "test/lang.initRecord.ci"
			, "line": 114
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 25
		, "offs": 178304
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 2
		, "fails": 0
	}, {
		"": "initMethod(getRecord: bool): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "initMethod"
		, "type": "function"
		, "file": "test/lang.initRecord.ci"
		, "line": 112
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.initRecord.ci"
			, "line": 112
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "getRecord"
			, "kind": "variable"
			, "cast": "bool"
			, "name": "getRecord"
			, "type": "bool"
			, "file": "test/lang.initRecord.ci"
			, "line": 112
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 19
		, "offs": 178336
		, "static": true
		, "const": true
		, "time": 25
		, "total": 37
		, "hits": 2
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 7726
		, "offs": 178624
		, "static": true
		, "const": false
		, "time": 1095
		, "total": 19703
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 65
	, "statementCount": 710
}
}

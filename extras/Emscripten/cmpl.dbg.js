// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 39264;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  
  
   
  
   
  
     

  function ___lock() {}

  
    

   

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

   

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  function _dlopen(/* ... */) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/kripken/emscripten/wiki/Linking");
    }function _dlclose() {
  return _dlopen.apply(null, arguments)
  }

  function _dlerror() {
  return _dlopen.apply(null, arguments)
  }


  function _dlsym() {
  return _dlopen.apply(null, arguments)
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

   

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { err("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall183": ___syscall183, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall85": ___syscall85, "___unlock": ___unlock, "__exit": __exit, "_abort": _abort, "_clock": _clock, "_dlclose": _dlclose, "_dlerror": _dlerror, "_dlopen": _dlopen, "_dlsym": _dlsym, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_gettimeofday": _gettimeofday, "_nanosleep": _nanosleep, "_time": _time, "_usleep": _usleep, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall183=env.___syscall183;
  var ___syscall195=env.___syscall195;
  var ___syscall197=env.___syscall197;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall85=env.___syscall85;
  var ___unlock=env.___unlock;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _clock=env._clock;
  var _dlclose=env._dlclose;
  var _dlerror=env._dlerror;
  var _dlopen=env._dlopen;
  var _dlsym=env._dlsym;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _gettimeofday=env._gettimeofday;
  var _nanosleep=env._nanosleep;
  var _time=env._time;
  var _usleep=env._usleep;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _ccGenCode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0;
 var $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer45 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer65 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer65 = sp + 208|0;
 $vararg_buffer60 = sp + 192|0;
 $vararg_buffer55 = sp + 176|0;
 $vararg_buffer52 = sp + 168|0;
 $vararg_buffer45 = sp + 144|0;
 $vararg_buffer39 = sp + 128|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $5 = $23;
 $24 = $5;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 $28 = $3;
 if ($27) {
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 14053;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = 2038;
   $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr3>>2] = 14064;
   _printFmt($30,0,14012,$vararg_buffer);
   __abort();
  }
  $31 = $5;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $2 = $33;
  $516 = $2;
  STACKTOP = sp;return ($516|0);
 }
 $34 = $3;
 $35 = ((($34)) + 5264|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $3;
 $40 = ((($39)) + 5264|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_install($28,19084,96,$38,$41,$44)|0);
 $46 = $5;
 $47 = ((($46)) + 12|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 >>> 5;
 $52 = $51 & 1;
 $53 = ($52|0)!=(0);
 $54 = $53 ? 64 : 0;
 $55 = (_leave($48,$54,0,0,0)|0);
 $56 = $3;
 $57 = ((($56)) + 12|0);
 HEAP32[$57>>2] = $55;
 $58 = $3;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $3;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60|0)!=($63|0);
 if ($64) {
  $65 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer4>>2] = 14053;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 2046;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 14064;
  _printFmt($65,0,14074,$vararg_buffer4);
  __abort();
 }
 $66 = $3;
 $67 = ((($66)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 L11: do {
  if ($69) {
   $6 = 0;
   $70 = $3;
   $71 = ((($70)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $7 = $72;
   L13: while(1) {
    $73 = $7;
    $74 = ($73|0)!=(0|0);
    if (!($74)) {
     break L11;
    }
    $8 = 0;
    $75 = $7;
    $9 = $75;
    while(1) {
     $76 = $9;
     $77 = ($76|0)!=(0|0);
     if (!($77)) {
      break;
     }
     $78 = $9;
     $79 = ((($78)) + 32|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $7;
     $82 = ($80|0)==($81|0);
     if ($82) {
      $83 = $9;
      $84 = (_isInline($83)|0);
      $85 = ($84|0)!=(0);
      if (!($85)) {
       $86 = $6;
       $87 = ($86|0)==(0|0);
       $88 = $8;
       $89 = ($88|0)==(0|0);
       $or$cond = $87 | $89;
       if ($or$cond) {
        break L13;
       }
       $93 = $9;
       $94 = ((($93)) + 52|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $8;
       $97 = ((($96)) + 52|0);
       HEAP32[$97>>2] = $95;
       $98 = $6;
       $99 = ((($98)) + 52|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $9;
       $102 = ((($101)) + 52|0);
       HEAP32[$102>>2] = $100;
       $103 = $9;
       $104 = $6;
       $105 = ((($104)) + 52|0);
       HEAP32[$105>>2] = $103;
       $106 = $6;
       $7 = $106;
       $107 = $8;
       $9 = $107;
      }
     }
     $108 = $9;
     $8 = $108;
     $109 = $9;
     $110 = ((($109)) + 52|0);
     $111 = HEAP32[$110>>2]|0;
     $9 = $111;
    }
    $112 = $7;
    $6 = $112;
    $113 = $7;
    $114 = ((($113)) + 52|0);
    $115 = HEAP32[$114>>2]|0;
    $7 = $115;
   }
   $90 = HEAP32[3314]|0;
   $91 = $9;
   $92 = $7;
   HEAP32[$vararg_buffer9>>2] = 14053;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = 2066;
   $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
   HEAP32[$vararg_ptr13>>2] = 14064;
   $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
   HEAP32[$vararg_ptr14>>2] = $91;
   $vararg_ptr15 = ((($vararg_buffer9)) + 16|0);
   HEAP32[$vararg_ptr15>>2] = $92;
   _printFmt($90,0,14128,$vararg_buffer9);
   __abort();
   $2 = -1;
   $516 = $2;
   STACKTOP = sp;return ($516|0);
  }
 } while(0);
 $116 = $5;
 $117 = $4;
 $118 = (_vmInit($116,$117,0)|0);
 $119 = ($118|0)==(0);
 if ($119) {
  $2 = -2;
  $516 = $2;
  STACKTOP = sp;return ($516|0);
 }
 $120 = $5;
 $121 = (_emit($120,180)|0);
 $122 = $5;
 $123 = ((($122)) + 24|0);
 $124 = ((($123)) + 20|0);
 HEAP32[$124>>2] = $121;
 $125 = $5;
 $126 = ((($125)) + 24|0);
 $127 = ((($126)) + 28|0);
 HEAP32[$127>>2] = 0;
 $128 = $5;
 $129 = ((($128)) + 24|0);
 $130 = ((($129)) + 24|0);
 HEAP32[$130>>2] = 0;
 $131 = $3;
 $132 = ((($131)) + 16|0);
 $133 = HEAP32[$132>>2]|0;
 $10 = $133;
 L32: while(1) {
  $134 = $10;
  $135 = ($134|0)!=(0|0);
  if (!($135)) {
   break;
  }
  $136 = $10;
  $137 = $5;
  $138 = ((($137)) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($136|0)==($139|0);
  do {
   if (!($140)) {
    $141 = $10;
    $142 = (_isInline($141)|0);
    $143 = ($142|0)!=(0);
    if (!($143)) {
     $144 = $10;
     $145 = (_isTypename($144)|0);
     $146 = ($145|0)!=(0);
     $147 = $10;
     if ($146) {
      $148 = ((($147)) + 20|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)==(0);
      if ($150) {
       $151 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer16>>2] = 14053;
       $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
       HEAP32[$vararg_ptr19>>2] = 2107;
       $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
       HEAP32[$vararg_ptr20>>2] = 14064;
       _printFmt($151,0,14191,$vararg_buffer16);
       __abort();
      }
      $152 = $10;
      $153 = (_isStatic($152)|0);
      $154 = ($153|0)!=(0);
      if ($154) {
       break;
      }
      $155 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer21>>2] = 14053;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = 2108;
      $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
      HEAP32[$vararg_ptr25>>2] = 14064;
      _printFmt($155,0,25840,$vararg_buffer21);
      __abort();
      break;
     }
     $156 = (_isStatic($147)|0);
     $157 = ($156|0)!=(0);
     if ($157) {
      $158 = $10;
      $159 = ((($158)) + 20|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160|0)!=(0);
      if ($161) {
       $162 = HEAP32[3314]|0;
       $163 = $10;
       $164 = $10;
       $165 = ((($164)) + 20|0);
       $166 = HEAP32[$165>>2]|0;
       HEAP32[$vararg_buffer26>>2] = 14053;
       $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
       HEAP32[$vararg_ptr29>>2] = 2117;
       $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
       HEAP32[$vararg_ptr30>>2] = 14064;
       $vararg_ptr31 = ((($vararg_buffer26)) + 12|0);
       HEAP32[$vararg_ptr31>>2] = $163;
       $vararg_ptr32 = ((($vararg_buffer26)) + 16|0);
       HEAP32[$vararg_ptr32>>2] = $166;
       _printFmt($162,0,14236,$vararg_buffer26);
       __abort();
      }
      $167 = $5;
      $168 = ((($167)) + 132|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (_padPointer($169,4)|0);
      $171 = $5;
      $172 = ((($171)) + 132|0);
      HEAP32[$172>>2] = $170;
      $173 = $10;
      $174 = (_isFunction($173)|0);
      $175 = ($174|0)!=(0);
      if (!($175)) {
       $289 = $10;
       $290 = (_isVariable($289)|0);
       $291 = ($290|0)!=(0);
       if (!($291)) {
        $338 = HEAP32[3314]|0;
        HEAP32[$vararg_buffer55>>2] = 14053;
        $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
        HEAP32[$vararg_ptr58>>2] = 2176;
        $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
        HEAP32[$vararg_ptr59>>2] = 14064;
        _printFmt($338,0,28431,$vararg_buffer55);
        __abort();
        break;
       }
       $292 = $10;
       $293 = ((($292)) + 16|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = ($294>>>0)<=(0);
       if ($295) {
        $296 = HEAP32[3314]|0;
        $297 = $10;
        $298 = $10;
        $299 = ((($298)) + 16|0);
        $300 = HEAP32[$299>>2]|0;
        HEAP32[$vararg_buffer45>>2] = 14053;
        $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
        HEAP32[$vararg_ptr48>>2] = 2163;
        $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
        HEAP32[$vararg_ptr49>>2] = 14064;
        $vararg_ptr50 = ((($vararg_buffer45)) + 12|0);
        HEAP32[$vararg_ptr50>>2] = $297;
        $vararg_ptr51 = ((($vararg_buffer45)) + 16|0);
        HEAP32[$vararg_ptr51>>2] = $300;
        _printFmt($296,0,14368,$vararg_buffer45);
        __abort();
       }
       $301 = $5;
       $302 = $5;
       $303 = ((($302)) + 132|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = (_vmOffset($301,$304)|0);
       $306 = $10;
       $307 = ((($306)) + 20|0);
       HEAP32[$307>>2] = $305;
       $308 = $10;
       $309 = ((($308)) + 16|0);
       $310 = HEAP32[$309>>2]|0;
       $311 = $5;
       $312 = ((($311)) + 132|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = (($313) + ($310)|0);
       HEAP32[$312>>2] = $314;
       $315 = $5;
       $316 = ((($315)) + 132|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = $5;
       $319 = ((($318)) + 136|0);
       $320 = HEAP32[$319>>2]|0;
       $321 = ($317>>>0)>=($320>>>0);
       if ($321) {
        label = 54;
        break L32;
       }
       $330 = $10;
       $331 = ((($330)) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $5;
       $334 = ((($333)) + 24|0);
       $335 = ((($334)) + 28|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = (($336) + ($332))|0;
       HEAP32[$335>>2] = $337;
       break;
      }
      $11 = 0;
      $176 = $10;
      $177 = ((($176)) + 40|0);
      $178 = HEAP32[$177>>2]|0;
      $12 = $178;
      while(1) {
       $179 = $12;
       $180 = ($179|0)!=(0|0);
       if (!($180)) {
        break;
       }
       $181 = $12;
       $182 = (_isStatic($181)|0);
       $183 = ($182|0)!=(0);
       if (!($183)) {
        $184 = $12;
        $185 = ((($184)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)!=(0);
        if (!($187)) {
         $188 = $12;
         $189 = ((($188)) + 28|0);
         $190 = HEAP32[$189>>2]|0;
         $191 = ((($190)) + 16|0);
         $192 = HEAP32[$191>>2]|0;
         $193 = (_padOffset($192,4)|0);
         $194 = $12;
         $195 = ((($194)) + 16|0);
         HEAP32[$195>>2] = $193;
         $196 = $12;
         $197 = ((($196)) + 16|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = $11;
         $200 = (($199) + ($198))|0;
         $11 = $200;
         $201 = $12;
         $202 = ((($201)) + 20|0);
         HEAP32[$202>>2] = $200;
        }
       }
       $203 = $12;
       $204 = ((($203)) + 24|0);
       $205 = HEAP32[$204>>2]|0;
       $12 = $205;
      }
      $206 = $5;
      $207 = $10;
      $208 = (_argsSize($207)|0);
      $209 = (4 + ($208))|0;
      (_fixJump($206,0,0,$209)|0);
      $210 = $5;
      $211 = (_emit($210,180)|0);
      $212 = $10;
      $213 = ((($212)) + 20|0);
      HEAP32[$213>>2] = $211;
      $214 = $3;
      $215 = $10;
      $216 = ((($215)) + 56|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_genAst($214,$217,1)|0);
      $219 = ($218|0)!=(0);
      $220 = $5;
      if (!($219)) {
       $221 = $10;
       $222 = ((($221)) + 4|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $10;
       $225 = ((($224)) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = $10;
       HEAP32[$vararg_buffer33>>2] = $227;
       _printLog($220,-1,$223,$226,0,14286,$vararg_buffer33);
       break;
      }
      $228 = (_emit($220,180)|0);
      $13 = $228;
      $229 = $13;
      $230 = $10;
      $231 = ((($230)) + 20|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ($229|0)==($232|0);
      if ($233) {
       label = 44;
      } else {
       $234 = $5;
       $235 = $5;
       $236 = ((($235)) + 24|0);
       $237 = ((($236)) + 12|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (_testOcp($234,$238,3,0)|0);
       $240 = ($239|0)!=(0);
       if (!($240)) {
        label = 44;
       }
      }
      if ((label|0) == 44) {
       label = 0;
       $241 = $5;
       $242 = (_emit($241,3)|0);
       $243 = ($242|0)!=(0);
       if (!($243)) {
        $244 = $5;
        $245 = $10;
        $246 = ((($245)) + 4|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = $10;
        $249 = ((($248)) + 8|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = $10;
        HEAP32[$vararg_buffer36>>2] = $251;
        _printLog($244,-1,$247,$250,0,14286,$vararg_buffer36);
        break;
       }
      }
      while(1) {
       $252 = $3;
       $253 = ((($252)) + 24|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ($254|0)!=(0|0);
       if (!($255)) {
        break;
       }
       $256 = HEAP32[3314]|0;
       $257 = $3;
       $258 = ((($257)) + 24|0);
       $259 = HEAP32[$258>>2]|0;
       HEAP32[$vararg_buffer39>>2] = 14053;
       $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
       HEAP32[$vararg_ptr42>>2] = 2153;
       $vararg_ptr43 = ((($vararg_buffer39)) + 8|0);
       HEAP32[$vararg_ptr43>>2] = 14064;
       $vararg_ptr44 = ((($vararg_buffer39)) + 12|0);
       HEAP32[$vararg_ptr44>>2] = $259;
       _printFmt($256,0,14312,$vararg_buffer39);
       __abort();
       $260 = $3;
       $261 = ((($260)) + 24|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = ((($262)) + 8|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = $3;
       $266 = ((($265)) + 24|0);
       HEAP32[$266>>2] = $264;
      }
      $267 = $5;
      $268 = (_emit($267,180)|0);
      $269 = $10;
      $270 = ((($269)) + 20|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($268) - ($271))|0;
      $273 = $10;
      $274 = ((($273)) + 16|0);
      HEAP32[$274>>2] = $272;
      $275 = $10;
      $276 = ((($275)) + 44|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $277 | 64;
      HEAP32[$276>>2] = $278;
      $279 = $10;
      $280 = ((($279)) + 16|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = $5;
      $283 = ((($282)) + 24|0);
      $284 = ((($283)) + 24|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = (($285) + ($281))|0;
      HEAP32[$284>>2] = $286;
      $287 = $5;
      $288 = $10;
      (_addDbgFunction($287,$288)|0);
     }
    }
   }
  } while(0);
  $339 = $10;
  $340 = ((($339)) + 52|0);
  $341 = HEAP32[$340>>2]|0;
  $10 = $341;
 }
 if ((label|0) == 54) {
  $322 = $5;
  $323 = $10;
  $324 = ((($323)) + 4|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = $10;
  $327 = ((($326)) + 8|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $10;
  HEAP32[$vararg_buffer52>>2] = $329;
  _printLog($322,-1,$325,$328,0,25323,$vararg_buffer52);
  $2 = -3;
  $516 = $2;
  STACKTOP = sp;return ($516|0);
 }
 $342 = $5;
 $343 = (_emit($342,180)|0);
 $14 = $343;
 $344 = $3;
 $345 = ((($344)) + 4|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = ($346|0)!=(0|0);
 if ($347) {
  $348 = $5;
  (_fixJump($348,0,0,0)|0);
  $349 = $3;
  $350 = ((($349)) + 4|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = HEAP32[$351>>2]|0;
  $353 = ($352|0)!=(42);
  if ($353) {
   $354 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer60>>2] = 14053;
   $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
   HEAP32[$vararg_ptr63>>2] = 2185;
   $vararg_ptr64 = ((($vararg_buffer60)) + 8|0);
   HEAP32[$vararg_ptr64>>2] = 14064;
   _printFmt($354,0,14418,$vararg_buffer60);
   __abort();
  }
  $355 = $3;
  $356 = ((($355)) + 16|0);
  $357 = HEAP32[$356>>2]|0;
  $15 = $357;
  while(1) {
   $358 = $15;
   $359 = ($358|0)!=(0|0);
   if (!($359)) {
    break;
   }
   $360 = $15;
   $361 = (_isVariable($360)|0);
   $362 = ($361|0)!=(0);
   if ($362) {
    $363 = $5;
    $364 = (_emit($363,180)|0);
    $16 = $364;
    $365 = $3;
    $366 = $15;
    $367 = (_genDeclaration($365,$366,1)|0);
    $368 = ($367|0)!=(0);
    if (!($368)) {
     label = 65;
     break;
    }
    $369 = $5;
    $370 = $16;
    $371 = $5;
    $372 = (_emit($371,180)|0);
    $373 = $15;
    $374 = ((($373)) + 64|0);
    $375 = HEAP32[$374>>2]|0;
    (_addDbgStatement($369,$370,$372,$375)|0);
   }
   $376 = $15;
   $377 = ((($376)) + 52|0);
   $378 = HEAP32[$377>>2]|0;
   $15 = $378;
  }
  if ((label|0) == 65) {
   $2 = -4;
   $516 = $2;
   STACKTOP = sp;return ($516|0);
  }
  $379 = $3;
  $380 = $3;
  $381 = ((($380)) + 4|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = $5;
  $384 = HEAP32[$383>>2]|0;
  $385 = $384 >>> 5;
  $386 = $385 & 1;
  $387 = ($386|0)!=(0);
  $388 = $387 ? 1 : 9;
  $389 = (_genAst($379,$382,$388)|0);
  $390 = ($389|0)!=(0);
  if (!($390)) {
   $2 = -5;
   $516 = $2;
   STACKTOP = sp;return ($516|0);
  }
  $391 = $3;
  $392 = ((($391)) + 24|0);
  $393 = HEAP32[$392>>2]|0;
  $394 = ($393|0)!=(0|0);
  if ($394) {
   $395 = HEAP32[3314]|0;
   $396 = $3;
   $397 = ((($396)) + 24|0);
   $398 = HEAP32[$397>>2]|0;
   HEAP32[$vararg_buffer65>>2] = 14053;
   $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
   HEAP32[$vararg_ptr68>>2] = 2207;
   $vararg_ptr69 = ((($vararg_buffer65)) + 8|0);
   HEAP32[$vararg_ptr69>>2] = 14064;
   $vararg_ptr70 = ((($vararg_buffer65)) + 12|0);
   HEAP32[$vararg_ptr70>>2] = $398;
   _printFmt($395,0,14312,$vararg_buffer65);
   __abort();
   $399 = $3;
   $400 = ((($399)) + 24|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = ((($401)) + 8|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = $3;
   $405 = ((($404)) + 24|0);
   HEAP32[$405>>2] = $403;
   $2 = -6;
   $516 = $2;
   STACKTOP = sp;return ($516|0);
  }
 }
 $406 = $5;
 $407 = (_emitInt($406,1,0,0)|0);
 $408 = $5;
 $409 = ((($408)) + 24|0);
 $410 = ((($409)) + 16|0);
 HEAP32[$410>>2] = $407;
 $411 = $14;
 $412 = $5;
 $413 = ((($412)) + 24|0);
 $414 = ((($413)) + 12|0);
 HEAP32[$414>>2] = $411;
 $415 = $5;
 $416 = ((($415)) + 24|0);
 $417 = ((($416)) + 32|0);
 HEAP32[$417>>2] = 0;
 $418 = $14;
 $419 = $5;
 $420 = ((($419)) + 12|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = ((($421)) + 20|0);
 HEAP32[$422>>2] = $418;
 $423 = $5;
 $424 = (_emit($423,180)|0);
 $425 = $14;
 $426 = (($424) - ($425))|0;
 $427 = $5;
 $428 = ((($427)) + 12|0);
 $429 = HEAP32[$428>>2]|0;
 $430 = ((($429)) + 16|0);
 HEAP32[$430>>2] = $426;
 $431 = $3;
 $432 = ((($431)) + 12|0);
 $433 = HEAP32[$432>>2]|0;
 $434 = $5;
 $435 = ((($434)) + 12|0);
 $436 = HEAP32[$435>>2]|0;
 $437 = ((($436)) + 36|0);
 HEAP32[$437>>2] = $433;
 $438 = $5;
 $439 = ((($438)) + 12|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = HEAP32[$440>>2]|0;
 $442 = $5;
 $443 = ((($442)) + 12|0);
 $444 = HEAP32[$443>>2]|0;
 $445 = ((($444)) + 68|0);
 HEAP32[$445>>2] = $441;
 $446 = $5;
 $447 = ((($446)) + 12|0);
 $448 = HEAP32[$447>>2]|0;
 $449 = ((($448)) + 16|0);
 $450 = HEAP32[$449>>2]|0;
 $451 = $5;
 $452 = ((($451)) + 24|0);
 $453 = ((($452)) + 24|0);
 $454 = HEAP32[$453>>2]|0;
 $455 = (($454) + ($450))|0;
 HEAP32[$453>>2] = $455;
 $456 = $5;
 $457 = $5;
 $458 = ((($457)) + 12|0);
 $459 = HEAP32[$458>>2]|0;
 (_addDbgFunction($456,$459)|0);
 $460 = $5;
 $461 = ((($460)) + 20|0);
 $462 = HEAP32[$461>>2]|0;
 $463 = ($462|0)!=(0|0);
 L108: do {
  if ($463) {
   $464 = $5;
   $465 = ((($464)) + 20|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = ((($466)) + 28|0);
   $17 = $467;
   $18 = 0;
   while(1) {
    $468 = $18;
    $469 = $17;
    $470 = ((($469)) + 12|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = ($468>>>0)<($471>>>0);
    if (!($472)) {
     break L108;
    }
    $473 = $18;
    $19 = $473;
    while(1) {
     $474 = $19;
     $475 = $17;
     $476 = ((($475)) + 12|0);
     $477 = HEAP32[$476>>2]|0;
     $478 = ($474>>>0)<($477>>>0);
     if (!($478)) {
      break;
     }
     $479 = $17;
     $480 = $18;
     $481 = (_getBuff($479,$480)|0);
     $20 = $481;
     $482 = $17;
     $483 = $19;
     $484 = (_getBuff($482,$483)|0);
     $21 = $484;
     $485 = $20;
     $486 = ((($485)) + 20|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = $21;
     $489 = ((($488)) + 20|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = ($487>>>0)>($490>>>0);
     $492 = $20;
     if ($491) {
      $493 = $21;
      _memSwap($492,$493,64);
     } else {
      $494 = ((($492)) + 20|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = $21;
      $497 = ((($496)) + 20|0);
      $498 = HEAP32[$497>>2]|0;
      $499 = ($495|0)==($498|0);
      if ($499) {
       $500 = $20;
       $501 = ((($500)) + 16|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = $21;
       $504 = ((($503)) + 16|0);
       $505 = HEAP32[$504>>2]|0;
       $506 = ($502>>>0)<($505>>>0);
       if ($506) {
        $507 = $20;
        $508 = $21;
        _memSwap($507,$508,64);
       }
      }
     }
     $509 = $19;
     $510 = (($509) + 1)|0;
     $19 = $510;
    }
    $511 = $18;
    $512 = (($511) + 1)|0;
    $18 = $512;
   }
  }
 } while(0);
 $513 = $5;
 $514 = ((($513)) + 4|0);
 $515 = HEAP32[$514>>2]|0;
 $2 = $515;
 $516 = $2;
 STACKTOP = sp;return ($516|0);
}
function _isInline($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _emit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $11 = (_emitOpc($9,$10,$$byval_copy)|0);
 STACKTOP = sp;return ($11|0);
}
function _isTypename($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isStatic($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _padPointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = (_padOffset($5,$6)|0);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _isFunction($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _padOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6))|0;
 $8 = $3;
 $9 = (0 - ($8))|0;
 $10 = $7 & $9;
 STACKTOP = sp;return ($10|0);
}
function _genAst($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0, $vararg_buffer54 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer67 = 0;
 var $vararg_buffer70 = 0, $vararg_buffer75 = 0, $vararg_buffer80 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0;
 var $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr73 = 0, $vararg_ptr74 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr94 = 0, $vararg_ptr95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $vararg_buffer91 = sp + 248|0;
 $vararg_buffer88 = sp + 240|0;
 $vararg_buffer85 = sp + 232|0;
 $vararg_buffer80 = sp + 216|0;
 $vararg_buffer75 = sp + 200|0;
 $vararg_buffer70 = sp + 184|0;
 $vararg_buffer67 = sp + 176|0;
 $vararg_buffer62 = sp + 160|0;
 $vararg_buffer59 = sp + 152|0;
 $vararg_buffer54 = sp + 136|0;
 $vararg_buffer48 = sp + 120|0;
 $vararg_buffer42 = sp + 104|0;
 $vararg_buffer37 = sp + 88|0;
 $vararg_buffer32 = sp + 72|0;
 $vararg_buffer27 = sp + 56|0;
 $vararg_buffer22 = sp + 40|0;
 $vararg_buffer19 = sp + 32|0;
 $vararg_buffer14 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $25 = $4;
 $26 = HEAP32[$25>>2]|0;
 $7 = $26;
 $27 = $7;
 $28 = (_emit($27,180)|0);
 $8 = $28;
 $29 = $7;
 $30 = (_stkOffset($29,0)|0);
 $9 = $30;
 $31 = $5;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if (!($36)) {
   $38 = $5;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_refCast($40)|0);
   $11 = $41;
   $42 = $6;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $11;
    $6 = $44;
   }
   $45 = $5;
   $46 = HEAP32[$45>>2]|0;
   L7: do {
    switch ($46|0) {
    case 42:  {
     $48 = $5;
     $49 = ((($48)) + 24|0);
     $50 = HEAP32[$49>>2]|0;
     $12 = $50;
     while(1) {
      $51 = $12;
      $52 = ($51|0)!=(0|0);
      if (!($52)) {
       label = 15;
       break;
      }
      $53 = $7;
      $54 = ((($53)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $13 = $55;
      $56 = $12;
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(42);
      $59 = $58&1;
      $14 = $59;
      $60 = $7;
      $61 = (_emit($60,180)|0);
      $15 = $61;
      $62 = $12;
      $63 = ((($62)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $4;
      $66 = ((($65)) + 4132|0);
      HEAP32[$66>>2] = $64;
      $67 = $12;
      $68 = ((($67)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $4;
      $71 = ((($70)) + 4136|0);
      HEAP32[$71>>2] = $69;
      $72 = $4;
      $73 = $12;
      $74 = $14;
      $75 = ($74|0)!=(0);
      $76 = $6;
      $77 = $75 ? $76 : 0;
      $78 = (_genAst($72,$73,$77)|0);
      $79 = ($78|0)!=(0);
      if (!($79)) {
       label = 11;
       break;
      }
      $93 = $7;
      $94 = $15;
      $95 = $7;
      $96 = (_emit($95,180)|0);
      $97 = $12;
      (_addDbgStatement($93,$94,$96,$97)|0);
      $98 = $12;
      $99 = ((($98)) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      $12 = $100;
     }
     if ((label|0) == 11) {
      $80 = $13;
      $81 = $7;
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($80|0)==($83|0);
      if ($84) {
       $85 = $7;
       $86 = $12;
       $87 = ((($86)) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = $12;
       $90 = ((($89)) + 16|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = $12;
       HEAP32[$vararg_buffer19>>2] = $92;
       _printLog($85,-1,$88,$91,0,14482,$vararg_buffer19);
      }
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     else if ((label|0) == 15) {
      $101 = $6;
      $102 = ($101|0)==(1);
      if ($102) {
       $11 = 9;
      }
      $103 = $6;
      $104 = ($103|0)==(9);
      if (!($104)) {
       break L7;
      }
      $11 = 9;
      break L7;
     }
     break;
    }
    case 52:  {
     $105 = $5;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $4;
     $109 = ((($108)) + 4132|0);
     HEAP32[$109>>2] = $107;
     $110 = $5;
     $111 = ((($110)) + 16|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $4;
     $114 = ((($113)) + 4136|0);
     HEAP32[$114>>2] = $112;
     $115 = $4;
     $116 = $5;
     $117 = ((($116)) + 24|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (_genAst($115,$118,1)|0);
     $120 = ($119|0)!=(0);
     if ($120) {
      $121 = $9;
      $122 = $7;
      $123 = (_stkOffset($122,0)|0);
      $124 = ($121|0)!=($123|0);
      if (!($124)) {
       break L7;
      }
      $125 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer22>>2] = 14053;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = 1457;
      $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
      HEAP32[$vararg_ptr26>>2] = 14475;
      _printFmt($125,0,14509,$vararg_buffer22);
      __abort();
      break L7;
     } else {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 46:  {
     $126 = $4;
     $127 = $5;
     $128 = (_genLoop($126,$127)|0);
     $11 = $128;
     $129 = ($128|0)!=(0);
     if ($129) {
      $130 = $6;
      $131 = ($130|0)!=(1);
      if (!($131)) {
       break L7;
      }
      $132 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer27>>2] = 14053;
      $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
      HEAP32[$vararg_ptr30>>2] = 1465;
      $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
      HEAP32[$vararg_ptr31>>2] = 14475;
      _printFmt($132,0,14567,$vararg_buffer27);
      __abort();
      break L7;
     } else {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 45: case 44:  {
     $133 = $4;
     $134 = $5;
     $135 = (_genBranch($133,$134)|0);
     $11 = $135;
     $136 = ($135|0)!=(0);
     if (!($136)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $137 = $6;
     $138 = ($137|0)!=(1);
     if ($138) {
      $139 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer32>>2] = 14053;
      $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
      HEAP32[$vararg_ptr35>>2] = 1474;
      $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
      HEAP32[$vararg_ptr36>>2] = 14475;
      _printFmt($139,0,14567,$vararg_buffer32);
      __abort();
     }
     $140 = $9;
     $141 = $7;
     $142 = (_stkOffset($141,0)|0);
     $143 = ($140|0)!=($142|0);
     if ($143) {
      $144 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer37>>2] = 14053;
      $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
      HEAP32[$vararg_ptr40>>2] = 1475;
      $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
      HEAP32[$vararg_ptr41>>2] = 14475;
      _printFmt($144,0,14509,$vararg_buffer37);
      __abort();
     }
     break;
    }
    case 50: case 49:  {
     $145 = $6;
     $146 = ($145|0)!=(1);
     if ($146) {
      $147 = HEAP32[3314]|0;
      $148 = $6;
      HEAP32[$vararg_buffer42>>2] = 14053;
      $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
      HEAP32[$vararg_ptr45>>2] = 1480;
      $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
      HEAP32[$vararg_ptr46>>2] = 14475;
      $vararg_ptr47 = ((($vararg_buffer42)) + 12|0);
      HEAP32[$vararg_ptr47>>2] = $148;
      _printFmt($147,0,14613,$vararg_buffer42);
      __abort();
     }
     $149 = $7;
     $150 = (_emit($149,4)|0);
     $16 = $150;
     $151 = $16;
     $152 = ($151|0)==(0);
     if (!($152)) {
      $153 = $9;
      $154 = $5;
      $155 = ((($154)) + 24|0);
      $156 = ((($155)) + 12|0);
      HEAP32[$156>>2] = $153;
      $157 = $16;
      $158 = $5;
      $159 = ((($158)) + 24|0);
      $160 = ((($159)) + 8|0);
      HEAP32[$160>>2] = $157;
      $161 = $4;
      $162 = ((($161)) + 24|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $5;
      $165 = ((($164)) + 8|0);
      HEAP32[$165>>2] = $163;
      $166 = $5;
      $167 = $4;
      $168 = ((($167)) + 24|0);
      HEAP32[$168>>2] = $166;
      break L7;
     }
     $3 = 0;
     $583 = $3;
     STACKTOP = sp;return ($583|0);
     break;
    }
    case 51:  {
     $169 = $6;
     $170 = ($169|0)!=(1);
     if ($170) {
      $171 = HEAP32[3314]|0;
      $172 = $6;
      HEAP32[$vararg_buffer48>>2] = 14053;
      $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
      HEAP32[$vararg_ptr51>>2] = 1495;
      $vararg_ptr52 = ((($vararg_buffer48)) + 8|0);
      HEAP32[$vararg_ptr52>>2] = 14475;
      $vararg_ptr53 = ((($vararg_buffer48)) + 12|0);
      HEAP32[$vararg_ptr53>>2] = $172;
      _printFmt($171,0,14613,$vararg_buffer48);
      __abort();
     }
     $173 = $5;
     $174 = ((($173)) + 24|0);
     $175 = ((($174)) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)!=(0|0);
     if ($177) {
      $178 = $5;
      $179 = ((($178)) + 24|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $17 = $181;
      $182 = $17;
      $183 = HEAP32[$182>>2]|0;
      $184 = ($183|0)!=(30);
      if ($184) {
       $185 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer54>>2] = 14053;
       $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
       HEAP32[$vararg_ptr57>>2] = 1499;
       $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
       HEAP32[$vararg_ptr58>>2] = 14475;
       _printFmt($185,0,14668,$vararg_buffer54);
       __abort();
      }
      $186 = $17;
      $187 = ((($186)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $4;
      $190 = ((($189)) + 5200|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ($188|0)==($191|0);
      if ($192) {
       $193 = $17;
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)==(30);
       if ($195) {
        $196 = $17;
        $197 = ((($196)) + 24|0);
        $198 = HEAP32[$197>>2]|0;
        $17 = $198;
       }
      }
      $199 = $4;
      $200 = $17;
      $201 = (_genAst($199,$200,1)|0);
      $202 = ($201|0)!=(0);
      if (!($202)) {
       $3 = 0;
       $583 = $3;
       STACKTOP = sp;return ($583|0);
      }
     }
     $203 = $7;
     $204 = $5;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (_argsSize($206)|0);
     $208 = (4 + ($207))|0;
     $209 = (_emitStack($203,179,$208)|0);
     $210 = ($209|0)!=(0);
     if (!($210)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $211 = $7;
     $212 = (_emit($211,3)|0);
     $213 = ($212|0)!=(0);
     if ($213) {
      $214 = $7;
      $215 = $9;
      (_fixJump($214,0,0,$215)|0);
      break L7;
     }
     $3 = 0;
     $583 = $3;
     STACKTOP = sp;return ($583|0);
     break;
    }
    case 3:  {
     $216 = $4;
     $217 = $5;
     $218 = $6;
     $219 = (_genCall($216,$217,$218)|0);
     $11 = $219;
     $220 = ($219|0)!=(0);
     if (!($220)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 4:  {
     $221 = $4;
     $222 = $5;
     $223 = $6;
     $224 = (_genIndex($221,$222,$223)|0);
     $11 = $224;
     $225 = ($224|0)!=(0);
     if (!($225)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 5:  {
     $226 = $4;
     $227 = $5;
     $228 = $6;
     $229 = (_genMember($226,$227,$228)|0);
     $11 = $229;
     $230 = ($229|0)!=(0);
     if (!($230)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 8: case 7: case 6: case 9:  {
     $231 = $4;
     $232 = $5;
     $233 = ((($232)) + 24|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = $11;
     $236 = (_genAst($231,$234,$235)|0);
     $237 = ($236|0)!=(0);
     if (!($237)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $238 = $7;
     $239 = $5;
     $240 = HEAP32[$239>>2]|0;
     $241 = $11;
     $242 = (_genOperator($238,$240,$241)|0);
     $243 = ($242|0)!=(0);
     if (!($243)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 12: case 11: case 10: case 14: case 13: case 18: case 17: case 20: case 19: case 22: case 21: case 24: case 25: case 23: case 15: case 16:  {
     $244 = $4;
     $245 = $5;
     $246 = ((($245)) + 24|0);
     $247 = ((($246)) + 4|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = (_genAst($244,$248,0)|0);
     $10 = $249;
     $250 = ($249|0)!=(0);
     if (!($250)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $251 = $4;
     $252 = $5;
     $253 = ((($252)) + 24|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = (_genAst($251,$254,0)|0);
     $256 = ($255|0)!=(0);
     if (!($256)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $257 = $7;
     $258 = $5;
     $259 = HEAP32[$258>>2]|0;
     $260 = $10;
     $261 = (_genOperator($257,$259,$260)|0);
     $262 = ($261|0)!=(0);
     if (!($262)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 27: case 26:  {
     $18 = 0;
     $263 = $5;
     $264 = HEAP32[$263>>2]|0;
     switch ($264|0) {
     case 26:  {
      $18 = 23;
      break;
     }
     case 27:  {
      $18 = 25;
      break;
     }
     default: {
     }
     }
     $265 = $4;
     $266 = $5;
     $267 = ((($266)) + 24|0);
     $268 = ((($267)) + 4|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = (_genAst($265,$269,2)|0);
     $271 = ($270|0)!=(0);
     if (!($271)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $272 = $4;
     $273 = $5;
     $274 = ((($273)) + 24|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = (_genAst($272,$275,2)|0);
     $277 = ($276|0)!=(0);
     if (!($277)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $278 = $7;
     $279 = $18;
     $280 = (_genOperator($278,$279,4)|0);
     $281 = ($280|0)!=(0);
     if ($281) {
      $282 = $7;
      $283 = $5;
      $284 = ((($283)) + 12|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = $5;
      $287 = ((($286)) + 16|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = $5;
      HEAP32[$vararg_buffer59>>2] = $289;
      _printLog($282,1,$285,$288,0,14720,$vararg_buffer59);
      break L7;
     }
     $3 = 0;
     $583 = $3;
     STACKTOP = sp;return ($583|0);
     break;
    }
    case 28:  {
     $290 = $4;
     $291 = $5;
     $292 = (_genLogical($290,$291)|0);
     $293 = ($292|0)!=(0);
     if (!($293)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     break;
    }
    case 30: case 29:  {
     $294 = $5;
     $295 = ((($294)) + 24|0);
     $296 = ((($295)) + 4|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((($297)) + 4|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = (_refCast($299)|0);
     $19 = $300;
     $301 = $4;
     $302 = $5;
     $303 = ((($302)) + 24|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $19;
     $306 = (_genAst($301,$304,$305)|0);
     $307 = ($306|0)!=(0);
     if (!($307)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $308 = $5;
     $309 = ((($308)) + 24|0);
     $310 = ((($309)) + 4|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ((($311)) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ((($313)) + 16|0);
     $315 = HEAP32[$314>>2]|0;
     $20 = $315;
     $316 = $20;
     $317 = ($316|0)==(0);
     if ($317) {
      $318 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer62>>2] = 14053;
      $vararg_ptr65 = ((($vararg_buffer62)) + 4|0);
      HEAP32[$vararg_ptr65>>2] = 1676;
      $vararg_ptr66 = ((($vararg_buffer62)) + 8|0);
      HEAP32[$vararg_ptr66>>2] = 14475;
      _printFmt($318,0,14771,$vararg_buffer62);
      __abort();
     }
     $319 = $6;
     $320 = ($319|0)!=(1);
     if ($320) {
      $321 = $7;
      $322 = (_emitInt($321,17,0,0)|0);
      $323 = ($322|0)!=(0);
      if (!($323)) {
       $3 = 0;
       $583 = $3;
       STACKTOP = sp;return ($583|0);
      }
      $324 = $7;
      $325 = $20;
      $326 = (_emitInt($324,177,$325,0)|0);
      $327 = ($326|0)!=(0);
      if (!($327)) {
       $3 = 0;
       $583 = $3;
       STACKTOP = sp;return ($583|0);
      }
     }
     $328 = $7;
     $329 = (_emit($328,180)|0);
     $21 = $329;
     $330 = $19;
     switch ($330|0) {
     case 10:  {
      $331 = $4;
      $332 = ((($331)) + 5252|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = ((($333)) + 16|0);
      $335 = HEAP32[$334>>2]|0;
      $20 = $335;
      $19 = 48;
      break;
     }
     case 11: case 12:  {
      $336 = $4;
      $337 = ((($336)) + 5256|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = ((($338)) + 16|0);
      $340 = HEAP32[$339>>2]|0;
      $20 = $340;
      $19 = 48;
      break;
     }
     default: {
      $19 = 10;
     }
     }
     $341 = $4;
     $342 = $5;
     $343 = ((($342)) + 24|0);
     $344 = ((($343)) + 4|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = $19;
     $347 = (_genAst($341,$345,$346)|0);
     $348 = ($347|0)!=(0);
     if (!($348)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $349 = $7;
     $350 = $20;
     $351 = (_emitInt($349,178,$350,0)|0);
     $352 = ($351|0)!=(0);
     if (!($352)) {
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $353 = $5;
     $354 = ((($353)) + 24|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = HEAP32[$355>>2]|0;
     $357 = ($356>>>0)>=(3);
     if ($357) {
      $358 = $5;
      $359 = ((($358)) + 24|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = HEAP32[$360>>2]|0;
      $362 = ($361>>>0)<=(41);
      if ($362) {
       $363 = $5;
       $364 = ((($363)) + 24|0);
       $365 = ((($364)) + 4|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $5;
       $368 = ((($367)) + 24|0);
       $369 = HEAP32[$368>>2]|0;
       $370 = ((($369)) + 24|0);
       $371 = ((($370)) + 4|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = ($366|0)==($372|0);
       if ($373) {
        $374 = $7;
        $375 = HEAP32[$374>>2]|0;
        $376 = $375 >>> 4;
        $377 = $376 & 1;
        $378 = ($377|0)!=(0);
        if ($378) {
         $379 = $7;
         $380 = $8;
         $381 = $21;
         (_optimizeAssign($379,$380,$381)|0);
        }
       }
      }
     }
     break;
    }
    case 67:  {
     $382 = $7;
     $383 = $5;
     $384 = ((($383)) + 24|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = $5;
     $387 = ((($386)) + 24|0);
     $388 = ((($387)) + 4|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = (_emitInt($382,$385,$389,0)|0);
     $391 = ($390|0)!=(0);
     if ($391) {
      $392 = $5;
      $393 = ((($392)) + 4|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = (_refCast($394)|0);
      $11 = $395;
      break L7;
     }
     $3 = 0;
     $583 = $3;
     STACKTOP = sp;return ($583|0);
     break;
    }
    case 1:  {
     $396 = $6;
     $397 = ($396|0)==(1);
     if ($397) {
      $398 = $7;
      $399 = $5;
      $400 = ((($399)) + 12|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = $5;
      $403 = ((($402)) + 16|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = $5;
      HEAP32[$vararg_buffer67>>2] = $405;
      _printLog($398,8,$401,$404,0,14811,$vararg_buffer67);
      $3 = 1;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $406 = $11;
     switch ($406|0) {
     case 6: case 5: case 4: case 3: case 2:  {
      $408 = $7;
      $409 = $5;
      $410 = ((($409)) + 24|0);
      $411 = $410;
      $412 = $411;
      $413 = HEAP32[$412>>2]|0;
      $414 = (($411) + 4)|0;
      $415 = $414;
      $416 = HEAP32[$415>>2]|0;
      $417 = (_emitI64($408,$413,$416)|0);
      $418 = ($417|0)!=(0);
      if ($418) {
       $11 = 5;
       break L7;
      }
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
      break;
     }
     case 8: case 7:  {
      $419 = $7;
      $420 = $5;
      $421 = ((($420)) + 24|0);
      $422 = +HEAPF64[$421>>3];
      $423 = (_emitF64($419,$422)|0);
      $424 = ($423|0)!=(0);
      if ($424) {
       $11 = 8;
       break L7;
      }
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
      break;
     }
     case 10: case 12:  {
      $425 = $6;
      $426 = ($425|0)==(11);
      if ($426) {
       $427 = $7;
       $428 = $5;
       $429 = ((($428)) + 4|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = ((($430)) + 20|0);
       $432 = HEAP32[$431>>2]|0;
       $433 = (_emitOffs($427,$432)|0);
       $434 = ($433|0)!=(0);
       if (!($434)) {
        $3 = 0;
        $583 = $3;
        STACKTOP = sp;return ($583|0);
       }
      }
      $435 = $6;
      $436 = ($435|0)==(12);
      if ($436) {
       $437 = $7;
       $438 = $5;
       $439 = ((($438)) + 24|0);
       $440 = HEAP32[$439>>2]|0;
       $441 = (_strlen($440)|0);
       $442 = (_emitOffs($437,$441)|0);
       $443 = ($442|0)!=(0);
       if (!($443)) {
        $3 = 0;
        $583 = $3;
        STACKTOP = sp;return ($583|0);
       }
      }
      $444 = $7;
      $445 = $7;
      $446 = $5;
      $447 = ((($446)) + 24|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = (_vmOffset($445,$448)|0);
      $450 = (_emitRef($444,$449)|0);
      $451 = ($450|0)!=(0);
      if (!($451)) {
       $3 = 0;
       $583 = $3;
       STACKTOP = sp;return ($583|0);
      }
      $452 = $6;
      $453 = ($452|0)==(12);
      if ($453) {
       $11 = 12;
       break L7;
      } else {
       $11 = 10;
       break L7;
      }
      break;
     }
     default: {
      $407 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer70>>2] = 14053;
      $vararg_ptr73 = ((($vararg_buffer70)) + 4|0);
      HEAP32[$vararg_ptr73>>2] = 1746;
      $vararg_ptr74 = ((($vararg_buffer70)) + 8|0);
      HEAP32[$vararg_ptr74>>2] = 14475;
      _printFmt($407,0,28431,$vararg_buffer70);
      __abort();
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     }
     break;
    }
    case 2:  {
     $454 = $5;
     $455 = ((($454)) + 24|0);
     $456 = ((($455)) + 8|0);
     $457 = HEAP32[$456>>2]|0;
     $22 = $457;
     $458 = $22;
     $459 = (_isTypename($458)|0);
     $460 = ($459|0)!=(0);
     if ($460) {
      $461 = $22;
      $462 = (_isStatic($461)|0);
      $463 = ($462|0)!=(0);
      if (!($463)) {
       $464 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer75>>2] = 14053;
       $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
       HEAP32[$vararg_ptr78>>2] = 1796;
       $vararg_ptr79 = ((($vararg_buffer75)) + 8|0);
       HEAP32[$vararg_ptr79>>2] = 14475;
       _printFmt($464,0,14855,$vararg_buffer75);
       __abort();
      }
     }
     $465 = $22;
     $466 = (_isFunction($465)|0);
     $467 = ($466|0)!=(0);
     if ($467) {
      $468 = $22;
      $469 = (_isStatic($468)|0);
      $470 = ($469|0)!=(0);
      if (!($470)) {
       $471 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer80>>2] = 14053;
       $vararg_ptr83 = ((($vararg_buffer80)) + 4|0);
       HEAP32[$vararg_ptr83>>2] = 1797;
       $vararg_ptr84 = ((($vararg_buffer80)) + 8|0);
       HEAP32[$vararg_ptr84>>2] = 14475;
       _printFmt($471,0,14919,$vararg_buffer80);
       __abort();
      }
     }
     $472 = $22;
     $473 = ((($472)) + 64|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = $5;
     $476 = ($474|0)==($475|0);
     if (!($476)) {
      $489 = $4;
      $490 = $22;
      $491 = $6;
      $492 = $5;
      $493 = (_genVariable($489,$490,$491,$492)|0);
      $11 = $493;
      $494 = ($493|0)!=(0);
      if ($494) {
       break L7;
      }
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
     $477 = $22;
     $478 = (_isStatic($477)|0);
     $479 = ($478|0)!=(0);
     if (!($479)) {
      $480 = $22;
      $481 = (_isInline($480)|0);
      $482 = ($481|0)!=(0);
      if (!($482)) {
       $483 = $4;
       $484 = $22;
       $485 = $6;
       $486 = (_genDeclaration($483,$484,$485)|0);
       $11 = $486;
       $487 = ($486|0)!=(0);
       if (!($487)) {
        $3 = 0;
        $583 = $3;
        STACKTOP = sp;return ($583|0);
       }
      }
     }
     $488 = $11;
     $6 = $488;
     break;
    }
    default: {
     $47 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer14>>2] = 14053;
     $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
     HEAP32[$vararg_ptr17>>2] = 1418;
     $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
     HEAP32[$vararg_ptr18>>2] = 14475;
     _printFmt($47,0,28431,$vararg_buffer14);
     __abort();
     $3 = 0;
     $583 = $3;
     STACKTOP = sp;return ($583|0);
    }
    }
   } while(0);
   $495 = $5;
   $496 = HEAP32[$495>>2]|0;
   $497 = ($496>>>0)>=(42);
   if ($497) {
    $498 = $5;
    $499 = HEAP32[$498>>2]|0;
    $500 = ($499>>>0)<=(52);
    if ($500) {
     $501 = $7;
     $502 = (_stkOffset($501,0)|0);
     $503 = $9;
     $504 = (($502) - ($503))|0;
     $23 = $504;
     $505 = $6;
     $506 = ($505|0)==(1);
     $507 = $23;
     $508 = ($507|0)!=(0);
     $or$cond = $506 & $508;
     if ($or$cond) {
      $509 = $7;
      $510 = $9;
      $511 = (_emitStack($509,179,$510)|0);
      $512 = ($511|0)!=(0);
      if (!($512)) {
       $3 = 0;
       $583 = $3;
       STACKTOP = sp;return ($583|0);
      }
     }
    }
   }
   $513 = $6;
   $514 = ($513|0)==(48);
   if ($514) {
    $515 = $11;
    $516 = ($515|0)==(10);
    $517 = $11;
    $518 = ($517|0)==(12);
    $or$cond3 = $516 | $518;
    if ($or$cond3) {
     $519 = $11;
     $6 = $519;
    }
   }
   $520 = $6;
   $521 = $11;
   $522 = ($520|0)!=($521|0);
   if ($522) {
    $523 = $6;
    $524 = ($523|0)==(4);
    $525 = $6;
    $526 = ($525|0)==(6);
    $or$cond5 = $524 | $526;
    if ($or$cond5) {
     $527 = $11;
     $528 = ($527|0)==(7);
     $529 = $11;
     $530 = ($529|0)==(8);
     $or$cond7 = $528 | $530;
     if ($or$cond7) {
      $531 = $7;
      $532 = $5;
      $533 = ((($532)) + 12|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = $5;
      $536 = ((($535)) + 16|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = $5;
      HEAP32[$vararg_buffer85>>2] = $538;
      _printLog($531,4,$534,$537,0,14983,$vararg_buffer85);
     }
    }
    $539 = $6;
    $540 = ($539|0)==(7);
    $541 = $6;
    $542 = ($541|0)==(8);
    $or$cond9 = $540 | $542;
    if ($or$cond9) {
     $543 = $11;
     $544 = ($543|0)==(4);
     $545 = $11;
     $546 = ($545|0)==(6);
     $or$cond11 = $544 | $546;
     if ($or$cond11) {
      $547 = $7;
      $548 = $5;
      $549 = ((($548)) + 12|0);
      $550 = HEAP32[$549>>2]|0;
      $551 = $5;
      $552 = ((($551)) + 16|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = $5;
      HEAP32[$vararg_buffer88>>2] = $554;
      _printLog($547,4,$550,$553,0,14983,$vararg_buffer88);
     }
    }
    $24 = 176;
    $555 = $6;
    L243: do {
     switch ($555|0) {
     case 1:  {
      $556 = $7;
      $557 = $9;
      $558 = (_emitStack($556,179,$557)|0);
      $559 = ($558|0)!=(0);
      if ($559) {
       $24 = 0;
       break L243;
      }
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
      break;
     }
     case 2:  {
      $560 = $11;
      switch ($560|0) {
      case 3: case 4:  {
       $24 = 90;
       break L243;
       break;
      }
      case 6: case 5:  {
       $24 = 108;
       break L243;
       break;
      }
      case 7:  {
       $24 = 123;
       break L243;
       break;
      }
      case 8:  {
       $24 = 141;
       break L243;
       break;
      }
      default: {
       break L243;
      }
      }
      break;
     }
     case 4: case 3:  {
      $561 = $11;
      switch ($561|0) {
      case 4: case 3: case 2:  {
       $24 = 0;
       break L243;
       break;
      }
      case 6: case 5:  {
       $24 = 106;
       break L243;
       break;
      }
      case 7:  {
       $24 = 122;
       break L243;
       break;
      }
      case 8:  {
       $24 = 138;
       break L243;
       break;
      }
      default: {
       break L243;
      }
      }
      break;
     }
     case 5: case 6:  {
      $562 = $11;
      switch ($562|0) {
      case 3: case 2:  {
       $24 = 92;
       break L243;
       break;
      }
      case 4:  {
       $24 = 62;
       break L243;
       break;
      }
      case 6: case 5:  {
       $24 = 0;
       break L243;
       break;
      }
      case 7:  {
       $24 = 124;
       break L243;
       break;
      }
      case 8:  {
       $24 = 140;
       break L243;
       break;
      }
      default: {
       break L243;
      }
      }
      break;
     }
     case 7:  {
      $563 = $11;
      switch ($563|0) {
      case 4: case 3: case 2:  {
       $24 = 91;
       break L243;
       break;
      }
      case 6: case 5:  {
       $24 = 107;
       break L243;
       break;
      }
      case 8:  {
       $24 = 139;
       break L243;
       break;
      }
      default: {
       break L243;
      }
      }
      break;
     }
     case 8:  {
      $564 = $11;
      switch ($564|0) {
      case 4: case 3: case 2:  {
       $24 = 93;
       break L243;
       break;
      }
      case 6: case 5:  {
       $24 = 109;
       break L243;
       break;
      }
      case 7:  {
       $24 = 125;
       break L243;
       break;
      }
      default: {
       break L243;
      }
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $565 = $24;
    $566 = ($565|0)!=(0);
    if ($566) {
     $567 = $7;
     $568 = $24;
     $569 = (_emit($567,$568)|0);
     $570 = ($569|0)!=(0);
     if (!($570)) {
      $571 = $7;
      $572 = $5;
      $573 = ((($572)) + 12|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = $5;
      $576 = ((($575)) + 16|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = $5;
      $579 = $11;
      $580 = $6;
      HEAP32[$vararg_buffer91>>2] = $578;
      $vararg_ptr94 = ((($vararg_buffer91)) + 4|0);
      HEAP32[$vararg_ptr94>>2] = $579;
      $vararg_ptr95 = ((($vararg_buffer91)) + 8|0);
      HEAP32[$vararg_ptr95>>2] = $580;
      _printLog($571,-1,$574,$577,0,15026,$vararg_buffer91);
      $3 = 0;
      $583 = $3;
      STACKTOP = sp;return ($583|0);
     }
    }
    $581 = $6;
    $11 = $581;
   }
   $582 = $11;
   $3 = $582;
   $583 = $3;
   STACKTOP = sp;return ($583|0);
  }
 }
 $37 = HEAP32[3314]|0;
 HEAP32[$vararg_buffer>>2] = 14053;
 $vararg_ptr12 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = 1404;
 $vararg_ptr13 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = 14475;
 _printFmt($37,0,28431,$vararg_buffer);
 __abort();
 $3 = 0;
 $583 = $3;
 STACKTOP = sp;return ($583|0);
}
function _isVariable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(48);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _vmOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _genDeclaration($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $5;
 $14 = ((($13)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $5;
 $17 = (_refCast($16)|0);
 $9 = $17;
 $18 = $7;
 $19 = $5;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_stkOffset($18,$21)|0);
 $10 = $22;
 $23 = $5;
 $24 = (_isVariable($23)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 14053;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 328;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 15637;
  _printFmt($26,0,28431,$vararg_buffer);
  __abort();
  $3 = 1;
  $144 = $3;
  STACKTOP = sp;return ($144|0);
 }
 $27 = $5;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $4;
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  HEAP32[$vararg_buffer3>>2] = $39;
  _printLog($32,-1,$35,$38,0,15578,$vararg_buffer3);
  $3 = 1;
  $144 = $3;
  STACKTOP = sp;return ($144|0);
 }
 $40 = $8;
 $41 = ($40|0)==(0|0);
 do {
  if ($41) {
   $42 = $5;
   $43 = ((($42)) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 56|0);
   $46 = HEAP32[$45>>2]|0;
   $8 = $46;
   $47 = $8;
   $48 = ($47|0)!=(0|0);
   if ($48) {
    $49 = $4;
    $50 = HEAP32[$49>>2]|0;
    $51 = $5;
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $5;
    $55 = ((($54)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $5;
    $58 = $8;
    HEAP32[$vararg_buffer6>>2] = $57;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $58;
    _printLog($50,6,$53,$56,0,23475,$vararg_buffer6);
    break;
   }
   $59 = $5;
   $60 = (_isConst($59)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $7;
    $63 = $5;
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $5;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $5;
    HEAP32[$vararg_buffer10>>2] = $69;
    _printLog($62,-1,$65,$68,0,15652,$vararg_buffer10);
    break;
   }
   $70 = $5;
   $71 = (_isInvokable($70)|0);
   $72 = ($71|0)!=(0);
   $73 = $7;
   $74 = $5;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $5;
   if ($72) {
    HEAP32[$vararg_buffer13>>2] = $80;
    _printLog($73,-1,$76,$79,0,15680,$vararg_buffer13);
    break;
   } else {
    HEAP32[$vararg_buffer16>>2] = $80;
    _printLog($73,1,$76,$79,0,15312,$vararg_buffer16);
    break;
   }
  }
 } while(0);
 $81 = $5;
 $82 = ((($81)) + 20|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0);
 if ($84) {
  $85 = $8;
  $86 = ($85|0)==(0|0);
  if ($86) {
   label = 16;
  } else {
   $87 = $8;
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(42);
   if ($89) {
    label = 16;
   }
  }
  do {
   if ((label|0) == 16) {
    $90 = $7;
    $91 = $5;
    $92 = ((($91)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (_padOffset($93,4)|0);
    $95 = (_emitInt($90,16,$94,0)|0);
    $96 = ($95|0)!=(0);
    if ($96) {
     $97 = $7;
     $98 = (_stkOffset($97,0)|0);
     $99 = $5;
     $100 = ((($99)) + 20|0);
     HEAP32[$100>>2] = $98;
     break;
    }
    $3 = 0;
    $144 = $3;
    STACKTOP = sp;return ($144|0);
   }
  } while(0);
  $101 = $8;
  $102 = ($101|0)!=(0|0);
  do {
   if ($102) {
    $103 = $9;
    $104 = $4;
    $105 = $8;
    $106 = $9;
    $107 = (_genAst($104,$105,$106)|0);
    $108 = ($103|0)!=($107|0);
    if (!($108)) {
     $109 = $7;
     $110 = (_stkOffset($109,0)|0);
     $111 = $5;
     $112 = ((($111)) + 20|0);
     HEAP32[$112>>2] = $110;
     break;
    }
    $3 = 0;
    $144 = $3;
    STACKTOP = sp;return ($144|0);
   }
  } while(0);
  $113 = $10;
  $114 = $5;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($113|0)!=($116|0);
  if ($117) {
   $3 = 0;
   $144 = $3;
   STACKTOP = sp;return ($144|0);
  }
 } else {
  $118 = $5;
  $119 = (_isInline($118)|0);
  $120 = ($119|0)!=(0);
  if (!($120)) {
   $121 = $8;
   $122 = ($121|0)!=(0|0);
   if ($122) {
    $123 = $9;
    $124 = $4;
    $125 = $8;
    $126 = $9;
    $127 = (_genAst($124,$125,$126)|0);
    $128 = ($123|0)!=($127|0);
    if ($128) {
     $3 = 0;
     $144 = $3;
     STACKTOP = sp;return ($144|0);
    }
    $129 = $8;
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)!=(42);
    if ($131) {
     $132 = $7;
     $133 = $5;
     $134 = (_emitVarOffs($132,$133)|0);
     $135 = ($134|0)!=(0);
     if (!($135)) {
      $3 = 0;
      $144 = $3;
      STACKTOP = sp;return ($144|0);
     }
     $136 = $7;
     $137 = $5;
     $138 = ((($137)) + 16|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (_emitInt($136,178,$139,0)|0);
     $141 = ($140|0)!=(0);
     if (!($141)) {
      $3 = 0;
      $144 = $3;
      STACKTOP = sp;return ($144|0);
     }
    }
   }
   $142 = $5;
   (_isStatic($142)|0);
  }
 }
 $143 = $9;
 $3 = $143;
 $144 = $3;
 STACKTOP = sp;return ($144|0);
}
function _emitInt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $6;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = $4;
 $23 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 $24 = (_emitOpc($22,$23,$$byval_copy)|0);
 STACKTOP = sp;return ($24|0);
}
function _getBuff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $5 = $10;
 $11 = $5;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if (!($15)) {
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = $3;
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21)|0);
   $2 = $22;
   $23 = $2;
   STACKTOP = sp;return ($23|0);
  }
 }
 $2 = 0;
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _memSwap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $6 = $10;
 $11 = $4;
 $7 = $11;
 $12 = $6;
 $13 = $5;
 $14 = (($12) + ($13)|0);
 $8 = $14;
 while(1) {
  $15 = $6;
  $16 = $8;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $9 = $19;
  $20 = $7;
  $21 = HEAP8[$20>>0]|0;
  $22 = $6;
  HEAP8[$22>>0] = $21;
  $23 = $9;
  $24 = $7;
  HEAP8[$24>>0] = $23;
  $25 = $6;
  $26 = ((($25)) + 1|0);
  $6 = $26;
  $27 = $7;
  $28 = ((($27)) + 1|0);
  $7 = $28;
 }
 STACKTOP = sp;return;
}
function __abort() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _stkOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_padOffset($4,4)|0);
 $6 = $2;
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $11 = (($5) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function _refCast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_castOf($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(12);
 do {
  if ($7) {
   $8 = $1;
   $9 = (_isArrayType($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = ((($11)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $3 = $13;
    $14 = $3;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $3;
     $17 = (_isStatic($16)|0);
     $18 = ($17|0)!=(0);
     if (!($18)) {
      break;
     }
    }
    $2 = 10;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _genLoop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $3;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $6 = $18;
 $19 = $4;
 $20 = ((($19)) + 24|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $3;
  $25 = $4;
  $26 = ((($25)) + 24|0);
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_genAst($24,$28,1)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
 }
 $31 = $5;
 $32 = (_emit($31,4)|0);
 $7 = $32;
 $33 = $7;
 $34 = ($33>>>0)<=(0);
 if ($34) {
  $2 = 0;
  $155 = $2;
  STACKTOP = sp;return ($155|0);
 }
 $35 = $5;
 $36 = (_emit($35,180)|0);
 $8 = $36;
 $37 = $4;
 $38 = ((($37)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $3;
  $42 = $4;
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_genAst($41,$44,1)|0);
  $46 = ($45|0)!=(0);
  if (!($46)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
 }
 $47 = $5;
 $48 = (_emit($47,180)|0);
 $9 = $48;
 $49 = $4;
 $50 = ((($49)) + 24|0);
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $3;
  $55 = $4;
  $56 = ((($55)) + 24|0);
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_genAst($54,$58,1)|0);
  $60 = ($59|0)!=(0);
  if (!($60)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
 }
 $61 = $5;
 $62 = (_emit($61,180)|0);
 $10 = $62;
 $63 = $5;
 $64 = $7;
 $65 = $5;
 $66 = (_emit($65,180)|0);
 (_fixJump($63,$64,$66,-1)|0);
 $67 = $4;
 $68 = ((($67)) + 24|0);
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = $3;
  $73 = $4;
  $74 = ((($73)) + 24|0);
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (_genAst($72,$76,2)|0);
  $78 = ($77|0)!=(0);
  if (!($78)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
  $79 = $5;
  $80 = $8;
  $81 = (_emitInt($79,5,$80,0)|0);
  $82 = ($81|0)!=(0);
  if (!($82)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
 } else {
  $83 = $5;
  $84 = $8;
  $85 = (_emitInt($83,4,$84,0)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   $2 = 0;
   $155 = $2;
   STACKTOP = sp;return ($155|0);
  }
 }
 $87 = $5;
 $88 = (_emit($87,180)|0);
 $11 = $88;
 $89 = $5;
 $90 = (_stkOffset($89,0)|0);
 $12 = $90;
 L32: while(1) {
  $91 = $3;
  $92 = ((($91)) + 24|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $6;
  $95 = ($93|0)!=($94|0);
  if (!($95)) {
   label = 28;
   break;
  }
  $96 = $3;
  $97 = ((($96)) + 24|0);
  $98 = HEAP32[$97>>2]|0;
  $13 = $98;
  $99 = $13;
  $100 = ((($99)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $3;
  $103 = ((($102)) + 24|0);
  HEAP32[$103>>2] = $101;
  $104 = $13;
  $105 = ((($104)) + 24|0);
  $106 = ((($105)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $12;
  $109 = ($107|0)!=($108|0);
  if ($109) {
   label = 22;
   break;
  }
  $118 = $13;
  $119 = HEAP32[$118>>2]|0;
  switch ($119|0) {
  case 50:  {
   $121 = $5;
   $122 = $13;
   $123 = ((($122)) + 24|0);
   $124 = ((($123)) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $11;
   $127 = $13;
   $128 = ((($127)) + 24|0);
   $129 = ((($128)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   (_fixJump($121,$125,$126,$130)|0);
   break;
  }
  case 49:  {
   $131 = $5;
   $132 = $13;
   $133 = ((($132)) + 24|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $9;
   $137 = $13;
   $138 = ((($137)) + 24|0);
   $139 = ((($138)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   (_fixJump($131,$135,$136,$140)|0);
   break;
  }
  default: {
   label = 24;
   break L32;
  }
  }
 }
 if ((label|0) == 22) {
  $110 = $5;
  $111 = $13;
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $13;
  $115 = ((($114)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $13;
  HEAP32[$vararg_buffer>>2] = $117;
  _printLog($110,-1,$113,$116,0,15078,$vararg_buffer);
  $2 = 0;
  $155 = $2;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 24) {
  $120 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer1>>2] = 14053;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 134;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = 15153;
  _printFmt($120,0,28431,$vararg_buffer1);
  __abort();
  $2 = 0;
  $155 = $2;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 28) {
  $141 = $5;
  $142 = $9;
  $143 = $10;
  $144 = $4;
  $145 = ((($144)) + 24|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  (_addDbgStatement($141,$142,$143,$147)|0);
  $148 = $5;
  $149 = $10;
  $150 = $11;
  $151 = $4;
  $152 = ((($151)) + 24|0);
  $153 = ((($152)) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  (_addDbgStatement($148,$149,$150,$154)|0);
  $2 = 1;
  $155 = $2;
  STACKTOP = sp;return ($155|0);
 }
 return (0)|0;
}
function _genBranch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $7 = 0;
 $15 = $3;
 $16 = $4;
 $17 = ((($16)) + 24|0);
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_eval($15,$6,$19)|0);
 $21 = ($20|0)!=(0);
 do {
  if ($21) {
   $22 = (_bolValue($6)|0);
   $23 = ($22|0)!=(0);
   $24 = $4;
   $25 = ((($24)) + 24|0);
   if ($23) {
    $7 = $25;
    break;
   } else {
    $26 = ((($25)) + 4|0);
    $7 = $26;
    break;
   }
  }
 } while(0);
 $27 = $4;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(45);
 $30 = $7;
 do {
  if ($29) {
   $31 = ($30|0)==(0|0);
   if ($31) {
    $32 = $5;
    $33 = $4;
    $34 = ((($33)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $4;
    $37 = ((($36)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $4;
    $40 = ((($39)) + 24|0);
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$vararg_buffer>>2] = $42;
    _printLog($32,-1,$35,$38,0,23617,$vararg_buffer);
    $2 = 0;
    $182 = $2;
    STACKTOP = sp;return ($182|0);
   }
   $43 = $7;
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $46 = $3;
    $47 = $7;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_genAst($46,$48,0)|0);
    $50 = ($49|0)!=(0);
    if (!($50)) {
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
   }
  } else {
   $51 = ($30|0)!=(0|0);
   if ($51) {
    $52 = $5;
    $53 = HEAP32[$52>>2]|0;
    $54 = $53 & 1;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $7;
     $57 = $4;
     $58 = ((($57)) + 24|0);
     $59 = ($56|0)!=($58|0);
     $60 = $4;
     $61 = ((($60)) + 24|0);
     if ($59) {
      $62 = HEAP32[$61>>2]|0;
      $65 = $62;
     } else {
      $63 = ((($61)) + 4|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64;
     }
     $8 = $65;
     $66 = $7;
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0|0);
     if ($68) {
      $69 = $3;
      $70 = $7;
      $71 = HEAP32[$70>>2]|0;
      $72 = (_genAst($69,$71,1)|0);
      $73 = ($72|0)!=(0);
      if (!($73)) {
       $2 = 0;
       $182 = $2;
       STACKTOP = sp;return ($182|0);
      }
     }
     $74 = $8;
     $75 = ($74|0)!=(0|0);
     if (!($75)) {
      break;
     }
     $76 = $3;
     $77 = HEAP32[$76>>2]|0;
     $78 = $8;
     $79 = ((($78)) + 12|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $8;
     $82 = ((($81)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $8;
     HEAP32[$vararg_buffer1>>2] = $84;
     _printLog($77,8,$80,$83,0,14811,$vararg_buffer1);
     break;
    }
   }
   $85 = $4;
   $86 = ((($85)) + 24|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)!=(0|0);
   if ($88) {
    $89 = $4;
    $90 = ((($89)) + 24|0);
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)!=(0|0);
    if ($93) {
     $94 = $3;
     $95 = $4;
     $96 = ((($95)) + 24|0);
     $97 = ((($96)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (_genAst($94,$98,2)|0);
     $100 = ($99|0)!=(0);
     if (!($100)) {
      $2 = 0;
      $182 = $2;
      STACKTOP = sp;return ($182|0);
     }
     $101 = $5;
     $102 = (_emit($101,6)|0);
     $9 = $102;
     $103 = $9;
     $104 = ($103>>>0)<=(0);
     if ($104) {
      $2 = 0;
      $182 = $2;
      STACKTOP = sp;return ($182|0);
     }
     $105 = $3;
     $106 = $4;
     $107 = ((($106)) + 24|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (_genAst($105,$108,1)|0);
     $110 = ($109|0)!=(0);
     if (!($110)) {
      $2 = 0;
      $182 = $2;
      STACKTOP = sp;return ($182|0);
     }
     $111 = $5;
     $112 = (_emit($111,4)|0);
     $10 = $112;
     $113 = $10;
     $114 = ($113>>>0)<=(0);
     if ($114) {
      $2 = 0;
      $182 = $2;
      STACKTOP = sp;return ($182|0);
     }
     $115 = $5;
     $116 = $9;
     $117 = $5;
     $118 = (_emit($117,180)|0);
     (_fixJump($115,$116,$118,-1)|0);
     $119 = $3;
     $120 = $4;
     $121 = ((($120)) + 24|0);
     $122 = ((($121)) + 4|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_genAst($119,$123,1)|0);
     $125 = ($124|0)!=(0);
     if ($125) {
      $126 = $5;
      $127 = $10;
      $128 = $5;
      $129 = (_emit($128,180)|0);
      (_fixJump($126,$127,$129,-1)|0);
      break;
     }
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
   }
   $130 = $4;
   $131 = ((($130)) + 24|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)!=(0|0);
   if ($133) {
    $134 = $3;
    $135 = $4;
    $136 = ((($135)) + 24|0);
    $137 = ((($136)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (_genAst($134,$138,2)|0);
    $140 = ($139|0)!=(0);
    if (!($140)) {
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
    $141 = $5;
    $142 = (_emit($141,6)|0);
    $11 = $142;
    $143 = $11;
    $144 = ($143>>>0)<=(0);
    if ($144) {
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
    $145 = $3;
    $146 = $4;
    $147 = ((($146)) + 24|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (_genAst($145,$148,1)|0);
    $150 = ($149|0)!=(0);
    if ($150) {
     $151 = $5;
     $152 = $11;
     $153 = $5;
     $154 = (_emit($153,180)|0);
     (_fixJump($151,$152,$154,-1)|0);
     break;
    }
    $2 = 0;
    $182 = $2;
    STACKTOP = sp;return ($182|0);
   }
   $155 = $4;
   $156 = ((($155)) + 24|0);
   $157 = ((($156)) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)!=(0|0);
   if ($159) {
    $160 = $3;
    $161 = $4;
    $162 = ((($161)) + 24|0);
    $163 = ((($162)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (_genAst($160,$164,2)|0);
    $166 = ($165|0)!=(0);
    if (!($166)) {
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
    $167 = $5;
    $168 = (_emit($167,5)|0);
    $12 = $168;
    $169 = $12;
    $170 = ($169>>>0)<=(0);
    if ($170) {
     $2 = 0;
     $182 = $2;
     STACKTOP = sp;return ($182|0);
    }
    $171 = $3;
    $172 = $4;
    $173 = ((($172)) + 24|0);
    $174 = ((($173)) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (_genAst($171,$175,1)|0);
    $177 = ($176|0)!=(0);
    if ($177) {
     $178 = $5;
     $179 = $12;
     $180 = $5;
     $181 = (_emit($180,180)|0);
     (_fixJump($178,$179,$181,-1)|0);
     break;
    }
    $2 = 0;
    $182 = $2;
    STACKTOP = sp;return ($182|0);
   }
  }
 } while(0);
 $2 = 1;
 $182 = $2;
 STACKTOP = sp;return ($182|0);
}
function _emitStack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 $13 = $6;
 $14 = (($12) - ($13))|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $14;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $5;
 switch ($19|0) {
 case 17: case 179:  {
  $21 = $7;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = ((($27)) + 24|0);
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<2;
  $32 = ($26>>>0)>(0);
  $33 = ($23>>>0)>($31>>>0);
  $34 = ($26|0)==(0);
  $35 = $34 & $33;
  $36 = $32 | $35;
  if ($36) {
   $3 = 0;
   $63 = $3;
   STACKTOP = sp;return ($63|0);
  }
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18:  {
  $37 = $7;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (___udivdi3(($39|0),($42|0),4,0)|0);
  $44 = (getTempRet0() | 0);
  $45 = $7;
  $46 = $45;
  HEAP32[$46>>2] = $43;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $44;
  $49 = $7;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54>>>0)>(0);
  $56 = ($51>>>0)>(255);
  $57 = ($54|0)==(0);
  $58 = $57 & $56;
  $59 = $55 | $58;
  if ($59) {
   $3 = 0;
   $63 = $3;
   STACKTOP = sp;return ($63|0);
  }
  break;
 }
 default: {
  $20 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 14053;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 39;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 15161;
  _printFmt($20,0,28431,$vararg_buffer);
  __abort();
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 }
 $60 = $4;
 $61 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 $62 = (_emitOpc($60,$61,$$byval_copy)|0);
 $3 = $62;
 $63 = $3;
 STACKTOP = sp;return ($63|0);
}
function _genCall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8496|0);
 $vararg_buffer37 = sp + 8376|0;
 $vararg_buffer34 = sp + 8368|0;
 $vararg_buffer29 = sp + 8352|0;
 $vararg_buffer24 = sp + 8336|0;
 $vararg_buffer19 = sp + 8320|0;
 $vararg_buffer16 = sp + 8312|0;
 $vararg_buffer11 = sp + 8296|0;
 $vararg_buffer7 = sp + 8288|0;
 $vararg_buffer4 = sp + 8280|0;
 $vararg_buffer = sp + 8272|0;
 $15 = sp + 4176|0;
 $16 = sp + 80|0;
 $22 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $7 = $31;
 $32 = $5;
 $33 = ((($32)) + 24|0);
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = $4;
  $38 = $5;
  $39 = ((($38)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $6;
  $42 = (_genAst($37,$40,$41)|0);
  $3 = $42;
  $554 = $3;
  STACKTOP = sp;return ($554|0);
 }
 $43 = $5;
 $44 = ((($43)) + 24|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(65);
 $49 = $5;
 if ($48) {
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_castOf($51)|0);
  $8 = $52;
  $53 = $8;
  $54 = ($53|0)==(10);
  if ($54) {
   $55 = $4;
   $56 = HEAP32[$55>>2]|0;
   $57 = $5;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $5;
   $61 = ((($60)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $5;
   HEAP32[$vararg_buffer>>2] = $63;
   _printLog($56,-1,$59,$62,0,14482,$vararg_buffer);
  }
  $64 = $4;
  $65 = $5;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $8;
  $69 = (_genAst($64,$67,$68)|0);
  $3 = $69;
  $554 = $3;
  STACKTOP = sp;return ($554|0);
 }
 $70 = ((($49)) + 24|0);
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (_linkOf($72,0)|0);
 $9 = $73;
 $74 = $5;
 $75 = ((($74)) + 24|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (_chainArgs($76)|0);
 $10 = $77;
 $78 = $9;
 $79 = ($78|0)==(0|0);
 if ($79) {
  $3 = 0;
  $554 = $3;
  STACKTOP = sp;return ($554|0);
 }
 $80 = $5;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (_refCast($82)|0);
 $11 = $83;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (_refSize($86)|0);
 $12 = $87;
 $88 = $7;
 $89 = (_stkOffset($88,0)|0);
 $13 = $89;
 $90 = $7;
 $91 = $12;
 $92 = (_stkOffset($90,$91)|0);
 $14 = $92;
 $93 = $9;
 $94 = $4;
 $95 = ((($94)) + 5300|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($93|0)==($96|0);
 if ($97) {
  while(1) {
   $98 = $10;
   $99 = ($98|0)!=(0|0);
   if (!($99)) {
    label = 26;
    break;
   }
   $100 = $4;
   $101 = $10;
   $102 = (_genAst($100,$101,0)|0);
   $103 = ($102|0)!=(0);
   if (!($103)) {
    label = 13;
    break;
   }
   $104 = $7;
   $105 = (_stkOffset($104,0)|0);
   $106 = $13;
   $107 = ($105>>>0)<($106>>>0);
   if ($107) {
    $108 = $7;
    $109 = $5;
    $110 = ((($109)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $5;
    $113 = ((($112)) + 16|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $5;
    HEAP32[$vararg_buffer4>>2] = $115;
    _printLog($108,-1,$111,$114,0,14482,$vararg_buffer4);
   }
   $116 = $10;
   $117 = (_linkOf($116,1)|0);
   $17 = $117;
   $118 = $17;
   $119 = ($118|0)!=(0|0);
   if ($119) {
    $120 = $17;
    $121 = ((($120)) + 56|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)!=(0|0);
    if ($123) {
     $124 = $17;
     $125 = ((($124)) + 56|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(67);
     if (!($128)) {
      label = 19;
     }
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     $129 = $10;
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(3);
     if ($131) {
      $132 = $10;
      $133 = ((($132)) + 24|0);
      $134 = ((($133)) + 4|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($135|0)!=(0|0);
      if ($136) {
       $137 = $10;
       $138 = ((($137)) + 24|0);
       $139 = ((($138)) + 4|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(65);
       if ($142) {
        break;
       }
       $143 = $10;
       $144 = ((($143)) + 24|0);
       $145 = ((($144)) + 4|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (_linkOf($146,1)|0);
       $17 = $147;
       $148 = $17;
       $149 = ($148|0)!=(0|0);
       if ($149) {
        $150 = $17;
        $151 = $10;
        $152 = ((($151)) + 4|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($150|0)==($153|0);
        if ($154) {
         break;
        }
       }
      }
     }
     $155 = $7;
     $156 = $5;
     $157 = ((($156)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $5;
     $160 = ((($159)) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $10;
     $163 = $10;
     $164 = ((($163)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $162;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = $165;
     _printLog($155,1,$158,$161,0,15171,$vararg_buffer7);
    }
   } while(0);
   $166 = $10;
   $167 = ((($166)) + 8|0);
   $168 = HEAP32[$167>>2]|0;
   $10 = $168;
  }
  if ((label|0) == 13) {
   $3 = 0;
   $554 = $3;
   STACKTOP = sp;return ($554|0);
  }
  else if ((label|0) == 26) {
   $169 = $6;
   $3 = $169;
   $554 = $3;
   STACKTOP = sp;return ($554|0);
  }
 }
 $170 = $9;
 $171 = (_isInline($170)|0);
 $172 = ($171|0)!=(0);
 L43: do {
  if ($172) {
   $18 = 0;
   $173 = $9;
   $174 = ((($173)) + 40|0);
   $175 = HEAP32[$174>>2]|0;
   $19 = $175;
   while(1) {
    $176 = $19;
    $177 = ($176|0)!=(0|0);
    if (!($177)) {
     break L43;
    }
    $178 = $18;
    $179 = ($178|0)>=(1024);
    if ($179) {
     break;
    }
    $180 = $19;
    $181 = ((($180)) + 20|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $18;
    $184 = (($16) + ($183<<2)|0);
    HEAP32[$184>>2] = $182;
    $185 = $19;
    $186 = ((($185)) + 56|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $18;
    $189 = (($15) + ($188<<2)|0);
    HEAP32[$189>>2] = $187;
    $190 = $18;
    $191 = (($190) + 1)|0;
    $18 = $191;
    $192 = $19;
    $193 = ((($192)) + 24|0);
    $194 = HEAP32[$193>>2]|0;
    $19 = $194;
   }
   $3 = 0;
   $554 = $3;
   STACKTOP = sp;return ($554|0);
  }
 } while(0);
 $195 = $9;
 $196 = (_isInvokable($195)|0);
 $197 = ($196|0)!=(0);
 $198 = $10;
 $199 = ($198|0)!=(0|0);
 $or$cond = $197 & $199;
 do {
  if ($or$cond) {
   $20 = 0;
   $200 = $9;
   $201 = ((($200)) + 40|0);
   $202 = HEAP32[$201>>2]|0;
   $21 = $202;
   $203 = $21;
   $204 = (_isInline($203)|0);
   $205 = ($204|0)!=(0);
   do {
    if (!($205)) {
     $206 = $21;
     $207 = ((($206)) + 16|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0);
     if (!($209)) {
      $210 = $21;
      $211 = ((($210)) + 56|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)!=(0|0);
      if (!($213)) {
       $259 = $7;
       $260 = $5;
       $261 = ((($260)) + 12|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $5;
       $264 = ((($263)) + 16|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $21;
       HEAP32[$vararg_buffer16>>2] = $266;
       _printLog($259,1,$262,$265,0,15312,$vararg_buffer16);
       $267 = $7;
       $268 = $21;
       $269 = ((($268)) + 16|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (_emitInt($267,16,$270,0)|0);
       $272 = ($271|0)!=(0);
       if ($272) {
        break;
       }
       $3 = 0;
       $554 = $3;
       STACKTOP = sp;return ($554|0);
      }
      $214 = $21;
      $215 = ((($214)) + 16|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = (_padOffset($216,4)|0);
      $218 = $20;
      $219 = (($218) + ($217))|0;
      $20 = $219;
      $220 = $7;
      $221 = $21;
      $222 = ((($221)) + 16|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (_stkOffset($220,$223)|0);
      $23 = $224;
      $225 = $4;
      $226 = $21;
      $227 = ((($226)) + 56|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = $21;
      $230 = (_refCast($229)|0);
      $231 = (_genAst($225,$228,$230)|0);
      $232 = ($231|0)!=(0);
      if (!($232)) {
       $3 = 0;
       $554 = $3;
       STACKTOP = sp;return ($554|0);
      }
      $233 = $23;
      $234 = $7;
      $235 = (_stkOffset($234,0)|0);
      $236 = ($233|0)!=($235|0);
      if ($236) {
       $237 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer11>>2] = 14053;
       $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
       HEAP32[$vararg_ptr14>>2] = 597;
       $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
       HEAP32[$vararg_ptr15>>2] = 15304;
       _printFmt($237,0,15224,$vararg_buffer11);
       __abort();
       $3 = 0;
       $554 = $3;
       STACKTOP = sp;return ($554|0);
      }
      $238 = $23;
      $239 = $13;
      $240 = (($238) - ($239))|0;
      $241 = $21;
      $242 = ((($241)) + 20|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = ($240|0)!=($243|0);
      if ($244) {
       $245 = $7;
       $246 = $13;
       $247 = $21;
       $248 = ((($247)) + 20|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = (($246) + ($249))|0;
       $251 = (_emitStack($245,17,$250)|0);
       $252 = ($251|0)!=(0);
       if (!($252)) {
        $3 = 0;
        $554 = $3;
        STACKTOP = sp;return ($554|0);
       }
       $253 = $7;
       $254 = $21;
       $255 = ((($254)) + 16|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = (_emitInt($253,178,$256,0)|0);
       $258 = ($257|0)!=(0);
       if (!($258)) {
        $3 = 0;
        $554 = $3;
        STACKTOP = sp;return ($554|0);
       }
      }
     }
    }
   } while(0);
   $273 = $9;
   $274 = (_isInline($273)|0);
   $275 = ($274|0)!=(0);
   if ($275) {
    $276 = $13;
    $277 = $20;
    $278 = (($276) + ($277))|0;
    $279 = $21;
    $280 = ((($279)) + 20|0);
    HEAP32[$280>>2] = $278;
   }
   $281 = $21;
   $282 = ((($281)) + 24|0);
   $283 = HEAP32[$282>>2]|0;
   $21 = $283;
   $284 = $9;
   $285 = $4;
   $286 = ((($285)) + 5308|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($284|0)==($287|0);
   if ($288) {
    $289 = $5;
    $290 = ((($289)) + 12|0);
    $291 = HEAP32[$290>>2]|0;
    $24 = $291;
    $292 = $5;
    $293 = ((($292)) + 16|0);
    $294 = HEAP32[$293>>2]|0;
    $25 = $294;
    $295 = $4;
    $296 = ((($295)) + 4132|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = ($297|0)!=(0|0);
    if ($298) {
     $299 = $4;
     $300 = ((($299)) + 4136|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = ($301|0)>(0);
     if ($302) {
      $303 = $4;
      $304 = ((($303)) + 4132|0);
      $305 = HEAP32[$304>>2]|0;
      $24 = $305;
      $306 = $4;
      $307 = ((($306)) + 4136|0);
      $308 = HEAP32[$307>>2]|0;
      $25 = $308;
     }
    }
    dest=$22; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$22>>2] = 1;
    $309 = ((($22)) + 40|0);
    HEAP32[$309>>2] = 1;
    $310 = $21;
    $311 = ((($310)) + 28|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = ((($22)) + 4|0);
    HEAP32[$313>>2] = $312;
    $314 = $21;
    $315 = ((($314)) + 24|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ((($316)) + 28|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ((($22)) + 40|0);
    $320 = ((($319)) + 4|0);
    HEAP32[$320>>2] = $318;
    $321 = $24;
    $322 = ((($22)) + 24|0);
    HEAP32[$322>>2] = $321;
    $323 = $25;
    $324 = ($323|0)<(0);
    $325 = $324 << 31 >> 31;
    $326 = ((($22)) + 40|0);
    $327 = ((($326)) + 24|0);
    $328 = $327;
    $329 = $328;
    HEAP32[$329>>2] = $323;
    $330 = (($328) + 4)|0;
    $331 = $330;
    HEAP32[$331>>2] = $325;
    $332 = ((($22)) + 40|0);
    $333 = ((($22)) + 8|0);
    HEAP32[$333>>2] = $332;
    $334 = $10;
    $335 = ((($22)) + 40|0);
    $336 = ((($335)) + 8|0);
    HEAP32[$336>>2] = $334;
    $10 = $22;
   }
   while(1) {
    $337 = $21;
    $338 = ($337|0)!=(0|0);
    $339 = $10;
    $340 = ($339|0)!=(0|0);
    $341 = $338 ? $340 : 0;
    $342 = $21;
    if (!($341)) {
     label = 72;
     break;
    }
    $343 = (_isInline($342)|0);
    $344 = ($343|0)!=(0);
    if ($344) {
     label = 59;
    } else {
     $345 = $21;
     $346 = ((($345)) + 16|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      label = 59;
     } else {
      $352 = $21;
      $353 = ((($352)) + 16|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = (_padOffset($354,4)|0);
      $356 = $20;
      $357 = (($356) + ($355))|0;
      $20 = $357;
      $358 = $7;
      $359 = $21;
      $360 = ((($359)) + 16|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (_stkOffset($358,$361)|0);
      $26 = $362;
      $363 = $4;
      $364 = $10;
      $365 = $21;
      $366 = (_refCast($365)|0);
      $367 = (_genAst($363,$364,$366)|0);
      $368 = ($367|0)!=(0);
      if (!($368)) {
       label = 61;
       break;
      }
      $369 = $26;
      $370 = $7;
      $371 = (_stkOffset($370,0)|0);
      $372 = ($369|0)!=($371|0);
      if ($372) {
       label = 63;
       break;
      }
      $374 = $26;
      $375 = $13;
      $376 = (($374) - ($375))|0;
      $377 = $21;
      $378 = ((($377)) + 20|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($376>>>0)>($379>>>0);
      if ($380) {
       $381 = $7;
       $382 = $13;
       $383 = $21;
       $384 = ((($383)) + 20|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = (($382) + ($385))|0;
       $387 = (_emitStack($381,17,$386)|0);
       $388 = ($387|0)!=(0);
       if (!($388)) {
        label = 66;
        break;
       }
       $389 = $7;
       $390 = $21;
       $391 = ((($390)) + 16|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = (_emitInt($389,178,$392,0)|0);
       $394 = ($393|0)!=(0);
       if (!($394)) {
        label = 68;
        break;
       }
      }
     }
    }
    if ((label|0) == 59) {
     label = 0;
     $349 = $10;
     $350 = $21;
     $351 = ((($350)) + 56|0);
     HEAP32[$351>>2] = $349;
    }
    $395 = $9;
    $396 = (_isInline($395)|0);
    $397 = ($396|0)!=(0);
    if ($397) {
     $398 = $13;
     $399 = $20;
     $400 = (($398) + ($399))|0;
     $401 = $21;
     $402 = ((($401)) + 20|0);
     HEAP32[$402>>2] = $400;
    }
    $403 = $21;
    $404 = ((($403)) + 24|0);
    $405 = HEAP32[$404>>2]|0;
    $21 = $405;
    $406 = $10;
    $407 = ((($406)) + 8|0);
    $408 = HEAP32[$407>>2]|0;
    $10 = $408;
   }
   if ((label|0) == 61) {
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   else if ((label|0) == 63) {
    $373 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer19>>2] = 14053;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = 666;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = 15304;
    _printFmt($373,0,15340,$vararg_buffer19);
    __abort();
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   else if ((label|0) == 66) {
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   else if ((label|0) == 68) {
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   else if ((label|0) == 72) {
    $409 = ($342|0)!=(0|0);
    $410 = $10;
    $411 = ($410|0)!=(0|0);
    $or$cond3 = $409 | $411;
    if (!($or$cond3)) {
     break;
    }
    $412 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer24>>2] = 14053;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = 691;
    $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
    HEAP32[$vararg_ptr28>>2] = 15304;
    _printFmt($412,0,28431,$vararg_buffer24);
    __abort();
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
  }
 } while(0);
 $413 = $9;
 $414 = (_isInline($413)|0);
 $415 = ($414|0)!=(0);
 do {
  if ($415) {
   $416 = $4;
   $417 = $9;
   $418 = ((($417)) + 56|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = $11;
   $421 = (_genAst($416,$419,$420)|0);
   $422 = ($421|0)!=(0);
   if (!($422)) {
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   $27 = 0;
   $423 = $9;
   $424 = ((($423)) + 40|0);
   $425 = HEAP32[$424>>2]|0;
   $28 = $425;
   while(1) {
    $426 = $28;
    $427 = ($426|0)!=(0|0);
    if (!($427)) {
     break;
    }
    $428 = $27;
    $429 = (($16) + ($428<<2)|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = $28;
    $432 = ((($431)) + 20|0);
    HEAP32[$432>>2] = $430;
    $433 = $27;
    $434 = (($15) + ($433<<2)|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = $28;
    $437 = ((($436)) + 56|0);
    HEAP32[$437>>2] = $435;
    $438 = $27;
    $439 = (($438) + 1)|0;
    $27 = $439;
    $440 = $28;
    $441 = ((($440)) + 24|0);
    $442 = HEAP32[$441>>2]|0;
    $28 = $442;
   }
   $443 = $14;
   $444 = $7;
   $445 = (_stkOffset($444,0)|0);
   $446 = ($443>>>0)<($445>>>0);
   if ($446) {
    $447 = $9;
    $448 = ((($447)) + 40|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ((($449)) + 16|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = ($451>>>0)>(0);
    if ($452) {
     $453 = $7;
     $454 = $14;
     $455 = (_emitStack($453,17,$454)|0);
     $456 = ($455|0)!=(0);
     if (!($456)) {
      $3 = 0;
      $554 = $3;
      STACKTOP = sp;return ($554|0);
     }
     $457 = $7;
     $458 = $9;
     $459 = ((($458)) + 40|0);
     $460 = HEAP32[$459>>2]|0;
     $461 = ((($460)) + 16|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (_emitInt($457,178,$462,0)|0);
     $464 = ($463|0)!=(0);
     if (!($464)) {
      $3 = 0;
      $554 = $3;
      STACKTOP = sp;return ($554|0);
     }
    }
    $465 = $7;
    $466 = $14;
    $467 = (_emitStack($465,179,$466)|0);
    $468 = ($467|0)!=(0);
    if (!($468)) {
     $469 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer29>>2] = 14053;
     $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
     HEAP32[$vararg_ptr32>>2] = 727;
     $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
     HEAP32[$vararg_ptr33>>2] = 15304;
     _printFmt($469,0,28431,$vararg_buffer29);
     __abort();
     $3 = 0;
     $554 = $3;
     STACKTOP = sp;return ($554|0);
    }
   }
  } else {
   $470 = $9;
   $471 = (_isTypename($470)|0);
   $472 = ($471|0)!=(0);
   if (!($472)) {
    $538 = $4;
    $539 = $5;
    $540 = ((($539)) + 24|0);
    $541 = ((($540)) + 4|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = (_genAst($538,$542,10)|0);
    $544 = ($543|0)!=(0);
    if (!($544)) {
     $3 = 0;
     $554 = $3;
     STACKTOP = sp;return ($554|0);
    }
    $545 = $7;
    $546 = (_emit($545,2)|0);
    $547 = ($546|0)!=(0);
    if (!($547)) {
     $3 = 0;
     $554 = $3;
     STACKTOP = sp;return ($554|0);
    }
    $548 = $7;
    $549 = $14;
    $550 = (_emitStack($548,179,$549)|0);
    $551 = ($550|0)!=(0);
    if ($551) {
     break;
    }
    $552 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer37>>2] = 14053;
    $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
    HEAP32[$vararg_ptr40>>2] = 793;
    $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
    HEAP32[$vararg_ptr41>>2] = 15304;
    _printFmt($552,0,28431,$vararg_buffer37);
    __abort();
    $3 = 0;
    $554 = $3;
    STACKTOP = sp;return ($554|0);
   }
   $473 = $9;
   $474 = (_refCast($473)|0);
   $29 = $474;
   $475 = $10;
   $476 = ($475|0)==(0|0);
   if (!($476)) {
    $477 = $10;
    $478 = ((($477)) + 8|0);
    $479 = HEAP32[$478>>2]|0;
    $480 = ($479|0)!=(0|0);
    if (!($480)) {
     $489 = $9;
     $490 = $4;
     $491 = ((($490)) + 5256|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ($489|0)==($492|0);
     if (!($493)) {
      $494 = $9;
      $495 = $4;
      $496 = ((($495)) + 5260|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = ($494|0)==($497|0);
      if (!($498)) {
       $499 = $9;
       $500 = $4;
       $501 = ((($500)) + 5252|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = ($499|0)==($502|0);
       if (!($503)) {
        $520 = $29;
        switch ($520|0) {
        case 9:  {
         label = 101;
         break;
        }
        case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1:  {
         $534 = $4;
         $535 = $10;
         $536 = $29;
         $537 = (_genAst($534,$535,$536)|0);
         $3 = $537;
         $554 = $3;
         STACKTOP = sp;return ($554|0);
         break;
        }
        default: {
        }
        }
        if ((label|0) == 101) {
         $521 = $10;
         $522 = ((($521)) + 4|0);
         $523 = HEAP32[$522>>2]|0;
         $524 = $4;
         $525 = ((($524)) + 5300|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = ($523|0)==($526|0);
         if ($527) {
          $528 = $4;
          $529 = $10;
          $530 = $29;
          $531 = (_genAst($528,$529,$530)|0);
          $532 = ($531|0)!=(0);
          if ($532) {
           $533 = $29;
           $3 = $533;
           $554 = $3;
           STACKTOP = sp;return ($554|0);
          } else {
           $3 = 0;
           $554 = $3;
           STACKTOP = sp;return ($554|0);
          }
         }
        }
        $3 = 0;
        $554 = $3;
        STACKTOP = sp;return ($554|0);
       }
      }
     }
     $504 = $9;
     $505 = $4;
     $506 = ((($505)) + 5260|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($504|0)==($507|0);
     if (!($508)) {
      $516 = $4;
      $517 = $10;
      $518 = $29;
      $519 = (_genAst($516,$517,$518)|0);
      $3 = $519;
      $554 = $3;
      STACKTOP = sp;return ($554|0);
     }
     $509 = $7;
     $510 = $10;
     $511 = ((($510)) + 4|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = (_emitVarOffs($509,$512)|0);
     $514 = ($513|0)!=(0);
     if ($514) {
      $515 = $29;
      $3 = $515;
      $554 = $3;
      STACKTOP = sp;return ($554|0);
     } else {
      $3 = 0;
      $554 = $3;
      STACKTOP = sp;return ($554|0);
     }
    }
   }
   $481 = $7;
   $482 = $5;
   $483 = ((($482)) + 12|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = $5;
   $486 = ((($485)) + 16|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = $5;
   HEAP32[$vararg_buffer34>>2] = $488;
   _printLog($481,-1,$484,$487,0,15421,$vararg_buffer34);
   $3 = 0;
   $554 = $3;
   STACKTOP = sp;return ($554|0);
  }
 } while(0);
 $553 = $11;
 $3 = $553;
 $554 = $3;
 STACKTOP = sp;return ($554|0);
}
function _genIndex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $4;
 $14 = $5;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_genAst($13,$17,10)|0);
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = $5;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $9 = $24;
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 & 1;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $4;
    $30 = $5;
    $31 = ((($30)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (_eval($29,$8,$32)|0);
    $34 = ($33|0)==(5);
    if ($34) {
     $35 = $9;
     $36 = (_intValue($8)|0);
     $37 = (getTempRet0() | 0);
     $38 = (___muldi3(($35|0),0,($36|0),($37|0))|0);
     $39 = (getTempRet0() | 0);
     $10 = $38;
     $40 = $7;
     $41 = $10;
     $42 = (_emitInt($40,11,$41,0)|0);
     $43 = ($42|0)!=(0);
     if (!($43)) {
      $3 = 0;
      break;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $44 = $4;
    $45 = $5;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $4;
    $49 = ((($48)) + 5280|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_refCast($50)|0);
    $52 = (_genAst($44,$47,$51)|0);
    $53 = ($52|0)!=(0);
    if (!($53)) {
     $3 = 0;
     break;
    }
    $54 = $7;
    $55 = $9;
    $56 = (_emitInt($54,12,$55,0)|0);
    $57 = ($56|0)!=(0);
    if (!($57)) {
     $3 = 0;
     break;
    }
   }
   $58 = $6;
   $59 = ($58|0)==(48);
   if ($59) {
    $3 = 10;
    break;
   }
   $60 = $5;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_refCast($62)|0);
   $64 = ($63|0)==(10);
   if ($64) {
    $65 = $7;
    $66 = (_emitInt($65,177,4,0)|0);
    $67 = ($66|0)!=(0);
    if (!($67)) {
     $3 = 0;
     break;
    }
   }
   $68 = $6;
   $69 = ($68|0)==(10);
   if ($69) {
    $3 = 10;
    break;
   }
   $70 = $7;
   $71 = $9;
   $72 = (_emitInt($70,177,$71,0)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $5;
    $75 = ((($74)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_refCast($76)|0);
    $3 = $77;
    break;
   } else {
    $3 = 0;
    break;
   }
  } else {
   $3 = 0;
  }
 } while(0);
 $78 = $3;
 STACKTOP = sp;return ($78|0);
}
function _genMember($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $spec$store$select = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $7 = $14;
 $15 = $5;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_linkOf($18,1)|0);
 $8 = $19;
 $20 = $5;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_linkOf($22,1)|0);
 $9 = $23;
 $24 = $5;
 $25 = ((($24)) + 24|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_isTypeExpr($27)|0);
 $10 = $28;
 $29 = $9;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = $5;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $5;
   $36 = ((($35)) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $11 = $37;
   $38 = $11;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(3);
   if ($40) {
    $41 = $11;
    $42 = ((($41)) + 24|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_linkOf($44,1)|0);
    $9 = $45;
   }
  }
 }
 $46 = $8;
 $47 = ($46|0)!=(0|0);
 $48 = $9;
 $49 = ($48|0)!=(0|0);
 $or$cond = $47 & $49;
 if (!($or$cond)) {
  $3 = 0;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 $50 = $9;
 $51 = (_isStatic($50)|0);
 $52 = ($51|0)==(0);
 $53 = $10;
 $54 = ($53|0)!=(0);
 $or$cond3 = $52 & $54;
 if ($or$cond3) {
  $55 = $7;
  $56 = $5;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $5;
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $9;
  HEAP32[$vararg_buffer>>2] = $62;
  _printLog($55,-1,$58,$61,0,15466,$vararg_buffer);
  $3 = 0;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 $63 = $9;
 $64 = (_isStatic($63)|0);
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $10;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   $68 = $8;
   $69 = (_isVariable($68)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $8;
    $72 = ((($71)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (_castOf($73)|0);
    $75 = ($74|0)!=(12);
    if ($75) {
     $76 = $7;
     $77 = $5;
     $78 = ((($77)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $5;
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $9;
     $84 = $8;
     $85 = ((($84)) + 28|0);
     $86 = HEAP32[$85>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $83;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $86;
     _printLog($76,1,$79,$82,0,15521,$vararg_buffer4);
    }
   }
  }
  $87 = $4;
  $88 = $5;
  $89 = ((($88)) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $6;
  $92 = (_genAst($87,$90,$91)|0);
  $3 = $92;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 $93 = $9;
 $94 = ((($93)) + 44|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(0);
 if ($96) {
  $97 = $4;
  $98 = $5;
  $99 = ((($98)) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $6;
  $102 = (_genAst($97,$100,$101)|0);
  $3 = $102;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 $12 = 10;
 $103 = $9;
 $104 = $4;
 $105 = ((($104)) + 5296|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($103|0)==($106|0);
 $spec$store$select = $107 ? 48 : 10;
 $12 = $spec$store$select;
 $108 = $4;
 $109 = $5;
 $110 = ((($109)) + 24|0);
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $12;
 $114 = (_genAst($108,$112,$113)|0);
 $115 = ($114|0)!=(0);
 if (!($115)) {
  $3 = 0;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 $116 = $7;
 $117 = $9;
 $118 = ((($117)) + 20|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (_emitInt($116,11,$119,0)|0);
 $121 = ($120|0)!=(0);
 if ($121) {
  $122 = $4;
  $123 = $9;
  $124 = $6;
  $125 = (_genIndirection($122,$123,$124)|0);
  $3 = $125;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 } else {
  $3 = 0;
  $126 = $3;
  STACKTOP = sp;return ($126|0);
 }
 return (0)|0;
}
function _genOperator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 176;
 $8 = $5;
 L1: do {
  switch ($8|0) {
  case 9:  {
   $9 = $6;
   $cond = ($9|0)==(2);
   if ($cond) {
    $7 = 10;
   }
   break;
  }
  case 21:  {
   $10 = $6;
   switch ($10|0) {
   case 10:  {
    $11 = (_vmSelect(87,103)|0);
    $7 = $11;
    break L1;
    break;
   }
   case 4: case 3: case 2:  {
    $7 = 87;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 103;
    break L1;
    break;
   }
   case 7:  {
    $7 = 119;
    break L1;
    break;
   }
   case 8:  {
    $7 = 135;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 22:  {
   $12 = $4;
   $13 = $6;
   $14 = (_genOperator($12,21,$13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $7 = 10;
    break L1;
   }
   $3 = 0;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 19:  {
   $16 = $6;
   switch ($16|0) {
   case 3: case 2:  {
    $7 = 88;
    break L1;
    break;
   }
   case 5:  {
    $7 = 104;
    break L1;
    break;
   }
   case 4:  {
    $7 = 56;
    break L1;
    break;
   }
   case 6:  {
    $7 = 72;
    break L1;
    break;
   }
   case 7:  {
    $7 = 120;
    break L1;
    break;
   }
   case 8:  {
    $7 = 136;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 20:  {
   $17 = $4;
   $18 = $6;
   $19 = (_genOperator($17,17,$18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $7 = 10;
    break L1;
   }
   $3 = 0;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 17:  {
   $21 = $6;
   switch ($21|0) {
   case 3: case 2:  {
    $7 = 89;
    break L1;
    break;
   }
   case 5:  {
    $7 = 105;
    break L1;
    break;
   }
   case 4:  {
    $7 = 57;
    break L1;
    break;
   }
   case 6:  {
    $7 = 73;
    break L1;
    break;
   }
   case 7:  {
    $7 = 121;
    break L1;
    break;
   }
   case 8:  {
    $7 = 137;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 18:  {
   $22 = $4;
   $23 = $6;
   $24 = (_genOperator($22,19,$23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $7 = 10;
    break L1;
   }
   $3 = 0;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 6:  {
   $26 = $6;
   $$off = (($26) + -3)|0;
   $switch = ($$off>>>0)<(6);
   if ($switch) {
    $7 = 0;
   }
   break;
  }
  case 7:  {
   $27 = $6;
   switch ($27|0) {
   case 4: case 3:  {
    $7 = 80;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 96;
    break L1;
    break;
   }
   case 7:  {
    $7 = 112;
    break L1;
    break;
   }
   case 8:  {
    $7 = 128;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 13:  {
   $28 = $6;
   switch ($28|0) {
   case 4: case 3:  {
    $7 = 81;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 97;
    break L1;
    break;
   }
   case 7:  {
    $7 = 113;
    break L1;
    break;
   }
   case 8:  {
    $7 = 129;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 14:  {
   $29 = $6;
   switch ($29|0) {
   case 4: case 3:  {
    $7 = 82;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 98;
    break L1;
    break;
   }
   case 7:  {
    $7 = 114;
    break L1;
    break;
   }
   case 8:  {
    $7 = 130;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 10:  {
   $30 = $6;
   switch ($30|0) {
   case 3:  {
    $7 = 83;
    break L1;
    break;
   }
   case 5:  {
    $7 = 99;
    break L1;
    break;
   }
   case 4:  {
    $7 = 51;
    break L1;
    break;
   }
   case 6:  {
    $7 = 67;
    break L1;
    break;
   }
   case 7:  {
    $7 = 115;
    break L1;
    break;
   }
   case 8:  {
    $7 = 131;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 11:  {
   $31 = $6;
   switch ($31|0) {
   case 3:  {
    $7 = 84;
    break L1;
    break;
   }
   case 5:  {
    $7 = 100;
    break L1;
    break;
   }
   case 4:  {
    $7 = 52;
    break L1;
    break;
   }
   case 6:  {
    $7 = 68;
    break L1;
    break;
   }
   case 7:  {
    $7 = 116;
    break L1;
    break;
   }
   case 8:  {
    $7 = 132;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 12:  {
   $32 = $6;
   switch ($32|0) {
   case 3:  {
    $7 = 85;
    break L1;
    break;
   }
   case 5:  {
    $7 = 101;
    break L1;
    break;
   }
   case 4:  {
    $7 = 53;
    break L1;
    break;
   }
   case 6:  {
    $7 = 69;
    break L1;
    break;
   }
   case 7:  {
    $7 = 117;
    break L1;
    break;
   }
   case 8:  {
    $7 = 133;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 8:  {
   $33 = $6;
   switch ($33|0) {
   case 4: case 3:  {
    $7 = 48;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 64;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 16:  {
   $34 = $6;
   switch ($34|0) {
   case 4: case 3:  {
    $7 = 58;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 74;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 15:  {
   $35 = $6;
   switch ($35|0) {
   case 3:  {
    $7 = 60;
    break L1;
    break;
   }
   case 5:  {
    $7 = 76;
    break L1;
    break;
   }
   case 4:  {
    $7 = 59;
    break L1;
    break;
   }
   case 6:  {
    $7 = 75;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 23:  {
   $36 = $6;
   switch ($36|0) {
   case 4: case 3: case 2:  {
    $7 = 49;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 65;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 25:  {
   $37 = $6;
   switch ($37|0) {
   case 4: case 3: case 2:  {
    $7 = 50;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 66;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 24:  {
   $38 = $6;
   switch ($38|0) {
   case 3: case 4: case 2:  {
    $7 = 54;
    break L1;
    break;
   }
   case 6: case 5:  {
    $7 = 70;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $39 = $7;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $4;
  $42 = $7;
  $43 = (_emit($41,$42)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   $3 = 0;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
  }
 }
 $45 = $6;
 $3 = $45;
 $46 = $3;
 STACKTOP = sp;return ($46|0);
}
function _genLogical($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $3;
  $17 = $4;
  $18 = ((($17)) + 24|0);
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_eval($16,$6,$20)|0);
  $22 = ($21|0)==(2);
  if ($22) {
   $23 = $3;
   $24 = (_bolValue($6)|0);
   $25 = ($24|0)!=(0);
   $26 = $4;
   $27 = ((($26)) + 24|0);
   if ($25) {
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $29;
   } else {
    $30 = HEAP32[$27>>2]|0;
    $31 = $30;
   }
   $32 = (_genAst($23,$31,0)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    $2 = 0;
    $77 = $2;
    STACKTOP = sp;return ($77|0);
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $34 = $5;
   $35 = (_stkOffset($34,0)|0);
   $7 = $35;
   $36 = $3;
   $37 = $4;
   $38 = ((($37)) + 24|0);
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_genAst($36,$40,2)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $2 = 0;
    $77 = $2;
    STACKTOP = sp;return ($77|0);
   }
   $43 = $5;
   $44 = (_emit($43,6)|0);
   $8 = $44;
   $45 = $8;
   $46 = ($45|0)==(0);
   if ($46) {
    $2 = 0;
    $77 = $2;
    STACKTOP = sp;return ($77|0);
   }
   $47 = $3;
   $48 = $4;
   $49 = ((($48)) + 24|0);
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_genAst($47,$51,0)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $2 = 0;
    $77 = $2;
    STACKTOP = sp;return ($77|0);
   }
   $54 = $5;
   $55 = (_emit($54,4)|0);
   $9 = $55;
   $56 = $9;
   $57 = ($56|0)==(0);
   if ($57) {
    $2 = 0;
    $77 = $2;
    STACKTOP = sp;return ($77|0);
   }
   $58 = $5;
   $59 = $8;
   $60 = $5;
   $61 = (_emit($60,180)|0);
   $62 = $7;
   (_fixJump($58,$59,$61,$62)|0);
   $63 = $3;
   $64 = $4;
   $65 = ((($64)) + 24|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_genAst($63,$66,0)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $5;
    $70 = $9;
    $71 = $5;
    $72 = (_emit($71,180)|0);
    (_fixJump($69,$70,$72,-1)|0);
    break;
   }
   $2 = 0;
   $77 = $2;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $73 = $4;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (_refCast($75)|0);
 $2 = $76;
 $77 = $2;
 STACKTOP = sp;return ($77|0);
}
function _emitI64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $3 = $0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 $21 = (_emitOpc($20,28,$$byval_copy)|0);
 STACKTOP = sp;return ($21|0);
}
function _emitF64($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$byval_copy = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 HEAPF64[$4>>3] = $5;
 $6 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $7 = (_emitOpc($6,30,$$byval_copy)|0);
 STACKTOP = sp;return ($7|0);
}
function _emitOffs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $11 = (_vmSelect(27,28)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $12 = (_emitOpc($10,$11,$$byval_copy)|0);
 STACKTOP = sp;return ($12|0);
}
function _emitRef($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $11 = (_emitOpc($10,31,$$byval_copy)|0);
 STACKTOP = sp;return ($11|0);
}
function _genVariable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $9 = $14;
 $15 = $6;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $10 = $17;
 $18 = $6;
 $19 = (_castOf($18)|0);
 $11 = $19;
 $20 = $6;
 $21 = $5;
 $22 = ((($21)) + 5284|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 if ($24) {
  $25 = $7;
  switch ($25|0) {
  case 11:  {
   $26 = $9;
   $27 = $10;
   $28 = (_emitVarOffs($26,$27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    $4 = 0;
    $106 = $4;
    STACKTOP = sp;return ($106|0);
   }
   break;
  }
  case 12:  {
   $30 = $9;
   $31 = (_emitOffs($30,0)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $4 = 0;
    $106 = $4;
    STACKTOP = sp;return ($106|0);
   }
   break;
  }
  case 10:  {
   break;
  }
  default: {
   $4 = 0;
   $106 = $4;
   STACKTOP = sp;return ($106|0);
  }
  }
  $33 = $9;
  $34 = (_emitInt($33,31,0,0)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $7;
   $4 = $36;
   $106 = $4;
   STACKTOP = sp;return ($106|0);
  } else {
   $4 = 0;
   $106 = $4;
   STACKTOP = sp;return ($106|0);
  }
 }
 $37 = $6;
 $38 = ((($37)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 48;
 $41 = (($40) - 0)|0;
 $42 = $41 >>> 4;
 $43 = $41 << 28;
 $44 = $42 | $43;
 switch ($44|0) {
 case 0:  {
  $45 = $5;
  $46 = $6;
  $47 = ((($46)) + 56|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $7;
  $50 = (_genAst($45,$48,$49)|0);
  $4 = $50;
  $106 = $4;
  STACKTOP = sp;return ($106|0);
  break;
 }
 case 2: case 1:  {
  $11 = 10;
  break;
 }
 case 3:  {
  break;
 }
 default: {
  // unreachable;
 }
 }
 $51 = $6;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = $9;
  $56 = $8;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $8;
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $6;
  HEAP32[$vararg_buffer>>2] = $62;
  _printLog($55,-1,$58,$61,0,15578,$vararg_buffer);
 }
 $63 = $7;
 $64 = ($63|0)==(12);
 $65 = $11;
 $66 = ($65|0)!=(12);
 $or$cond = $64 & $66;
 do {
  if ($or$cond) {
   $67 = $10;
   $68 = ((($67)) + 36|0);
   $69 = HEAP32[$68>>2]|0;
   $12 = $69;
   $70 = $12;
   $71 = ($70|0)==(0|0);
   if (!($71)) {
    $72 = $12;
    $73 = (_isStatic($72)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $83 = $5;
     $84 = $12;
     $85 = $12;
     $86 = (_refCast($85)|0);
     $87 = $8;
     $88 = (_genVariable($83,$84,$86,$87)|0);
     $89 = ($88|0)!=(0);
     if ($89) {
      break;
     }
     $4 = 0;
     $106 = $4;
     STACKTOP = sp;return ($106|0);
    }
   }
   $75 = $9;
   $76 = $8;
   $77 = ((($76)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $8;
   $80 = ((($79)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $6;
   HEAP32[$vararg_buffer4>>2] = $82;
   _printLog($75,-1,$78,$81,0,15604,$vararg_buffer4);
   $4 = 0;
   $106 = $4;
   STACKTOP = sp;return ($106|0);
  }
 } while(0);
 $90 = $7;
 $91 = ($90|0)==(11);
 $92 = $11;
 $93 = ($92|0)!=(11);
 $or$cond3 = $91 & $93;
 if ($or$cond3) {
  $94 = $9;
  $95 = $10;
  $96 = (_emitVarOffs($94,$95)|0);
  $97 = ($96|0)!=(0);
  if (!($97)) {
   $4 = 0;
   $106 = $4;
   STACKTOP = sp;return ($106|0);
  }
 }
 $98 = $9;
 $99 = $6;
 $100 = (_emitVarOffs($98,$99)|0);
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $5;
  $103 = $6;
  $104 = $7;
  $105 = (_genIndirection($102,$103,$104)|0);
  $4 = $105;
  $106 = $4;
  STACKTOP = sp;return ($106|0);
 } else {
  $4 = 0;
  $106 = $4;
  STACKTOP = sp;return ($106|0);
 }
 return (0)|0;
}
function _castOf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _isArrayType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _chainArgs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(41);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 24|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_chainArgs($13)|0);
  $3 = $14;
  $15 = $2;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_chainArgs($17)|0);
  $4 = $18;
  $19 = $3;
  $2 = $19;
  while(1) {
   $20 = $3;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    break;
   }
   $24 = $3;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
  }
  $27 = $4;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
 } else {
  $30 = ((($10)) + 8|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $2;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _refSize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_refCast($3)|0);
 switch ($4|0) {
 case 10:  {
  $1 = 4;
  break;
 }
 case 11: case 12:  {
  $1 = 8;
  break;
 }
 default: {
  $5 = $2;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
 }
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _isInvokable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _emitVarOffs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = (_isStatic($5)|0);
 $7 = ($6|0)!=(0);
 $8 = $3;
 $9 = $4;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 if ($7) {
  $13 = (_emitInt($8,31,$11,0)|0);
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $12 = (_emitStack($8,17,$11)|0);
  $2 = $12;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _genIndirection($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $5;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $8;
 $17 = (_refCast($16)|0);
 $9 = $17;
 $18 = $5;
 $19 = (_refCast($18)|0);
 $10 = $19;
 $20 = $6;
 $21 = ($20|0)==(48);
 L1: do {
  if ($21) {
   $3 = 10;
  } else {
   $22 = $5;
   $23 = ((($22)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 48;
   $26 = (($25) - 0)|0;
   $27 = $26 >>> 4;
   $28 = $26 << 28;
   $29 = $27 | $28;
   switch ($29|0) {
   case 0:  {
    $30 = $4;
    $31 = $5;
    $32 = ((($31)) + 56|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $6;
    $35 = (_genAst($30,$33,$34)|0);
    $3 = $35;
    break L1;
    break;
   }
   case 2: case 1:  {
    $10 = 9;
    $9 = 10;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    // unreachable;
   }
   }
   $36 = $6;
   $37 = ($36|0)==(10);
   $38 = $6;
   $39 = ($38|0)==(11);
   $or$cond = $37 | $39;
   $40 = $6;
   $41 = ($40|0)==(12);
   $or$cond3 = $or$cond | $41;
   $42 = $10;
   if (!($or$cond3)) {
    $63 = ($42|0)==(10);
    $64 = $9;
    $65 = ($64|0)!=(9);
    $or$cond9 = $63 & $65;
    if ($or$cond9) {
     $66 = $7;
     $67 = (_emitInt($66,177,4,0)|0);
     $68 = ($67|0)!=(0);
     if (!($68)) {
      $3 = 0;
      break;
     }
    }
    $69 = $7;
    $70 = $8;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (_emitInt($69,177,$72,0)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $9;
     $3 = $75;
     break;
    } else {
     $3 = 0;
     break;
    }
   }
   $43 = $6;
   $44 = ($42|0)==($43|0);
   if ($44) {
    $45 = $7;
    $46 = $5;
    $47 = ((($46)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (_emitInt($45,177,$48,0)|0);
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $6;
     $3 = $51;
     break;
    } else {
     $3 = 0;
     break;
    }
   }
   $52 = $10;
   $53 = ($52|0)==(10);
   $54 = $10;
   $55 = ($54|0)==(11);
   $or$cond5 = $53 | $55;
   $56 = $10;
   $57 = ($56|0)==(12);
   $or$cond7 = $or$cond5 | $57;
   if (!($or$cond7)) {
    $62 = $6;
    $3 = $62;
    break;
   }
   $58 = $7;
   $59 = (_emitInt($58,177,4,0)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $6;
    $3 = $61;
    break;
   } else {
    $3 = 0;
    break;
   }
  }
 } while(0);
 $76 = $3;
 STACKTOP = sp;return ($76|0);
}
function _vmSelect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _isConst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _optimizeAssign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer26 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $5;
 $10 = (_testOcp($8,$9,18,$7)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP8[$7>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  if ($14) {
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  $15 = $4;
  $16 = $6;
  $17 = (_testOcp($15,$16,21,$7)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  $19 = HEAP8[$7>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(1);
  if ($21) {
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  $22 = $4;
  $23 = $6;
  $24 = (_removeOpc($22,$23)|0);
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = HEAP32[3314]|0;
   $27 = $6;
   $28 = $4;
   $29 = $6;
   $30 = (_vmPointer($28,$29)|0);
   HEAP32[$vararg_buffer>>2] = 16871;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 152;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 16882;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $27;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $30;
   _printFmt($26,0,16829,$vararg_buffer);
   __abort_85();
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  $31 = $4;
  $32 = $5;
  $33 = (_removeOpc($31,$32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $35 = HEAP32[3314]|0;
   $36 = $6;
   $37 = $4;
   $38 = $6;
   $39 = (_vmPointer($37,$38)|0);
   HEAP32[$vararg_buffer5>>2] = 16871;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = 156;
   $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
   HEAP32[$vararg_ptr9>>2] = 16882;
   $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
   HEAP32[$vararg_ptr10>>2] = $36;
   $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
   HEAP32[$vararg_ptr11>>2] = $39;
   _printFmt($35,0,16829,$vararg_buffer5);
   __abort_85();
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  $40 = $4;
  $41 = $5;
  $42 = $6;
  $43 = (_decrementStackAccess($40,$41,$42,1)|0);
  $44 = ($43|0)!=(0);
  if ($44) {
   $3 = 1;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  } else {
   $45 = HEAP32[3314]|0;
   $46 = $5;
   $47 = $4;
   $48 = $5;
   $49 = (_vmPointer($47,$48)|0);
   HEAP32[$vararg_buffer12>>2] = 16871;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = 160;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = 16882;
   $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
   HEAP32[$vararg_ptr17>>2] = $46;
   $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
   HEAP32[$vararg_ptr18>>2] = $49;
   _printFmt($45,0,16829,$vararg_buffer12);
   __abort_85();
   $3 = 0;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
 }
 $50 = $4;
 $51 = $5;
 $52 = (_testOcp($50,$51,19,$7)|0);
 $53 = ($52|0)!=(0);
 if (!($53)) {
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $54 = HEAP8[$7>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)!=(0);
 if ($56) {
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $57 = $4;
 $58 = $6;
 $59 = (_testOcp($57,$58,22,$7)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $61 = HEAP8[$7>>0]|0;
 $62 = $61&255;
 $63 = ($62|0)!=(2);
 if ($63) {
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $64 = $4;
 $65 = $6;
 $66 = (_removeOpc($64,$65)|0);
 $67 = ($66|0)!=(0);
 if (!($67)) {
  $68 = HEAP32[3314]|0;
  $69 = $6;
  $70 = $4;
  $71 = $6;
  $72 = (_vmPointer($70,$71)|0);
  HEAP32[$vararg_buffer19>>2] = 16871;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = 177;
  $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
  HEAP32[$vararg_ptr23>>2] = 16882;
  $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
  HEAP32[$vararg_ptr24>>2] = $69;
  $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
  HEAP32[$vararg_ptr25>>2] = $72;
  _printFmt($68,0,16829,$vararg_buffer19);
  __abort_85();
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $73 = $4;
 $74 = $5;
 $75 = (_removeOpc($73,$74)|0);
 $76 = ($75|0)!=(0);
 if (!($76)) {
  $77 = HEAP32[3314]|0;
  $78 = $6;
  $79 = $4;
  $80 = $6;
  $81 = (_vmPointer($79,$80)|0);
  HEAP32[$vararg_buffer26>>2] = 16871;
  $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
  HEAP32[$vararg_ptr29>>2] = 181;
  $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
  HEAP32[$vararg_ptr30>>2] = 16882;
  $vararg_ptr31 = ((($vararg_buffer26)) + 12|0);
  HEAP32[$vararg_ptr31>>2] = $78;
  $vararg_ptr32 = ((($vararg_buffer26)) + 16|0);
  HEAP32[$vararg_ptr32>>2] = $81;
  _printFmt($77,0,16829,$vararg_buffer26);
  __abort_85();
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 $82 = $4;
 $83 = $5;
 $84 = $6;
 $85 = (_decrementStackAccess($82,$83,$84,2)|0);
 $86 = ($85|0)!=(0);
 if ($86) {
  $3 = 1;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 } else {
  $87 = HEAP32[3314]|0;
  $88 = $5;
  $89 = $4;
  $90 = $5;
  $91 = (_vmPointer($89,$90)|0);
  HEAP32[$vararg_buffer33>>2] = 16871;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = 185;
  $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
  HEAP32[$vararg_ptr37>>2] = 16882;
  $vararg_ptr38 = ((($vararg_buffer33)) + 12|0);
  HEAP32[$vararg_ptr38>>2] = $88;
  $vararg_ptr39 = ((($vararg_buffer33)) + 16|0);
  HEAP32[$vararg_ptr39>>2] = $91;
  _printFmt($87,0,16829,$vararg_buffer33);
  __abort_85();
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function _testOcp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = (_vmPointer($10,$11)|0);
 $9 = $12;
 $13 = $7;
 $14 = ($13>>>0)>=(176);
 if ($14) {
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $15 = $9;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $9;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $7;
  $21 = ($19|0)==($20|0);
  if ($21) {
   $22 = $8;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $8;
    $25 = $9;
    $26 = ((($25)) + 1|0);
    ;HEAP8[$24>>0]=HEAP8[$26>>0]|0;HEAP8[$24+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$24+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$24+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$24+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$24+7>>0]=HEAP8[$26+7>>0]|0;
   }
   $4 = 1;
   $27 = $4;
   STACKTOP = sp;return ($27|0);
  }
 }
 $4 = 0;
 $27 = $4;
 STACKTOP = sp;return ($27|0);
}
function _removeOpc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($8>>>0)>=($12>>>0);
 if ($13) {
  $14 = $4;
  $15 = $3;
  $16 = ((($15)) + 24|0);
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($14>>>0)<=($18>>>0);
  if ($19) {
   $20 = $3;
   $21 = $4;
   $22 = (_vmPointer($20,$21)|0);
   $5 = $22;
   $23 = $5;
   $6 = $23;
   $24 = $5;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = (16 + (($26*20)|0)|0);
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $7 = $29;
   $30 = $6;
   $31 = $6;
   $32 = $7;
   $33 = (($31) + ($32)|0);
   $34 = $3;
   $35 = ((($34)) + 132|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $6;
   $38 = $36;
   $39 = $37;
   $40 = (($38) - ($39))|0;
   _memcpy(($30|0),($33|0),($40|0))|0;
   $41 = $7;
   $42 = $3;
   $43 = ((($42)) + 132|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (0 - ($41))|0;
   $46 = (($44) + ($45)|0);
   HEAP32[$43>>2] = $46;
   $47 = $3;
   $48 = ((($47)) + 132|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $3;
   $51 = ((($50)) + 144|0);
   $52 = $49;
   $53 = $51;
   $54 = (($52) - ($53))|0;
   $55 = $3;
   $56 = ((($55)) + 24|0);
   $57 = ((($56)) + 12|0);
   HEAP32[$57>>2] = $54;
   $2 = 1;
   $58 = $2;
   STACKTOP = sp;return ($58|0);
  }
 }
 $2 = 0;
 $58 = $2;
 STACKTOP = sp;return ($58|0);
}
function _vmPointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $3;
  $8 = ((($7)) + 144|0);
  $9 = $4;
  $10 = (($8) + ($9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function __abort_85() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _decrementStackAccess($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $9 = $12;
 while(1) {
  $13 = $9;
  $14 = $7;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $5;
  $17 = $9;
  $18 = (_vmPointer($16,$17)|0);
  $10 = $18;
  $19 = $10;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (16 + (($21*20)|0)|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $11 = $24;
  $25 = $11;
  $26 = ($25|0)<=(0);
  if ($26) {
   label = 4;
   break;
  }
  $30 = $11;
  $31 = $9;
  $32 = (($31) + ($30))|0;
  $9 = $32;
  $33 = $10;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  switch ($35|0) {
  case 20: case 19: case 18: case 23: case 22: case 21:  {
   $36 = $8;
   $37 = $10;
   $38 = ((($37)) + 1|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = (($40) - ($36))|0;
   $42 = $41&255;
   HEAP8[$38>>0] = $42;
   break;
  }
  case 17:  {
   $43 = $8;
   $44 = $43<<2;
   $45 = $10;
   $46 = ((($45)) + 1|0);
   $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
   $48 = $47 << 8;
   $49 = $48 >> 8;
   $50 = (($49) - ($44))|0;
   $51 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
   $52 = $50 & 16777215;
   $53 = $51 & -16777216;
   $54 = $53 | $52;
   HEAP8[$46>>0]=$54&255;HEAP8[$46+1>>0]=($54>>8)&255;HEAP8[$46+2>>0]=($54>>16)&255;HEAP8[$46+3>>0]=$54>>24;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 4) {
  $27 = HEAP32[3314]|0;
  $28 = $9;
  $29 = $10;
  HEAP32[$vararg_buffer>>2] = 16871;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 112;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 16897;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $28;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $29;
  _printFmt($27,0,16829,$vararg_buffer);
  __abort_85();
  $4 = 0;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 9) {
  $4 = 1;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _emitOpc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0.0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0.0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0.0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0.0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0.0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0.0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0.0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0.0, $1406 = 0.0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0.0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0.0, $1443 = 0.0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0.0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0.0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0;
 var $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0;
 var $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0;
 var $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0;
 var $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0;
 var $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0;
 var $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0;
 var $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0;
 var $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0;
 var $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0;
 var $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0;
 var $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0;
 var $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0;
 var $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0;
 var $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0;
 var $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0;
 var $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0;
 var $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0;
 var $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0;
 var $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0;
 var $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0;
 var $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0;
 var $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0;
 var $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0;
 var $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0;
 var $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0;
 var $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0;
 var $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0;
 var $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0;
 var $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0;
 var $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0;
 var $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0;
 var $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0;
 var $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0;
 var $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0;
 var $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0;
 var $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0;
 var $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0;
 var $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0;
 var $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0;
 var $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0;
 var $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0;
 var $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0;
 var $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0.0, $765 = 0.0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0;
 var $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr50 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer46 = sp + 168|0;
 $vararg_buffer41 = sp + 152|0;
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer16 = sp + 72|0;
 $vararg_buffer11 = sp + 56|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $13 = $4;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $6 = $15;
 $16 = $4;
 $17 = ((($16)) + 132|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 $19 = $7;
 $20 = ((($19)) + 16|0);
 $21 = $4;
 $22 = ((($21)) + 136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)>=($23>>>0);
 if ($24) {
  $25 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 16871;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 197;
  $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = 16984;
  _printFmt($25,0,16918,$vararg_buffer);
  __abort_85();
 }
 $26 = $5;
 $27 = ($26|0)==(180);
 if ($27) {
  $28 = $4;
  $29 = ((($28)) + 132|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $4;
  $32 = ((($31)) + 144|0);
  $33 = $30;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $3 = $35;
  $3786 = $3;
  STACKTOP = sp;return ($3786|0);
 }
 $36 = $5;
 $37 = ($36|0)==(177);
 L8: do {
  if ($37) {
   $38 = HEAP32[$2>>2]|0;
   $39 = ($38|0)<(0);
   $40 = $39 << 31 >> 31;
   $41 = $2;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = ($38|0)!=($43|0);
   $48 = ($40|0)!=($46|0);
   $49 = $47 | $48;
   if ($49) {
    $50 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer6>>2] = 16871;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = 243;
    $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
    HEAP32[$vararg_ptr10>>2] = 16984;
    _printFmt($50,0,16992,$vararg_buffer6);
    __abort_85();
   }
   $51 = HEAP32[$2>>2]|0;
   switch ($51|0) {
   case 1:  {
    $5 = 32;
    break L8;
    break;
   }
   case 2:  {
    $5 = 33;
    break L8;
    break;
   }
   case 4:  {
    $5 = 34;
    break L8;
    break;
   }
   case 8:  {
    $5 = 35;
    break L8;
    break;
   }
   case 16:  {
    $5 = 36;
    break L8;
    break;
   }
   default: {
    $52 = $4;
    $53 = HEAP32[$2>>2]|0;
    $54 = (4 - ($53))|0;
    $55 = ($54|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = (_emitInt_88($52,17,$54,$56)|0);
    $58 = ($57|0)!=(0);
    if (!($58)) {
     $3 = 0;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $59 = $4;
    $60 = HEAP32[$2>>2]|0;
    $61 = (0 - ($60))|0;
    $62 = ($61|0)<(0);
    $63 = $62 << 31 >> 31;
    $64 = (_emitInt_88($59,47,$61,$63)|0);
    $65 = ($64|0)!=(0);
    if ($65) {
     $5 = 16;
     break L8;
    }
    $3 = 0;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   }
  } else {
   $66 = $5;
   $67 = ($66|0)==(178);
   if (!($67)) {
    $138 = $5;
    $139 = ($138|0)==(179);
    if (!($139)) {
     break;
    }
    $5 = 16;
    $140 = $2;
    $141 = $140;
    $142 = HEAP32[$141>>2]|0;
    $143 = (($140) + 4)|0;
    $144 = $143;
    $145 = HEAP32[$144>>2]|0;
    $146 = (_i64Subtract(0,0,($142|0),($145|0))|0);
    $147 = (getTempRet0() | 0);
    $148 = $2;
    $149 = $148;
    HEAP32[$149>>2] = $146;
    $150 = (($148) + 4)|0;
    $151 = $150;
    HEAP32[$151>>2] = $147;
    break;
   }
   $68 = HEAP32[$2>>2]|0;
   $69 = ($68|0)<(0);
   $70 = $69 << 31 >> 31;
   $71 = $2;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = ($68|0)!=($73|0);
   $78 = ($70|0)!=($76|0);
   $79 = $77 | $78;
   if ($79) {
    $80 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer11>>2] = 16871;
    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = 282;
    $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr15>>2] = 16984;
    _printFmt($80,0,16992,$vararg_buffer11);
    __abort_85();
   }
   $81 = HEAP32[$2>>2]|0;
   switch ($81|0) {
   case 1:  {
    $5 = 37;
    break L8;
    break;
   }
   case 2:  {
    $5 = 38;
    break L8;
    break;
   }
   case 4:  {
    $5 = 39;
    break L8;
    break;
   }
   case 8:  {
    $5 = 40;
    break L8;
    break;
   }
   case 16:  {
    $5 = 41;
    break L8;
    break;
   }
   default: {
    $82 = $4;
    $83 = (_emitInt_88($82,17,4,0)|0);
    $84 = ($83|0)!=(0);
    if (!($84)) {
     $3 = 0;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $85 = $4;
    $86 = HEAP32[$2>>2]|0;
    $87 = ($86|0)<(0);
    $88 = $87 << 31 >> 31;
    $89 = (_emitInt_88($85,47,$86,$88)|0);
    $90 = ($89|0)!=(0);
    if (!($90)) {
     $3 = 0;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $91 = $4;
    $92 = (_lastIp($91)|0);
    $7 = $92;
    $93 = $7;
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = ($95|0)==(17);
    if ($96) {
     $97 = $2;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (($97) + 4)|0;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = $7;
     $104 = ((($103)) + 1|0);
     $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8)|(HEAPU8[$104+2>>0]<<16)|(HEAPU8[$104+3>>0]<<24);
     $106 = $105 << 8;
     $107 = $106 >> 8;
     $108 = ($107|0)<(0);
     $109 = $108 << 31 >> 31;
     $110 = ($102|0)>($109|0);
     $111 = ($99>>>0)>($107>>>0);
     $112 = ($102|0)==($109|0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $115 = $7;
      $116 = ((($115)) + 1|0);
      $117 = HEAPU8[$116>>0]|(HEAPU8[$116+1>>0]<<8)|(HEAPU8[$116+2>>0]<<16)|(HEAPU8[$116+3>>0]<<24);
      $118 = $117 << 8;
      $119 = $118 >> 8;
      $120 = ($119|0)<(0);
      $121 = $120 << 31 >> 31;
      $122 = $2;
      $123 = $122;
      HEAP32[$123>>2] = $119;
      $124 = (($122) + 4)|0;
      $125 = $124;
      HEAP32[$125>>2] = $121;
     }
    }
    $126 = $2;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (_i64Subtract(0,0,($128|0),($131|0))|0);
    $133 = (getTempRet0() | 0);
    $134 = $2;
    $135 = $134;
    HEAP32[$135>>2] = $132;
    $136 = (($134) + 4)|0;
    $137 = $136;
    HEAP32[$137>>2] = $133;
    $5 = 16;
    break L8;
   }
   }
  }
 } while(0);
 $152 = $5;
 $153 = ($152>>>0)>=(176);
 if ($153) {
  $3 = 0;
  $3786 = $3;
  STACKTOP = sp;return ($3786|0);
 }
 $154 = $5;
 L60: do {
  switch ($154|0) {
  case 27:  {
   $155 = $4;
   $156 = HEAP32[$155>>2]|0;
   $157 = $156 >>> 2;
   $158 = $157 & 1;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $2;
    $161 = $160;
    $162 = HEAP32[$161>>2]|0;
    $163 = (($160) + 4)|0;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $166 = ($162|0)==(0);
    $167 = ($165|0)==(0);
    $168 = $166 & $167;
    if ($168) {
     $5 = 24;
     $169 = $4;
     $170 = (_lastIp($169)|0);
     $7 = $170;
     $171 = $7;
     $172 = HEAP8[$171>>0]|0;
     $173 = $172&255;
     $174 = ($173|0)==(24);
     if ($174) {
      $5 = 25;
      $175 = $4;
      _rollbackPc($175);
     }
    }
   }
   break;
  }
  case 28:  {
   $176 = $4;
   $177 = HEAP32[$176>>2]|0;
   $178 = $177 >>> 2;
   $179 = $178 & 1;
   $180 = ($179|0)!=(0);
   if ($180) {
    $181 = $2;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $187 = ($183|0)==(0);
    $188 = ($186|0)==(0);
    $189 = $187 & $188;
    if ($189) {
     $5 = 25;
     $190 = $4;
     $191 = (_lastIp($190)|0);
     $7 = $191;
     $192 = $7;
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194|0)==(25);
     if ($195) {
      $5 = 26;
      $196 = $4;
      _rollbackPc($196);
     }
    }
   }
   break;
  }
  case 16:  {
   $1532 = $2;
   $1533 = $1532;
   $1534 = HEAP32[$1533>>2]|0;
   $1535 = (($1532) + 4)|0;
   $1536 = $1535;
   $1537 = HEAP32[$1536>>2]|0;
   $1538 = ($1534|0)==(0);
   $1539 = ($1537|0)==(0);
   $1540 = $1538 & $1539;
   if ($1540) {
    $1541 = $4;
    $1542 = ((($1541)) + 132|0);
    $1543 = HEAP32[$1542>>2]|0;
    $1544 = $4;
    $1545 = ((($1544)) + 144|0);
    $1546 = $1543;
    $1547 = $1545;
    $1548 = (($1546) - ($1547))|0;
    $3 = $1548;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 6:  {
   $1512 = $4;
   $1513 = HEAP32[$1512>>2]|0;
   $1514 = $1513 >>> 2;
   $1515 = $1514 & 1;
   $1516 = ($1515|0)!=(0);
   if ($1516) {
    $1517 = $4;
    $1518 = (_lastIp($1517)|0);
    $7 = $1518;
    $1519 = $7;
    $1520 = HEAP8[$1519>>0]|0;
    $1521 = $1520&255;
    $1522 = ($1521|0)==(10);
    $1523 = $7;
    if ($1522) {
     $1524 = $4;
     $1525 = ((($1524)) + 132|0);
     HEAP32[$1525>>2] = $1523;
     $5 = 5;
     break L60;
    }
    $1526 = HEAP8[$1523>>0]|0;
    $1527 = $1526&255;
    $1528 = ($1527|0)==(90);
    if ($1528) {
     $1529 = $7;
     $1530 = $4;
     $1531 = ((($1530)) + 132|0);
     HEAP32[$1531>>2] = $1529;
    }
   }
   break;
  }
  case 34:  {
   $197 = $4;
   $198 = HEAP32[$197>>2]|0;
   $199 = $198 >>> 3;
   $200 = $199 & 1;
   $201 = ($200|0)!=(0);
   if ($201) {
    $202 = $4;
    $203 = (_lastIp($202)|0);
    $7 = $203;
    $204 = $7;
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = ($206|0)==(17);
    if ($207) {
     $208 = $7;
     $209 = ((($208)) + 1|0);
     $210 = HEAPU8[$209>>0]|(HEAPU8[$209+1>>0]<<8)|(HEAPU8[$209+2>>0]<<16)|(HEAPU8[$209+3>>0]<<24);
     $211 = $210 << 8;
     $212 = $211 >> 8;
     $213 = $212 & 3;
     $214 = ($213|0)==(0);
     if ($214) {
      $215 = $7;
      $216 = ((($215)) + 1|0);
      $217 = HEAPU8[$216>>0]|(HEAPU8[$216+1>>0]<<8)|(HEAPU8[$216+2>>0]<<16)|(HEAPU8[$216+3>>0]<<24);
      $218 = $217 << 8;
      $219 = $218 >> 8;
      $220 = (($219|0) / 4)&-1;
      $221 = ($220|0)<(255);
      if ($221) {
       $222 = $7;
       $223 = ((($222)) + 1|0);
       $224 = HEAPU8[$223>>0]|(HEAPU8[$223+1>>0]<<8)|(HEAPU8[$223+2>>0]<<16)|(HEAPU8[$223+3>>0]<<24);
       $225 = $224 << 8;
       $226 = $225 >> 8;
       $227 = (($226|0) / 4)&-1;
       HEAP32[$2>>2] = $227;
       $5 = 18;
       $228 = $4;
       _rollbackPc($228);
       break L60;
      }
     }
    }
    $229 = $7;
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = ($231|0)==(31);
    if ($232) {
     $233 = $7;
     $234 = ((($233)) + 1|0);
     $235 = HEAPU8[$234>>0]|(HEAPU8[$234+1>>0]<<8)|(HEAPU8[$234+2>>0]<<16)|(HEAPU8[$234+3>>0]<<24);
     $236 = $2;
     $237 = $236;
     HEAP32[$237>>2] = $235;
     $238 = (($236) + 4)|0;
     $239 = $238;
     HEAP32[$239>>2] = 0;
     $240 = $2;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = (($240) + 4)|0;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = HEAP32[$2>>2]|0;
     $247 = $246 << 8;
     $248 = $247 >> 8;
     $249 = ($248|0)<(0);
     $250 = $249 << 31 >> 31;
     $251 = ($242|0)==($248|0);
     $252 = ($245|0)==($250|0);
     $253 = $251 & $252;
     if ($253) {
      $5 = 42;
      $254 = $4;
      _rollbackPc($254);
     }
    }
   }
   break;
  }
  case 39:  {
   $255 = $4;
   $256 = HEAP32[$255>>2]|0;
   $257 = $256 >>> 3;
   $258 = $257 & 1;
   $259 = ($258|0)!=(0);
   if ($259) {
    $260 = $4;
    $261 = (_lastIp($260)|0);
    $7 = $261;
    $262 = $7;
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = ($264|0)==(17);
    if ($265) {
     $266 = $7;
     $267 = ((($266)) + 1|0);
     $268 = HEAPU8[$267>>0]|(HEAPU8[$267+1>>0]<<8)|(HEAPU8[$267+2>>0]<<16)|(HEAPU8[$267+3>>0]<<24);
     $269 = $268 << 8;
     $270 = $269 >> 8;
     $271 = $270 & 3;
     $272 = ($271|0)==(0);
     if ($272) {
      $273 = $7;
      $274 = ((($273)) + 1|0);
      $275 = HEAPU8[$274>>0]|(HEAPU8[$274+1>>0]<<8)|(HEAPU8[$274+2>>0]<<16)|(HEAPU8[$274+3>>0]<<24);
      $276 = $275 << 8;
      $277 = $276 >> 8;
      $278 = (($277|0) / 4)&-1;
      $279 = ($278|0)<(255);
      if ($279) {
       $280 = $7;
       $281 = ((($280)) + 1|0);
       $282 = HEAPU8[$281>>0]|(HEAPU8[$281+1>>0]<<8)|(HEAPU8[$281+2>>0]<<16)|(HEAPU8[$281+3>>0]<<24);
       $283 = $282 << 8;
       $284 = $283 >> 8;
       $285 = (($284|0) / 4)&-1;
       HEAP32[$2>>2] = $285;
       $5 = 21;
       $286 = $4;
       _rollbackPc($286);
       break L60;
      }
     }
    }
    $287 = $7;
    $288 = HEAP8[$287>>0]|0;
    $289 = $288&255;
    $290 = ($289|0)==(31);
    if ($290) {
     $291 = $7;
     $292 = ((($291)) + 1|0);
     $293 = HEAPU8[$292>>0]|(HEAPU8[$292+1>>0]<<8)|(HEAPU8[$292+2>>0]<<16)|(HEAPU8[$292+3>>0]<<24);
     $294 = $2;
     $295 = $294;
     HEAP32[$295>>2] = $293;
     $296 = (($294) + 4)|0;
     $297 = $296;
     HEAP32[$297>>2] = 0;
     $298 = $2;
     $299 = $298;
     $300 = HEAP32[$299>>2]|0;
     $301 = (($298) + 4)|0;
     $302 = $301;
     $303 = HEAP32[$302>>2]|0;
     $304 = HEAP32[$2>>2]|0;
     $305 = $304 << 8;
     $306 = $305 >> 8;
     $307 = ($306|0)<(0);
     $308 = $307 << 31 >> 31;
     $309 = ($300|0)==($306|0);
     $310 = ($303|0)==($308|0);
     $311 = $309 & $310;
     if ($311) {
      $5 = 45;
      $312 = $4;
      _rollbackPc($312);
     }
    }
   }
   break;
  }
  case 35:  {
   $313 = $4;
   $314 = HEAP32[$313>>2]|0;
   $315 = $314 >>> 3;
   $316 = $315 & 1;
   $317 = ($316|0)!=(0);
   if ($317) {
    $318 = $4;
    $319 = (_lastIp($318)|0);
    $7 = $319;
    $320 = $7;
    $321 = HEAP8[$320>>0]|0;
    $322 = $321&255;
    $323 = ($322|0)==(17);
    if ($323) {
     $324 = $7;
     $325 = ((($324)) + 1|0);
     $326 = HEAPU8[$325>>0]|(HEAPU8[$325+1>>0]<<8)|(HEAPU8[$325+2>>0]<<16)|(HEAPU8[$325+3>>0]<<24);
     $327 = $326 << 8;
     $328 = $327 >> 8;
     $329 = $328 & 3;
     $330 = ($329|0)==(0);
     if ($330) {
      $331 = $7;
      $332 = ((($331)) + 1|0);
      $333 = HEAPU8[$332>>0]|(HEAPU8[$332+1>>0]<<8)|(HEAPU8[$332+2>>0]<<16)|(HEAPU8[$332+3>>0]<<24);
      $334 = $333 << 8;
      $335 = $334 >> 8;
      $336 = (($335|0) / 4)&-1;
      $337 = ($336|0)<(255);
      if ($337) {
       $338 = $7;
       $339 = ((($338)) + 1|0);
       $340 = HEAPU8[$339>>0]|(HEAPU8[$339+1>>0]<<8)|(HEAPU8[$339+2>>0]<<16)|(HEAPU8[$339+3>>0]<<24);
       $341 = $340 << 8;
       $342 = $341 >> 8;
       $343 = (($342|0) / 4)&-1;
       HEAP32[$2>>2] = $343;
       $5 = 19;
       $344 = $4;
       _rollbackPc($344);
       break L60;
      }
     }
    }
    $345 = $7;
    $346 = HEAP8[$345>>0]|0;
    $347 = $346&255;
    $348 = ($347|0)==(31);
    if ($348) {
     $349 = $7;
     $350 = ((($349)) + 1|0);
     $351 = HEAPU8[$350>>0]|(HEAPU8[$350+1>>0]<<8)|(HEAPU8[$350+2>>0]<<16)|(HEAPU8[$350+3>>0]<<24);
     $352 = $2;
     $353 = $352;
     HEAP32[$353>>2] = $351;
     $354 = (($352) + 4)|0;
     $355 = $354;
     HEAP32[$355>>2] = 0;
     $356 = $2;
     $357 = $356;
     $358 = HEAP32[$357>>2]|0;
     $359 = (($356) + 4)|0;
     $360 = $359;
     $361 = HEAP32[$360>>2]|0;
     $362 = HEAP32[$2>>2]|0;
     $363 = $362 << 8;
     $364 = $363 >> 8;
     $365 = ($364|0)<(0);
     $366 = $365 << 31 >> 31;
     $367 = ($358|0)==($364|0);
     $368 = ($361|0)==($366|0);
     $369 = $367 & $368;
     if ($369) {
      $5 = 43;
      $370 = $4;
      _rollbackPc($370);
     }
    }
   }
   break;
  }
  case 40:  {
   $371 = $4;
   $372 = HEAP32[$371>>2]|0;
   $373 = $372 >>> 3;
   $374 = $373 & 1;
   $375 = ($374|0)!=(0);
   if ($375) {
    $376 = $4;
    $377 = (_lastIp($376)|0);
    $7 = $377;
    $378 = $7;
    $379 = HEAP8[$378>>0]|0;
    $380 = $379&255;
    $381 = ($380|0)==(17);
    if ($381) {
     $382 = $7;
     $383 = ((($382)) + 1|0);
     $384 = HEAPU8[$383>>0]|(HEAPU8[$383+1>>0]<<8)|(HEAPU8[$383+2>>0]<<16)|(HEAPU8[$383+3>>0]<<24);
     $385 = $384 << 8;
     $386 = $385 >> 8;
     $387 = $386 & 3;
     $388 = ($387|0)==(0);
     if ($388) {
      $389 = $7;
      $390 = ((($389)) + 1|0);
      $391 = HEAPU8[$390>>0]|(HEAPU8[$390+1>>0]<<8)|(HEAPU8[$390+2>>0]<<16)|(HEAPU8[$390+3>>0]<<24);
      $392 = $391 << 8;
      $393 = $392 >> 8;
      $394 = (($393|0) / 4)&-1;
      $395 = ($394|0)<(255);
      if ($395) {
       $396 = $7;
       $397 = ((($396)) + 1|0);
       $398 = HEAPU8[$397>>0]|(HEAPU8[$397+1>>0]<<8)|(HEAPU8[$397+2>>0]<<16)|(HEAPU8[$397+3>>0]<<24);
       $399 = $398 << 8;
       $400 = $399 >> 8;
       $401 = (($400|0) / 4)&-1;
       HEAP32[$2>>2] = $401;
       $5 = 22;
       $402 = $4;
       _rollbackPc($402);
       break L60;
      }
     }
    }
    $403 = $7;
    $404 = HEAP8[$403>>0]|0;
    $405 = $404&255;
    $406 = ($405|0)==(31);
    if ($406) {
     $407 = $7;
     $408 = ((($407)) + 1|0);
     $409 = HEAPU8[$408>>0]|(HEAPU8[$408+1>>0]<<8)|(HEAPU8[$408+2>>0]<<16)|(HEAPU8[$408+3>>0]<<24);
     $410 = $2;
     $411 = $410;
     HEAP32[$411>>2] = $409;
     $412 = (($410) + 4)|0;
     $413 = $412;
     HEAP32[$413>>2] = 0;
     $414 = $2;
     $415 = $414;
     $416 = HEAP32[$415>>2]|0;
     $417 = (($414) + 4)|0;
     $418 = $417;
     $419 = HEAP32[$418>>2]|0;
     $420 = HEAP32[$2>>2]|0;
     $421 = $420 << 8;
     $422 = $421 >> 8;
     $423 = ($422|0)<(0);
     $424 = $423 << 31 >> 31;
     $425 = ($416|0)==($422|0);
     $426 = ($419|0)==($424|0);
     $427 = $425 & $426;
     if ($427) {
      $5 = 46;
      $428 = $4;
      _rollbackPc($428);
     }
    }
   }
   break;
  }
  case 36:  {
   $429 = $4;
   $430 = HEAP32[$429>>2]|0;
   $431 = $430 >>> 3;
   $432 = $431 & 1;
   $433 = ($432|0)!=(0);
   if ($433) {
    $434 = $4;
    $435 = (_lastIp($434)|0);
    $7 = $435;
    $436 = $7;
    $437 = HEAP8[$436>>0]|0;
    $438 = $437&255;
    $439 = ($438|0)==(17);
    if ($439) {
     $440 = $7;
     $441 = ((($440)) + 1|0);
     $442 = HEAPU8[$441>>0]|(HEAPU8[$441+1>>0]<<8)|(HEAPU8[$441+2>>0]<<16)|(HEAPU8[$441+3>>0]<<24);
     $443 = $442 << 8;
     $444 = $443 >> 8;
     $445 = $444 & 3;
     $446 = ($445|0)==(0);
     if ($446) {
      $447 = $7;
      $448 = ((($447)) + 1|0);
      $449 = HEAPU8[$448>>0]|(HEAPU8[$448+1>>0]<<8)|(HEAPU8[$448+2>>0]<<16)|(HEAPU8[$448+3>>0]<<24);
      $450 = $449 << 8;
      $451 = $450 >> 8;
      $452 = (($451|0) / 4)&-1;
      $453 = ($452|0)<=(255);
      if ($453) {
       $454 = $7;
       $455 = ((($454)) + 1|0);
       $456 = HEAPU8[$455>>0]|(HEAPU8[$455+1>>0]<<8)|(HEAPU8[$455+2>>0]<<16)|(HEAPU8[$455+3>>0]<<24);
       $457 = $456 << 8;
       $458 = $457 >> 8;
       $459 = (($458|0) / 4)&-1;
       HEAP32[$2>>2] = $459;
       $5 = 20;
       $460 = $4;
       _rollbackPc($460);
      }
     }
    }
   }
   break;
  }
  case 41:  {
   $461 = $4;
   $462 = HEAP32[$461>>2]|0;
   $463 = $462 >>> 3;
   $464 = $463 & 1;
   $465 = ($464|0)!=(0);
   if ($465) {
    $466 = $4;
    $467 = (_lastIp($466)|0);
    $7 = $467;
    $468 = $7;
    $469 = HEAP8[$468>>0]|0;
    $470 = $469&255;
    $471 = ($470|0)==(17);
    if ($471) {
     $472 = $7;
     $473 = ((($472)) + 1|0);
     $474 = HEAPU8[$473>>0]|(HEAPU8[$473+1>>0]<<8)|(HEAPU8[$473+2>>0]<<16)|(HEAPU8[$473+3>>0]<<24);
     $475 = $474 << 8;
     $476 = $475 >> 8;
     $477 = $476 & 3;
     $478 = ($477|0)==(0);
     if ($478) {
      $479 = $7;
      $480 = ((($479)) + 1|0);
      $481 = HEAPU8[$480>>0]|(HEAPU8[$480+1>>0]<<8)|(HEAPU8[$480+2>>0]<<16)|(HEAPU8[$480+3>>0]<<24);
      $482 = $481 << 8;
      $483 = $482 >> 8;
      $484 = (($483|0) / 4)&-1;
      $485 = ($484|0)<=(255);
      if ($485) {
       $486 = $7;
       $487 = ((($486)) + 1|0);
       $488 = HEAPU8[$487>>0]|(HEAPU8[$487+1>>0]<<8)|(HEAPU8[$487+2>>0]<<16)|(HEAPU8[$487+3>>0]<<24);
       $489 = $488 << 8;
       $490 = $489 >> 8;
       $491 = (($490|0) / 4)&-1;
       HEAP32[$2>>2] = $491;
       $5 = 23;
       $492 = $4;
       _rollbackPc($492);
      }
     }
    }
   }
   break;
  }
  case 58:  {
   $493 = $4;
   $494 = HEAP32[$493>>2]|0;
   $495 = $494 >>> 2;
   $496 = $495 & 1;
   $497 = ($496|0)!=(0);
   if ($497) {
    $498 = $4;
    $499 = (_lastIp($498)|0);
    $7 = $499;
    $500 = $7;
    $501 = HEAP8[$500>>0]|0;
    $502 = $501&255;
    $503 = ($502|0)==(27);
    if ($503) {
     $504 = $7;
     $505 = ((($504)) + 1|0);
     $506 = HEAPU8[$505>>0]|(HEAPU8[$505+1>>0]<<8)|(HEAPU8[$505+2>>0]<<16)|(HEAPU8[$505+3>>0]<<24);
     $507 = $506 & 63;
     $508 = 64 | $507;
     HEAP32[$2>>2] = $508;
     $5 = 63;
     $509 = $4;
     _rollbackPc($509);
    }
   }
   break;
  }
  case 59:  {
   $510 = $4;
   $511 = HEAP32[$510>>2]|0;
   $512 = $511 >>> 2;
   $513 = $512 & 1;
   $514 = ($513|0)!=(0);
   if ($514) {
    $515 = $4;
    $516 = (_lastIp($515)|0);
    $7 = $516;
    $517 = $7;
    $518 = HEAP8[$517>>0]|0;
    $519 = $518&255;
    $520 = ($519|0)==(27);
    if ($520) {
     $521 = $7;
     $522 = ((($521)) + 1|0);
     $523 = HEAPU8[$522>>0]|(HEAPU8[$522+1>>0]<<8)|(HEAPU8[$522+2>>0]<<16)|(HEAPU8[$522+3>>0]<<24);
     $524 = $523 & 63;
     $525 = 128 | $524;
     HEAP32[$2>>2] = $525;
     $5 = 63;
     $526 = $4;
     _rollbackPc($526);
    }
   }
   break;
  }
  case 60:  {
   $527 = $4;
   $528 = HEAP32[$527>>2]|0;
   $529 = $528 >>> 2;
   $530 = $529 & 1;
   $531 = ($530|0)!=(0);
   if ($531) {
    $532 = $4;
    $533 = (_lastIp($532)|0);
    $7 = $533;
    $534 = $7;
    $535 = HEAP8[$534>>0]|0;
    $536 = $535&255;
    $537 = ($536|0)==(27);
    if ($537) {
     $538 = $7;
     $539 = ((($538)) + 1|0);
     $540 = HEAPU8[$539>>0]|(HEAPU8[$539+1>>0]<<8)|(HEAPU8[$539+2>>0]<<16)|(HEAPU8[$539+3>>0]<<24);
     $541 = $540 & 63;
     $542 = 192 | $541;
     HEAP32[$2>>2] = $542;
     $5 = 63;
     $543 = $4;
     _rollbackPc($543);
    }
   }
   break;
  }
  case 49:  {
   $544 = $4;
   $545 = HEAP32[$544>>2]|0;
   $546 = $545 >>> 2;
   $547 = $546 & 1;
   $548 = ($547|0)!=(0);
   if ($548) {
    $549 = $4;
    $550 = (_lastIp($549)|0);
    $7 = $550;
    $551 = $7;
    $552 = HEAP8[$551>>0]|0;
    $553 = $552&255;
    $554 = ($553|0)==(27);
    if ($554) {
     $555 = $7;
     $556 = ((($555)) + 1|0);
     $557 = HEAPU8[$556>>0]|(HEAPU8[$556+1>>0]<<8)|(HEAPU8[$556+2>>0]<<16)|(HEAPU8[$556+3>>0]<<24);
     $558 = $7;
     $559 = ((($558)) + 1|0);
     $560 = HEAPU8[$559>>0]|(HEAPU8[$559+1>>0]<<8)|(HEAPU8[$559+2>>0]<<16)|(HEAPU8[$559+3>>0]<<24);
     $561 = (($560) + 1)|0;
     $562 = $557 & $561;
     $563 = ($562|0)==(0);
     if ($563) {
      $564 = $7;
      $565 = ((($564)) + 1|0);
      $566 = HEAPU8[$565>>0]|(HEAPU8[$565+1>>0]<<8)|(HEAPU8[$565+2>>0]<<16)|(HEAPU8[$565+3>>0]<<24);
      $567 = (($566) + 1)|0;
      $568 = (_bitsf($567)|0);
      $569 = $568 & 63;
      $570 = 0 | $569;
      HEAP32[$2>>2] = $570;
      $5 = 63;
      $571 = $4;
      _rollbackPc($571);
     }
    }
   }
   break;
  }
  case 10:  {
   $572 = $4;
   $573 = HEAP32[$572>>2]|0;
   $574 = $573 >>> 2;
   $575 = $574 & 1;
   $576 = ($575|0)!=(0);
   if ($576) {
    $577 = $4;
    $578 = (_lastIp($577)|0);
    $7 = $578;
    $579 = $7;
    $580 = HEAP8[$579>>0]|0;
    $581 = $580&255;
    switch ($581|0) {
    case 10:  {
     $582 = $7;
     $583 = $4;
     $584 = ((($583)) + 132|0);
     HEAP32[$584>>2] = $582;
     $585 = $7;
     HEAP8[$585>>0] = 0;
     $586 = $4;
     $587 = ((($586)) + 24|0);
     $588 = ((($587)) + 12|0);
     $589 = HEAP32[$588>>2]|0;
     $3 = $589;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
     break;
    }
    case 27:  {
     $590 = $7;
     $591 = ((($590)) + 1|0);
     $592 = HEAPU8[$591>>0]|(HEAPU8[$591+1>>0]<<8)|(HEAPU8[$591+2>>0]<<16)|(HEAPU8[$591+3>>0]<<24);
     $593 = ($592|0)==(0);
     $594 = $593&1;
     $595 = $7;
     $596 = ((($595)) + 1|0);
     HEAP8[$596>>0]=$594&255;HEAP8[$596+1>>0]=($594>>8)&255;HEAP8[$596+2>>0]=($594>>16)&255;HEAP8[$596+3>>0]=$594>>24;
     $597 = $4;
     $598 = ((($597)) + 24|0);
     $599 = ((($598)) + 12|0);
     $600 = HEAP32[$599>>2]|0;
     $3 = $600;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
     break;
    }
    case 24:  {
     $601 = $2;
     $602 = $601;
     HEAP32[$602>>2] = 1;
     $603 = (($601) + 4)|0;
     $604 = $603;
     HEAP32[$604>>2] = 0;
     $5 = 27;
     $605 = $4;
     _rollbackPc($605);
     break L60;
     break;
    }
    case 25:  {
     $606 = $2;
     $607 = $606;
     HEAP32[$607>>2] = 1;
     $608 = (($606) + 4)|0;
     $609 = $608;
     HEAP32[$609>>2] = 0;
     $5 = 27;
     $610 = $4;
     _rollbackPc($610);
     break L60;
     break;
    }
    case 28:  {
     $611 = $7;
     $612 = ((($611)) + 1|0);
     $613 = $612;
     $614 = $613;
     $615 = HEAPU8[$614>>0]|(HEAPU8[$614+1>>0]<<8)|(HEAPU8[$614+2>>0]<<16)|(HEAPU8[$614+3>>0]<<24);
     $616 = (($613) + 4)|0;
     $617 = $616;
     $618 = HEAPU8[$617>>0]|(HEAPU8[$617+1>>0]<<8)|(HEAPU8[$617+2>>0]<<16)|(HEAPU8[$617+3>>0]<<24);
     $619 = ($615|0)==(0);
     $620 = ($618|0)==(0);
     $621 = $619 & $620;
     $622 = $621&1;
     $623 = ($622|0)<(0);
     $624 = $623 << 31 >> 31;
     $625 = $2;
     $626 = $625;
     HEAP32[$626>>2] = $622;
     $627 = (($625) + 4)|0;
     $628 = $627;
     HEAP32[$628>>2] = $624;
     $5 = 27;
     $629 = $4;
     _rollbackPc($629);
     break L60;
     break;
    }
    case 29:  {
     $630 = $7;
     $631 = ((($630)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$631>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$631+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$631+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$631+3>>0];$632 = +HEAPF32[tempDoublePtr>>2];
     $633 = $632 == 0.0;
     $634 = $633&1;
     $635 = ($634|0)<(0);
     $636 = $635 << 31 >> 31;
     $637 = $2;
     $638 = $637;
     HEAP32[$638>>2] = $634;
     $639 = (($637) + 4)|0;
     $640 = $639;
     HEAP32[$640>>2] = $636;
     $5 = 27;
     $641 = $4;
     _rollbackPc($641);
     break L60;
     break;
    }
    case 30:  {
     $642 = $7;
     $643 = ((($642)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$643>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$643+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$643+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$643+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$643+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$643+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$643+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$643+7>>0];$644 = +HEAPF64[tempDoublePtr>>3];
     $645 = $644 == 0.0;
     $646 = $645&1;
     $647 = ($646|0)<(0);
     $648 = $647 << 31 >> 31;
     $649 = $2;
     $650 = $649;
     HEAP32[$650>>2] = $646;
     $651 = (($649) + 4)|0;
     $652 = $651;
     HEAP32[$652>>2] = $648;
     $5 = 27;
     $653 = $4;
     _rollbackPc($653);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 80:  {
   $654 = $4;
   $655 = HEAP32[$654>>2]|0;
   $656 = $655 >>> 2;
   $657 = $656 & 1;
   $658 = ($657|0)!=(0);
   if ($658) {
    $659 = $4;
    $660 = (_lastIp($659)|0);
    $7 = $660;
    $661 = $7;
    $662 = HEAP8[$661>>0]|0;
    $663 = $662&255;
    $664 = ($663|0)==(80);
    $665 = $7;
    if ($664) {
     $666 = $4;
     $667 = ((($666)) + 132|0);
     HEAP32[$667>>2] = $665;
     $668 = $7;
     HEAP8[$668>>0] = 0;
     $669 = $4;
     $670 = ((($669)) + 24|0);
     $671 = ((($670)) + 12|0);
     $672 = HEAP32[$671>>2]|0;
     $3 = $672;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $673 = HEAP8[$665>>0]|0;
    $674 = $673&255;
    $675 = ($674|0)==(27);
    if ($675) {
     $676 = $4;
     $677 = HEAP32[$676>>2]|0;
     $678 = $677 & 1;
     $679 = ($678|0)!=(0);
     if ($679) {
      $680 = $7;
      $681 = ((($680)) + 1|0);
      $682 = HEAPU8[$681>>0]|(HEAPU8[$681+1>>0]<<8)|(HEAPU8[$681+2>>0]<<16)|(HEAPU8[$681+3>>0]<<24);
      $683 = (0 - ($682))|0;
      $684 = $7;
      $685 = ((($684)) + 1|0);
      HEAP8[$685>>0]=$683&255;HEAP8[$685+1>>0]=($683>>8)&255;HEAP8[$685+2>>0]=($683>>16)&255;HEAP8[$685+3>>0]=$683>>24;
      $686 = $4;
      $687 = ((($686)) + 24|0);
      $688 = ((($687)) + 12|0);
      $689 = HEAP32[$688>>2]|0;
      $3 = $689;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
    }
   }
   break;
  }
  case 96:  {
   $690 = $4;
   $691 = HEAP32[$690>>2]|0;
   $692 = $691 >>> 2;
   $693 = $692 & 1;
   $694 = ($693|0)!=(0);
   if ($694) {
    $695 = $4;
    $696 = (_lastIp($695)|0);
    $7 = $696;
    $697 = $7;
    $698 = HEAP8[$697>>0]|0;
    $699 = $698&255;
    $700 = ($699|0)==(96);
    $701 = $7;
    if ($700) {
     $702 = $4;
     $703 = ((($702)) + 132|0);
     HEAP32[$703>>2] = $701;
     $704 = $7;
     HEAP8[$704>>0] = 0;
     $705 = $4;
     $706 = ((($705)) + 24|0);
     $707 = ((($706)) + 12|0);
     $708 = HEAP32[$707>>2]|0;
     $3 = $708;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $709 = HEAP8[$701>>0]|0;
    $710 = $709&255;
    $711 = ($710|0)==(28);
    if ($711) {
     $712 = $4;
     $713 = HEAP32[$712>>2]|0;
     $714 = $713 & 1;
     $715 = ($714|0)!=(0);
     if ($715) {
      $716 = $7;
      $717 = ((($716)) + 1|0);
      $718 = $717;
      $719 = $718;
      $720 = HEAPU8[$719>>0]|(HEAPU8[$719+1>>0]<<8)|(HEAPU8[$719+2>>0]<<16)|(HEAPU8[$719+3>>0]<<24);
      $721 = (($718) + 4)|0;
      $722 = $721;
      $723 = HEAPU8[$722>>0]|(HEAPU8[$722+1>>0]<<8)|(HEAPU8[$722+2>>0]<<16)|(HEAPU8[$722+3>>0]<<24);
      $724 = (_i64Subtract(0,0,($720|0),($723|0))|0);
      $725 = (getTempRet0() | 0);
      $726 = $7;
      $727 = ((($726)) + 1|0);
      $728 = $727;
      $729 = $728;
      HEAP8[$729>>0]=$724&255;HEAP8[$729+1>>0]=($724>>8)&255;HEAP8[$729+2>>0]=($724>>16)&255;HEAP8[$729+3>>0]=$724>>24;
      $730 = (($728) + 4)|0;
      $731 = $730;
      HEAP8[$731>>0]=$725&255;HEAP8[$731+1>>0]=($725>>8)&255;HEAP8[$731+2>>0]=($725>>16)&255;HEAP8[$731+3>>0]=$725>>24;
      $732 = $4;
      $733 = ((($732)) + 24|0);
      $734 = ((($733)) + 12|0);
      $735 = HEAP32[$734>>2]|0;
      $3 = $735;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
    }
   }
   break;
  }
  case 112:  {
   $736 = $4;
   $737 = HEAP32[$736>>2]|0;
   $738 = $737 >>> 2;
   $739 = $738 & 1;
   $740 = ($739|0)!=(0);
   if ($740) {
    $741 = $4;
    $742 = (_lastIp($741)|0);
    $7 = $742;
    $743 = $7;
    $744 = HEAP8[$743>>0]|0;
    $745 = $744&255;
    $746 = ($745|0)==(112);
    $747 = $7;
    if ($746) {
     $748 = $4;
     $749 = ((($748)) + 132|0);
     HEAP32[$749>>2] = $747;
     $750 = $7;
     HEAP8[$750>>0] = 0;
     $751 = $4;
     $752 = ((($751)) + 24|0);
     $753 = ((($752)) + 12|0);
     $754 = HEAP32[$753>>2]|0;
     $3 = $754;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $755 = HEAP8[$747>>0]|0;
    $756 = $755&255;
    $757 = ($756|0)==(29);
    if ($757) {
     $758 = $4;
     $759 = HEAP32[$758>>2]|0;
     $760 = $759 & 1;
     $761 = ($760|0)!=(0);
     if ($761) {
      $762 = $7;
      $763 = ((($762)) + 1|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$763>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$763+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$763+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$763+3>>0];$764 = +HEAPF32[tempDoublePtr>>2];
      $765 = - $764;
      $766 = $7;
      $767 = ((($766)) + 1|0);
      HEAPF32[tempDoublePtr>>2]=$765;HEAP8[$767>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$767+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$767+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$767+3>>0]=HEAP8[tempDoublePtr+3>>0];
      $768 = $4;
      $769 = ((($768)) + 24|0);
      $770 = ((($769)) + 12|0);
      $771 = HEAP32[$770>>2]|0;
      $3 = $771;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
    }
   }
   break;
  }
  case 128:  {
   $772 = $4;
   $773 = HEAP32[$772>>2]|0;
   $774 = $773 >>> 2;
   $775 = $774 & 1;
   $776 = ($775|0)!=(0);
   if ($776) {
    $777 = $4;
    $778 = (_lastIp($777)|0);
    $7 = $778;
    $779 = $7;
    $780 = HEAP8[$779>>0]|0;
    $781 = $780&255;
    $782 = ($781|0)==(128);
    $783 = $7;
    if ($782) {
     $784 = $4;
     $785 = ((($784)) + 132|0);
     HEAP32[$785>>2] = $783;
     $786 = $7;
     HEAP8[$786>>0] = 0;
     $787 = $4;
     $788 = ((($787)) + 24|0);
     $789 = ((($788)) + 12|0);
     $790 = HEAP32[$789>>2]|0;
     $3 = $790;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $791 = HEAP8[$783>>0]|0;
    $792 = $791&255;
    $793 = ($792|0)==(30);
    if ($793) {
     $794 = $4;
     $795 = HEAP32[$794>>2]|0;
     $796 = $795 & 1;
     $797 = ($796|0)!=(0);
     if ($797) {
      $798 = $7;
      $799 = ((($798)) + 1|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$799>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$799+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$799+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$799+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$799+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$799+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$799+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$799+7>>0];$800 = +HEAPF64[tempDoublePtr>>3];
      $801 = - $800;
      $802 = $7;
      $803 = ((($802)) + 1|0);
      HEAPF64[tempDoublePtr>>3]=$801;HEAP8[$803>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$803+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$803+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$803+3>>0]=HEAP8[tempDoublePtr+3>>0];HEAP8[$803+4>>0]=HEAP8[tempDoublePtr+4>>0];HEAP8[$803+5>>0]=HEAP8[tempDoublePtr+5>>0];HEAP8[$803+6>>0]=HEAP8[tempDoublePtr+6>>0];HEAP8[$803+7>>0]=HEAP8[tempDoublePtr+7>>0];
      $804 = $4;
      $805 = ((($804)) + 24|0);
      $806 = ((($805)) + 12|0);
      $807 = HEAP32[$806>>2]|0;
      $3 = $807;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
    }
   }
   break;
  }
  case 81:  {
   $808 = $4;
   $809 = HEAP32[$808>>2]|0;
   $810 = $809 >>> 2;
   $811 = $810 & 1;
   $812 = ($811|0)!=(0);
   if ($812) {
    $813 = $4;
    $814 = (_lastIp($813)|0);
    $7 = $814;
    $815 = $7;
    $816 = HEAP8[$815>>0]|0;
    $817 = $816&255;
    $818 = ($817|0)==(27);
    if ($818) {
     $819 = $7;
     $820 = ((($819)) + 1|0);
     $821 = HEAPU8[$820>>0]|(HEAPU8[$820+1>>0]<<8)|(HEAPU8[$820+2>>0]<<16)|(HEAPU8[$820+3>>0]<<24);
     $822 = ($821|0)<(0);
     $823 = $822 << 31 >> 31;
     $824 = $2;
     $825 = $824;
     HEAP32[$825>>2] = $821;
     $826 = (($824) + 4)|0;
     $827 = $826;
     HEAP32[$827>>2] = $823;
     $828 = HEAP32[$2>>2]|0;
     $829 = $828 << 8;
     $830 = $829 >> 8;
     $831 = ($830|0)<(0);
     $832 = $831 << 31 >> 31;
     $833 = $2;
     $834 = $833;
     $835 = HEAP32[$834>>2]|0;
     $836 = (($833) + 4)|0;
     $837 = $836;
     $838 = HEAP32[$837>>2]|0;
     $839 = ($830|0)==($835|0);
     $840 = ($832|0)==($838|0);
     $841 = $839 & $840;
     if ($841) {
      $5 = 11;
      $842 = $4;
      _rollbackPc($842);
     }
    }
   }
   break;
  }
  case 82:  {
   $843 = $4;
   $844 = HEAP32[$843>>2]|0;
   $845 = $844 >>> 2;
   $846 = $845 & 1;
   $847 = ($846|0)!=(0);
   if ($847) {
    $848 = $4;
    $849 = (_lastIp($848)|0);
    $7 = $849;
    $850 = $7;
    $851 = HEAP8[$850>>0]|0;
    $852 = $851&255;
    $853 = ($852|0)==(27);
    if ($853) {
     $854 = $7;
     $855 = ((($854)) + 1|0);
     $856 = HEAPU8[$855>>0]|(HEAPU8[$855+1>>0]<<8)|(HEAPU8[$855+2>>0]<<16)|(HEAPU8[$855+3>>0]<<24);
     $857 = (0 - ($856))|0;
     $858 = ($857|0)<(0);
     $859 = $858 << 31 >> 31;
     $860 = $2;
     $861 = $860;
     HEAP32[$861>>2] = $857;
     $862 = (($860) + 4)|0;
     $863 = $862;
     HEAP32[$863>>2] = $859;
     $864 = HEAP32[$2>>2]|0;
     $865 = $864 << 8;
     $866 = $865 >> 8;
     $867 = ($866|0)<(0);
     $868 = $867 << 31 >> 31;
     $869 = $2;
     $870 = $869;
     $871 = HEAP32[$870>>2]|0;
     $872 = (($869) + 4)|0;
     $873 = $872;
     $874 = HEAP32[$873>>2]|0;
     $875 = ($866|0)==($871|0);
     $876 = ($868|0)==($874|0);
     $877 = $875 & $876;
     if ($877) {
      $5 = 11;
      $878 = $4;
      _rollbackPc($878);
     }
    }
   }
   break;
  }
  case 11:  {
   $879 = $2;
   $880 = $879;
   $881 = HEAP32[$880>>2]|0;
   $882 = (($879) + 4)|0;
   $883 = $882;
   $884 = HEAP32[$883>>2]|0;
   $885 = ($881|0)==(0);
   $886 = ($884|0)==(0);
   $887 = $885 & $886;
   if ($887) {
    $888 = $4;
    $889 = HEAP32[$888>>2]|0;
    $890 = $889 & 1;
    $891 = ($890|0)!=(0);
    if ($891) {
     $892 = $4;
     $893 = ((($892)) + 24|0);
     $894 = ((($893)) + 12|0);
     $895 = HEAP32[$894>>2]|0;
     $3 = $895;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
   }
   $896 = $4;
   $897 = HEAP32[$896>>2]|0;
   $898 = $897 >>> 2;
   $899 = $898 & 1;
   $900 = ($899|0)!=(0);
   if ($900) {
    $901 = $4;
    $902 = (_lastIp($901)|0);
    $7 = $902;
    $903 = $7;
    $904 = HEAP8[$903>>0]|0;
    $905 = $904&255;
    $906 = ($905|0)==(11);
    if ($906) {
     $907 = $2;
     $908 = $907;
     $909 = HEAP32[$908>>2]|0;
     $910 = (($907) + 4)|0;
     $911 = $910;
     $912 = HEAP32[$911>>2]|0;
     $913 = $7;
     $914 = ((($913)) + 1|0);
     $915 = HEAPU8[$914>>0]|(HEAPU8[$914+1>>0]<<8)|(HEAPU8[$914+2>>0]<<16)|(HEAPU8[$914+3>>0]<<24);
     $916 = $915 << 8;
     $917 = $916 >> 8;
     $918 = ($917|0)<(0);
     $919 = $918 << 31 >> 31;
     $920 = (_i64Add(($909|0),($912|0),($917|0),($919|0))|0);
     $921 = (getTempRet0() | 0);
     $922 = $8;
     $923 = $922;
     HEAP32[$923>>2] = $920;
     $924 = (($922) + 4)|0;
     $925 = $924;
     HEAP32[$925>>2] = $921;
     $926 = HEAP32[$8>>2]|0;
     $927 = $926 << 8;
     $928 = $927 >> 8;
     $929 = ($928|0)<(0);
     $930 = $929 << 31 >> 31;
     $931 = $8;
     $932 = $931;
     $933 = HEAP32[$932>>2]|0;
     $934 = (($931) + 4)|0;
     $935 = $934;
     $936 = HEAP32[$935>>2]|0;
     $937 = ($928|0)==($933|0);
     $938 = ($930|0)==($936|0);
     $939 = $937 & $938;
     if (!($939)) {
      break L60;
     }
     $940 = HEAP32[$8>>2]|0;
     $941 = $940 << 8;
     $942 = $941 >> 8;
     $943 = $7;
     $944 = ((($943)) + 1|0);
     $945 = HEAPU8[$944>>0]|(HEAPU8[$944+1>>0]<<8)|(HEAPU8[$944+2>>0]<<16)|(HEAPU8[$944+3>>0]<<24);
     $946 = $942 & 16777215;
     $947 = $945 & -16777216;
     $948 = $947 | $946;
     HEAP8[$944>>0]=$948&255;HEAP8[$944+1>>0]=($948>>8)&255;HEAP8[$944+2>>0]=($948>>16)&255;HEAP8[$944+3>>0]=$948>>24;
     $949 = $4;
     $950 = ((($949)) + 24|0);
     $951 = ((($950)) + 12|0);
     $952 = HEAP32[$951>>2]|0;
     $3 = $952;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $953 = $7;
    $954 = HEAP8[$953>>0]|0;
    $955 = $954&255;
    $956 = ($955|0)==(17);
    if ($956) {
     $957 = $2;
     $958 = $957;
     $959 = HEAP32[$958>>2]|0;
     $960 = (($957) + 4)|0;
     $961 = $960;
     $962 = HEAP32[$961>>2]|0;
     $963 = ($962|0)<(0);
     if ($963) {
      $3 = 0;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
     $964 = $2;
     $965 = $964;
     $966 = HEAP32[$965>>2]|0;
     $967 = (($964) + 4)|0;
     $968 = $967;
     $969 = HEAP32[$968>>2]|0;
     $970 = $7;
     $971 = ((($970)) + 1|0);
     $972 = HEAPU8[$971>>0]|(HEAPU8[$971+1>>0]<<8)|(HEAPU8[$971+2>>0]<<16)|(HEAPU8[$971+3>>0]<<24);
     $973 = $972 << 8;
     $974 = $973 >> 8;
     $975 = ($974|0)<(0);
     $976 = $975 << 31 >> 31;
     $977 = (_i64Add(($966|0),($969|0),($974|0),($976|0))|0);
     $978 = (getTempRet0() | 0);
     $979 = $9;
     $980 = $979;
     HEAP32[$980>>2] = $977;
     $981 = (($979) + 4)|0;
     $982 = $981;
     HEAP32[$982>>2] = $978;
     $983 = HEAP32[$9>>2]|0;
     $984 = $983 << 8;
     $985 = $984 >> 8;
     $986 = ($985|0)<(0);
     $987 = $986 << 31 >> 31;
     $988 = $9;
     $989 = $988;
     $990 = HEAP32[$989>>2]|0;
     $991 = (($988) + 4)|0;
     $992 = $991;
     $993 = HEAP32[$992>>2]|0;
     $994 = ($985|0)==($990|0);
     $995 = ($987|0)==($993|0);
     $996 = $994 & $995;
     if (!($996)) {
      break L60;
     }
     $997 = HEAP32[$9>>2]|0;
     $998 = $997 << 8;
     $999 = $998 >> 8;
     $1000 = $7;
     $1001 = ((($1000)) + 1|0);
     $1002 = HEAPU8[$1001>>0]|(HEAPU8[$1001+1>>0]<<8)|(HEAPU8[$1001+2>>0]<<16)|(HEAPU8[$1001+3>>0]<<24);
     $1003 = $999 & 16777215;
     $1004 = $1002 & -16777216;
     $1005 = $1004 | $1003;
     HEAP8[$1001>>0]=$1005&255;HEAP8[$1001+1>>0]=($1005>>8)&255;HEAP8[$1001+2>>0]=($1005>>16)&255;HEAP8[$1001+3>>0]=$1005>>24;
     $1006 = $4;
     $1007 = ((($1006)) + 24|0);
     $1008 = ((($1007)) + 12|0);
     $1009 = HEAP32[$1008>>2]|0;
     $3 = $1009;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    }
    $1010 = $7;
    $1011 = HEAP8[$1010>>0]|0;
    $1012 = $1011&255;
    $1013 = ($1012|0)==(31);
    if ($1013) {
     $1014 = $2;
     $1015 = $1014;
     $1016 = HEAP32[$1015>>2]|0;
     $1017 = (($1014) + 4)|0;
     $1018 = $1017;
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = ($1019|0)<(0);
     if ($1020) {
      $3 = 0;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
     $1021 = $2;
     $1022 = $1021;
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = (($1021) + 4)|0;
     $1025 = $1024;
     $1026 = HEAP32[$1025>>2]|0;
     $1027 = $7;
     $1028 = ((($1027)) + 1|0);
     $1029 = HEAPU8[$1028>>0]|(HEAPU8[$1028+1>>0]<<8)|(HEAPU8[$1028+2>>0]<<16)|(HEAPU8[$1028+3>>0]<<24);
     $1030 = $1029 << 8;
     $1031 = $1030 >> 8;
     $1032 = ($1031|0)<(0);
     $1033 = $1032 << 31 >> 31;
     $1034 = (_i64Add(($1023|0),($1026|0),($1031|0),($1033|0))|0);
     $1035 = (getTempRet0() | 0);
     $1036 = $10;
     $1037 = $1036;
     HEAP32[$1037>>2] = $1034;
     $1038 = (($1036) + 4)|0;
     $1039 = $1038;
     HEAP32[$1039>>2] = $1035;
     $1040 = HEAP32[$10>>2]|0;
     $1041 = $1040 << 8;
     $1042 = $1041 >> 8;
     $1043 = ($1042|0)<(0);
     $1044 = $1043 << 31 >> 31;
     $1045 = $10;
     $1046 = $1045;
     $1047 = HEAP32[$1046>>2]|0;
     $1048 = (($1045) + 4)|0;
     $1049 = $1048;
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = ($1042|0)==($1047|0);
     $1052 = ($1044|0)==($1050|0);
     $1053 = $1051 & $1052;
     if ($1053) {
      $1054 = HEAP32[$10>>2]|0;
      $1055 = $1054 << 8;
      $1056 = $1055 >> 8;
      $1057 = $7;
      $1058 = ((($1057)) + 1|0);
      $1059 = HEAPU8[$1058>>0]|(HEAPU8[$1058+1>>0]<<8)|(HEAPU8[$1058+2>>0]<<16)|(HEAPU8[$1058+3>>0]<<24);
      $1060 = $1056 & 16777215;
      $1061 = $1059 & -16777216;
      $1062 = $1061 | $1060;
      HEAP8[$1058>>0]=$1062&255;HEAP8[$1058+1>>0]=($1062>>8)&255;HEAP8[$1058+2>>0]=($1062>>16)&255;HEAP8[$1058+3>>0]=$1062>>24;
      $1063 = $4;
      $1064 = ((($1063)) + 24|0);
      $1065 = ((($1064)) + 12|0);
      $1066 = HEAP32[$1065>>2]|0;
      $3 = $1066;
      $3786 = $3;
      STACKTOP = sp;return ($3786|0);
     }
    }
   }
   break;
  }
  case 12:  {
   $1067 = $4;
   $1068 = HEAP32[$1067>>2]|0;
   $1069 = $1068 >>> 2;
   $1070 = $1069 & 1;
   $1071 = ($1070|0)!=(0);
   if ($1071) {
    $1072 = $2;
    $1073 = $1072;
    $1074 = HEAP32[$1073>>2]|0;
    $1075 = (($1072) + 4)|0;
    $1076 = $1075;
    $1077 = HEAP32[$1076>>2]|0;
    $1078 = ($1074|0)==(0);
    $1079 = ($1077|0)==(0);
    $1080 = $1078 & $1079;
    if ($1080) {
     $5 = 11;
     $1081 = $4;
     _rollbackPc($1081);
    }
    $1082 = $2;
    $1083 = $1082;
    $1084 = HEAP32[$1083>>2]|0;
    $1085 = (($1082) + 4)|0;
    $1086 = $1085;
    $1087 = HEAP32[$1086>>2]|0;
    $1088 = ($1084|0)==(1);
    $1089 = ($1087|0)==(0);
    $1090 = $1088 & $1089;
    if ($1090) {
     $1091 = $4;
     $1092 = (_lastIp($1091)|0);
     $7 = $1092;
     $1093 = $7;
     $1094 = HEAP8[$1093>>0]|0;
     $1095 = $1094&255;
     $1096 = ($1095|0)==(27);
     if (!($1096)) {
      $5 = 81;
      break L60;
     }
     $1097 = $7;
     $1098 = ((($1097)) + 1|0);
     $1099 = HEAPU8[$1098>>0]|(HEAPU8[$1098+1>>0]<<8)|(HEAPU8[$1098+2>>0]<<16)|(HEAPU8[$1098+3>>0]<<24);
     $1100 = ($1099|0)<(0);
     $1101 = $1100 << 31 >> 31;
     $1102 = $2;
     $1103 = $1102;
     HEAP32[$1103>>2] = $1099;
     $1104 = (($1102) + 4)|0;
     $1105 = $1104;
     HEAP32[$1105>>2] = $1101;
     $1106 = HEAP32[$2>>2]|0;
     $1107 = $1106 << 8;
     $1108 = $1107 >> 8;
     $1109 = ($1108|0)<(0);
     $1110 = $1109 << 31 >> 31;
     $1111 = $2;
     $1112 = $1111;
     $1113 = HEAP32[$1112>>2]|0;
     $1114 = (($1111) + 4)|0;
     $1115 = $1114;
     $1116 = HEAP32[$1115>>2]|0;
     $1117 = ($1108|0)==($1113|0);
     $1118 = ($1110|0)==($1116|0);
     $1119 = $1117 & $1118;
     if ($1119) {
      $5 = 11;
      $1120 = $4;
      _rollbackPc($1120);
     }
    }
   }
   break;
  }
  case 62:  {
   $1121 = $4;
   $1122 = HEAP32[$1121>>2]|0;
   $1123 = $1122 >>> 1;
   $1124 = $1123 & 1;
   $1125 = ($1124|0)!=(0);
   if ($1125) {
    $1126 = $4;
    $1127 = (_lastIp($1126)|0);
    $7 = $1127;
    $1128 = $7;
    $1129 = HEAP8[$1128>>0]|0;
    $1130 = $1129&255;
    switch ($1130|0) {
    case 24:  {
     $5 = 25;
     $1131 = $4;
     _rollbackPc($1131);
     break L60;
     break;
    }
    case 27:  {
     $1132 = $7;
     $1133 = ((($1132)) + 1|0);
     $1134 = HEAPU8[$1133>>0]|(HEAPU8[$1133+1>>0]<<8)|(HEAPU8[$1133+2>>0]<<16)|(HEAPU8[$1133+3>>0]<<24);
     $1135 = $2;
     $1136 = $1135;
     HEAP32[$1136>>2] = $1134;
     $1137 = (($1135) + 4)|0;
     $1138 = $1137;
     HEAP32[$1138>>2] = 0;
     $5 = 28;
     $1139 = $4;
     _rollbackPc($1139);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 90:  {
   $1140 = $4;
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $1141 >>> 1;
   $1143 = $1142 & 1;
   $1144 = ($1143|0)!=(0);
   if ($1144) {
    $1145 = $4;
    $1146 = (_lastIp($1145)|0);
    $7 = $1146;
    $1147 = $7;
    $1148 = HEAP8[$1147>>0]|0;
    $1149 = $1148&255;
    switch ($1149|0) {
    case 26: case 25: case 24:  {
     break;
    }
    case 27:  {
     $1154 = $7;
     $1155 = ((($1154)) + 1|0);
     $1156 = HEAPU8[$1155>>0]|(HEAPU8[$1155+1>>0]<<8)|(HEAPU8[$1155+2>>0]<<16)|(HEAPU8[$1155+3>>0]<<24);
     $1157 = ($1156|0)!=(0);
     $1158 = $1157&1;
     $1159 = ($1158|0)<(0);
     $1160 = $1159 << 31 >> 31;
     $1161 = $2;
     $1162 = $1161;
     HEAP32[$1162>>2] = $1158;
     $1163 = (($1161) + 4)|0;
     $1164 = $1163;
     HEAP32[$1164>>2] = $1160;
     $5 = 27;
     $1165 = $4;
     _rollbackPc($1165);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1150 = $4;
    $1151 = ((($1150)) + 24|0);
    $1152 = ((($1151)) + 12|0);
    $1153 = HEAP32[$1152>>2]|0;
    $3 = $1153;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 91:  {
   $1166 = $4;
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = $1167 >>> 1;
   $1169 = $1168 & 1;
   $1170 = ($1169|0)!=(0);
   if ($1170) {
    $1171 = $4;
    $1172 = (_lastIp($1171)|0);
    $7 = $1172;
    $1173 = $7;
    $1174 = HEAP8[$1173>>0]|0;
    $1175 = $1174&255;
    switch ($1175|0) {
    case 26: case 25: case 24:  {
     break;
    }
    case 27:  {
     $1180 = $7;
     $1181 = ((($1180)) + 1|0);
     $1182 = HEAPU8[$1181>>0]|(HEAPU8[$1181+1>>0]<<8)|(HEAPU8[$1181+2>>0]<<16)|(HEAPU8[$1181+3>>0]<<24);
     $1183 = (+($1182|0));
     HEAPF32[$2>>2] = $1183;
     $5 = 29;
     $1184 = $4;
     _rollbackPc($1184);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1176 = $4;
    $1177 = ((($1176)) + 24|0);
    $1178 = ((($1177)) + 12|0);
    $1179 = HEAP32[$1178>>2]|0;
    $3 = $1179;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 92:  {
   $1185 = $4;
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = $1186 >>> 1;
   $1188 = $1187 & 1;
   $1189 = ($1188|0)!=(0);
   if ($1189) {
    $1190 = $4;
    $1191 = (_lastIp($1190)|0);
    $7 = $1191;
    $1192 = $7;
    $1193 = HEAP8[$1192>>0]|0;
    $1194 = $1193&255;
    switch ($1194|0) {
    case 24:  {
     $5 = 25;
     $1195 = $4;
     _rollbackPc($1195);
     break L60;
     break;
    }
    case 27:  {
     $1196 = $7;
     $1197 = ((($1196)) + 1|0);
     $1198 = HEAPU8[$1197>>0]|(HEAPU8[$1197+1>>0]<<8)|(HEAPU8[$1197+2>>0]<<16)|(HEAPU8[$1197+3>>0]<<24);
     $1199 = ($1198|0)<(0);
     $1200 = $1199 << 31 >> 31;
     $1201 = $2;
     $1202 = $1201;
     HEAP32[$1202>>2] = $1198;
     $1203 = (($1201) + 4)|0;
     $1204 = $1203;
     HEAP32[$1204>>2] = $1200;
     $5 = 28;
     $1205 = $4;
     _rollbackPc($1205);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 93:  {
   $1206 = $4;
   $1207 = HEAP32[$1206>>2]|0;
   $1208 = $1207 >>> 1;
   $1209 = $1208 & 1;
   $1210 = ($1209|0)!=(0);
   if ($1210) {
    $1211 = $4;
    $1212 = (_lastIp($1211)|0);
    $7 = $1212;
    $1213 = $7;
    $1214 = HEAP8[$1213>>0]|0;
    $1215 = $1214&255;
    switch ($1215|0) {
    case 24:  {
     $5 = 25;
     $1216 = $4;
     _rollbackPc($1216);
     break L60;
     break;
    }
    case 27:  {
     $1217 = $7;
     $1218 = ((($1217)) + 1|0);
     $1219 = HEAPU8[$1218>>0]|(HEAPU8[$1218+1>>0]<<8)|(HEAPU8[$1218+2>>0]<<16)|(HEAPU8[$1218+3>>0]<<24);
     $1220 = (+($1219|0));
     HEAPF64[$2>>3] = $1220;
     $5 = 30;
     $1221 = $4;
     _rollbackPc($1221);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 106:  {
   $1222 = $4;
   $1223 = HEAP32[$1222>>2]|0;
   $1224 = $1223 >>> 1;
   $1225 = $1224 & 1;
   $1226 = ($1225|0)!=(0);
   if ($1226) {
    $1227 = $4;
    $1228 = (_lastIp($1227)|0);
    $7 = $1228;
    $1229 = $7;
    $1230 = HEAP8[$1229>>0]|0;
    $1231 = $1230&255;
    switch ($1231|0) {
    case 25:  {
     $5 = 24;
     $1232 = $4;
     _rollbackPc($1232);
     break L60;
     break;
    }
    case 28:  {
     $1233 = $7;
     $1234 = ((($1233)) + 1|0);
     $1235 = $1234;
     $1236 = $1235;
     $1237 = HEAPU8[$1236>>0]|(HEAPU8[$1236+1>>0]<<8)|(HEAPU8[$1236+2>>0]<<16)|(HEAPU8[$1236+3>>0]<<24);
     $1238 = (($1235) + 4)|0;
     $1239 = $1238;
     $1240 = HEAPU8[$1239>>0]|(HEAPU8[$1239+1>>0]<<8)|(HEAPU8[$1239+2>>0]<<16)|(HEAPU8[$1239+3>>0]<<24);
     $1241 = $2;
     $1242 = $1241;
     HEAP32[$1242>>2] = $1237;
     $1243 = (($1241) + 4)|0;
     $1244 = $1243;
     HEAP32[$1244>>2] = $1240;
     $5 = 27;
     $1245 = $4;
     _rollbackPc($1245);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 107:  {
   $1246 = $4;
   $1247 = HEAP32[$1246>>2]|0;
   $1248 = $1247 >>> 1;
   $1249 = $1248 & 1;
   $1250 = ($1249|0)!=(0);
   if ($1250) {
    $1251 = $4;
    $1252 = (_lastIp($1251)|0);
    $7 = $1252;
    $1253 = $7;
    $1254 = HEAP8[$1253>>0]|0;
    $1255 = $1254&255;
    switch ($1255|0) {
    case 25:  {
     $5 = 24;
     $1256 = $4;
     _rollbackPc($1256);
     break L60;
     break;
    }
    case 28:  {
     $1257 = $7;
     $1258 = ((($1257)) + 1|0);
     $1259 = $1258;
     $1260 = $1259;
     $1261 = HEAPU8[$1260>>0]|(HEAPU8[$1260+1>>0]<<8)|(HEAPU8[$1260+2>>0]<<16)|(HEAPU8[$1260+3>>0]<<24);
     $1262 = (($1259) + 4)|0;
     $1263 = $1262;
     $1264 = HEAPU8[$1263>>0]|(HEAPU8[$1263+1>>0]<<8)|(HEAPU8[$1263+2>>0]<<16)|(HEAPU8[$1263+3>>0]<<24);
     $1265 = (+($1261>>>0)) + (4294967296.0*(+($1264|0)));
     HEAPF32[$2>>2] = $1265;
     $5 = 29;
     $1266 = $4;
     _rollbackPc($1266);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 108:  {
   $1267 = $4;
   $1268 = HEAP32[$1267>>2]|0;
   $1269 = $1268 >>> 1;
   $1270 = $1269 & 1;
   $1271 = ($1270|0)!=(0);
   if ($1271) {
    $1272 = $4;
    $1273 = (_lastIp($1272)|0);
    $7 = $1273;
    $1274 = $7;
    $1275 = HEAP8[$1274>>0]|0;
    $1276 = $1275&255;
    switch ($1276|0) {
    case 25:  {
     $5 = 24;
     $1277 = $4;
     _rollbackPc($1277);
     break L60;
     break;
    }
    case 28:  {
     $1278 = $7;
     $1279 = ((($1278)) + 1|0);
     $1280 = $1279;
     $1281 = $1280;
     $1282 = HEAPU8[$1281>>0]|(HEAPU8[$1281+1>>0]<<8)|(HEAPU8[$1281+2>>0]<<16)|(HEAPU8[$1281+3>>0]<<24);
     $1283 = (($1280) + 4)|0;
     $1284 = $1283;
     $1285 = HEAPU8[$1284>>0]|(HEAPU8[$1284+1>>0]<<8)|(HEAPU8[$1284+2>>0]<<16)|(HEAPU8[$1284+3>>0]<<24);
     $1286 = ($1282|0)!=(0);
     $1287 = ($1285|0)!=(0);
     $1288 = $1286 | $1287;
     $1289 = $1288&1;
     $1290 = ($1289|0)<(0);
     $1291 = $1290 << 31 >> 31;
     $1292 = $2;
     $1293 = $1292;
     HEAP32[$1293>>2] = $1289;
     $1294 = (($1292) + 4)|0;
     $1295 = $1294;
     HEAP32[$1295>>2] = $1291;
     $5 = 27;
     $1296 = $4;
     _rollbackPc($1296);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 109:  {
   $1297 = $4;
   $1298 = HEAP32[$1297>>2]|0;
   $1299 = $1298 >>> 1;
   $1300 = $1299 & 1;
   $1301 = ($1300|0)!=(0);
   if ($1301) {
    $1302 = $4;
    $1303 = (_lastIp($1302)|0);
    $7 = $1303;
    $1304 = $7;
    $1305 = HEAP8[$1304>>0]|0;
    $1306 = $1305&255;
    switch ($1306|0) {
    case 26: case 25:  {
     break;
    }
    case 28:  {
     $1311 = $7;
     $1312 = ((($1311)) + 1|0);
     $1313 = $1312;
     $1314 = $1313;
     $1315 = HEAPU8[$1314>>0]|(HEAPU8[$1314+1>>0]<<8)|(HEAPU8[$1314+2>>0]<<16)|(HEAPU8[$1314+3>>0]<<24);
     $1316 = (($1313) + 4)|0;
     $1317 = $1316;
     $1318 = HEAPU8[$1317>>0]|(HEAPU8[$1317+1>>0]<<8)|(HEAPU8[$1317+2>>0]<<16)|(HEAPU8[$1317+3>>0]<<24);
     $1319 = (+($1315>>>0)) + (4294967296.0*(+($1318|0)));
     HEAPF64[$2>>3] = $1319;
     $5 = 30;
     $1320 = $4;
     _rollbackPc($1320);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1307 = $4;
    $1308 = ((($1307)) + 24|0);
    $1309 = ((($1308)) + 12|0);
    $1310 = HEAP32[$1309>>2]|0;
    $3 = $1310;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 122:  {
   $1321 = $4;
   $1322 = HEAP32[$1321>>2]|0;
   $1323 = $1322 >>> 1;
   $1324 = $1323 & 1;
   $1325 = ($1324|0)!=(0);
   if ($1325) {
    $1326 = $4;
    $1327 = (_lastIp($1326)|0);
    $7 = $1327;
    $1328 = $7;
    $1329 = HEAP8[$1328>>0]|0;
    $1330 = $1329&255;
    switch ($1330|0) {
    case 26: case 25: case 24:  {
     break;
    }
    case 29:  {
     $1335 = $7;
     $1336 = ((($1335)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1336>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1336+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1336+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1336+3>>0];$1337 = +HEAPF32[tempDoublePtr>>2];
     $1338 = (~~$1337)>>>0;
     $1339 = +Math_abs($1337) >= 1.0 ? $1337 > 0.0 ? (~~+Math_min(+Math_floor($1337 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1337 - +(~~$1337 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $1340 = $2;
     $1341 = $1340;
     HEAP32[$1341>>2] = $1338;
     $1342 = (($1340) + 4)|0;
     $1343 = $1342;
     HEAP32[$1343>>2] = $1339;
     $5 = 27;
     $1344 = $4;
     _rollbackPc($1344);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1331 = $4;
    $1332 = ((($1331)) + 24|0);
    $1333 = ((($1332)) + 12|0);
    $1334 = HEAP32[$1333>>2]|0;
    $3 = $1334;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 123:  {
   $1345 = $4;
   $1346 = HEAP32[$1345>>2]|0;
   $1347 = $1346 >>> 1;
   $1348 = $1347 & 1;
   $1349 = ($1348|0)!=(0);
   if ($1349) {
    $1350 = $4;
    $1351 = (_lastIp($1350)|0);
    $7 = $1351;
    $1352 = $7;
    $1353 = HEAP8[$1352>>0]|0;
    $1354 = $1353&255;
    switch ($1354|0) {
    case 26: case 25: case 24:  {
     break;
    }
    case 29:  {
     $1359 = $7;
     $1360 = ((($1359)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1360>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1360+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1360+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1360+3>>0];$1361 = +HEAPF32[tempDoublePtr>>2];
     $1362 = $1361 != 0.0;
     $1363 = $1362&1;
     $1364 = ($1363|0)<(0);
     $1365 = $1364 << 31 >> 31;
     $1366 = $2;
     $1367 = $1366;
     HEAP32[$1367>>2] = $1363;
     $1368 = (($1366) + 4)|0;
     $1369 = $1368;
     HEAP32[$1369>>2] = $1365;
     $5 = 27;
     $1370 = $4;
     _rollbackPc($1370);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1355 = $4;
    $1356 = ((($1355)) + 24|0);
    $1357 = ((($1356)) + 12|0);
    $1358 = HEAP32[$1357>>2]|0;
    $3 = $1358;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 124:  {
   $1371 = $4;
   $1372 = HEAP32[$1371>>2]|0;
   $1373 = $1372 >>> 1;
   $1374 = $1373 & 1;
   $1375 = ($1374|0)!=(0);
   if ($1375) {
    $1376 = $4;
    $1377 = (_lastIp($1376)|0);
    $7 = $1377;
    $1378 = $7;
    $1379 = HEAP8[$1378>>0]|0;
    $1380 = $1379&255;
    switch ($1380|0) {
    case 24:  {
     $5 = 25;
     $1381 = $4;
     _rollbackPc($1381);
     break L60;
     break;
    }
    case 29:  {
     $1382 = $7;
     $1383 = ((($1382)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1383>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1383+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1383+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1383+3>>0];$1384 = +HEAPF32[tempDoublePtr>>2];
     $1385 = (~~$1384)>>>0;
     $1386 = +Math_abs($1384) >= 1.0 ? $1384 > 0.0 ? (~~+Math_min(+Math_floor($1384 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1384 - +(~~$1384 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $1387 = $2;
     $1388 = $1387;
     HEAP32[$1388>>2] = $1385;
     $1389 = (($1387) + 4)|0;
     $1390 = $1389;
     HEAP32[$1390>>2] = $1386;
     $5 = 28;
     $1391 = $4;
     _rollbackPc($1391);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 125:  {
   $1392 = $4;
   $1393 = HEAP32[$1392>>2]|0;
   $1394 = $1393 >>> 1;
   $1395 = $1394 & 1;
   $1396 = ($1395|0)!=(0);
   if ($1396) {
    $1397 = $4;
    $1398 = (_lastIp($1397)|0);
    $7 = $1398;
    $1399 = $7;
    $1400 = HEAP8[$1399>>0]|0;
    $1401 = $1400&255;
    switch ($1401|0) {
    case 24:  {
     $5 = 25;
     $1402 = $4;
     _rollbackPc($1402);
     break L60;
     break;
    }
    case 29:  {
     $1403 = $7;
     $1404 = ((($1403)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1404>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1404+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1404+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1404+3>>0];$1405 = +HEAPF32[tempDoublePtr>>2];
     $1406 = $1405;
     HEAPF64[$2>>3] = $1406;
     $5 = 30;
     $1407 = $4;
     _rollbackPc($1407);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 138:  {
   $1408 = $4;
   $1409 = HEAP32[$1408>>2]|0;
   $1410 = $1409 >>> 1;
   $1411 = $1410 & 1;
   $1412 = ($1411|0)!=(0);
   if ($1412) {
    $1413 = $4;
    $1414 = (_lastIp($1413)|0);
    $7 = $1414;
    $1415 = $7;
    $1416 = HEAP8[$1415>>0]|0;
    $1417 = $1416&255;
    switch ($1417|0) {
    case 25:  {
     $5 = 24;
     $1418 = $4;
     _rollbackPc($1418);
     break L60;
     break;
    }
    case 30:  {
     $1419 = $7;
     $1420 = ((($1419)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1420>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1420+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1420+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1420+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$1420+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$1420+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$1420+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$1420+7>>0];$1421 = +HEAPF64[tempDoublePtr>>3];
     $1422 = (~~$1421)>>>0;
     $1423 = +Math_abs($1421) >= 1.0 ? $1421 > 0.0 ? (~~+Math_min(+Math_floor($1421 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1421 - +(~~$1421 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $1424 = $2;
     $1425 = $1424;
     HEAP32[$1425>>2] = $1422;
     $1426 = (($1424) + 4)|0;
     $1427 = $1426;
     HEAP32[$1427>>2] = $1423;
     $5 = 27;
     $1428 = $4;
     _rollbackPc($1428);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 139:  {
   $1429 = $4;
   $1430 = HEAP32[$1429>>2]|0;
   $1431 = $1430 >>> 1;
   $1432 = $1431 & 1;
   $1433 = ($1432|0)!=(0);
   if ($1433) {
    $1434 = $4;
    $1435 = (_lastIp($1434)|0);
    $7 = $1435;
    $1436 = $7;
    $1437 = HEAP8[$1436>>0]|0;
    $1438 = $1437&255;
    switch ($1438|0) {
    case 25:  {
     $5 = 24;
     $1439 = $4;
     _rollbackPc($1439);
     break L60;
     break;
    }
    case 30:  {
     $1440 = $7;
     $1441 = ((($1440)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1441>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1441+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1441+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1441+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$1441+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$1441+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$1441+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$1441+7>>0];$1442 = +HEAPF64[tempDoublePtr>>3];
     $1443 = $1442;
     HEAPF32[$2>>2] = $1443;
     $5 = 29;
     $1444 = $4;
     _rollbackPc($1444);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 140:  {
   $1445 = $4;
   $1446 = HEAP32[$1445>>2]|0;
   $1447 = $1446 >>> 1;
   $1448 = $1447 & 1;
   $1449 = ($1448|0)!=(0);
   if ($1449) {
    $1450 = $4;
    $1451 = (_lastIp($1450)|0);
    $7 = $1451;
    $1452 = $7;
    $1453 = HEAP8[$1452>>0]|0;
    $1454 = $1453&255;
    switch ($1454|0) {
    case 26: case 25:  {
     break;
    }
    case 30:  {
     $1459 = $7;
     $1460 = ((($1459)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1460>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1460+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1460+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1460+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$1460+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$1460+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$1460+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$1460+7>>0];$1461 = +HEAPF64[tempDoublePtr>>3];
     $1462 = (~~$1461)>>>0;
     $1463 = +Math_abs($1461) >= 1.0 ? $1461 > 0.0 ? (~~+Math_min(+Math_floor($1461 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1461 - +(~~$1461 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $1464 = $2;
     $1465 = $1464;
     HEAP32[$1465>>2] = $1462;
     $1466 = (($1464) + 4)|0;
     $1467 = $1466;
     HEAP32[$1467>>2] = $1463;
     $5 = 28;
     $1468 = $4;
     _rollbackPc($1468);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
    $1455 = $4;
    $1456 = ((($1455)) + 24|0);
    $1457 = ((($1456)) + 12|0);
    $1458 = HEAP32[$1457>>2]|0;
    $3 = $1458;
    $3786 = $3;
    STACKTOP = sp;return ($3786|0);
   }
   break;
  }
  case 141:  {
   $1469 = $4;
   $1470 = HEAP32[$1469>>2]|0;
   $1471 = $1470 >>> 1;
   $1472 = $1471 & 1;
   $1473 = ($1472|0)!=(0);
   if ($1473) {
    $1474 = $4;
    $1475 = (_lastIp($1474)|0);
    $7 = $1475;
    $1476 = $7;
    $1477 = HEAP8[$1476>>0]|0;
    $1478 = $1477&255;
    switch ($1478|0) {
    case 25:  {
     $5 = 24;
     $1479 = $4;
     _rollbackPc($1479);
     break L60;
     break;
    }
    case 30:  {
     $1480 = $7;
     $1481 = ((($1480)) + 1|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$1481>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1481+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1481+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1481+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$1481+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$1481+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$1481+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$1481+7>>0];$1482 = +HEAPF64[tempDoublePtr>>3];
     $1483 = $1482 != 0.0;
     $1484 = $1483&1;
     $1485 = ($1484|0)<(0);
     $1486 = $1485 << 31 >> 31;
     $1487 = $2;
     $1488 = $1487;
     HEAP32[$1488>>2] = $1484;
     $1489 = (($1487) + 4)|0;
     $1490 = $1489;
     HEAP32[$1490>>2] = $1486;
     $5 = 27;
     $1491 = $4;
     _rollbackPc($1491);
     break L60;
     break;
    }
    default: {
     break L60;
    }
    }
   }
   break;
  }
  case 5:  {
   $1492 = $4;
   $1493 = HEAP32[$1492>>2]|0;
   $1494 = $1493 >>> 2;
   $1495 = $1494 & 1;
   $1496 = ($1495|0)!=(0);
   if ($1496) {
    $1497 = $4;
    $1498 = (_lastIp($1497)|0);
    $7 = $1498;
    $1499 = $7;
    $1500 = HEAP8[$1499>>0]|0;
    $1501 = $1500&255;
    $1502 = ($1501|0)==(10);
    $1503 = $7;
    if ($1502) {
     $1504 = $4;
     $1505 = ((($1504)) + 132|0);
     HEAP32[$1505>>2] = $1503;
     $5 = 6;
     break L60;
    }
    $1506 = HEAP8[$1503>>0]|0;
    $1507 = $1506&255;
    $1508 = ($1507|0)==(90);
    if ($1508) {
     $1509 = $7;
     $1510 = $4;
     $1511 = ((($1510)) + 132|0);
     HEAP32[$1511>>2] = $1509;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $1549 = $4;
 $1550 = ((($1549)) + 132|0);
 $1551 = HEAP32[$1550>>2]|0;
 $7 = $1551;
 $1552 = $5;
 $1553 = $1552&255;
 $1554 = $7;
 HEAP8[$1554>>0] = $1553;
 $1555 = $7;
 $1556 = ((($1555)) + 1|0);
 ;HEAP8[$1556>>0]=HEAP8[$2>>0]|0;HEAP8[$1556+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$1556+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$1556+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$1556+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$1556+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$1556+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$1556+7>>0]=HEAP8[$2+7>>0]|0;
 $1557 = $4;
 $1558 = ((($1557)) + 132|0);
 $1559 = HEAP32[$1558>>2]|0;
 $1560 = $4;
 $1561 = ((($1560)) + 144|0);
 $1562 = $1559;
 $1563 = $1561;
 $1564 = (($1562) - ($1563))|0;
 $1565 = $4;
 $1566 = ((($1565)) + 24|0);
 $1567 = ((($1566)) + 12|0);
 HEAP32[$1567>>2] = $1564;
 $1568 = $5;
 $1569 = ($1568|0)==(4);
 $1570 = $5;
 $1571 = ($1570|0)==(5);
 $or$cond = $1569 | $1571;
 $1572 = $5;
 $1573 = ($1572|0)==(6);
 $or$cond3 = $or$cond | $1573;
 if ($or$cond3) {
  $1574 = $2;
  $1575 = $1574;
  $1576 = HEAP32[$1575>>2]|0;
  $1577 = (($1574) + 4)|0;
  $1578 = $1577;
  $1579 = HEAP32[$1578>>2]|0;
  $1580 = ($1576|0)!=(0);
  $1581 = ($1579|0)!=(0);
  $1582 = $1580 | $1581;
  if ($1582) {
   $1583 = $4;
   $1584 = ((($1583)) + 24|0);
   $1585 = ((($1584)) + 12|0);
   $1586 = HEAP32[$1585>>2]|0;
   $1587 = $7;
   $1588 = ((($1587)) + 1|0);
   $1589 = HEAPU8[$1588>>0]|(HEAPU8[$1588+1>>0]<<8)|(HEAPU8[$1588+2>>0]<<16)|(HEAPU8[$1588+3>>0]<<24);
   $1590 = $1589 << 8;
   $1591 = $1590 >> 8;
   $1592 = (($1591) - ($1586))|0;
   $1593 = HEAPU8[$1588>>0]|(HEAPU8[$1588+1>>0]<<8)|(HEAPU8[$1588+2>>0]<<16)|(HEAPU8[$1588+3>>0]<<24);
   $1594 = $1592 & 16777215;
   $1595 = $1593 & -16777216;
   $1596 = $1595 | $1594;
   HEAP8[$1588>>0]=$1596&255;HEAP8[$1588+1>>0]=($1596>>8)&255;HEAP8[$1588+2>>0]=($1596>>16)&255;HEAP8[$1588+3>>0]=$1596>>24;
   $1597 = $7;
   $1598 = ((($1597)) + 1|0);
   $1599 = HEAPU8[$1598>>0]|(HEAPU8[$1598+1>>0]<<8)|(HEAPU8[$1598+2>>0]<<16)|(HEAPU8[$1598+3>>0]<<24);
   $1600 = $1599 << 8;
   $1601 = $1600 >> 8;
   $1602 = $4;
   $1603 = ((($1602)) + 24|0);
   $1604 = ((($1603)) + 12|0);
   $1605 = HEAP32[$1604>>2]|0;
   $1606 = (($1601) + ($1605))|0;
   $1607 = $2;
   $1608 = $1607;
   $1609 = HEAP32[$1608>>2]|0;
   $1610 = (($1607) + 4)|0;
   $1611 = $1610;
   $1612 = HEAP32[$1611>>2]|0;
   $1613 = ($1606|0)!=($1609|0);
   $1614 = (0)!=($1612|0);
   $1615 = $1613 | $1614;
   if ($1615) {
    $1616 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer16>>2] = 16871;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = 1231;
    $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
    HEAP32[$vararg_ptr20>>2] = 16984;
    _printFmt($1616,0,17041,$vararg_buffer16);
    __abort_85();
   }
  } else {
   label = 254;
  }
 } else {
  label = 254;
 }
 L333: do {
  if ((label|0) == 254) {
   $1617 = $5;
   switch ($1617|0) {
   case 16:  {
    $1618 = $2;
    $1619 = $1618;
    $1620 = HEAP32[$1619>>2]|0;
    $1621 = (($1618) + 4)|0;
    $1622 = $1621;
    $1623 = HEAP32[$1622>>2]|0;
    $1624 = ($1623|0)>(0);
    $1625 = ($1620>>>0)>(8388607);
    $1626 = ($1623|0)==(0);
    $1627 = $1626 & $1625;
    $1628 = $1624 | $1627;
    if ($1628) {
     $3 = 0;
     $3786 = $3;
     STACKTOP = sp;return ($3786|0);
    } else {
     $1629 = $7;
     $1630 = ((($1629)) + 1|0);
     $1631 = HEAPU8[$1630>>0]|(HEAPU8[$1630+1>>0]<<8)|(HEAPU8[$1630+2>>0]<<16)|(HEAPU8[$1630+3>>0]<<24);
     $1632 = $1631 << 8;
     $1633 = $1632 >> 8;
     $1634 = ($1633|0)<(0);
     $1635 = $1634 << 31 >> 31;
     $1636 = $2;
     $1637 = $1636;
     $1638 = HEAP32[$1637>>2]|0;
     $1639 = (($1636) + 4)|0;
     $1640 = $1639;
     $1641 = HEAP32[$1640>>2]|0;
     $1642 = ($1633|0)!=($1638|0);
     $1643 = ($1635|0)!=($1641|0);
     $1644 = $1642 | $1643;
     if (!($1644)) {
      break L333;
     }
     $1645 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer21>>2] = 16871;
     $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
     HEAP32[$vararg_ptr24>>2] = 1242;
     $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
     HEAP32[$vararg_ptr25>>2] = 16984;
     _printFmt($1645,0,17104,$vararg_buffer21);
     __abort_85();
     break L333;
    }
    break;
   }
   case 43: case 46:  {
    $1646 = $7;
    $1647 = ((($1646)) + 1|0);
    $1648 = HEAPU8[$1647>>0]|(HEAPU8[$1647+1>>0]<<8)|(HEAPU8[$1647+2>>0]<<16)|(HEAPU8[$1647+3>>0]<<24);
    $1649 = $1648 << 8;
    $1650 = $1649 >> 8;
    $1651 = $1650 & 3;
    $1652 = ($1651|0)!=(0);
    if ($1652) {
     $1653 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer26>>2] = 16871;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = 1247;
     $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
     HEAP32[$vararg_ptr30>>2] = 16984;
     _printFmt($1653,0,17153,$vararg_buffer26);
     __abort_85();
    }
    $1654 = $7;
    $1655 = ((($1654)) + 1|0);
    $1656 = HEAPU8[$1655>>0]|(HEAPU8[$1655+1>>0]<<8)|(HEAPU8[$1655+2>>0]<<16)|(HEAPU8[$1655+3>>0]<<24);
    $1657 = $1656 << 8;
    $1658 = $1657 >> 8;
    $1659 = ($1658|0)<(0);
    $1660 = $1659 << 31 >> 31;
    $1661 = $2;
    $1662 = $1661;
    $1663 = HEAP32[$1662>>2]|0;
    $1664 = (($1661) + 4)|0;
    $1665 = $1664;
    $1666 = HEAP32[$1665>>2]|0;
    $1667 = ($1658|0)!=($1663|0);
    $1668 = ($1660|0)!=($1666|0);
    $1669 = $1667 | $1668;
    if (!($1669)) {
     break L333;
    }
    $1670 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer31>>2] = 16871;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 1248;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = 16984;
    _printFmt($1670,0,17104,$vararg_buffer31);
    __abort_85();
    break L333;
    break;
   }
   case 42: case 45:  {
    $1671 = $7;
    $1672 = ((($1671)) + 1|0);
    $1673 = HEAPU8[$1672>>0]|(HEAPU8[$1672+1>>0]<<8)|(HEAPU8[$1672+2>>0]<<16)|(HEAPU8[$1672+3>>0]<<24);
    $1674 = $1673 << 8;
    $1675 = $1674 >> 8;
    $1676 = $1675 & 3;
    $1677 = ($1676|0)!=(0);
    if ($1677) {
     $1678 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer36>>2] = 16871;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 1253;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 16984;
     _printFmt($1678,0,17220,$vararg_buffer36);
     __abort_85();
    }
    $1679 = $7;
    $1680 = ((($1679)) + 1|0);
    $1681 = HEAPU8[$1680>>0]|(HEAPU8[$1680+1>>0]<<8)|(HEAPU8[$1680+2>>0]<<16)|(HEAPU8[$1680+3>>0]<<24);
    $1682 = $1681 << 8;
    $1683 = $1682 >> 8;
    $1684 = ($1683|0)<(0);
    $1685 = $1684 << 31 >> 31;
    $1686 = $2;
    $1687 = $1686;
    $1688 = HEAP32[$1687>>2]|0;
    $1689 = (($1686) + 4)|0;
    $1690 = $1689;
    $1691 = HEAP32[$1690>>2]|0;
    $1692 = ($1683|0)!=($1688|0);
    $1693 = ($1685|0)!=($1691|0);
    $1694 = $1692 | $1693;
    if (!($1694)) {
     break L333;
    }
    $1695 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer41>>2] = 16871;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = 1254;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = 16984;
    _printFmt($1695,0,17104,$vararg_buffer41);
    __abort_85();
    break L333;
    break;
   }
   case 12: case 11: case 47: case 17:  {
    $1696 = $7;
    $1697 = ((($1696)) + 1|0);
    $1698 = HEAPU8[$1697>>0]|(HEAPU8[$1697+1>>0]<<8)|(HEAPU8[$1697+2>>0]<<16)|(HEAPU8[$1697+3>>0]<<24);
    $1699 = $1698 << 8;
    $1700 = $1699 >> 8;
    $1701 = ($1700|0)<(0);
    $1702 = $1701 << 31 >> 31;
    $1703 = $2;
    $1704 = $1703;
    $1705 = HEAP32[$1704>>2]|0;
    $1706 = (($1703) + 4)|0;
    $1707 = $1706;
    $1708 = HEAP32[$1707>>2]|0;
    $1709 = ($1700|0)!=($1705|0);
    $1710 = ($1702|0)!=($1708|0);
    $1711 = $1709 | $1710;
    if (!($1711)) {
     break L333;
    }
    $1712 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer46>>2] = 16871;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = 1261;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = 16984;
    _printFmt($1712,0,17104,$vararg_buffer46);
    __abort_85();
    break L333;
    break;
   }
   default: {
    break L333;
   }
   }
  }
 } while(0);
 $1713 = $5;
 L355: do {
  switch ($1713|0) {
  case 0:  {
   $1714 = $4;
   $1715 = ((($1714)) + 24|0);
   $1716 = ((($1715)) + 32|0);
   $1717 = HEAP32[$1716>>2]|0;
   $1718 = ($1717|0)<(0);
   if ($1718) {
    label = 271;
   } else {
    $1719 = $4;
    $1720 = ((($1719)) + 24|0);
    $1721 = ((($1720)) + 32|0);
    $1722 = HEAP32[$1721>>2]|0;
    $1723 = (($1722) + 0)|0;
    HEAP32[$1721>>2] = $1723;
    $1724 = $4;
    $1725 = ((($1724)) + 132|0);
    $1726 = HEAP32[$1725>>2]|0;
    $1727 = ((($1726)) + 1|0);
    HEAP32[$1725>>2] = $1727;
    label = 560;
   }
   break;
  }
  case 1:  {
   $1728 = $4;
   $1729 = ((($1728)) + 24|0);
   $1730 = ((($1729)) + 32|0);
   $1731 = HEAP32[$1730>>2]|0;
   $1732 = ($1731|0)<(0);
   if ($1732) {
    label = 271;
   } else {
    $1733 = $4;
    $1734 = ((($1733)) + 24|0);
    $1735 = ((($1734)) + 32|0);
    $1736 = HEAP32[$1735>>2]|0;
    $1737 = (($1736) + 0)|0;
    HEAP32[$1735>>2] = $1737;
    $1738 = $4;
    $1739 = ((($1738)) + 132|0);
    $1740 = HEAP32[$1739>>2]|0;
    $1741 = ((($1740)) + 4|0);
    HEAP32[$1739>>2] = $1741;
    $1742 = $6;
    $1743 = $7;
    $1744 = ((($1743)) + 1|0);
    $1745 = HEAPU8[$1744>>0]|(HEAPU8[$1744+1>>0]<<8)|(HEAPU8[$1744+2>>0]<<16)|(HEAPU8[$1744+3>>0]<<24);
    $1746 = $1745 << 8;
    $1747 = $1746 >> 8;
    $1748 = (($1742) + ($1747<<2)|0);
    $1749 = HEAP32[$1748>>2]|0;
    $11 = $1749;
    $1750 = $4;
    $1751 = ((($1750)) + 24|0);
    $1752 = ((($1751)) + 32|0);
    $1753 = HEAP32[$1752>>2]|0;
    $1754 = $11;
    $1755 = ((($1754)) + 16|0);
    $1756 = HEAP32[$1755>>2]|0;
    $1757 = ($1753|0)<($1756|0);
    if ($1757) {
     label = 271;
    } else {
     $1758 = $11;
     $1759 = ((($1758)) + 20|0);
     $1760 = HEAP32[$1759>>2]|0;
     $1761 = $11;
     $1762 = ((($1761)) + 16|0);
     $1763 = HEAP32[$1762>>2]|0;
     $1764 = (($1760) - ($1763))|0;
     $1765 = $4;
     $1766 = ((($1765)) + 24|0);
     $1767 = ((($1766)) + 32|0);
     $1768 = HEAP32[$1767>>2]|0;
     $1769 = (($1768) + ($1764))|0;
     HEAP32[$1767>>2] = $1769;
     $1770 = $4;
     $1771 = ((($1770)) + 132|0);
     $1772 = HEAP32[$1771>>2]|0;
     HEAP32[$1771>>2] = $1772;
     label = 560;
    }
   }
   break;
  }
  case 2:  {
   $1773 = $4;
   $1774 = ((($1773)) + 24|0);
   $1775 = ((($1774)) + 32|0);
   $1776 = HEAP32[$1775>>2]|0;
   $1777 = ($1776|0)<(1);
   if ($1777) {
    label = 271;
   } else {
    $1778 = $4;
    $1779 = ((($1778)) + 24|0);
    $1780 = ((($1779)) + 32|0);
    $1781 = HEAP32[$1780>>2]|0;
    $1782 = (($1781) + 0)|0;
    HEAP32[$1780>>2] = $1782;
    $1783 = $4;
    $1784 = ((($1783)) + 132|0);
    $1785 = HEAP32[$1784>>2]|0;
    $1786 = ((($1785)) + 1|0);
    HEAP32[$1784>>2] = $1786;
    label = 560;
   }
   break;
  }
  case 3:  {
   $1787 = $4;
   $1788 = ((($1787)) + 24|0);
   $1789 = ((($1788)) + 32|0);
   $1790 = HEAP32[$1789>>2]|0;
   $1791 = ($1790|0)<(1);
   if ($1791) {
    label = 271;
   } else {
    $1792 = $4;
    $1793 = ((($1792)) + 24|0);
    $1794 = ((($1793)) + 32|0);
    $1795 = HEAP32[$1794>>2]|0;
    $1796 = (($1795) + -1)|0;
    HEAP32[$1794>>2] = $1796;
    $1797 = $4;
    $1798 = ((($1797)) + 132|0);
    $1799 = HEAP32[$1798>>2]|0;
    $1800 = ((($1799)) + 1|0);
    HEAP32[$1798>>2] = $1800;
    label = 560;
   }
   break;
  }
  case 4:  {
   $1801 = $4;
   $1802 = ((($1801)) + 24|0);
   $1803 = ((($1802)) + 32|0);
   $1804 = HEAP32[$1803>>2]|0;
   $1805 = ($1804|0)<(0);
   if ($1805) {
    label = 271;
   } else {
    $1806 = $4;
    $1807 = ((($1806)) + 24|0);
    $1808 = ((($1807)) + 32|0);
    $1809 = HEAP32[$1808>>2]|0;
    $1810 = (($1809) + 0)|0;
    HEAP32[$1808>>2] = $1810;
    $1811 = $4;
    $1812 = ((($1811)) + 132|0);
    $1813 = HEAP32[$1812>>2]|0;
    $1814 = ((($1813)) + 4|0);
    HEAP32[$1812>>2] = $1814;
    label = 560;
   }
   break;
  }
  case 5:  {
   $1815 = $4;
   $1816 = ((($1815)) + 24|0);
   $1817 = ((($1816)) + 32|0);
   $1818 = HEAP32[$1817>>2]|0;
   $1819 = ($1818|0)<(1);
   if ($1819) {
    label = 271;
   } else {
    $1820 = $4;
    $1821 = ((($1820)) + 24|0);
    $1822 = ((($1821)) + 32|0);
    $1823 = HEAP32[$1822>>2]|0;
    $1824 = (($1823) + -1)|0;
    HEAP32[$1822>>2] = $1824;
    $1825 = $4;
    $1826 = ((($1825)) + 132|0);
    $1827 = HEAP32[$1826>>2]|0;
    $1828 = ((($1827)) + 4|0);
    HEAP32[$1826>>2] = $1828;
    label = 560;
   }
   break;
  }
  case 6:  {
   $1829 = $4;
   $1830 = ((($1829)) + 24|0);
   $1831 = ((($1830)) + 32|0);
   $1832 = HEAP32[$1831>>2]|0;
   $1833 = ($1832|0)<(1);
   if ($1833) {
    label = 271;
   } else {
    $1834 = $4;
    $1835 = ((($1834)) + 24|0);
    $1836 = ((($1835)) + 32|0);
    $1837 = HEAP32[$1836>>2]|0;
    $1838 = (($1837) + -1)|0;
    HEAP32[$1836>>2] = $1838;
    $1839 = $4;
    $1840 = ((($1839)) + 132|0);
    $1841 = HEAP32[$1840>>2]|0;
    $1842 = ((($1841)) + 4|0);
    HEAP32[$1840>>2] = $1842;
    label = 560;
   }
   break;
  }
  case 7:  {
   $1843 = $4;
   $1844 = ((($1843)) + 24|0);
   $1845 = ((($1844)) + 32|0);
   $1846 = HEAP32[$1845>>2]|0;
   $1847 = ($1846|0)<(0);
   if ($1847) {
    label = 271;
   } else {
    $1848 = $4;
    $1849 = ((($1848)) + 24|0);
    $1850 = ((($1849)) + 32|0);
    $1851 = HEAP32[$1850>>2]|0;
    $1852 = (($1851) + 0)|0;
    HEAP32[$1850>>2] = $1852;
    $1853 = $4;
    $1854 = ((($1853)) + 132|0);
    $1855 = HEAP32[$1854>>2]|0;
    $1856 = ((($1855)) + 4|0);
    HEAP32[$1854>>2] = $1856;
    label = 560;
   }
   break;
  }
  case 8:  {
   $1857 = $4;
   $1858 = ((($1857)) + 24|0);
   $1859 = ((($1858)) + 32|0);
   $1860 = HEAP32[$1859>>2]|0;
   $1861 = ($1860|0)<(0);
   if ($1861) {
    label = 271;
   } else {
    $1862 = $4;
    $1863 = ((($1862)) + 24|0);
    $1864 = ((($1863)) + 32|0);
    $1865 = HEAP32[$1864>>2]|0;
    $1866 = (($1865) + 0)|0;
    HEAP32[$1864>>2] = $1866;
    $1867 = $4;
    $1868 = ((($1867)) + 132|0);
    $1869 = HEAP32[$1868>>2]|0;
    $1870 = ((($1869)) + 2|0);
    HEAP32[$1868>>2] = $1870;
    label = 560;
   }
   break;
  }
  case 10:  {
   $1871 = $4;
   $1872 = ((($1871)) + 24|0);
   $1873 = ((($1872)) + 32|0);
   $1874 = HEAP32[$1873>>2]|0;
   $1875 = ($1874|0)<(1);
   if ($1875) {
    label = 271;
   } else {
    $1876 = $4;
    $1877 = ((($1876)) + 24|0);
    $1878 = ((($1877)) + 32|0);
    $1879 = HEAP32[$1878>>2]|0;
    $1880 = (($1879) + 0)|0;
    HEAP32[$1878>>2] = $1880;
    $1881 = $4;
    $1882 = ((($1881)) + 132|0);
    $1883 = HEAP32[$1882>>2]|0;
    $1884 = ((($1883)) + 1|0);
    HEAP32[$1882>>2] = $1884;
    label = 560;
   }
   break;
  }
  case 11:  {
   $1885 = $4;
   $1886 = ((($1885)) + 24|0);
   $1887 = ((($1886)) + 32|0);
   $1888 = HEAP32[$1887>>2]|0;
   $1889 = ($1888|0)<(1);
   if ($1889) {
    label = 271;
   } else {
    $1890 = $4;
    $1891 = ((($1890)) + 24|0);
    $1892 = ((($1891)) + 32|0);
    $1893 = HEAP32[$1892>>2]|0;
    $1894 = (($1893) + 0)|0;
    HEAP32[$1892>>2] = $1894;
    $1895 = $4;
    $1896 = ((($1895)) + 132|0);
    $1897 = HEAP32[$1896>>2]|0;
    $1898 = ((($1897)) + 4|0);
    HEAP32[$1896>>2] = $1898;
    label = 560;
   }
   break;
  }
  case 12:  {
   $1899 = $4;
   $1900 = ((($1899)) + 24|0);
   $1901 = ((($1900)) + 32|0);
   $1902 = HEAP32[$1901>>2]|0;
   $1903 = ($1902|0)<(2);
   if ($1903) {
    label = 271;
   } else {
    $1904 = $4;
    $1905 = ((($1904)) + 24|0);
    $1906 = ((($1905)) + 32|0);
    $1907 = HEAP32[$1906>>2]|0;
    $1908 = (($1907) + -1)|0;
    HEAP32[$1906>>2] = $1908;
    $1909 = $4;
    $1910 = ((($1909)) + 132|0);
    $1911 = HEAP32[$1910>>2]|0;
    $1912 = ((($1911)) + 4|0);
    HEAP32[$1910>>2] = $1912;
    label = 560;
   }
   break;
  }
  case 16:  {
   $1913 = $4;
   $1914 = ((($1913)) + 24|0);
   $1915 = ((($1914)) + 32|0);
   $1916 = HEAP32[$1915>>2]|0;
   $1917 = ($1916|0)<(0);
   if ($1917) {
    label = 271;
   } else {
    $1918 = $4;
    $1919 = ((($1918)) + 24|0);
    $1920 = ((($1919)) + 32|0);
    $1921 = HEAP32[$1920>>2]|0;
    $1922 = (($1921) + 0)|0;
    HEAP32[$1920>>2] = $1922;
    $1923 = $4;
    $1924 = ((($1923)) + 132|0);
    $1925 = HEAP32[$1924>>2]|0;
    $1926 = ((($1925)) + 4|0);
    HEAP32[$1924>>2] = $1926;
    $1927 = $7;
    $1928 = ((($1927)) + 1|0);
    $1929 = HEAPU8[$1928>>0]|(HEAPU8[$1928+1>>0]<<8)|(HEAPU8[$1928+2>>0]<<16)|(HEAPU8[$1928+3>>0]<<24);
    $1930 = $1929 << 8;
    $1931 = $1930 >> 8;
    $1932 = (($1931|0) / 4)&-1;
    $12 = $1932;
    $1933 = $7;
    $1934 = ((($1933)) + 1|0);
    $1935 = HEAPU8[$1934>>0]|(HEAPU8[$1934+1>>0]<<8)|(HEAPU8[$1934+2>>0]<<16)|(HEAPU8[$1934+3>>0]<<24);
    $1936 = $1935 << 8;
    $1937 = $1936 >> 8;
    $1938 = $1937 & 3;
    $1939 = ($1938|0)!=(0);
    if ($1939) {
     label = 270;
    } else {
     $1940 = $12;
     $1941 = ($1940|0)>(0);
     $1942 = $4;
     $1943 = ((($1942)) + 24|0);
     $1944 = ((($1943)) + 32|0);
     $1945 = HEAP32[$1944>>2]|0;
     if ($1941) {
      $1946 = ($1945|0)<(0);
      if ($1946) {
       label = 271;
       break L355;
      }
      $1947 = $12;
      $1948 = $4;
      $1949 = ((($1948)) + 24|0);
      $1950 = ((($1949)) + 32|0);
      $1951 = HEAP32[$1950>>2]|0;
      $1952 = (($1951) + ($1947))|0;
      HEAP32[$1950>>2] = $1952;
      $1953 = $4;
      $1954 = ((($1953)) + 132|0);
      $1955 = HEAP32[$1954>>2]|0;
      HEAP32[$1954>>2] = $1955;
      label = 560;
      break L355;
     } else {
      $1956 = $12;
      $1957 = (0 - ($1956))|0;
      $1958 = ($1945|0)<($1957|0);
      if ($1958) {
       label = 271;
       break L355;
      }
      $1959 = $12;
      $1960 = $4;
      $1961 = ((($1960)) + 24|0);
      $1962 = ((($1961)) + 32|0);
      $1963 = HEAP32[$1962>>2]|0;
      $1964 = (($1963) + ($1959))|0;
      HEAP32[$1962>>2] = $1964;
      $1965 = $4;
      $1966 = ((($1965)) + 132|0);
      $1967 = HEAP32[$1966>>2]|0;
      HEAP32[$1966>>2] = $1967;
      label = 560;
      break L355;
     }
    }
   }
   break;
  }
  case 17:  {
   $1968 = $4;
   $1969 = ((($1968)) + 24|0);
   $1970 = ((($1969)) + 32|0);
   $1971 = HEAP32[$1970>>2]|0;
   $1972 = ($1971|0)<(0);
   if ($1972) {
    label = 271;
   } else {
    $1973 = $4;
    $1974 = ((($1973)) + 24|0);
    $1975 = ((($1974)) + 32|0);
    $1976 = HEAP32[$1975>>2]|0;
    $1977 = (($1976) + 1)|0;
    HEAP32[$1975>>2] = $1977;
    $1978 = $4;
    $1979 = ((($1978)) + 132|0);
    $1980 = HEAP32[$1979>>2]|0;
    $1981 = ((($1980)) + 4|0);
    HEAP32[$1979>>2] = $1981;
    label = 560;
   }
   break;
  }
  case 18:  {
   $1982 = $4;
   $1983 = ((($1982)) + 24|0);
   $1984 = ((($1983)) + 32|0);
   $1985 = HEAP32[$1984>>2]|0;
   $1986 = $7;
   $1987 = ((($1986)) + 1|0);
   $1988 = HEAP8[$1987>>0]|0;
   $1989 = $1988&255;
   $1990 = ($1985|0)<($1989|0);
   if ($1990) {
    label = 271;
   } else {
    $1991 = $4;
    $1992 = ((($1991)) + 24|0);
    $1993 = ((($1992)) + 32|0);
    $1994 = HEAP32[$1993>>2]|0;
    $1995 = (($1994) + 1)|0;
    HEAP32[$1993>>2] = $1995;
    $1996 = $4;
    $1997 = ((($1996)) + 132|0);
    $1998 = HEAP32[$1997>>2]|0;
    $1999 = ((($1998)) + 2|0);
    HEAP32[$1997>>2] = $1999;
    label = 560;
   }
   break;
  }
  case 19:  {
   $2000 = $4;
   $2001 = ((($2000)) + 24|0);
   $2002 = ((($2001)) + 32|0);
   $2003 = HEAP32[$2002>>2]|0;
   $2004 = $7;
   $2005 = ((($2004)) + 1|0);
   $2006 = HEAP8[$2005>>0]|0;
   $2007 = $2006&255;
   $2008 = ($2003|0)<($2007|0);
   if ($2008) {
    label = 271;
   } else {
    $2009 = $4;
    $2010 = ((($2009)) + 24|0);
    $2011 = ((($2010)) + 32|0);
    $2012 = HEAP32[$2011>>2]|0;
    $2013 = (($2012) + 2)|0;
    HEAP32[$2011>>2] = $2013;
    $2014 = $4;
    $2015 = ((($2014)) + 132|0);
    $2016 = HEAP32[$2015>>2]|0;
    $2017 = ((($2016)) + 2|0);
    HEAP32[$2015>>2] = $2017;
    label = 560;
   }
   break;
  }
  case 20:  {
   $2018 = $4;
   $2019 = ((($2018)) + 24|0);
   $2020 = ((($2019)) + 32|0);
   $2021 = HEAP32[$2020>>2]|0;
   $2022 = $7;
   $2023 = ((($2022)) + 1|0);
   $2024 = HEAP8[$2023>>0]|0;
   $2025 = $2024&255;
   $2026 = ($2021|0)<($2025|0);
   if ($2026) {
    label = 271;
   } else {
    $2027 = $4;
    $2028 = ((($2027)) + 24|0);
    $2029 = ((($2028)) + 32|0);
    $2030 = HEAP32[$2029>>2]|0;
    $2031 = (($2030) + 4)|0;
    HEAP32[$2029>>2] = $2031;
    $2032 = $4;
    $2033 = ((($2032)) + 132|0);
    $2034 = HEAP32[$2033>>2]|0;
    $2035 = ((($2034)) + 2|0);
    HEAP32[$2033>>2] = $2035;
    label = 560;
   }
   break;
  }
  case 21:  {
   $2036 = $4;
   $2037 = ((($2036)) + 24|0);
   $2038 = ((($2037)) + 32|0);
   $2039 = HEAP32[$2038>>2]|0;
   $2040 = $7;
   $2041 = ((($2040)) + 1|0);
   $2042 = HEAP8[$2041>>0]|0;
   $2043 = $2042&255;
   $2044 = ($2039|0)<($2043|0);
   if ($2044) {
    label = 271;
   } else {
    $2045 = $7;
    $2046 = ((($2045)) + 1|0);
    $2047 = HEAP8[$2046>>0]|0;
    $2048 = $2047&255;
    $2049 = ($2048|0)<=(1);
    if ($2049) {
     $2050 = $7;
     $2051 = ((($2050)) + 1|0);
     $2052 = HEAP8[$2051>>0]|0;
     $2053 = $2052&255;
     $2054 = (0 - ($2053))|0;
     $2060 = $2054;
    } else {
     $2060 = -1;
    }
    $2055 = $4;
    $2056 = ((($2055)) + 24|0);
    $2057 = ((($2056)) + 32|0);
    $2058 = HEAP32[$2057>>2]|0;
    $2059 = (($2058) + ($2060))|0;
    HEAP32[$2057>>2] = $2059;
    $2061 = $4;
    $2062 = ((($2061)) + 132|0);
    $2063 = HEAP32[$2062>>2]|0;
    $2064 = ((($2063)) + 2|0);
    HEAP32[$2062>>2] = $2064;
    label = 560;
   }
   break;
  }
  case 22:  {
   $2065 = $4;
   $2066 = ((($2065)) + 24|0);
   $2067 = ((($2066)) + 32|0);
   $2068 = HEAP32[$2067>>2]|0;
   $2069 = $7;
   $2070 = ((($2069)) + 1|0);
   $2071 = HEAP8[$2070>>0]|0;
   $2072 = $2071&255;
   $2073 = ($2068|0)<($2072|0);
   if ($2073) {
    label = 271;
   } else {
    $2074 = $7;
    $2075 = ((($2074)) + 1|0);
    $2076 = HEAP8[$2075>>0]|0;
    $2077 = $2076&255;
    $2078 = ($2077|0)<=(2);
    if ($2078) {
     $2079 = $7;
     $2080 = ((($2079)) + 1|0);
     $2081 = HEAP8[$2080>>0]|0;
     $2082 = $2081&255;
     $2083 = (0 - ($2082))|0;
     $2089 = $2083;
    } else {
     $2089 = -2;
    }
    $2084 = $4;
    $2085 = ((($2084)) + 24|0);
    $2086 = ((($2085)) + 32|0);
    $2087 = HEAP32[$2086>>2]|0;
    $2088 = (($2087) + ($2089))|0;
    HEAP32[$2086>>2] = $2088;
    $2090 = $4;
    $2091 = ((($2090)) + 132|0);
    $2092 = HEAP32[$2091>>2]|0;
    $2093 = ((($2092)) + 2|0);
    HEAP32[$2091>>2] = $2093;
    label = 560;
   }
   break;
  }
  case 23:  {
   $2094 = $4;
   $2095 = ((($2094)) + 24|0);
   $2096 = ((($2095)) + 32|0);
   $2097 = HEAP32[$2096>>2]|0;
   $2098 = $7;
   $2099 = ((($2098)) + 1|0);
   $2100 = HEAP8[$2099>>0]|0;
   $2101 = $2100&255;
   $2102 = ($2097|0)<($2101|0);
   if ($2102) {
    label = 271;
   } else {
    $2103 = $7;
    $2104 = ((($2103)) + 1|0);
    $2105 = HEAP8[$2104>>0]|0;
    $2106 = $2105&255;
    $2107 = ($2106|0)<=(4);
    if ($2107) {
     $2108 = $7;
     $2109 = ((($2108)) + 1|0);
     $2110 = HEAP8[$2109>>0]|0;
     $2111 = $2110&255;
     $2112 = (0 - ($2111))|0;
     $2118 = $2112;
    } else {
     $2118 = -4;
    }
    $2113 = $4;
    $2114 = ((($2113)) + 24|0);
    $2115 = ((($2114)) + 32|0);
    $2116 = HEAP32[$2115>>2]|0;
    $2117 = (($2116) + ($2118))|0;
    HEAP32[$2115>>2] = $2117;
    $2119 = $4;
    $2120 = ((($2119)) + 132|0);
    $2121 = HEAP32[$2120>>2]|0;
    $2122 = ((($2121)) + 2|0);
    HEAP32[$2120>>2] = $2122;
    label = 560;
   }
   break;
  }
  case 24:  {
   $2123 = $4;
   $2124 = ((($2123)) + 24|0);
   $2125 = ((($2124)) + 32|0);
   $2126 = HEAP32[$2125>>2]|0;
   $2127 = ($2126|0)<(0);
   if ($2127) {
    label = 271;
   } else {
    $2128 = $4;
    $2129 = ((($2128)) + 24|0);
    $2130 = ((($2129)) + 32|0);
    $2131 = HEAP32[$2130>>2]|0;
    $2132 = (($2131) + 1)|0;
    HEAP32[$2130>>2] = $2132;
    $2133 = $4;
    $2134 = ((($2133)) + 132|0);
    $2135 = HEAP32[$2134>>2]|0;
    $2136 = ((($2135)) + 1|0);
    HEAP32[$2134>>2] = $2136;
    label = 560;
   }
   break;
  }
  case 25:  {
   $2137 = $4;
   $2138 = ((($2137)) + 24|0);
   $2139 = ((($2138)) + 32|0);
   $2140 = HEAP32[$2139>>2]|0;
   $2141 = ($2140|0)<(0);
   if ($2141) {
    label = 271;
   } else {
    $2142 = $4;
    $2143 = ((($2142)) + 24|0);
    $2144 = ((($2143)) + 32|0);
    $2145 = HEAP32[$2144>>2]|0;
    $2146 = (($2145) + 2)|0;
    HEAP32[$2144>>2] = $2146;
    $2147 = $4;
    $2148 = ((($2147)) + 132|0);
    $2149 = HEAP32[$2148>>2]|0;
    $2150 = ((($2149)) + 1|0);
    HEAP32[$2148>>2] = $2150;
    label = 560;
   }
   break;
  }
  case 26:  {
   $2151 = $4;
   $2152 = ((($2151)) + 24|0);
   $2153 = ((($2152)) + 32|0);
   $2154 = HEAP32[$2153>>2]|0;
   $2155 = ($2154|0)<(0);
   if ($2155) {
    label = 271;
   } else {
    $2156 = $4;
    $2157 = ((($2156)) + 24|0);
    $2158 = ((($2157)) + 32|0);
    $2159 = HEAP32[$2158>>2]|0;
    $2160 = (($2159) + 4)|0;
    HEAP32[$2158>>2] = $2160;
    $2161 = $4;
    $2162 = ((($2161)) + 132|0);
    $2163 = HEAP32[$2162>>2]|0;
    $2164 = ((($2163)) + 1|0);
    HEAP32[$2162>>2] = $2164;
    label = 560;
   }
   break;
  }
  case 27: case 31: case 29:  {
   $2165 = $4;
   $2166 = ((($2165)) + 24|0);
   $2167 = ((($2166)) + 32|0);
   $2168 = HEAP32[$2167>>2]|0;
   $2169 = ($2168|0)<(0);
   if ($2169) {
    label = 271;
   } else {
    $2170 = $4;
    $2171 = ((($2170)) + 24|0);
    $2172 = ((($2171)) + 32|0);
    $2173 = HEAP32[$2172>>2]|0;
    $2174 = (($2173) + 1)|0;
    HEAP32[$2172>>2] = $2174;
    $2175 = $4;
    $2176 = ((($2175)) + 132|0);
    $2177 = HEAP32[$2176>>2]|0;
    $2178 = ((($2177)) + 5|0);
    HEAP32[$2176>>2] = $2178;
    label = 560;
   }
   break;
  }
  case 28: case 30:  {
   $2179 = $4;
   $2180 = ((($2179)) + 24|0);
   $2181 = ((($2180)) + 32|0);
   $2182 = HEAP32[$2181>>2]|0;
   $2183 = ($2182|0)<(0);
   if ($2183) {
    label = 271;
   } else {
    $2184 = $4;
    $2185 = ((($2184)) + 24|0);
    $2186 = ((($2185)) + 32|0);
    $2187 = HEAP32[$2186>>2]|0;
    $2188 = (($2187) + 2)|0;
    HEAP32[$2186>>2] = $2188;
    $2189 = $4;
    $2190 = ((($2189)) + 132|0);
    $2191 = HEAP32[$2190>>2]|0;
    $2192 = ((($2191)) + 9|0);
    HEAP32[$2190>>2] = $2192;
    label = 560;
   }
   break;
  }
  case 32:  {
   $2193 = $4;
   $2194 = ((($2193)) + 24|0);
   $2195 = ((($2194)) + 32|0);
   $2196 = HEAP32[$2195>>2]|0;
   $2197 = ($2196|0)<(1);
   if ($2197) {
    label = 271;
   } else {
    $2198 = $4;
    $2199 = ((($2198)) + 24|0);
    $2200 = ((($2199)) + 32|0);
    $2201 = HEAP32[$2200>>2]|0;
    $2202 = (($2201) + 0)|0;
    HEAP32[$2200>>2] = $2202;
    $2203 = $4;
    $2204 = ((($2203)) + 132|0);
    $2205 = HEAP32[$2204>>2]|0;
    $2206 = ((($2205)) + 1|0);
    HEAP32[$2204>>2] = $2206;
    label = 560;
   }
   break;
  }
  case 33:  {
   $2207 = $4;
   $2208 = ((($2207)) + 24|0);
   $2209 = ((($2208)) + 32|0);
   $2210 = HEAP32[$2209>>2]|0;
   $2211 = ($2210|0)<(1);
   if ($2211) {
    label = 271;
   } else {
    $2212 = $4;
    $2213 = ((($2212)) + 24|0);
    $2214 = ((($2213)) + 32|0);
    $2215 = HEAP32[$2214>>2]|0;
    $2216 = (($2215) + 0)|0;
    HEAP32[$2214>>2] = $2216;
    $2217 = $4;
    $2218 = ((($2217)) + 132|0);
    $2219 = HEAP32[$2218>>2]|0;
    $2220 = ((($2219)) + 1|0);
    HEAP32[$2218>>2] = $2220;
    label = 560;
   }
   break;
  }
  case 34:  {
   $2221 = $4;
   $2222 = ((($2221)) + 24|0);
   $2223 = ((($2222)) + 32|0);
   $2224 = HEAP32[$2223>>2]|0;
   $2225 = ($2224|0)<(1);
   if ($2225) {
    label = 271;
   } else {
    $2226 = $4;
    $2227 = ((($2226)) + 24|0);
    $2228 = ((($2227)) + 32|0);
    $2229 = HEAP32[$2228>>2]|0;
    $2230 = (($2229) + 0)|0;
    HEAP32[$2228>>2] = $2230;
    $2231 = $4;
    $2232 = ((($2231)) + 132|0);
    $2233 = HEAP32[$2232>>2]|0;
    $2234 = ((($2233)) + 1|0);
    HEAP32[$2232>>2] = $2234;
    label = 560;
   }
   break;
  }
  case 35:  {
   $2235 = $4;
   $2236 = ((($2235)) + 24|0);
   $2237 = ((($2236)) + 32|0);
   $2238 = HEAP32[$2237>>2]|0;
   $2239 = ($2238|0)<(1);
   if ($2239) {
    label = 271;
   } else {
    $2240 = $4;
    $2241 = ((($2240)) + 24|0);
    $2242 = ((($2241)) + 32|0);
    $2243 = HEAP32[$2242>>2]|0;
    $2244 = (($2243) + 1)|0;
    HEAP32[$2242>>2] = $2244;
    $2245 = $4;
    $2246 = ((($2245)) + 132|0);
    $2247 = HEAP32[$2246>>2]|0;
    $2248 = ((($2247)) + 1|0);
    HEAP32[$2246>>2] = $2248;
    label = 560;
   }
   break;
  }
  case 36:  {
   $2249 = $4;
   $2250 = ((($2249)) + 24|0);
   $2251 = ((($2250)) + 32|0);
   $2252 = HEAP32[$2251>>2]|0;
   $2253 = ($2252|0)<(1);
   if ($2253) {
    label = 271;
   } else {
    $2254 = $4;
    $2255 = ((($2254)) + 24|0);
    $2256 = ((($2255)) + 32|0);
    $2257 = HEAP32[$2256>>2]|0;
    $2258 = (($2257) + 3)|0;
    HEAP32[$2256>>2] = $2258;
    $2259 = $4;
    $2260 = ((($2259)) + 132|0);
    $2261 = HEAP32[$2260>>2]|0;
    $2262 = ((($2261)) + 1|0);
    HEAP32[$2260>>2] = $2262;
    label = 560;
   }
   break;
  }
  case 37:  {
   $2263 = $4;
   $2264 = ((($2263)) + 24|0);
   $2265 = ((($2264)) + 32|0);
   $2266 = HEAP32[$2265>>2]|0;
   $2267 = ($2266|0)<(2);
   if ($2267) {
    label = 271;
   } else {
    $2268 = $4;
    $2269 = ((($2268)) + 24|0);
    $2270 = ((($2269)) + 32|0);
    $2271 = HEAP32[$2270>>2]|0;
    $2272 = (($2271) + -2)|0;
    HEAP32[$2270>>2] = $2272;
    $2273 = $4;
    $2274 = ((($2273)) + 132|0);
    $2275 = HEAP32[$2274>>2]|0;
    $2276 = ((($2275)) + 1|0);
    HEAP32[$2274>>2] = $2276;
    label = 560;
   }
   break;
  }
  case 38:  {
   $2277 = $4;
   $2278 = ((($2277)) + 24|0);
   $2279 = ((($2278)) + 32|0);
   $2280 = HEAP32[$2279>>2]|0;
   $2281 = ($2280|0)<(2);
   if ($2281) {
    label = 271;
   } else {
    $2282 = $4;
    $2283 = ((($2282)) + 24|0);
    $2284 = ((($2283)) + 32|0);
    $2285 = HEAP32[$2284>>2]|0;
    $2286 = (($2285) + -2)|0;
    HEAP32[$2284>>2] = $2286;
    $2287 = $4;
    $2288 = ((($2287)) + 132|0);
    $2289 = HEAP32[$2288>>2]|0;
    $2290 = ((($2289)) + 1|0);
    HEAP32[$2288>>2] = $2290;
    label = 560;
   }
   break;
  }
  case 39:  {
   $2291 = $4;
   $2292 = ((($2291)) + 24|0);
   $2293 = ((($2292)) + 32|0);
   $2294 = HEAP32[$2293>>2]|0;
   $2295 = ($2294|0)<(2);
   if ($2295) {
    label = 271;
   } else {
    $2296 = $4;
    $2297 = ((($2296)) + 24|0);
    $2298 = ((($2297)) + 32|0);
    $2299 = HEAP32[$2298>>2]|0;
    $2300 = (($2299) + -2)|0;
    HEAP32[$2298>>2] = $2300;
    $2301 = $4;
    $2302 = ((($2301)) + 132|0);
    $2303 = HEAP32[$2302>>2]|0;
    $2304 = ((($2303)) + 1|0);
    HEAP32[$2302>>2] = $2304;
    label = 560;
   }
   break;
  }
  case 40:  {
   $2305 = $4;
   $2306 = ((($2305)) + 24|0);
   $2307 = ((($2306)) + 32|0);
   $2308 = HEAP32[$2307>>2]|0;
   $2309 = ($2308|0)<(3);
   if ($2309) {
    label = 271;
   } else {
    $2310 = $4;
    $2311 = ((($2310)) + 24|0);
    $2312 = ((($2311)) + 32|0);
    $2313 = HEAP32[$2312>>2]|0;
    $2314 = (($2313) + -3)|0;
    HEAP32[$2312>>2] = $2314;
    $2315 = $4;
    $2316 = ((($2315)) + 132|0);
    $2317 = HEAP32[$2316>>2]|0;
    $2318 = ((($2317)) + 1|0);
    HEAP32[$2316>>2] = $2318;
    label = 560;
   }
   break;
  }
  case 41:  {
   $2319 = $4;
   $2320 = ((($2319)) + 24|0);
   $2321 = ((($2320)) + 32|0);
   $2322 = HEAP32[$2321>>2]|0;
   $2323 = ($2322|0)<(5);
   if ($2323) {
    label = 271;
   } else {
    $2324 = $4;
    $2325 = ((($2324)) + 24|0);
    $2326 = ((($2325)) + 32|0);
    $2327 = HEAP32[$2326>>2]|0;
    $2328 = (($2327) + -5)|0;
    HEAP32[$2326>>2] = $2328;
    $2329 = $4;
    $2330 = ((($2329)) + 132|0);
    $2331 = HEAP32[$2330>>2]|0;
    $2332 = ((($2331)) + 1|0);
    HEAP32[$2330>>2] = $2332;
    label = 560;
   }
   break;
  }
  case 42:  {
   $2333 = $4;
   $2334 = ((($2333)) + 24|0);
   $2335 = ((($2334)) + 32|0);
   $2336 = HEAP32[$2335>>2]|0;
   $2337 = ($2336|0)<(0);
   if ($2337) {
    label = 271;
   } else {
    $2338 = $4;
    $2339 = ((($2338)) + 24|0);
    $2340 = ((($2339)) + 32|0);
    $2341 = HEAP32[$2340>>2]|0;
    $2342 = (($2341) + 1)|0;
    HEAP32[$2340>>2] = $2342;
    $2343 = $4;
    $2344 = ((($2343)) + 132|0);
    $2345 = HEAP32[$2344>>2]|0;
    $2346 = ((($2345)) + 4|0);
    HEAP32[$2344>>2] = $2346;
    label = 560;
   }
   break;
  }
  case 43:  {
   $2347 = $4;
   $2348 = ((($2347)) + 24|0);
   $2349 = ((($2348)) + 32|0);
   $2350 = HEAP32[$2349>>2]|0;
   $2351 = ($2350|0)<(0);
   if ($2351) {
    label = 271;
   } else {
    $2352 = $4;
    $2353 = ((($2352)) + 24|0);
    $2354 = ((($2353)) + 32|0);
    $2355 = HEAP32[$2354>>2]|0;
    $2356 = (($2355) + 2)|0;
    HEAP32[$2354>>2] = $2356;
    $2357 = $4;
    $2358 = ((($2357)) + 132|0);
    $2359 = HEAP32[$2358>>2]|0;
    $2360 = ((($2359)) + 4|0);
    HEAP32[$2358>>2] = $2360;
    label = 560;
   }
   break;
  }
  case 45:  {
   $2361 = $4;
   $2362 = ((($2361)) + 24|0);
   $2363 = ((($2362)) + 32|0);
   $2364 = HEAP32[$2363>>2]|0;
   $2365 = ($2364|0)<(1);
   if ($2365) {
    label = 271;
   } else {
    $2366 = $4;
    $2367 = ((($2366)) + 24|0);
    $2368 = ((($2367)) + 32|0);
    $2369 = HEAP32[$2368>>2]|0;
    $2370 = (($2369) + -1)|0;
    HEAP32[$2368>>2] = $2370;
    $2371 = $4;
    $2372 = ((($2371)) + 132|0);
    $2373 = HEAP32[$2372>>2]|0;
    $2374 = ((($2373)) + 4|0);
    HEAP32[$2372>>2] = $2374;
    label = 560;
   }
   break;
  }
  case 46:  {
   $2375 = $4;
   $2376 = ((($2375)) + 24|0);
   $2377 = ((($2376)) + 32|0);
   $2378 = HEAP32[$2377>>2]|0;
   $2379 = ($2378|0)<(2);
   if ($2379) {
    label = 271;
   } else {
    $2380 = $4;
    $2381 = ((($2380)) + 24|0);
    $2382 = ((($2381)) + 32|0);
    $2383 = HEAP32[$2382>>2]|0;
    $2384 = (($2383) + -2)|0;
    HEAP32[$2382>>2] = $2384;
    $2385 = $4;
    $2386 = ((($2385)) + 132|0);
    $2387 = HEAP32[$2386>>2]|0;
    $2388 = ((($2387)) + 4|0);
    HEAP32[$2386>>2] = $2388;
    label = 560;
   }
   break;
  }
  case 47:  {
   $2389 = $4;
   $2390 = ((($2389)) + 24|0);
   $2391 = ((($2390)) + 32|0);
   $2392 = HEAP32[$2391>>2]|0;
   $2393 = ($2392|0)<(2);
   if ($2393) {
    label = 271;
   } else {
    $2394 = $4;
    $2395 = ((($2394)) + 24|0);
    $2396 = ((($2395)) + 32|0);
    $2397 = HEAP32[$2396>>2]|0;
    $2398 = (($2397) + -2)|0;
    HEAP32[$2396>>2] = $2398;
    $2399 = $4;
    $2400 = ((($2399)) + 132|0);
    $2401 = HEAP32[$2400>>2]|0;
    $2402 = ((($2401)) + 4|0);
    HEAP32[$2400>>2] = $2402;
    label = 560;
   }
   break;
  }
  case 48:  {
   $2403 = $4;
   $2404 = ((($2403)) + 24|0);
   $2405 = ((($2404)) + 32|0);
   $2406 = HEAP32[$2405>>2]|0;
   $2407 = ($2406|0)<(1);
   if ($2407) {
    label = 271;
   } else {
    $2408 = $4;
    $2409 = ((($2408)) + 24|0);
    $2410 = ((($2409)) + 32|0);
    $2411 = HEAP32[$2410>>2]|0;
    $2412 = (($2411) + 0)|0;
    HEAP32[$2410>>2] = $2412;
    $2413 = $4;
    $2414 = ((($2413)) + 132|0);
    $2415 = HEAP32[$2414>>2]|0;
    $2416 = ((($2415)) + 1|0);
    HEAP32[$2414>>2] = $2416;
    label = 560;
   }
   break;
  }
  case 49:  {
   $2417 = $4;
   $2418 = ((($2417)) + 24|0);
   $2419 = ((($2418)) + 32|0);
   $2420 = HEAP32[$2419>>2]|0;
   $2421 = ($2420|0)<(2);
   if ($2421) {
    label = 271;
   } else {
    $2422 = $4;
    $2423 = ((($2422)) + 24|0);
    $2424 = ((($2423)) + 32|0);
    $2425 = HEAP32[$2424>>2]|0;
    $2426 = (($2425) + -1)|0;
    HEAP32[$2424>>2] = $2426;
    $2427 = $4;
    $2428 = ((($2427)) + 132|0);
    $2429 = HEAP32[$2428>>2]|0;
    $2430 = ((($2429)) + 1|0);
    HEAP32[$2428>>2] = $2430;
    label = 560;
   }
   break;
  }
  case 50:  {
   $2431 = $4;
   $2432 = ((($2431)) + 24|0);
   $2433 = ((($2432)) + 32|0);
   $2434 = HEAP32[$2433>>2]|0;
   $2435 = ($2434|0)<(2);
   if ($2435) {
    label = 271;
   } else {
    $2436 = $4;
    $2437 = ((($2436)) + 24|0);
    $2438 = ((($2437)) + 32|0);
    $2439 = HEAP32[$2438>>2]|0;
    $2440 = (($2439) + -1)|0;
    HEAP32[$2438>>2] = $2440;
    $2441 = $4;
    $2442 = ((($2441)) + 132|0);
    $2443 = HEAP32[$2442>>2]|0;
    $2444 = ((($2443)) + 1|0);
    HEAP32[$2442>>2] = $2444;
    label = 560;
   }
   break;
  }
  case 51:  {
   $2445 = $4;
   $2446 = ((($2445)) + 24|0);
   $2447 = ((($2446)) + 32|0);
   $2448 = HEAP32[$2447>>2]|0;
   $2449 = ($2448|0)<(2);
   if ($2449) {
    label = 271;
   } else {
    $2450 = $4;
    $2451 = ((($2450)) + 24|0);
    $2452 = ((($2451)) + 32|0);
    $2453 = HEAP32[$2452>>2]|0;
    $2454 = (($2453) + -1)|0;
    HEAP32[$2452>>2] = $2454;
    $2455 = $4;
    $2456 = ((($2455)) + 132|0);
    $2457 = HEAP32[$2456>>2]|0;
    $2458 = ((($2457)) + 1|0);
    HEAP32[$2456>>2] = $2458;
    label = 560;
   }
   break;
  }
  case 52:  {
   $2459 = $4;
   $2460 = ((($2459)) + 24|0);
   $2461 = ((($2460)) + 32|0);
   $2462 = HEAP32[$2461>>2]|0;
   $2463 = ($2462|0)<(2);
   if ($2463) {
    label = 271;
   } else {
    $2464 = $4;
    $2465 = ((($2464)) + 24|0);
    $2466 = ((($2465)) + 32|0);
    $2467 = HEAP32[$2466>>2]|0;
    $2468 = (($2467) + -1)|0;
    HEAP32[$2466>>2] = $2468;
    $2469 = $4;
    $2470 = ((($2469)) + 132|0);
    $2471 = HEAP32[$2470>>2]|0;
    $2472 = ((($2471)) + 1|0);
    HEAP32[$2470>>2] = $2472;
    label = 560;
   }
   break;
  }
  case 53:  {
   $2473 = $4;
   $2474 = ((($2473)) + 24|0);
   $2475 = ((($2474)) + 32|0);
   $2476 = HEAP32[$2475>>2]|0;
   $2477 = ($2476|0)<(2);
   if ($2477) {
    label = 271;
   } else {
    $2478 = $4;
    $2479 = ((($2478)) + 24|0);
    $2480 = ((($2479)) + 32|0);
    $2481 = HEAP32[$2480>>2]|0;
    $2482 = (($2481) + -1)|0;
    HEAP32[$2480>>2] = $2482;
    $2483 = $4;
    $2484 = ((($2483)) + 132|0);
    $2485 = HEAP32[$2484>>2]|0;
    $2486 = ((($2485)) + 1|0);
    HEAP32[$2484>>2] = $2486;
    label = 560;
   }
   break;
  }
  case 54:  {
   $2487 = $4;
   $2488 = ((($2487)) + 24|0);
   $2489 = ((($2488)) + 32|0);
   $2490 = HEAP32[$2489>>2]|0;
   $2491 = ($2490|0)<(2);
   if ($2491) {
    label = 271;
   } else {
    $2492 = $4;
    $2493 = ((($2492)) + 24|0);
    $2494 = ((($2493)) + 32|0);
    $2495 = HEAP32[$2494>>2]|0;
    $2496 = (($2495) + -1)|0;
    HEAP32[$2494>>2] = $2496;
    $2497 = $4;
    $2498 = ((($2497)) + 132|0);
    $2499 = HEAP32[$2498>>2]|0;
    $2500 = ((($2499)) + 1|0);
    HEAP32[$2498>>2] = $2500;
    label = 560;
   }
   break;
  }
  case 56:  {
   $2501 = $4;
   $2502 = ((($2501)) + 24|0);
   $2503 = ((($2502)) + 32|0);
   $2504 = HEAP32[$2503>>2]|0;
   $2505 = ($2504|0)<(2);
   if ($2505) {
    label = 271;
   } else {
    $2506 = $4;
    $2507 = ((($2506)) + 24|0);
    $2508 = ((($2507)) + 32|0);
    $2509 = HEAP32[$2508>>2]|0;
    $2510 = (($2509) + -1)|0;
    HEAP32[$2508>>2] = $2510;
    $2511 = $4;
    $2512 = ((($2511)) + 132|0);
    $2513 = HEAP32[$2512>>2]|0;
    $2514 = ((($2513)) + 1|0);
    HEAP32[$2512>>2] = $2514;
    label = 560;
   }
   break;
  }
  case 57:  {
   $2515 = $4;
   $2516 = ((($2515)) + 24|0);
   $2517 = ((($2516)) + 32|0);
   $2518 = HEAP32[$2517>>2]|0;
   $2519 = ($2518|0)<(2);
   if ($2519) {
    label = 271;
   } else {
    $2520 = $4;
    $2521 = ((($2520)) + 24|0);
    $2522 = ((($2521)) + 32|0);
    $2523 = HEAP32[$2522>>2]|0;
    $2524 = (($2523) + -1)|0;
    HEAP32[$2522>>2] = $2524;
    $2525 = $4;
    $2526 = ((($2525)) + 132|0);
    $2527 = HEAP32[$2526>>2]|0;
    $2528 = ((($2527)) + 1|0);
    HEAP32[$2526>>2] = $2528;
    label = 560;
   }
   break;
  }
  case 58:  {
   $2529 = $4;
   $2530 = ((($2529)) + 24|0);
   $2531 = ((($2530)) + 32|0);
   $2532 = HEAP32[$2531>>2]|0;
   $2533 = ($2532|0)<(2);
   if ($2533) {
    label = 271;
   } else {
    $2534 = $4;
    $2535 = ((($2534)) + 24|0);
    $2536 = ((($2535)) + 32|0);
    $2537 = HEAP32[$2536>>2]|0;
    $2538 = (($2537) + -1)|0;
    HEAP32[$2536>>2] = $2538;
    $2539 = $4;
    $2540 = ((($2539)) + 132|0);
    $2541 = HEAP32[$2540>>2]|0;
    $2542 = ((($2541)) + 1|0);
    HEAP32[$2540>>2] = $2542;
    label = 560;
   }
   break;
  }
  case 59:  {
   $2543 = $4;
   $2544 = ((($2543)) + 24|0);
   $2545 = ((($2544)) + 32|0);
   $2546 = HEAP32[$2545>>2]|0;
   $2547 = ($2546|0)<(2);
   if ($2547) {
    label = 271;
   } else {
    $2548 = $4;
    $2549 = ((($2548)) + 24|0);
    $2550 = ((($2549)) + 32|0);
    $2551 = HEAP32[$2550>>2]|0;
    $2552 = (($2551) + -1)|0;
    HEAP32[$2550>>2] = $2552;
    $2553 = $4;
    $2554 = ((($2553)) + 132|0);
    $2555 = HEAP32[$2554>>2]|0;
    $2556 = ((($2555)) + 1|0);
    HEAP32[$2554>>2] = $2556;
    label = 560;
   }
   break;
  }
  case 60:  {
   $2557 = $4;
   $2558 = ((($2557)) + 24|0);
   $2559 = ((($2558)) + 32|0);
   $2560 = HEAP32[$2559>>2]|0;
   $2561 = ($2560|0)<(2);
   if ($2561) {
    label = 271;
   } else {
    $2562 = $4;
    $2563 = ((($2562)) + 24|0);
    $2564 = ((($2563)) + 32|0);
    $2565 = HEAP32[$2564>>2]|0;
    $2566 = (($2565) + -1)|0;
    HEAP32[$2564>>2] = $2566;
    $2567 = $4;
    $2568 = ((($2567)) + 132|0);
    $2569 = HEAP32[$2568>>2]|0;
    $2570 = ((($2569)) + 1|0);
    HEAP32[$2568>>2] = $2570;
    label = 560;
   }
   break;
  }
  case 62:  {
   $2571 = $4;
   $2572 = ((($2571)) + 24|0);
   $2573 = ((($2572)) + 32|0);
   $2574 = HEAP32[$2573>>2]|0;
   $2575 = ($2574|0)<(1);
   if ($2575) {
    label = 271;
   } else {
    $2576 = $4;
    $2577 = ((($2576)) + 24|0);
    $2578 = ((($2577)) + 32|0);
    $2579 = HEAP32[$2578>>2]|0;
    $2580 = (($2579) + 1)|0;
    HEAP32[$2578>>2] = $2580;
    $2581 = $4;
    $2582 = ((($2581)) + 132|0);
    $2583 = HEAP32[$2582>>2]|0;
    $2584 = ((($2583)) + 1|0);
    HEAP32[$2582>>2] = $2584;
    label = 560;
   }
   break;
  }
  case 63:  {
   $2585 = $4;
   $2586 = ((($2585)) + 24|0);
   $2587 = ((($2586)) + 32|0);
   $2588 = HEAP32[$2587>>2]|0;
   $2589 = ($2588|0)<(1);
   if ($2589) {
    label = 271;
   } else {
    $2590 = $4;
    $2591 = ((($2590)) + 24|0);
    $2592 = ((($2591)) + 32|0);
    $2593 = HEAP32[$2592>>2]|0;
    $2594 = (($2593) + 0)|0;
    HEAP32[$2592>>2] = $2594;
    $2595 = $4;
    $2596 = ((($2595)) + 132|0);
    $2597 = HEAP32[$2596>>2]|0;
    $2598 = ((($2597)) + 2|0);
    HEAP32[$2596>>2] = $2598;
    label = 560;
   }
   break;
  }
  case 64:  {
   $2599 = $4;
   $2600 = ((($2599)) + 24|0);
   $2601 = ((($2600)) + 32|0);
   $2602 = HEAP32[$2601>>2]|0;
   $2603 = ($2602|0)<(2);
   if ($2603) {
    label = 271;
   } else {
    $2604 = $4;
    $2605 = ((($2604)) + 24|0);
    $2606 = ((($2605)) + 32|0);
    $2607 = HEAP32[$2606>>2]|0;
    $2608 = (($2607) + 0)|0;
    HEAP32[$2606>>2] = $2608;
    $2609 = $4;
    $2610 = ((($2609)) + 132|0);
    $2611 = HEAP32[$2610>>2]|0;
    $2612 = ((($2611)) + 1|0);
    HEAP32[$2610>>2] = $2612;
    label = 560;
   }
   break;
  }
  case 65:  {
   $2613 = $4;
   $2614 = ((($2613)) + 24|0);
   $2615 = ((($2614)) + 32|0);
   $2616 = HEAP32[$2615>>2]|0;
   $2617 = ($2616|0)<(4);
   if ($2617) {
    label = 271;
   } else {
    $2618 = $4;
    $2619 = ((($2618)) + 24|0);
    $2620 = ((($2619)) + 32|0);
    $2621 = HEAP32[$2620>>2]|0;
    $2622 = (($2621) + -2)|0;
    HEAP32[$2620>>2] = $2622;
    $2623 = $4;
    $2624 = ((($2623)) + 132|0);
    $2625 = HEAP32[$2624>>2]|0;
    $2626 = ((($2625)) + 1|0);
    HEAP32[$2624>>2] = $2626;
    label = 560;
   }
   break;
  }
  case 66:  {
   $2627 = $4;
   $2628 = ((($2627)) + 24|0);
   $2629 = ((($2628)) + 32|0);
   $2630 = HEAP32[$2629>>2]|0;
   $2631 = ($2630|0)<(4);
   if ($2631) {
    label = 271;
   } else {
    $2632 = $4;
    $2633 = ((($2632)) + 24|0);
    $2634 = ((($2633)) + 32|0);
    $2635 = HEAP32[$2634>>2]|0;
    $2636 = (($2635) + -2)|0;
    HEAP32[$2634>>2] = $2636;
    $2637 = $4;
    $2638 = ((($2637)) + 132|0);
    $2639 = HEAP32[$2638>>2]|0;
    $2640 = ((($2639)) + 1|0);
    HEAP32[$2638>>2] = $2640;
    label = 560;
   }
   break;
  }
  case 67:  {
   $2641 = $4;
   $2642 = ((($2641)) + 24|0);
   $2643 = ((($2642)) + 32|0);
   $2644 = HEAP32[$2643>>2]|0;
   $2645 = ($2644|0)<(4);
   if ($2645) {
    label = 271;
   } else {
    $2646 = $4;
    $2647 = ((($2646)) + 24|0);
    $2648 = ((($2647)) + 32|0);
    $2649 = HEAP32[$2648>>2]|0;
    $2650 = (($2649) + -2)|0;
    HEAP32[$2648>>2] = $2650;
    $2651 = $4;
    $2652 = ((($2651)) + 132|0);
    $2653 = HEAP32[$2652>>2]|0;
    $2654 = ((($2653)) + 1|0);
    HEAP32[$2652>>2] = $2654;
    label = 560;
   }
   break;
  }
  case 68:  {
   $2655 = $4;
   $2656 = ((($2655)) + 24|0);
   $2657 = ((($2656)) + 32|0);
   $2658 = HEAP32[$2657>>2]|0;
   $2659 = ($2658|0)<(4);
   if ($2659) {
    label = 271;
   } else {
    $2660 = $4;
    $2661 = ((($2660)) + 24|0);
    $2662 = ((($2661)) + 32|0);
    $2663 = HEAP32[$2662>>2]|0;
    $2664 = (($2663) + -2)|0;
    HEAP32[$2662>>2] = $2664;
    $2665 = $4;
    $2666 = ((($2665)) + 132|0);
    $2667 = HEAP32[$2666>>2]|0;
    $2668 = ((($2667)) + 1|0);
    HEAP32[$2666>>2] = $2668;
    label = 560;
   }
   break;
  }
  case 69:  {
   $2669 = $4;
   $2670 = ((($2669)) + 24|0);
   $2671 = ((($2670)) + 32|0);
   $2672 = HEAP32[$2671>>2]|0;
   $2673 = ($2672|0)<(4);
   if ($2673) {
    label = 271;
   } else {
    $2674 = $4;
    $2675 = ((($2674)) + 24|0);
    $2676 = ((($2675)) + 32|0);
    $2677 = HEAP32[$2676>>2]|0;
    $2678 = (($2677) + -2)|0;
    HEAP32[$2676>>2] = $2678;
    $2679 = $4;
    $2680 = ((($2679)) + 132|0);
    $2681 = HEAP32[$2680>>2]|0;
    $2682 = ((($2681)) + 1|0);
    HEAP32[$2680>>2] = $2682;
    label = 560;
   }
   break;
  }
  case 70:  {
   $2683 = $4;
   $2684 = ((($2683)) + 24|0);
   $2685 = ((($2684)) + 32|0);
   $2686 = HEAP32[$2685>>2]|0;
   $2687 = ($2686|0)<(4);
   if ($2687) {
    label = 271;
   } else {
    $2688 = $4;
    $2689 = ((($2688)) + 24|0);
    $2690 = ((($2689)) + 32|0);
    $2691 = HEAP32[$2690>>2]|0;
    $2692 = (($2691) + -2)|0;
    HEAP32[$2690>>2] = $2692;
    $2693 = $4;
    $2694 = ((($2693)) + 132|0);
    $2695 = HEAP32[$2694>>2]|0;
    $2696 = ((($2695)) + 1|0);
    HEAP32[$2694>>2] = $2696;
    label = 560;
   }
   break;
  }
  case 72:  {
   $2697 = $4;
   $2698 = ((($2697)) + 24|0);
   $2699 = ((($2698)) + 32|0);
   $2700 = HEAP32[$2699>>2]|0;
   $2701 = ($2700|0)<(4);
   if ($2701) {
    label = 271;
   } else {
    $2702 = $4;
    $2703 = ((($2702)) + 24|0);
    $2704 = ((($2703)) + 32|0);
    $2705 = HEAP32[$2704>>2]|0;
    $2706 = (($2705) + -3)|0;
    HEAP32[$2704>>2] = $2706;
    $2707 = $4;
    $2708 = ((($2707)) + 132|0);
    $2709 = HEAP32[$2708>>2]|0;
    $2710 = ((($2709)) + 1|0);
    HEAP32[$2708>>2] = $2710;
    label = 560;
   }
   break;
  }
  case 73:  {
   $2711 = $4;
   $2712 = ((($2711)) + 24|0);
   $2713 = ((($2712)) + 32|0);
   $2714 = HEAP32[$2713>>2]|0;
   $2715 = ($2714|0)<(4);
   if ($2715) {
    label = 271;
   } else {
    $2716 = $4;
    $2717 = ((($2716)) + 24|0);
    $2718 = ((($2717)) + 32|0);
    $2719 = HEAP32[$2718>>2]|0;
    $2720 = (($2719) + -3)|0;
    HEAP32[$2718>>2] = $2720;
    $2721 = $4;
    $2722 = ((($2721)) + 132|0);
    $2723 = HEAP32[$2722>>2]|0;
    $2724 = ((($2723)) + 1|0);
    HEAP32[$2722>>2] = $2724;
    label = 560;
   }
   break;
  }
  case 74:  {
   $2725 = $4;
   $2726 = ((($2725)) + 24|0);
   $2727 = ((($2726)) + 32|0);
   $2728 = HEAP32[$2727>>2]|0;
   $2729 = ($2728|0)<(3);
   if ($2729) {
    label = 271;
   } else {
    $2730 = $4;
    $2731 = ((($2730)) + 24|0);
    $2732 = ((($2731)) + 32|0);
    $2733 = HEAP32[$2732>>2]|0;
    $2734 = (($2733) + -1)|0;
    HEAP32[$2732>>2] = $2734;
    $2735 = $4;
    $2736 = ((($2735)) + 132|0);
    $2737 = HEAP32[$2736>>2]|0;
    $2738 = ((($2737)) + 1|0);
    HEAP32[$2736>>2] = $2738;
    label = 560;
   }
   break;
  }
  case 75:  {
   $2739 = $4;
   $2740 = ((($2739)) + 24|0);
   $2741 = ((($2740)) + 32|0);
   $2742 = HEAP32[$2741>>2]|0;
   $2743 = ($2742|0)<(3);
   if ($2743) {
    label = 271;
   } else {
    $2744 = $4;
    $2745 = ((($2744)) + 24|0);
    $2746 = ((($2745)) + 32|0);
    $2747 = HEAP32[$2746>>2]|0;
    $2748 = (($2747) + -1)|0;
    HEAP32[$2746>>2] = $2748;
    $2749 = $4;
    $2750 = ((($2749)) + 132|0);
    $2751 = HEAP32[$2750>>2]|0;
    $2752 = ((($2751)) + 1|0);
    HEAP32[$2750>>2] = $2752;
    label = 560;
   }
   break;
  }
  case 76:  {
   $2753 = $4;
   $2754 = ((($2753)) + 24|0);
   $2755 = ((($2754)) + 32|0);
   $2756 = HEAP32[$2755>>2]|0;
   $2757 = ($2756|0)<(3);
   if ($2757) {
    label = 271;
   } else {
    $2758 = $4;
    $2759 = ((($2758)) + 24|0);
    $2760 = ((($2759)) + 32|0);
    $2761 = HEAP32[$2760>>2]|0;
    $2762 = (($2761) + -1)|0;
    HEAP32[$2760>>2] = $2762;
    $2763 = $4;
    $2764 = ((($2763)) + 132|0);
    $2765 = HEAP32[$2764>>2]|0;
    $2766 = ((($2765)) + 1|0);
    HEAP32[$2764>>2] = $2766;
    label = 560;
   }
   break;
  }
  case 80:  {
   $2767 = $4;
   $2768 = ((($2767)) + 24|0);
   $2769 = ((($2768)) + 32|0);
   $2770 = HEAP32[$2769>>2]|0;
   $2771 = ($2770|0)<(1);
   if ($2771) {
    label = 271;
   } else {
    $2772 = $4;
    $2773 = ((($2772)) + 24|0);
    $2774 = ((($2773)) + 32|0);
    $2775 = HEAP32[$2774>>2]|0;
    $2776 = (($2775) + 0)|0;
    HEAP32[$2774>>2] = $2776;
    $2777 = $4;
    $2778 = ((($2777)) + 132|0);
    $2779 = HEAP32[$2778>>2]|0;
    $2780 = ((($2779)) + 1|0);
    HEAP32[$2778>>2] = $2780;
    label = 560;
   }
   break;
  }
  case 81:  {
   $2781 = $4;
   $2782 = ((($2781)) + 24|0);
   $2783 = ((($2782)) + 32|0);
   $2784 = HEAP32[$2783>>2]|0;
   $2785 = ($2784|0)<(2);
   if ($2785) {
    label = 271;
   } else {
    $2786 = $4;
    $2787 = ((($2786)) + 24|0);
    $2788 = ((($2787)) + 32|0);
    $2789 = HEAP32[$2788>>2]|0;
    $2790 = (($2789) + -1)|0;
    HEAP32[$2788>>2] = $2790;
    $2791 = $4;
    $2792 = ((($2791)) + 132|0);
    $2793 = HEAP32[$2792>>2]|0;
    $2794 = ((($2793)) + 1|0);
    HEAP32[$2792>>2] = $2794;
    label = 560;
   }
   break;
  }
  case 82:  {
   $2795 = $4;
   $2796 = ((($2795)) + 24|0);
   $2797 = ((($2796)) + 32|0);
   $2798 = HEAP32[$2797>>2]|0;
   $2799 = ($2798|0)<(2);
   if ($2799) {
    label = 271;
   } else {
    $2800 = $4;
    $2801 = ((($2800)) + 24|0);
    $2802 = ((($2801)) + 32|0);
    $2803 = HEAP32[$2802>>2]|0;
    $2804 = (($2803) + -1)|0;
    HEAP32[$2802>>2] = $2804;
    $2805 = $4;
    $2806 = ((($2805)) + 132|0);
    $2807 = HEAP32[$2806>>2]|0;
    $2808 = ((($2807)) + 1|0);
    HEAP32[$2806>>2] = $2808;
    label = 560;
   }
   break;
  }
  case 83:  {
   $2809 = $4;
   $2810 = ((($2809)) + 24|0);
   $2811 = ((($2810)) + 32|0);
   $2812 = HEAP32[$2811>>2]|0;
   $2813 = ($2812|0)<(2);
   if ($2813) {
    label = 271;
   } else {
    $2814 = $4;
    $2815 = ((($2814)) + 24|0);
    $2816 = ((($2815)) + 32|0);
    $2817 = HEAP32[$2816>>2]|0;
    $2818 = (($2817) + -1)|0;
    HEAP32[$2816>>2] = $2818;
    $2819 = $4;
    $2820 = ((($2819)) + 132|0);
    $2821 = HEAP32[$2820>>2]|0;
    $2822 = ((($2821)) + 1|0);
    HEAP32[$2820>>2] = $2822;
    label = 560;
   }
   break;
  }
  case 84:  {
   $2823 = $4;
   $2824 = ((($2823)) + 24|0);
   $2825 = ((($2824)) + 32|0);
   $2826 = HEAP32[$2825>>2]|0;
   $2827 = ($2826|0)<(2);
   if ($2827) {
    label = 271;
   } else {
    $2828 = $4;
    $2829 = ((($2828)) + 24|0);
    $2830 = ((($2829)) + 32|0);
    $2831 = HEAP32[$2830>>2]|0;
    $2832 = (($2831) + -1)|0;
    HEAP32[$2830>>2] = $2832;
    $2833 = $4;
    $2834 = ((($2833)) + 132|0);
    $2835 = HEAP32[$2834>>2]|0;
    $2836 = ((($2835)) + 1|0);
    HEAP32[$2834>>2] = $2836;
    label = 560;
   }
   break;
  }
  case 85:  {
   $2837 = $4;
   $2838 = ((($2837)) + 24|0);
   $2839 = ((($2838)) + 32|0);
   $2840 = HEAP32[$2839>>2]|0;
   $2841 = ($2840|0)<(2);
   if ($2841) {
    label = 271;
   } else {
    $2842 = $4;
    $2843 = ((($2842)) + 24|0);
    $2844 = ((($2843)) + 32|0);
    $2845 = HEAP32[$2844>>2]|0;
    $2846 = (($2845) + -1)|0;
    HEAP32[$2844>>2] = $2846;
    $2847 = $4;
    $2848 = ((($2847)) + 132|0);
    $2849 = HEAP32[$2848>>2]|0;
    $2850 = ((($2849)) + 1|0);
    HEAP32[$2848>>2] = $2850;
    label = 560;
   }
   break;
  }
  case 87:  {
   $2851 = $4;
   $2852 = ((($2851)) + 24|0);
   $2853 = ((($2852)) + 32|0);
   $2854 = HEAP32[$2853>>2]|0;
   $2855 = ($2854|0)<(2);
   if ($2855) {
    label = 271;
   } else {
    $2856 = $4;
    $2857 = ((($2856)) + 24|0);
    $2858 = ((($2857)) + 32|0);
    $2859 = HEAP32[$2858>>2]|0;
    $2860 = (($2859) + -1)|0;
    HEAP32[$2858>>2] = $2860;
    $2861 = $4;
    $2862 = ((($2861)) + 132|0);
    $2863 = HEAP32[$2862>>2]|0;
    $2864 = ((($2863)) + 1|0);
    HEAP32[$2862>>2] = $2864;
    label = 560;
   }
   break;
  }
  case 88:  {
   $2865 = $4;
   $2866 = ((($2865)) + 24|0);
   $2867 = ((($2866)) + 32|0);
   $2868 = HEAP32[$2867>>2]|0;
   $2869 = ($2868|0)<(2);
   if ($2869) {
    label = 271;
   } else {
    $2870 = $4;
    $2871 = ((($2870)) + 24|0);
    $2872 = ((($2871)) + 32|0);
    $2873 = HEAP32[$2872>>2]|0;
    $2874 = (($2873) + -1)|0;
    HEAP32[$2872>>2] = $2874;
    $2875 = $4;
    $2876 = ((($2875)) + 132|0);
    $2877 = HEAP32[$2876>>2]|0;
    $2878 = ((($2877)) + 1|0);
    HEAP32[$2876>>2] = $2878;
    label = 560;
   }
   break;
  }
  case 89:  {
   $2879 = $4;
   $2880 = ((($2879)) + 24|0);
   $2881 = ((($2880)) + 32|0);
   $2882 = HEAP32[$2881>>2]|0;
   $2883 = ($2882|0)<(2);
   if ($2883) {
    label = 271;
   } else {
    $2884 = $4;
    $2885 = ((($2884)) + 24|0);
    $2886 = ((($2885)) + 32|0);
    $2887 = HEAP32[$2886>>2]|0;
    $2888 = (($2887) + -1)|0;
    HEAP32[$2886>>2] = $2888;
    $2889 = $4;
    $2890 = ((($2889)) + 132|0);
    $2891 = HEAP32[$2890>>2]|0;
    $2892 = ((($2891)) + 1|0);
    HEAP32[$2890>>2] = $2892;
    label = 560;
   }
   break;
  }
  case 90:  {
   $2893 = $4;
   $2894 = ((($2893)) + 24|0);
   $2895 = ((($2894)) + 32|0);
   $2896 = HEAP32[$2895>>2]|0;
   $2897 = ($2896|0)<(1);
   if ($2897) {
    label = 271;
   } else {
    $2898 = $4;
    $2899 = ((($2898)) + 24|0);
    $2900 = ((($2899)) + 32|0);
    $2901 = HEAP32[$2900>>2]|0;
    $2902 = (($2901) + 0)|0;
    HEAP32[$2900>>2] = $2902;
    $2903 = $4;
    $2904 = ((($2903)) + 132|0);
    $2905 = HEAP32[$2904>>2]|0;
    $2906 = ((($2905)) + 1|0);
    HEAP32[$2904>>2] = $2906;
    label = 560;
   }
   break;
  }
  case 91:  {
   $2907 = $4;
   $2908 = ((($2907)) + 24|0);
   $2909 = ((($2908)) + 32|0);
   $2910 = HEAP32[$2909>>2]|0;
   $2911 = ($2910|0)<(1);
   if ($2911) {
    label = 271;
   } else {
    $2912 = $4;
    $2913 = ((($2912)) + 24|0);
    $2914 = ((($2913)) + 32|0);
    $2915 = HEAP32[$2914>>2]|0;
    $2916 = (($2915) + 0)|0;
    HEAP32[$2914>>2] = $2916;
    $2917 = $4;
    $2918 = ((($2917)) + 132|0);
    $2919 = HEAP32[$2918>>2]|0;
    $2920 = ((($2919)) + 1|0);
    HEAP32[$2918>>2] = $2920;
    label = 560;
   }
   break;
  }
  case 92:  {
   $2921 = $4;
   $2922 = ((($2921)) + 24|0);
   $2923 = ((($2922)) + 32|0);
   $2924 = HEAP32[$2923>>2]|0;
   $2925 = ($2924|0)<(1);
   if ($2925) {
    label = 271;
   } else {
    $2926 = $4;
    $2927 = ((($2926)) + 24|0);
    $2928 = ((($2927)) + 32|0);
    $2929 = HEAP32[$2928>>2]|0;
    $2930 = (($2929) + 1)|0;
    HEAP32[$2928>>2] = $2930;
    $2931 = $4;
    $2932 = ((($2931)) + 132|0);
    $2933 = HEAP32[$2932>>2]|0;
    $2934 = ((($2933)) + 1|0);
    HEAP32[$2932>>2] = $2934;
    label = 560;
   }
   break;
  }
  case 93:  {
   $2935 = $4;
   $2936 = ((($2935)) + 24|0);
   $2937 = ((($2936)) + 32|0);
   $2938 = HEAP32[$2937>>2]|0;
   $2939 = ($2938|0)<(1);
   if ($2939) {
    label = 271;
   } else {
    $2940 = $4;
    $2941 = ((($2940)) + 24|0);
    $2942 = ((($2941)) + 32|0);
    $2943 = HEAP32[$2942>>2]|0;
    $2944 = (($2943) + 1)|0;
    HEAP32[$2942>>2] = $2944;
    $2945 = $4;
    $2946 = ((($2945)) + 132|0);
    $2947 = HEAP32[$2946>>2]|0;
    $2948 = ((($2947)) + 1|0);
    HEAP32[$2946>>2] = $2948;
    label = 560;
   }
   break;
  }
  case 96:  {
   $2949 = $4;
   $2950 = ((($2949)) + 24|0);
   $2951 = ((($2950)) + 32|0);
   $2952 = HEAP32[$2951>>2]|0;
   $2953 = ($2952|0)<(2);
   if ($2953) {
    label = 271;
   } else {
    $2954 = $4;
    $2955 = ((($2954)) + 24|0);
    $2956 = ((($2955)) + 32|0);
    $2957 = HEAP32[$2956>>2]|0;
    $2958 = (($2957) + 0)|0;
    HEAP32[$2956>>2] = $2958;
    $2959 = $4;
    $2960 = ((($2959)) + 132|0);
    $2961 = HEAP32[$2960>>2]|0;
    $2962 = ((($2961)) + 1|0);
    HEAP32[$2960>>2] = $2962;
    label = 560;
   }
   break;
  }
  case 97:  {
   $2963 = $4;
   $2964 = ((($2963)) + 24|0);
   $2965 = ((($2964)) + 32|0);
   $2966 = HEAP32[$2965>>2]|0;
   $2967 = ($2966|0)<(4);
   if ($2967) {
    label = 271;
   } else {
    $2968 = $4;
    $2969 = ((($2968)) + 24|0);
    $2970 = ((($2969)) + 32|0);
    $2971 = HEAP32[$2970>>2]|0;
    $2972 = (($2971) + -2)|0;
    HEAP32[$2970>>2] = $2972;
    $2973 = $4;
    $2974 = ((($2973)) + 132|0);
    $2975 = HEAP32[$2974>>2]|0;
    $2976 = ((($2975)) + 1|0);
    HEAP32[$2974>>2] = $2976;
    label = 560;
   }
   break;
  }
  case 98:  {
   $2977 = $4;
   $2978 = ((($2977)) + 24|0);
   $2979 = ((($2978)) + 32|0);
   $2980 = HEAP32[$2979>>2]|0;
   $2981 = ($2980|0)<(4);
   if ($2981) {
    label = 271;
   } else {
    $2982 = $4;
    $2983 = ((($2982)) + 24|0);
    $2984 = ((($2983)) + 32|0);
    $2985 = HEAP32[$2984>>2]|0;
    $2986 = (($2985) + -2)|0;
    HEAP32[$2984>>2] = $2986;
    $2987 = $4;
    $2988 = ((($2987)) + 132|0);
    $2989 = HEAP32[$2988>>2]|0;
    $2990 = ((($2989)) + 1|0);
    HEAP32[$2988>>2] = $2990;
    label = 560;
   }
   break;
  }
  case 99:  {
   $2991 = $4;
   $2992 = ((($2991)) + 24|0);
   $2993 = ((($2992)) + 32|0);
   $2994 = HEAP32[$2993>>2]|0;
   $2995 = ($2994|0)<(4);
   if ($2995) {
    label = 271;
   } else {
    $2996 = $4;
    $2997 = ((($2996)) + 24|0);
    $2998 = ((($2997)) + 32|0);
    $2999 = HEAP32[$2998>>2]|0;
    $3000 = (($2999) + -2)|0;
    HEAP32[$2998>>2] = $3000;
    $3001 = $4;
    $3002 = ((($3001)) + 132|0);
    $3003 = HEAP32[$3002>>2]|0;
    $3004 = ((($3003)) + 1|0);
    HEAP32[$3002>>2] = $3004;
    label = 560;
   }
   break;
  }
  case 100:  {
   $3005 = $4;
   $3006 = ((($3005)) + 24|0);
   $3007 = ((($3006)) + 32|0);
   $3008 = HEAP32[$3007>>2]|0;
   $3009 = ($3008|0)<(4);
   if ($3009) {
    label = 271;
   } else {
    $3010 = $4;
    $3011 = ((($3010)) + 24|0);
    $3012 = ((($3011)) + 32|0);
    $3013 = HEAP32[$3012>>2]|0;
    $3014 = (($3013) + -2)|0;
    HEAP32[$3012>>2] = $3014;
    $3015 = $4;
    $3016 = ((($3015)) + 132|0);
    $3017 = HEAP32[$3016>>2]|0;
    $3018 = ((($3017)) + 1|0);
    HEAP32[$3016>>2] = $3018;
    label = 560;
   }
   break;
  }
  case 101:  {
   $3019 = $4;
   $3020 = ((($3019)) + 24|0);
   $3021 = ((($3020)) + 32|0);
   $3022 = HEAP32[$3021>>2]|0;
   $3023 = ($3022|0)<(4);
   if ($3023) {
    label = 271;
   } else {
    $3024 = $4;
    $3025 = ((($3024)) + 24|0);
    $3026 = ((($3025)) + 32|0);
    $3027 = HEAP32[$3026>>2]|0;
    $3028 = (($3027) + -2)|0;
    HEAP32[$3026>>2] = $3028;
    $3029 = $4;
    $3030 = ((($3029)) + 132|0);
    $3031 = HEAP32[$3030>>2]|0;
    $3032 = ((($3031)) + 1|0);
    HEAP32[$3030>>2] = $3032;
    label = 560;
   }
   break;
  }
  case 103:  {
   $3033 = $4;
   $3034 = ((($3033)) + 24|0);
   $3035 = ((($3034)) + 32|0);
   $3036 = HEAP32[$3035>>2]|0;
   $3037 = ($3036|0)<(4);
   if ($3037) {
    label = 271;
   } else {
    $3038 = $4;
    $3039 = ((($3038)) + 24|0);
    $3040 = ((($3039)) + 32|0);
    $3041 = HEAP32[$3040>>2]|0;
    $3042 = (($3041) + -3)|0;
    HEAP32[$3040>>2] = $3042;
    $3043 = $4;
    $3044 = ((($3043)) + 132|0);
    $3045 = HEAP32[$3044>>2]|0;
    $3046 = ((($3045)) + 1|0);
    HEAP32[$3044>>2] = $3046;
    label = 560;
   }
   break;
  }
  case 104:  {
   $3047 = $4;
   $3048 = ((($3047)) + 24|0);
   $3049 = ((($3048)) + 32|0);
   $3050 = HEAP32[$3049>>2]|0;
   $3051 = ($3050|0)<(4);
   if ($3051) {
    label = 271;
   } else {
    $3052 = $4;
    $3053 = ((($3052)) + 24|0);
    $3054 = ((($3053)) + 32|0);
    $3055 = HEAP32[$3054>>2]|0;
    $3056 = (($3055) + -3)|0;
    HEAP32[$3054>>2] = $3056;
    $3057 = $4;
    $3058 = ((($3057)) + 132|0);
    $3059 = HEAP32[$3058>>2]|0;
    $3060 = ((($3059)) + 1|0);
    HEAP32[$3058>>2] = $3060;
    label = 560;
   }
   break;
  }
  case 105:  {
   $3061 = $4;
   $3062 = ((($3061)) + 24|0);
   $3063 = ((($3062)) + 32|0);
   $3064 = HEAP32[$3063>>2]|0;
   $3065 = ($3064|0)<(4);
   if ($3065) {
    label = 271;
   } else {
    $3066 = $4;
    $3067 = ((($3066)) + 24|0);
    $3068 = ((($3067)) + 32|0);
    $3069 = HEAP32[$3068>>2]|0;
    $3070 = (($3069) + -3)|0;
    HEAP32[$3068>>2] = $3070;
    $3071 = $4;
    $3072 = ((($3071)) + 132|0);
    $3073 = HEAP32[$3072>>2]|0;
    $3074 = ((($3073)) + 1|0);
    HEAP32[$3072>>2] = $3074;
    label = 560;
   }
   break;
  }
  case 106:  {
   $3075 = $4;
   $3076 = ((($3075)) + 24|0);
   $3077 = ((($3076)) + 32|0);
   $3078 = HEAP32[$3077>>2]|0;
   $3079 = ($3078|0)<(2);
   if ($3079) {
    label = 271;
   } else {
    $3080 = $4;
    $3081 = ((($3080)) + 24|0);
    $3082 = ((($3081)) + 32|0);
    $3083 = HEAP32[$3082>>2]|0;
    $3084 = (($3083) + -1)|0;
    HEAP32[$3082>>2] = $3084;
    $3085 = $4;
    $3086 = ((($3085)) + 132|0);
    $3087 = HEAP32[$3086>>2]|0;
    $3088 = ((($3087)) + 1|0);
    HEAP32[$3086>>2] = $3088;
    label = 560;
   }
   break;
  }
  case 107:  {
   $3089 = $4;
   $3090 = ((($3089)) + 24|0);
   $3091 = ((($3090)) + 32|0);
   $3092 = HEAP32[$3091>>2]|0;
   $3093 = ($3092|0)<(2);
   if ($3093) {
    label = 271;
   } else {
    $3094 = $4;
    $3095 = ((($3094)) + 24|0);
    $3096 = ((($3095)) + 32|0);
    $3097 = HEAP32[$3096>>2]|0;
    $3098 = (($3097) + -1)|0;
    HEAP32[$3096>>2] = $3098;
    $3099 = $4;
    $3100 = ((($3099)) + 132|0);
    $3101 = HEAP32[$3100>>2]|0;
    $3102 = ((($3101)) + 1|0);
    HEAP32[$3100>>2] = $3102;
    label = 560;
   }
   break;
  }
  case 108:  {
   $3103 = $4;
   $3104 = ((($3103)) + 24|0);
   $3105 = ((($3104)) + 32|0);
   $3106 = HEAP32[$3105>>2]|0;
   $3107 = ($3106|0)<(2);
   if ($3107) {
    label = 271;
   } else {
    $3108 = $4;
    $3109 = ((($3108)) + 24|0);
    $3110 = ((($3109)) + 32|0);
    $3111 = HEAP32[$3110>>2]|0;
    $3112 = (($3111) + -1)|0;
    HEAP32[$3110>>2] = $3112;
    $3113 = $4;
    $3114 = ((($3113)) + 132|0);
    $3115 = HEAP32[$3114>>2]|0;
    $3116 = ((($3115)) + 1|0);
    HEAP32[$3114>>2] = $3116;
    label = 560;
   }
   break;
  }
  case 109:  {
   $3117 = $4;
   $3118 = ((($3117)) + 24|0);
   $3119 = ((($3118)) + 32|0);
   $3120 = HEAP32[$3119>>2]|0;
   $3121 = ($3120|0)<(2);
   if ($3121) {
    label = 271;
   } else {
    $3122 = $4;
    $3123 = ((($3122)) + 24|0);
    $3124 = ((($3123)) + 32|0);
    $3125 = HEAP32[$3124>>2]|0;
    $3126 = (($3125) + 0)|0;
    HEAP32[$3124>>2] = $3126;
    $3127 = $4;
    $3128 = ((($3127)) + 132|0);
    $3129 = HEAP32[$3128>>2]|0;
    $3130 = ((($3129)) + 1|0);
    HEAP32[$3128>>2] = $3130;
    label = 560;
   }
   break;
  }
  case 112:  {
   $3131 = $4;
   $3132 = ((($3131)) + 24|0);
   $3133 = ((($3132)) + 32|0);
   $3134 = HEAP32[$3133>>2]|0;
   $3135 = ($3134|0)<(1);
   if ($3135) {
    label = 271;
   } else {
    $3136 = $4;
    $3137 = ((($3136)) + 24|0);
    $3138 = ((($3137)) + 32|0);
    $3139 = HEAP32[$3138>>2]|0;
    $3140 = (($3139) + 0)|0;
    HEAP32[$3138>>2] = $3140;
    $3141 = $4;
    $3142 = ((($3141)) + 132|0);
    $3143 = HEAP32[$3142>>2]|0;
    $3144 = ((($3143)) + 1|0);
    HEAP32[$3142>>2] = $3144;
    label = 560;
   }
   break;
  }
  case 113:  {
   $3145 = $4;
   $3146 = ((($3145)) + 24|0);
   $3147 = ((($3146)) + 32|0);
   $3148 = HEAP32[$3147>>2]|0;
   $3149 = ($3148|0)<(2);
   if ($3149) {
    label = 271;
   } else {
    $3150 = $4;
    $3151 = ((($3150)) + 24|0);
    $3152 = ((($3151)) + 32|0);
    $3153 = HEAP32[$3152>>2]|0;
    $3154 = (($3153) + -1)|0;
    HEAP32[$3152>>2] = $3154;
    $3155 = $4;
    $3156 = ((($3155)) + 132|0);
    $3157 = HEAP32[$3156>>2]|0;
    $3158 = ((($3157)) + 1|0);
    HEAP32[$3156>>2] = $3158;
    label = 560;
   }
   break;
  }
  case 114:  {
   $3159 = $4;
   $3160 = ((($3159)) + 24|0);
   $3161 = ((($3160)) + 32|0);
   $3162 = HEAP32[$3161>>2]|0;
   $3163 = ($3162|0)<(2);
   if ($3163) {
    label = 271;
   } else {
    $3164 = $4;
    $3165 = ((($3164)) + 24|0);
    $3166 = ((($3165)) + 32|0);
    $3167 = HEAP32[$3166>>2]|0;
    $3168 = (($3167) + -1)|0;
    HEAP32[$3166>>2] = $3168;
    $3169 = $4;
    $3170 = ((($3169)) + 132|0);
    $3171 = HEAP32[$3170>>2]|0;
    $3172 = ((($3171)) + 1|0);
    HEAP32[$3170>>2] = $3172;
    label = 560;
   }
   break;
  }
  case 115:  {
   $3173 = $4;
   $3174 = ((($3173)) + 24|0);
   $3175 = ((($3174)) + 32|0);
   $3176 = HEAP32[$3175>>2]|0;
   $3177 = ($3176|0)<(2);
   if ($3177) {
    label = 271;
   } else {
    $3178 = $4;
    $3179 = ((($3178)) + 24|0);
    $3180 = ((($3179)) + 32|0);
    $3181 = HEAP32[$3180>>2]|0;
    $3182 = (($3181) + -1)|0;
    HEAP32[$3180>>2] = $3182;
    $3183 = $4;
    $3184 = ((($3183)) + 132|0);
    $3185 = HEAP32[$3184>>2]|0;
    $3186 = ((($3185)) + 1|0);
    HEAP32[$3184>>2] = $3186;
    label = 560;
   }
   break;
  }
  case 116:  {
   $3187 = $4;
   $3188 = ((($3187)) + 24|0);
   $3189 = ((($3188)) + 32|0);
   $3190 = HEAP32[$3189>>2]|0;
   $3191 = ($3190|0)<(2);
   if ($3191) {
    label = 271;
   } else {
    $3192 = $4;
    $3193 = ((($3192)) + 24|0);
    $3194 = ((($3193)) + 32|0);
    $3195 = HEAP32[$3194>>2]|0;
    $3196 = (($3195) + -1)|0;
    HEAP32[$3194>>2] = $3196;
    $3197 = $4;
    $3198 = ((($3197)) + 132|0);
    $3199 = HEAP32[$3198>>2]|0;
    $3200 = ((($3199)) + 1|0);
    HEAP32[$3198>>2] = $3200;
    label = 560;
   }
   break;
  }
  case 117:  {
   $3201 = $4;
   $3202 = ((($3201)) + 24|0);
   $3203 = ((($3202)) + 32|0);
   $3204 = HEAP32[$3203>>2]|0;
   $3205 = ($3204|0)<(2);
   if ($3205) {
    label = 271;
   } else {
    $3206 = $4;
    $3207 = ((($3206)) + 24|0);
    $3208 = ((($3207)) + 32|0);
    $3209 = HEAP32[$3208>>2]|0;
    $3210 = (($3209) + -1)|0;
    HEAP32[$3208>>2] = $3210;
    $3211 = $4;
    $3212 = ((($3211)) + 132|0);
    $3213 = HEAP32[$3212>>2]|0;
    $3214 = ((($3213)) + 1|0);
    HEAP32[$3212>>2] = $3214;
    label = 560;
   }
   break;
  }
  case 119:  {
   $3215 = $4;
   $3216 = ((($3215)) + 24|0);
   $3217 = ((($3216)) + 32|0);
   $3218 = HEAP32[$3217>>2]|0;
   $3219 = ($3218|0)<(2);
   if ($3219) {
    label = 271;
   } else {
    $3220 = $4;
    $3221 = ((($3220)) + 24|0);
    $3222 = ((($3221)) + 32|0);
    $3223 = HEAP32[$3222>>2]|0;
    $3224 = (($3223) + -1)|0;
    HEAP32[$3222>>2] = $3224;
    $3225 = $4;
    $3226 = ((($3225)) + 132|0);
    $3227 = HEAP32[$3226>>2]|0;
    $3228 = ((($3227)) + 1|0);
    HEAP32[$3226>>2] = $3228;
    label = 560;
   }
   break;
  }
  case 120:  {
   $3229 = $4;
   $3230 = ((($3229)) + 24|0);
   $3231 = ((($3230)) + 32|0);
   $3232 = HEAP32[$3231>>2]|0;
   $3233 = ($3232|0)<(2);
   if ($3233) {
    label = 271;
   } else {
    $3234 = $4;
    $3235 = ((($3234)) + 24|0);
    $3236 = ((($3235)) + 32|0);
    $3237 = HEAP32[$3236>>2]|0;
    $3238 = (($3237) + -1)|0;
    HEAP32[$3236>>2] = $3238;
    $3239 = $4;
    $3240 = ((($3239)) + 132|0);
    $3241 = HEAP32[$3240>>2]|0;
    $3242 = ((($3241)) + 1|0);
    HEAP32[$3240>>2] = $3242;
    label = 560;
   }
   break;
  }
  case 121:  {
   $3243 = $4;
   $3244 = ((($3243)) + 24|0);
   $3245 = ((($3244)) + 32|0);
   $3246 = HEAP32[$3245>>2]|0;
   $3247 = ($3246|0)<(2);
   if ($3247) {
    label = 271;
   } else {
    $3248 = $4;
    $3249 = ((($3248)) + 24|0);
    $3250 = ((($3249)) + 32|0);
    $3251 = HEAP32[$3250>>2]|0;
    $3252 = (($3251) + -1)|0;
    HEAP32[$3250>>2] = $3252;
    $3253 = $4;
    $3254 = ((($3253)) + 132|0);
    $3255 = HEAP32[$3254>>2]|0;
    $3256 = ((($3255)) + 1|0);
    HEAP32[$3254>>2] = $3256;
    label = 560;
   }
   break;
  }
  case 122:  {
   $3257 = $4;
   $3258 = ((($3257)) + 24|0);
   $3259 = ((($3258)) + 32|0);
   $3260 = HEAP32[$3259>>2]|0;
   $3261 = ($3260|0)<(1);
   if ($3261) {
    label = 271;
   } else {
    $3262 = $4;
    $3263 = ((($3262)) + 24|0);
    $3264 = ((($3263)) + 32|0);
    $3265 = HEAP32[$3264>>2]|0;
    $3266 = (($3265) + 0)|0;
    HEAP32[$3264>>2] = $3266;
    $3267 = $4;
    $3268 = ((($3267)) + 132|0);
    $3269 = HEAP32[$3268>>2]|0;
    $3270 = ((($3269)) + 1|0);
    HEAP32[$3268>>2] = $3270;
    label = 560;
   }
   break;
  }
  case 123:  {
   $3271 = $4;
   $3272 = ((($3271)) + 24|0);
   $3273 = ((($3272)) + 32|0);
   $3274 = HEAP32[$3273>>2]|0;
   $3275 = ($3274|0)<(1);
   if ($3275) {
    label = 271;
   } else {
    $3276 = $4;
    $3277 = ((($3276)) + 24|0);
    $3278 = ((($3277)) + 32|0);
    $3279 = HEAP32[$3278>>2]|0;
    $3280 = (($3279) + 0)|0;
    HEAP32[$3278>>2] = $3280;
    $3281 = $4;
    $3282 = ((($3281)) + 132|0);
    $3283 = HEAP32[$3282>>2]|0;
    $3284 = ((($3283)) + 1|0);
    HEAP32[$3282>>2] = $3284;
    label = 560;
   }
   break;
  }
  case 124:  {
   $3285 = $4;
   $3286 = ((($3285)) + 24|0);
   $3287 = ((($3286)) + 32|0);
   $3288 = HEAP32[$3287>>2]|0;
   $3289 = ($3288|0)<(1);
   if ($3289) {
    label = 271;
   } else {
    $3290 = $4;
    $3291 = ((($3290)) + 24|0);
    $3292 = ((($3291)) + 32|0);
    $3293 = HEAP32[$3292>>2]|0;
    $3294 = (($3293) + 1)|0;
    HEAP32[$3292>>2] = $3294;
    $3295 = $4;
    $3296 = ((($3295)) + 132|0);
    $3297 = HEAP32[$3296>>2]|0;
    $3298 = ((($3297)) + 1|0);
    HEAP32[$3296>>2] = $3298;
    label = 560;
   }
   break;
  }
  case 125:  {
   $3299 = $4;
   $3300 = ((($3299)) + 24|0);
   $3301 = ((($3300)) + 32|0);
   $3302 = HEAP32[$3301>>2]|0;
   $3303 = ($3302|0)<(1);
   if ($3303) {
    label = 271;
   } else {
    $3304 = $4;
    $3305 = ((($3304)) + 24|0);
    $3306 = ((($3305)) + 32|0);
    $3307 = HEAP32[$3306>>2]|0;
    $3308 = (($3307) + 1)|0;
    HEAP32[$3306>>2] = $3308;
    $3309 = $4;
    $3310 = ((($3309)) + 132|0);
    $3311 = HEAP32[$3310>>2]|0;
    $3312 = ((($3311)) + 1|0);
    HEAP32[$3310>>2] = $3312;
    label = 560;
   }
   break;
  }
  case 128:  {
   $3313 = $4;
   $3314 = ((($3313)) + 24|0);
   $3315 = ((($3314)) + 32|0);
   $3316 = HEAP32[$3315>>2]|0;
   $3317 = ($3316|0)<(2);
   if ($3317) {
    label = 271;
   } else {
    $3318 = $4;
    $3319 = ((($3318)) + 24|0);
    $3320 = ((($3319)) + 32|0);
    $3321 = HEAP32[$3320>>2]|0;
    $3322 = (($3321) + 0)|0;
    HEAP32[$3320>>2] = $3322;
    $3323 = $4;
    $3324 = ((($3323)) + 132|0);
    $3325 = HEAP32[$3324>>2]|0;
    $3326 = ((($3325)) + 1|0);
    HEAP32[$3324>>2] = $3326;
    label = 560;
   }
   break;
  }
  case 129:  {
   $3327 = $4;
   $3328 = ((($3327)) + 24|0);
   $3329 = ((($3328)) + 32|0);
   $3330 = HEAP32[$3329>>2]|0;
   $3331 = ($3330|0)<(4);
   if ($3331) {
    label = 271;
   } else {
    $3332 = $4;
    $3333 = ((($3332)) + 24|0);
    $3334 = ((($3333)) + 32|0);
    $3335 = HEAP32[$3334>>2]|0;
    $3336 = (($3335) + -2)|0;
    HEAP32[$3334>>2] = $3336;
    $3337 = $4;
    $3338 = ((($3337)) + 132|0);
    $3339 = HEAP32[$3338>>2]|0;
    $3340 = ((($3339)) + 1|0);
    HEAP32[$3338>>2] = $3340;
    label = 560;
   }
   break;
  }
  case 130:  {
   $3341 = $4;
   $3342 = ((($3341)) + 24|0);
   $3343 = ((($3342)) + 32|0);
   $3344 = HEAP32[$3343>>2]|0;
   $3345 = ($3344|0)<(4);
   if ($3345) {
    label = 271;
   } else {
    $3346 = $4;
    $3347 = ((($3346)) + 24|0);
    $3348 = ((($3347)) + 32|0);
    $3349 = HEAP32[$3348>>2]|0;
    $3350 = (($3349) + -2)|0;
    HEAP32[$3348>>2] = $3350;
    $3351 = $4;
    $3352 = ((($3351)) + 132|0);
    $3353 = HEAP32[$3352>>2]|0;
    $3354 = ((($3353)) + 1|0);
    HEAP32[$3352>>2] = $3354;
    label = 560;
   }
   break;
  }
  case 131:  {
   $3355 = $4;
   $3356 = ((($3355)) + 24|0);
   $3357 = ((($3356)) + 32|0);
   $3358 = HEAP32[$3357>>2]|0;
   $3359 = ($3358|0)<(4);
   if ($3359) {
    label = 271;
   } else {
    $3360 = $4;
    $3361 = ((($3360)) + 24|0);
    $3362 = ((($3361)) + 32|0);
    $3363 = HEAP32[$3362>>2]|0;
    $3364 = (($3363) + -2)|0;
    HEAP32[$3362>>2] = $3364;
    $3365 = $4;
    $3366 = ((($3365)) + 132|0);
    $3367 = HEAP32[$3366>>2]|0;
    $3368 = ((($3367)) + 1|0);
    HEAP32[$3366>>2] = $3368;
    label = 560;
   }
   break;
  }
  case 132:  {
   $3369 = $4;
   $3370 = ((($3369)) + 24|0);
   $3371 = ((($3370)) + 32|0);
   $3372 = HEAP32[$3371>>2]|0;
   $3373 = ($3372|0)<(4);
   if ($3373) {
    label = 271;
   } else {
    $3374 = $4;
    $3375 = ((($3374)) + 24|0);
    $3376 = ((($3375)) + 32|0);
    $3377 = HEAP32[$3376>>2]|0;
    $3378 = (($3377) + -2)|0;
    HEAP32[$3376>>2] = $3378;
    $3379 = $4;
    $3380 = ((($3379)) + 132|0);
    $3381 = HEAP32[$3380>>2]|0;
    $3382 = ((($3381)) + 1|0);
    HEAP32[$3380>>2] = $3382;
    label = 560;
   }
   break;
  }
  case 133:  {
   $3383 = $4;
   $3384 = ((($3383)) + 24|0);
   $3385 = ((($3384)) + 32|0);
   $3386 = HEAP32[$3385>>2]|0;
   $3387 = ($3386|0)<(4);
   if ($3387) {
    label = 271;
   } else {
    $3388 = $4;
    $3389 = ((($3388)) + 24|0);
    $3390 = ((($3389)) + 32|0);
    $3391 = HEAP32[$3390>>2]|0;
    $3392 = (($3391) + -2)|0;
    HEAP32[$3390>>2] = $3392;
    $3393 = $4;
    $3394 = ((($3393)) + 132|0);
    $3395 = HEAP32[$3394>>2]|0;
    $3396 = ((($3395)) + 1|0);
    HEAP32[$3394>>2] = $3396;
    label = 560;
   }
   break;
  }
  case 135:  {
   $3397 = $4;
   $3398 = ((($3397)) + 24|0);
   $3399 = ((($3398)) + 32|0);
   $3400 = HEAP32[$3399>>2]|0;
   $3401 = ($3400|0)<(4);
   if ($3401) {
    label = 271;
   } else {
    $3402 = $4;
    $3403 = ((($3402)) + 24|0);
    $3404 = ((($3403)) + 32|0);
    $3405 = HEAP32[$3404>>2]|0;
    $3406 = (($3405) + -3)|0;
    HEAP32[$3404>>2] = $3406;
    $3407 = $4;
    $3408 = ((($3407)) + 132|0);
    $3409 = HEAP32[$3408>>2]|0;
    $3410 = ((($3409)) + 1|0);
    HEAP32[$3408>>2] = $3410;
    label = 560;
   }
   break;
  }
  case 136:  {
   $3411 = $4;
   $3412 = ((($3411)) + 24|0);
   $3413 = ((($3412)) + 32|0);
   $3414 = HEAP32[$3413>>2]|0;
   $3415 = ($3414|0)<(4);
   if ($3415) {
    label = 271;
   } else {
    $3416 = $4;
    $3417 = ((($3416)) + 24|0);
    $3418 = ((($3417)) + 32|0);
    $3419 = HEAP32[$3418>>2]|0;
    $3420 = (($3419) + -3)|0;
    HEAP32[$3418>>2] = $3420;
    $3421 = $4;
    $3422 = ((($3421)) + 132|0);
    $3423 = HEAP32[$3422>>2]|0;
    $3424 = ((($3423)) + 1|0);
    HEAP32[$3422>>2] = $3424;
    label = 560;
   }
   break;
  }
  case 137:  {
   $3425 = $4;
   $3426 = ((($3425)) + 24|0);
   $3427 = ((($3426)) + 32|0);
   $3428 = HEAP32[$3427>>2]|0;
   $3429 = ($3428|0)<(4);
   if ($3429) {
    label = 271;
   } else {
    $3430 = $4;
    $3431 = ((($3430)) + 24|0);
    $3432 = ((($3431)) + 32|0);
    $3433 = HEAP32[$3432>>2]|0;
    $3434 = (($3433) + -3)|0;
    HEAP32[$3432>>2] = $3434;
    $3435 = $4;
    $3436 = ((($3435)) + 132|0);
    $3437 = HEAP32[$3436>>2]|0;
    $3438 = ((($3437)) + 1|0);
    HEAP32[$3436>>2] = $3438;
    label = 560;
   }
   break;
  }
  case 138:  {
   $3439 = $4;
   $3440 = ((($3439)) + 24|0);
   $3441 = ((($3440)) + 32|0);
   $3442 = HEAP32[$3441>>2]|0;
   $3443 = ($3442|0)<(2);
   if ($3443) {
    label = 271;
   } else {
    $3444 = $4;
    $3445 = ((($3444)) + 24|0);
    $3446 = ((($3445)) + 32|0);
    $3447 = HEAP32[$3446>>2]|0;
    $3448 = (($3447) + -1)|0;
    HEAP32[$3446>>2] = $3448;
    $3449 = $4;
    $3450 = ((($3449)) + 132|0);
    $3451 = HEAP32[$3450>>2]|0;
    $3452 = ((($3451)) + 1|0);
    HEAP32[$3450>>2] = $3452;
    label = 560;
   }
   break;
  }
  case 139:  {
   $3453 = $4;
   $3454 = ((($3453)) + 24|0);
   $3455 = ((($3454)) + 32|0);
   $3456 = HEAP32[$3455>>2]|0;
   $3457 = ($3456|0)<(2);
   if ($3457) {
    label = 271;
   } else {
    $3458 = $4;
    $3459 = ((($3458)) + 24|0);
    $3460 = ((($3459)) + 32|0);
    $3461 = HEAP32[$3460>>2]|0;
    $3462 = (($3461) + -1)|0;
    HEAP32[$3460>>2] = $3462;
    $3463 = $4;
    $3464 = ((($3463)) + 132|0);
    $3465 = HEAP32[$3464>>2]|0;
    $3466 = ((($3465)) + 1|0);
    HEAP32[$3464>>2] = $3466;
    label = 560;
   }
   break;
  }
  case 140:  {
   $3467 = $4;
   $3468 = ((($3467)) + 24|0);
   $3469 = ((($3468)) + 32|0);
   $3470 = HEAP32[$3469>>2]|0;
   $3471 = ($3470|0)<(2);
   if ($3471) {
    label = 271;
   } else {
    $3472 = $4;
    $3473 = ((($3472)) + 24|0);
    $3474 = ((($3473)) + 32|0);
    $3475 = HEAP32[$3474>>2]|0;
    $3476 = (($3475) + 0)|0;
    HEAP32[$3474>>2] = $3476;
    $3477 = $4;
    $3478 = ((($3477)) + 132|0);
    $3479 = HEAP32[$3478>>2]|0;
    $3480 = ((($3479)) + 1|0);
    HEAP32[$3478>>2] = $3480;
    label = 560;
   }
   break;
  }
  case 141:  {
   $3481 = $4;
   $3482 = ((($3481)) + 24|0);
   $3483 = ((($3482)) + 32|0);
   $3484 = HEAP32[$3483>>2]|0;
   $3485 = ($3484|0)<(2);
   if ($3485) {
    label = 271;
   } else {
    $3486 = $4;
    $3487 = ((($3486)) + 24|0);
    $3488 = ((($3487)) + 32|0);
    $3489 = HEAP32[$3488>>2]|0;
    $3490 = (($3489) + -1)|0;
    HEAP32[$3488>>2] = $3490;
    $3491 = $4;
    $3492 = ((($3491)) + 132|0);
    $3493 = HEAP32[$3492>>2]|0;
    $3494 = ((($3493)) + 1|0);
    HEAP32[$3492>>2] = $3494;
    label = 560;
   }
   break;
  }
  case 144:  {
   $3495 = $4;
   $3496 = ((($3495)) + 24|0);
   $3497 = ((($3496)) + 32|0);
   $3498 = HEAP32[$3497>>2]|0;
   $3499 = ($3498|0)<(4);
   if ($3499) {
    label = 271;
   } else {
    $3500 = $4;
    $3501 = ((($3500)) + 24|0);
    $3502 = ((($3501)) + 32|0);
    $3503 = HEAP32[$3502>>2]|0;
    $3504 = (($3503) + 0)|0;
    HEAP32[$3502>>2] = $3504;
    $3505 = $4;
    $3506 = ((($3505)) + 132|0);
    $3507 = HEAP32[$3506>>2]|0;
    $3508 = ((($3507)) + 1|0);
    HEAP32[$3506>>2] = $3508;
    label = 560;
   }
   break;
  }
  case 145:  {
   $3509 = $4;
   $3510 = ((($3509)) + 24|0);
   $3511 = ((($3510)) + 32|0);
   $3512 = HEAP32[$3511>>2]|0;
   $3513 = ($3512|0)<(8);
   if ($3513) {
    label = 271;
   } else {
    $3514 = $4;
    $3515 = ((($3514)) + 24|0);
    $3516 = ((($3515)) + 32|0);
    $3517 = HEAP32[$3516>>2]|0;
    $3518 = (($3517) + -4)|0;
    HEAP32[$3516>>2] = $3518;
    $3519 = $4;
    $3520 = ((($3519)) + 132|0);
    $3521 = HEAP32[$3520>>2]|0;
    $3522 = ((($3521)) + 1|0);
    HEAP32[$3520>>2] = $3522;
    label = 560;
   }
   break;
  }
  case 146:  {
   $3523 = $4;
   $3524 = ((($3523)) + 24|0);
   $3525 = ((($3524)) + 32|0);
   $3526 = HEAP32[$3525>>2]|0;
   $3527 = ($3526|0)<(8);
   if ($3527) {
    label = 271;
   } else {
    $3528 = $4;
    $3529 = ((($3528)) + 24|0);
    $3530 = ((($3529)) + 32|0);
    $3531 = HEAP32[$3530>>2]|0;
    $3532 = (($3531) + -4)|0;
    HEAP32[$3530>>2] = $3532;
    $3533 = $4;
    $3534 = ((($3533)) + 132|0);
    $3535 = HEAP32[$3534>>2]|0;
    $3536 = ((($3535)) + 1|0);
    HEAP32[$3534>>2] = $3536;
    label = 560;
   }
   break;
  }
  case 147:  {
   $3537 = $4;
   $3538 = ((($3537)) + 24|0);
   $3539 = ((($3538)) + 32|0);
   $3540 = HEAP32[$3539>>2]|0;
   $3541 = ($3540|0)<(8);
   if ($3541) {
    label = 271;
   } else {
    $3542 = $4;
    $3543 = ((($3542)) + 24|0);
    $3544 = ((($3543)) + 32|0);
    $3545 = HEAP32[$3544>>2]|0;
    $3546 = (($3545) + -4)|0;
    HEAP32[$3544>>2] = $3546;
    $3547 = $4;
    $3548 = ((($3547)) + 132|0);
    $3549 = HEAP32[$3548>>2]|0;
    $3550 = ((($3549)) + 1|0);
    HEAP32[$3548>>2] = $3550;
    label = 560;
   }
   break;
  }
  case 148:  {
   $3551 = $4;
   $3552 = ((($3551)) + 24|0);
   $3553 = ((($3552)) + 32|0);
   $3554 = HEAP32[$3553>>2]|0;
   $3555 = ($3554|0)<(8);
   if ($3555) {
    label = 271;
   } else {
    $3556 = $4;
    $3557 = ((($3556)) + 24|0);
    $3558 = ((($3557)) + 32|0);
    $3559 = HEAP32[$3558>>2]|0;
    $3560 = (($3559) + -4)|0;
    HEAP32[$3558>>2] = $3560;
    $3561 = $4;
    $3562 = ((($3561)) + 132|0);
    $3563 = HEAP32[$3562>>2]|0;
    $3564 = ((($3563)) + 1|0);
    HEAP32[$3562>>2] = $3564;
    label = 560;
   }
   break;
  }
  case 151:  {
   $3565 = $4;
   $3566 = ((($3565)) + 24|0);
   $3567 = ((($3566)) + 32|0);
   $3568 = HEAP32[$3567>>2]|0;
   $3569 = ($3568|0)<(8);
   if ($3569) {
    label = 271;
   } else {
    $3570 = $4;
    $3571 = ((($3570)) + 24|0);
    $3572 = ((($3571)) + 32|0);
    $3573 = HEAP32[$3572>>2]|0;
    $3574 = (($3573) + -7)|0;
    HEAP32[$3572>>2] = $3574;
    $3575 = $4;
    $3576 = ((($3575)) + 132|0);
    $3577 = HEAP32[$3576>>2]|0;
    $3578 = ((($3577)) + 1|0);
    HEAP32[$3576>>2] = $3578;
    label = 560;
   }
   break;
  }
  case 152:  {
   $3579 = $4;
   $3580 = ((($3579)) + 24|0);
   $3581 = ((($3580)) + 32|0);
   $3582 = HEAP32[$3581>>2]|0;
   $3583 = ($3582|0)<(8);
   if ($3583) {
    label = 271;
   } else {
    $3584 = $4;
    $3585 = ((($3584)) + 24|0);
    $3586 = ((($3585)) + 32|0);
    $3587 = HEAP32[$3586>>2]|0;
    $3588 = (($3587) + -4)|0;
    HEAP32[$3586>>2] = $3588;
    $3589 = $4;
    $3590 = ((($3589)) + 132|0);
    $3591 = HEAP32[$3590>>2]|0;
    $3592 = ((($3591)) + 1|0);
    HEAP32[$3590>>2] = $3592;
    label = 560;
   }
   break;
  }
  case 153:  {
   $3593 = $4;
   $3594 = ((($3593)) + 24|0);
   $3595 = ((($3594)) + 32|0);
   $3596 = HEAP32[$3595>>2]|0;
   $3597 = ($3596|0)<(8);
   if ($3597) {
    label = 271;
   } else {
    $3598 = $4;
    $3599 = ((($3598)) + 24|0);
    $3600 = ((($3599)) + 32|0);
    $3601 = HEAP32[$3600>>2]|0;
    $3602 = (($3601) + -4)|0;
    HEAP32[$3600>>2] = $3602;
    $3603 = $4;
    $3604 = ((($3603)) + 132|0);
    $3605 = HEAP32[$3604>>2]|0;
    $3606 = ((($3605)) + 1|0);
    HEAP32[$3604>>2] = $3606;
    label = 560;
   }
   break;
  }
  case 154:  {
   $3607 = $4;
   $3608 = ((($3607)) + 24|0);
   $3609 = ((($3608)) + 32|0);
   $3610 = HEAP32[$3609>>2]|0;
   $3611 = ($3610|0)<(8);
   if ($3611) {
    label = 271;
   } else {
    $3612 = $4;
    $3613 = ((($3612)) + 24|0);
    $3614 = ((($3613)) + 32|0);
    $3615 = HEAP32[$3614>>2]|0;
    $3616 = (($3615) + -7)|0;
    HEAP32[$3614>>2] = $3616;
    $3617 = $4;
    $3618 = ((($3617)) + 132|0);
    $3619 = HEAP32[$3618>>2]|0;
    $3620 = ((($3619)) + 1|0);
    HEAP32[$3618>>2] = $3620;
    label = 560;
   }
   break;
  }
  case 156:  {
   $3621 = $4;
   $3622 = ((($3621)) + 24|0);
   $3623 = ((($3622)) + 32|0);
   $3624 = HEAP32[$3623>>2]|0;
   $3625 = ($3624|0)<(8);
   if ($3625) {
    label = 271;
   } else {
    $3626 = $4;
    $3627 = ((($3626)) + 24|0);
    $3628 = ((($3627)) + 32|0);
    $3629 = HEAP32[$3628>>2]|0;
    $3630 = (($3629) + -7)|0;
    HEAP32[$3628>>2] = $3630;
    $3631 = $4;
    $3632 = ((($3631)) + 132|0);
    $3633 = HEAP32[$3632>>2]|0;
    $3634 = ((($3633)) + 1|0);
    HEAP32[$3632>>2] = $3634;
    label = 560;
   }
   break;
  }
  case 155:  {
   $3635 = $4;
   $3636 = ((($3635)) + 24|0);
   $3637 = ((($3636)) + 32|0);
   $3638 = HEAP32[$3637>>2]|0;
   $3639 = ($3638|0)<(8);
   if ($3639) {
    label = 271;
   } else {
    $3640 = $4;
    $3641 = ((($3640)) + 24|0);
    $3642 = ((($3641)) + 32|0);
    $3643 = HEAP32[$3642>>2]|0;
    $3644 = (($3643) + -7)|0;
    HEAP32[$3642>>2] = $3644;
    $3645 = $4;
    $3646 = ((($3645)) + 132|0);
    $3647 = HEAP32[$3646>>2]|0;
    $3648 = ((($3647)) + 1|0);
    HEAP32[$3646>>2] = $3648;
    label = 560;
   }
   break;
  }
  case 160:  {
   $3649 = $4;
   $3650 = ((($3649)) + 24|0);
   $3651 = ((($3650)) + 32|0);
   $3652 = HEAP32[$3651>>2]|0;
   $3653 = ($3652|0)<(4);
   if ($3653) {
    label = 271;
   } else {
    $3654 = $4;
    $3655 = ((($3654)) + 24|0);
    $3656 = ((($3655)) + 32|0);
    $3657 = HEAP32[$3656>>2]|0;
    $3658 = (($3657) + 0)|0;
    HEAP32[$3656>>2] = $3658;
    $3659 = $4;
    $3660 = ((($3659)) + 132|0);
    $3661 = HEAP32[$3660>>2]|0;
    $3662 = ((($3661)) + 1|0);
    HEAP32[$3660>>2] = $3662;
    label = 560;
   }
   break;
  }
  case 161:  {
   $3663 = $4;
   $3664 = ((($3663)) + 24|0);
   $3665 = ((($3664)) + 32|0);
   $3666 = HEAP32[$3665>>2]|0;
   $3667 = ($3666|0)<(8);
   if ($3667) {
    label = 271;
   } else {
    $3668 = $4;
    $3669 = ((($3668)) + 24|0);
    $3670 = ((($3669)) + 32|0);
    $3671 = HEAP32[$3670>>2]|0;
    $3672 = (($3671) + -4)|0;
    HEAP32[$3670>>2] = $3672;
    $3673 = $4;
    $3674 = ((($3673)) + 132|0);
    $3675 = HEAP32[$3674>>2]|0;
    $3676 = ((($3675)) + 1|0);
    HEAP32[$3674>>2] = $3676;
    label = 560;
   }
   break;
  }
  case 162:  {
   $3677 = $4;
   $3678 = ((($3677)) + 24|0);
   $3679 = ((($3678)) + 32|0);
   $3680 = HEAP32[$3679>>2]|0;
   $3681 = ($3680|0)<(8);
   if ($3681) {
    label = 271;
   } else {
    $3682 = $4;
    $3683 = ((($3682)) + 24|0);
    $3684 = ((($3683)) + 32|0);
    $3685 = HEAP32[$3684>>2]|0;
    $3686 = (($3685) + -4)|0;
    HEAP32[$3684>>2] = $3686;
    $3687 = $4;
    $3688 = ((($3687)) + 132|0);
    $3689 = HEAP32[$3688>>2]|0;
    $3690 = ((($3689)) + 1|0);
    HEAP32[$3688>>2] = $3690;
    label = 560;
   }
   break;
  }
  case 163:  {
   $3691 = $4;
   $3692 = ((($3691)) + 24|0);
   $3693 = ((($3692)) + 32|0);
   $3694 = HEAP32[$3693>>2]|0;
   $3695 = ($3694|0)<(8);
   if ($3695) {
    label = 271;
   } else {
    $3696 = $4;
    $3697 = ((($3696)) + 24|0);
    $3698 = ((($3697)) + 32|0);
    $3699 = HEAP32[$3698>>2]|0;
    $3700 = (($3699) + -4)|0;
    HEAP32[$3698>>2] = $3700;
    $3701 = $4;
    $3702 = ((($3701)) + 132|0);
    $3703 = HEAP32[$3702>>2]|0;
    $3704 = ((($3703)) + 1|0);
    HEAP32[$3702>>2] = $3704;
    label = 560;
   }
   break;
  }
  case 164:  {
   $3705 = $4;
   $3706 = ((($3705)) + 24|0);
   $3707 = ((($3706)) + 32|0);
   $3708 = HEAP32[$3707>>2]|0;
   $3709 = ($3708|0)<(8);
   if ($3709) {
    label = 271;
   } else {
    $3710 = $4;
    $3711 = ((($3710)) + 24|0);
    $3712 = ((($3711)) + 32|0);
    $3713 = HEAP32[$3712>>2]|0;
    $3714 = (($3713) + -4)|0;
    HEAP32[$3712>>2] = $3714;
    $3715 = $4;
    $3716 = ((($3715)) + 132|0);
    $3717 = HEAP32[$3716>>2]|0;
    $3718 = ((($3717)) + 1|0);
    HEAP32[$3716>>2] = $3718;
    label = 560;
   }
   break;
  }
  case 170:  {
   $3719 = $4;
   $3720 = ((($3719)) + 24|0);
   $3721 = ((($3720)) + 32|0);
   $3722 = HEAP32[$3721>>2]|0;
   $3723 = ($3722|0)<(4);
   if ($3723) {
    label = 271;
   } else {
    $3724 = $4;
    $3725 = ((($3724)) + 24|0);
    $3726 = ((($3725)) + 32|0);
    $3727 = HEAP32[$3726>>2]|0;
    $3728 = (($3727) + 0)|0;
    HEAP32[$3726>>2] = $3728;
    $3729 = $4;
    $3730 = ((($3729)) + 132|0);
    $3731 = HEAP32[$3730>>2]|0;
    $3732 = ((($3731)) + 2|0);
    HEAP32[$3730>>2] = $3732;
    label = 560;
   }
   break;
  }
  case 167:  {
   $3733 = $4;
   $3734 = ((($3733)) + 24|0);
   $3735 = ((($3734)) + 32|0);
   $3736 = HEAP32[$3735>>2]|0;
   $3737 = ($3736|0)<(8);
   if ($3737) {
    label = 271;
   } else {
    $3738 = $4;
    $3739 = ((($3738)) + 24|0);
    $3740 = ((($3739)) + 32|0);
    $3741 = HEAP32[$3740>>2]|0;
    $3742 = (($3741) + -7)|0;
    HEAP32[$3740>>2] = $3742;
    $3743 = $4;
    $3744 = ((($3743)) + 132|0);
    $3745 = HEAP32[$3744>>2]|0;
    $3746 = ((($3745)) + 1|0);
    HEAP32[$3744>>2] = $3746;
    label = 560;
   }
   break;
  }
  case 168:  {
   $3747 = $4;
   $3748 = ((($3747)) + 24|0);
   $3749 = ((($3748)) + 32|0);
   $3750 = HEAP32[$3749>>2]|0;
   $3751 = ($3750|0)<(8);
   if ($3751) {
    label = 271;
   } else {
    $3752 = $4;
    $3753 = ((($3752)) + 24|0);
    $3754 = ((($3753)) + 32|0);
    $3755 = HEAP32[$3754>>2]|0;
    $3756 = (($3755) + -4)|0;
    HEAP32[$3754>>2] = $3756;
    $3757 = $4;
    $3758 = ((($3757)) + 132|0);
    $3759 = HEAP32[$3758>>2]|0;
    $3760 = ((($3759)) + 1|0);
    HEAP32[$3758>>2] = $3760;
    label = 560;
   }
   break;
  }
  case 169:  {
   $3761 = $4;
   $3762 = ((($3761)) + 24|0);
   $3763 = ((($3762)) + 32|0);
   $3764 = HEAP32[$3763>>2]|0;
   $3765 = ($3764|0)<(8);
   if ($3765) {
    label = 271;
   } else {
    $3766 = $4;
    $3767 = ((($3766)) + 24|0);
    $3768 = ((($3767)) + 32|0);
    $3769 = HEAP32[$3768>>2]|0;
    $3770 = (($3769) + -4)|0;
    HEAP32[$3768>>2] = $3770;
    $3771 = $4;
    $3772 = ((($3771)) + 132|0);
    $3773 = HEAP32[$3772>>2]|0;
    $3774 = ((($3773)) + 1|0);
    HEAP32[$3772>>2] = $3774;
    label = 560;
   }
   break;
  }
  default: {
   label = 270;
  }
  }
 } while(0);
 if ((label|0) == 270) {
  $3 = 0;
  $3786 = $3;
  STACKTOP = sp;return ($3786|0);
 }
 else if ((label|0) == 271) {
  $3 = 0;
  $3786 = $3;
  STACKTOP = sp;return ($3786|0);
 }
 else if ((label|0) == 560) {
  $3775 = $5;
  $3776 = ($3775|0)==(2);
  if ($3776) {
   $3777 = $4;
   $3778 = ((($3777)) + 24|0);
   $3779 = ((($3778)) + 32|0);
   $3780 = HEAP32[$3779>>2]|0;
   $3781 = (($3780) - 1)|0;
   HEAP32[$3779>>2] = $3781;
  }
  $3782 = $4;
  $3783 = ((($3782)) + 24|0);
  $3784 = ((($3783)) + 12|0);
  $3785 = HEAP32[$3784>>2]|0;
  $3 = $3785;
  $3786 = $3;
  STACKTOP = sp;return ($3786|0);
 }
 return (0)|0;
}
function _emitInt_88($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $6;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = $4;
 $23 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 $24 = (_emitOpc($22,$23,$$byval_copy)|0);
 STACKTOP = sp;return ($24|0);
}
function _lastIp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_vmPointer($3,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 $11 = $1;
 $12 = ((($11)) + 132|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 HEAP8[$14>>0] = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _rollbackPc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_lastIp($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = $1;
 $8 = ((($7)) + 132|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)!=($9|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (16 + (($13*20)|0)|0);
 $3 = $14;
 $15 = $3;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) - ($20))|0;
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($21))|0;
 HEAP32[$24>>2] = $26;
 $27 = $2;
 $28 = $1;
 $29 = ((($28)) + 132|0);
 HEAP32[$29>>2] = $27;
 STACKTOP = sp;return;
}
function _bitsf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $1 = -1;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $3 = 0;
 $6 = $2;
 $7 = $6 & 65535;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + 16)|0;
  $3 = $10;
  $11 = $2;
  $12 = $11 >>> 16;
  $2 = $12;
 }
 $13 = $2;
 $14 = $13 & 255;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $3;
  $17 = (($16) + 8)|0;
  $3 = $17;
  $18 = $2;
  $19 = $18 >>> 8;
  $2 = $19;
 }
 $20 = $2;
 $21 = $20 & 15;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $3;
  $24 = (($23) + 4)|0;
  $3 = $24;
  $25 = $2;
  $26 = $25 >>> 4;
  $2 = $26;
 }
 $27 = $2;
 $28 = $27 & 3;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = $3;
  $31 = (($30) + 2)|0;
  $3 = $31;
  $32 = $2;
  $33 = $32 >>> 2;
  $2 = $33;
 }
 $34 = $2;
 $35 = $34 & 1;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $3;
  $38 = (($37) + 1)|0;
  $3 = $38;
 }
 $39 = $3;
 $1 = $39;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _fixJump($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $8;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = $8;
  $13 = $12 & 3;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 16871;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 1306;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 17318;
   _printFmt($15,0,17269,$vararg_buffer);
   __abort_85();
  }
 }
 $16 = $6;
 $17 = ($16|0)!=(0);
 L5: do {
  if ($17) {
   $18 = $5;
   $19 = $6;
   $20 = (_vmPointer($18,$19)|0);
   $9 = $20;
   $21 = $9;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   switch ($23|0) {
   case 7:  {
    $25 = $8;
    $26 = (($25|0) / 4)&-1;
    $27 = $26&255;
    $28 = $9;
    $29 = ((($28)) + 1|0);
    HEAP8[$29>>0] = $27;
    $30 = $7;
    $31 = $6;
    $32 = (($30) - ($31))|0;
    $33 = $32&65535;
    $34 = $9;
    $35 = ((($34)) + 1|0);
    $36 = ((($35)) + 1|0);
    HEAP8[$36>>0]=$33&255;HEAP8[$36+1>>0]=$33>>8;
    $37 = $9;
    $38 = ((($37)) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $8;
    $42 = (($41|0) / 4)&-1;
    $43 = ($40|0)!=($42|0);
    if ($43) {
     $44 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer8>>2] = 16871;
     $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
     HEAP32[$vararg_ptr11>>2] = 1317;
     $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
     HEAP32[$vararg_ptr12>>2] = 17318;
     _printFmt($44,0,17326,$vararg_buffer8);
     __abort_85();
    }
    $45 = $9;
    $46 = ((($45)) + 1|0);
    $47 = ((($46)) + 1|0);
    $48 = HEAPU8[$47>>0]|(HEAPU8[$47+1>>0]<<8);
    $49 = $48&65535;
    $50 = $7;
    $51 = $6;
    $52 = (($50) - ($51))|0;
    $53 = ($49|0)!=($52|0);
    if ($53) {
     $54 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer13>>2] = 16871;
     $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
     HEAP32[$vararg_ptr16>>2] = 1318;
     $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
     HEAP32[$vararg_ptr17>>2] = 17318;
     _printFmt($54,0,17374,$vararg_buffer13);
     __abort_85();
    }
    $4 = 1;
    $81 = $4;
    STACKTOP = sp;return ($81|0);
    break;
   }
   case 6: case 5: case 4:  {
    $55 = $7;
    $56 = $6;
    $57 = (($55) - ($56))|0;
    $58 = $9;
    $59 = ((($58)) + 1|0);
    $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8)|(HEAPU8[$59+2>>0]<<16)|(HEAPU8[$59+3>>0]<<24);
    $61 = $57 & 16777215;
    $62 = $60 & -16777216;
    $63 = $62 | $61;
    HEAP8[$59>>0]=$63&255;HEAP8[$59+1>>0]=($63>>8)&255;HEAP8[$59+2>>0]=($63>>16)&255;HEAP8[$59+3>>0]=$63>>24;
    $64 = $9;
    $65 = ((($64)) + 1|0);
    $66 = HEAPU8[$65>>0]|(HEAPU8[$65+1>>0]<<8)|(HEAPU8[$65+2>>0]<<16)|(HEAPU8[$65+3>>0]<<24);
    $67 = $66 << 8;
    $68 = $67 >> 8;
    $69 = $7;
    $70 = $6;
    $71 = (($69) - ($70))|0;
    $72 = ($68|0)!=($71|0);
    if (!($72)) {
     break L5;
    }
    $73 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer18>>2] = 16871;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = 1327;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = 17318;
    _printFmt($73,0,17424,$vararg_buffer18);
    __abort_85();
    break L5;
    break;
   }
   default: {
    $24 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer3>>2] = 16871;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 1311;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 17318;
    _printFmt($24,0,28431,$vararg_buffer3);
    __abort_85();
    $4 = 0;
    $81 = $4;
    STACKTOP = sp;return ($81|0);
   }
   }
  }
 } while(0);
 $74 = $8;
 $75 = ($74|0)!=(-1);
 if ($75) {
  $76 = $8;
  $77 = (($76|0) / 4)&-1;
  $78 = $5;
  $79 = ((($78)) + 24|0);
  $80 = ((($79)) + 32|0);
  HEAP32[$80>>2] = $77;
 }
 $4 = 1;
 $81 = $4;
 STACKTOP = sp;return ($81|0);
}
function _invoke($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $6;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $11 = $21;
 $22 = $11;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = HEAP32[3314]|0;
  $25 = $7;
  HEAP32[$vararg_buffer>>2] = 16871;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 1715;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = 17559;
  $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  _printFmt($24,0,17487,$vararg_buffer);
  __abort_85();
  $5 = 1;
  $120 = $5;
  STACKTOP = sp;return ($120|0);
 }
 $26 = $7;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = $7;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if (!($33)) {
   $34 = $7;
   $35 = (_isStatic_91($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    $51 = $7;
    $52 = (_argsSize($51)|0);
    $12 = $52;
    $53 = $7;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $13 = $57;
    $58 = $11;
    $59 = HEAP32[$58>>2]|0;
    $14 = $59;
    $60 = $11;
    $61 = ((($60)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $15 = $62;
    $63 = $11;
    $64 = ((($63)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $16 = $65;
    $66 = $12;
    $67 = (($66>>>0) / 4)&-1;
    $68 = $11;
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (0 - ($67))|0;
    $72 = (($70) + ($71<<2)|0);
    HEAP32[$69>>2] = $72;
    $73 = $9;
    $74 = ($73|0)!=(0|0);
    if ($74) {
     $75 = $11;
     $76 = ((($75)) + 12|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $9;
     $79 = $12;
     $80 = $13;
     $81 = (($79) - ($80))|0;
     _memcpy(($77|0),($78|0),($81|0))|0;
    }
    $82 = $6;
    $83 = ((($82)) + 24|0);
    $84 = ((($83)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $11;
    $87 = ((($86)) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($88)) + -4|0);
    HEAP32[$87>>2] = $89;
    HEAP32[$89>>2] = $85;
    $90 = $6;
    $91 = $7;
    $92 = ((($91)) + 20|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (_vmPointer($90,$93)|0);
    $95 = $11;
    HEAP32[$95>>2] = $94;
    $96 = $6;
    $97 = $11;
    $98 = $7;
    $99 = $10;
    $100 = (_exec($96,$97,$98,$99)|0);
    $17 = $100;
    $101 = $17;
    $102 = ($101|0)==(0);
    $103 = $8;
    $104 = ($103|0)!=(0|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = $8;
     $106 = $15;
     $107 = $13;
     $108 = (0 - ($107))|0;
     $109 = (($106) + ($108)|0);
     $110 = $13;
     _memcpy(($105|0),($109|0),($110|0))|0;
    }
    $111 = $14;
    $112 = $11;
    HEAP32[$112>>2] = $111;
    $113 = $15;
    $114 = $11;
    $115 = ((($114)) + 12|0);
    HEAP32[$115>>2] = $113;
    $116 = $16;
    $117 = $11;
    $118 = ((($117)) + 8|0);
    HEAP32[$118>>2] = $116;
    $119 = $17;
    $5 = $119;
    $120 = $5;
    STACKTOP = sp;return ($120|0);
   }
  }
 }
 $37 = $7;
 $38 = ((($37)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer5>>2] = 16871;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 1721;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = 17559;
  _printFmt($41,0,17566,$vararg_buffer5);
  __abort_85();
 }
 $42 = $7;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer10>>2] = 16871;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 1722;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 17559;
  _printFmt($46,0,17616,$vararg_buffer10);
  __abort_85();
 }
 $47 = $7;
 $48 = (_isStatic_91($47)|0);
 $49 = ($48|0)!=(0);
 if (!($49)) {
  $50 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer15>>2] = 16871;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = 1723;
  $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
  HEAP32[$vararg_ptr19>>2] = 17559;
  _printFmt($50,0,17661,$vararg_buffer15);
  __abort_85();
 }
 $5 = 1;
 $120 = $5;
 STACKTOP = sp;return ($120|0);
}
function _isStatic_91($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _exec($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0.0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0.0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0.0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0.0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0.0, $2417 = 0.0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0.0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0.0, $2431 = 0.0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0.0, $2441 = 0, $2442 = 0, $2443 = 0.0, $2444 = 0.0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0.0, $2454 = 0, $2455 = 0, $2456 = 0.0, $2457 = 0.0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0.0, $2467 = 0, $2468 = 0, $2469 = 0.0, $247 = 0, $2470 = 0.0, $2471 = 0, $2472 = 0.0, $2473 = 0.0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0.0, $2485 = 0, $2486 = 0.0, $2487 = 0.0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0.0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0.0, $2503 = 0, $2504 = 0.0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0.0, $2519 = 0, $252 = 0, $2520 = 0.0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0.0, $2535 = 0, $2536 = 0.0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0.0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0.0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0.0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0.0, $2594 = 0.0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0.0, $2605 = 0.0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0.0, $2616 = 0, $2617 = 0, $2618 = 0.0, $2619 = 0.0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0.0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0.0, $2632 = 0.0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0.0, $2642 = 0, $2643 = 0, $2644 = 0.0, $2645 = 0.0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0.0, $2655 = 0, $2656 = 0;
 var $2657 = 0.0, $2658 = 0.0, $2659 = 0, $266 = 0, $2660 = 0.0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0.0, $2672 = 0, $2673 = 0.0, $2674 = 0.0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0.0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0.0, $269 = 0, $2690 = 0, $2691 = 0.0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0.0, $2706 = 0, $2707 = 0.0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0.0, $2722 = 0, $2723 = 0.0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0.0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0.0, $2749 = 0.0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0.0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0.0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0.0, $2788 = 0.0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0.0, $2793 = 0.0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0.0, $2799 = 0.0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0.0, $2805 = 0.0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0.0, $2817 = 0, $2818 = 0;
 var $2819 = 0.0, $282 = 0, $2820 = 0.0, $2821 = 0, $2822 = 0, $2823 = 0.0, $2824 = 0, $2825 = 0, $2826 = 0.0, $2827 = 0.0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0.0, $2831 = 0, $2832 = 0, $2833 = 0.0, $2834 = 0.0, $2835 = 0, $2836 = 0;
 var $2837 = 0.0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0.0, $2841 = 0.0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0.0, $2851 = 0, $2852 = 0, $2853 = 0.0, $2854 = 0.0;
 var $2855 = 0, $2856 = 0, $2857 = 0.0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0.0, $2861 = 0.0, $2862 = 0, $2863 = 0, $2864 = 0.0, $2865 = 0, $2866 = 0, $2867 = 0.0, $2868 = 0.0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0.0, $2872 = 0;
 var $2873 = 0, $2874 = 0.0, $2875 = 0.0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0.0, $2885 = 0, $2886 = 0, $2887 = 0.0, $2888 = 0.0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0.0, $2892 = 0, $2893 = 0, $2894 = 0.0, $2895 = 0.0, $2896 = 0, $2897 = 0, $2898 = 0.0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0.0, $2902 = 0.0, $2903 = 0, $2904 = 0, $2905 = 0.0, $2906 = 0, $2907 = 0, $2908 = 0.0;
 var $2909 = 0.0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0.0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0.0, $2922 = 0.0, $2923 = 0, $2924 = 0, $2925 = 0.0, $2926 = 0;
 var $2927 = 0, $2928 = 0.0, $2929 = 0.0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0.0, $2933 = 0, $2934 = 0, $2935 = 0.0, $2936 = 0.0, $2937 = 0, $2938 = 0, $2939 = 0.0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0.0, $2943 = 0.0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0.0, $2954 = 0, $2955 = 0.0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0.0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0.0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0.0, $2967 = 0, $2968 = 0, $2969 = 0.0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0.0, $2974 = 0, $2975 = 0, $2976 = 0.0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0.0, $2992 = 0, $2993 = 0.0, $2994 = 0, $2995 = 0, $2996 = 0.0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0.0, $3002 = 0, $3003 = 0, $3004 = 0.0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0.0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0.0, $3014 = 0, $3015 = 0, $3016 = 0.0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0.0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0.0, $3026 = 0, $3027 = 0, $3028 = 0.0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0.0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0.0, $3045 = 0, $3046 = 0.0, $3047 = 0, $3048 = 0, $3049 = 0.0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0.0, $3055 = 0, $3056 = 0, $3057 = 0.0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0.0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0.0, $3067 = 0, $3068 = 0, $3069 = 0.0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0.0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0.0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0.0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0.0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0.0, $3098 = 0, $3099 = 0.0, $31 = 0, $310 = 0, $3100 = 0.0, $3101 = 0, $3102 = 0, $3103 = 0.0, $3104 = 0, $3105 = 0, $3106 = 0.0;
 var $3107 = 0.0, $3108 = 0.0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0.0, $3112 = 0, $3113 = 0, $3114 = 0.0, $3115 = 0.0, $3116 = 0.0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0.0, $3129 = 0, $313 = 0, $3130 = 0.0, $3131 = 0.0, $3132 = 0, $3133 = 0, $3134 = 0.0, $3135 = 0, $3136 = 0, $3137 = 0.0, $3138 = 0.0, $3139 = 0.0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0.0;
 var $3143 = 0, $3144 = 0, $3145 = 0.0, $3146 = 0.0, $3147 = 0.0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0.0, $3151 = 0.0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0;
 var $3161 = 0.0, $3162 = 0, $3163 = 0.0, $3164 = 0.0, $3165 = 0, $3166 = 0, $3167 = 0.0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0.0, $3171 = 0.0, $3172 = 0.0, $3173 = 0, $3174 = 0, $3175 = 0.0, $3176 = 0, $3177 = 0, $3178 = 0.0, $3179 = 0.0;
 var $318 = 0, $3180 = 0.0, $3181 = 0, $3182 = 0, $3183 = 0.0, $3184 = 0, $3185 = 0, $3186 = 0.0, $3187 = 0.0, $3188 = 0.0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0;
 var $3198 = 0.0, $3199 = 0.0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0.0, $3204 = 0.0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0;
 var $3215 = 0.0, $3216 = 0, $3217 = 0, $3218 = 0.0, $3219 = 0.0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0.0, $3223 = 0, $3224 = 0, $3225 = 0.0, $3226 = 0.0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0;
 var $3233 = 0, $3234 = 0, $3235 = 0.0, $3236 = 0, $3237 = 0, $3238 = 0.0, $3239 = 0.0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0.0, $3243 = 0, $3244 = 0, $3245 = 0.0, $3246 = 0.0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0;
 var $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0.0, $3256 = 0, $3257 = 0, $3258 = 0.0, $3259 = 0.0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0.0, $3263 = 0, $3264 = 0, $3265 = 0.0, $3266 = 0.0, $3267 = 0, $3268 = 0, $3269 = 0;
 var $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0.0, $3276 = 0, $3277 = 0, $3278 = 0.0, $3279 = 0.0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0.0, $3283 = 0, $3284 = 0, $3285 = 0.0, $3286 = 0.0, $3287 = 0;
 var $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0;
 var $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0;
 var $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0;
 var $3341 = 0.0, $3342 = 0, $3343 = 0.0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0.0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0.0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0;
 var $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0.0, $3366 = 0, $3367 = 0.0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0.0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0.0, $3376 = 0, $3377 = 0;
 var $3378 = 0.0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0.0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0.0, $3395 = 0;
 var $3396 = 0.0, $3397 = 0, $3398 = 0, $3399 = 0.0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0.0, $3405 = 0, $3406 = 0, $3407 = 0.0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0.0, $3412 = 0;
 var $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0;
 var $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0;
 var $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0;
 var $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0;
 var $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0;
 var $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0;
 var $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0;
 var $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0;
 var $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0;
 var $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0;
 var $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0;
 var $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0;
 var $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0;
 var $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0;
 var $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0;
 var $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0;
 var $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0;
 var $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0;
 var $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0;
 var $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0;
 var $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0;
 var $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0;
 var $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0;
 var $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0;
 var $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0;
 var $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0;
 var $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0;
 var $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0;
 var $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0;
 var $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0;
 var $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0;
 var $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0;
 var $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0;
 var $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0;
 var $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0;
 var $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0;
 var $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0;
 var $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0;
 var $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0;
 var $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0;
 var $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0;
 var $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0;
 var $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0;
 var $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0;
 var $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0;
 var $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0;
 var $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0;
 var $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0;
 var $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0;
 var $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0;
 var $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0;
 var $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0;
 var $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0;
 var $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0;
 var $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0;
 var $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0;
 var $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0;
 var $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0;
 var $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0;
 var $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0;
 var $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0;
 var $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0;
 var $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0;
 var $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0;
 var $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0;
 var $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0;
 var $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0;
 var $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0;
 var $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0;
 var $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0;
 var $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0;
 var $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0;
 var $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0;
 var $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0;
 var $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0;
 var $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0;
 var $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0;
 var $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0;
 var $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0;
 var $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0, $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0;
 var $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0, $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0;
 var $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0, $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0;
 var $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0, $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0;
 var $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0, $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0;
 var $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0, $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0;
 var $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0, $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0;
 var $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0;
 var $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0;
 var $4999 = 0, $5 = 0, $50 = 0, $500 = 0, $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0;
 var $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0;
 var $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0;
 var $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0, $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0;
 var $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0, $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0;
 var $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0, $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0;
 var $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0, $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0;
 var $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0, $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0;
 var $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0, $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0;
 var $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0, $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0;
 var $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0, $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0;
 var $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0, $52 = 0, $520 = 0, $5200 = 0, $5201 = 0.0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0;
 var $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0, $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0.0, $523 = 0, $5230 = 0;
 var $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0, $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0, $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0;
 var $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0, $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0, $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0;
 var $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0, $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0, $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0;
 var $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0, $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0, $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0;
 var $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0, $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0, $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0;
 var $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0, $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0, $5335 = 0, $5336 = 0, $5337 = 0, $5338 = 0, $5339 = 0;
 var $534 = 0, $5340 = 0, $5341 = 0, $5342 = 0, $5343 = 0, $5344 = 0, $5345 = 0, $5346 = 0, $5347 = 0, $5348 = 0, $5349 = 0, $535 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5353 = 0, $5354 = 0, $5355 = 0, $5356 = 0, $5357 = 0;
 var $5358 = 0, $5359 = 0, $536 = 0, $5360 = 0, $5361 = 0, $5362 = 0, $5363 = 0, $5364 = 0, $5365 = 0, $5366 = 0, $5367 = 0, $5368 = 0, $5369 = 0, $537 = 0, $5370 = 0, $5371 = 0, $5372 = 0, $5373 = 0, $5374 = 0, $5375 = 0;
 var $5376 = 0, $5377 = 0, $5378 = 0, $5379 = 0, $538 = 0, $5380 = 0, $5381 = 0, $5382 = 0, $5383 = 0, $5384 = 0, $5385 = 0, $5386 = 0, $5387 = 0, $5388 = 0, $5389 = 0, $539 = 0, $5390 = 0, $5391 = 0, $5392 = 0, $5393 = 0;
 var $5394 = 0, $5395 = 0, $5396 = 0, $5397 = 0, $5398 = 0, $5399 = 0, $54 = 0, $540 = 0, $5400 = 0, $5401 = 0, $5402 = 0, $5403 = 0, $5404 = 0, $5405 = 0, $5406 = 0, $5407 = 0, $5408 = 0, $5409 = 0, $541 = 0, $5410 = 0;
 var $5411 = 0, $5412 = 0, $5413 = 0, $5414 = 0, $5415 = 0, $5416 = 0, $5417 = 0, $5418 = 0, $5419 = 0, $542 = 0, $5420 = 0, $5421 = 0, $5422 = 0, $5423 = 0, $5424 = 0, $5425 = 0, $5426 = 0, $5427 = 0, $5428 = 0, $5429 = 0;
 var $543 = 0, $5430 = 0, $5431 = 0, $5432 = 0, $5433 = 0, $5434 = 0, $5435 = 0, $5436 = 0, $5437 = 0, $5438 = 0, $5439 = 0, $544 = 0, $5440 = 0, $5441 = 0, $5442 = 0, $5443 = 0, $5444 = 0, $5445 = 0, $5446 = 0, $5447 = 0;
 var $5448 = 0, $5449 = 0, $545 = 0, $5450 = 0, $5451 = 0, $5452 = 0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0, $5457 = 0, $5458 = 0, $5459 = 0, $546 = 0, $5460 = 0, $5461 = 0, $5462 = 0, $5463 = 0, $5464 = 0, $5465 = 0;
 var $5466 = 0, $5467 = 0, $5468 = 0, $5469 = 0, $547 = 0, $5470 = 0, $5471 = 0, $5472 = 0, $5473 = 0, $5474 = 0, $5475 = 0, $5476 = 0, $5477 = 0, $5478 = 0, $5479 = 0, $548 = 0, $5480 = 0, $5481 = 0, $5482 = 0, $5483 = 0;
 var $5484 = 0, $5485 = 0, $5486 = 0, $5487 = 0, $5488 = 0, $5489 = 0, $549 = 0, $5490 = 0, $5491 = 0, $5492 = 0, $5493 = 0, $5494 = 0, $5495 = 0, $5496 = 0, $5497 = 0, $5498 = 0, $5499 = 0, $55 = 0, $550 = 0, $5500 = 0;
 var $5501 = 0, $5502 = 0, $5503 = 0, $5504 = 0, $5505 = 0, $5506 = 0, $5507 = 0, $5508 = 0, $5509 = 0, $551 = 0, $5510 = 0, $5511 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5515 = 0, $5516 = 0, $5517 = 0, $5518 = 0, $5519 = 0;
 var $552 = 0, $5520 = 0, $5521 = 0, $5522 = 0, $5523 = 0, $5524 = 0, $5525 = 0, $5526 = 0, $5527 = 0, $5528 = 0, $5529 = 0, $553 = 0, $5530 = 0.0, $5531 = 0, $5532 = 0, $5533 = 0, $5534 = 0, $5535 = 0, $5536 = 0, $5537 = 0;
 var $5538 = 0, $5539 = 0, $554 = 0, $5540 = 0, $5541 = 0, $5542 = 0, $5543 = 0, $5544 = 0, $5545 = 0, $5546 = 0, $5547 = 0, $5548 = 0, $5549 = 0, $555 = 0, $5550 = 0, $5551 = 0, $5552 = 0, $5553 = 0, $5554 = 0, $5555 = 0;
 var $5556 = 0, $5557 = 0, $5558 = 0, $5559 = 0, $556 = 0, $5560 = 0, $5561 = 0, $5562 = 0, $5563 = 0, $5564 = 0, $5565 = 0, $5566 = 0.0, $5567 = 0, $5568 = 0, $5569 = 0, $557 = 0, $5570 = 0, $5571 = 0, $5572 = 0, $5573 = 0;
 var $5574 = 0, $5575 = 0.0, $5576 = 0.0, $5577 = 0, $5578 = 0, $5579 = 0, $558 = 0, $5580 = 0, $5581 = 0, $5582 = 0, $5583 = 0, $5584 = 0, $5585 = 0, $5586 = 0.0, $5587 = 0, $5588 = 0, $5589 = 0.0, $559 = 0, $5590 = 0.0, $5591 = 0;
 var $5592 = 0, $5593 = 0, $5594 = 0, $5595 = 0, $5596 = 0, $5597 = 0, $5598 = 0, $5599 = 0.0, $56 = 0, $560 = 0, $5600 = 0, $5601 = 0, $5602 = 0.0, $5603 = 0.0, $5604 = 0, $5605 = 0, $5606 = 0, $5607 = 0, $5608 = 0, $5609 = 0;
 var $561 = 0, $5610 = 0, $5611 = 0, $5612 = 0.0, $5613 = 0, $5614 = 0, $5615 = 0.0, $5616 = 0.0, $5617 = 0, $5618 = 0, $5619 = 0, $562 = 0, $5620 = 0, $5621 = 0, $5622 = 0, $5623 = 0, $5624 = 0, $5625 = 0.0, $5626 = 0, $5627 = 0;
 var $5628 = 0.0, $5629 = 0.0, $563 = 0, $5630 = 0, $5631 = 0, $5632 = 0, $5633 = 0, $5634 = 0, $5635 = 0, $5636 = 0, $5637 = 0, $5638 = 0, $5639 = 0.0, $564 = 0, $5640 = 0, $5641 = 0.0, $5642 = 0.0, $5643 = 0, $5644 = 0, $5645 = 0;
 var $5646 = 0, $5647 = 0, $5648 = 0, $5649 = 0, $565 = 0, $5650 = 0, $5651 = 0, $5652 = 0, $5653 = 0, $5654 = 0.0, $5655 = 0, $5656 = 0.0, $5657 = 0, $5658 = 0, $5659 = 0, $566 = 0, $5660 = 0, $5661 = 0, $5662 = 0, $5663 = 0;
 var $5664 = 0, $5665 = 0, $5666 = 0, $5667 = 0, $5668 = 0, $5669 = 0, $567 = 0, $5670 = 0.0, $5671 = 0, $5672 = 0.0, $5673 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5677 = 0, $5678 = 0, $5679 = 0, $568 = 0, $5680 = 0, $5681 = 0;
 var $5682 = 0, $5683 = 0, $5684 = 0, $5685 = 0, $5686 = 0.0, $5687 = 0, $5688 = 0.0, $5689 = 0, $569 = 0, $5690 = 0, $5691 = 0, $5692 = 0, $5693 = 0, $5694 = 0, $5695 = 0, $5696 = 0, $5697 = 0, $5698 = 0, $5699 = 0, $57 = 0;
 var $570 = 0, $5700 = 0.0, $5701 = 0, $5702 = 0, $5703 = 0, $5704 = 0, $5705 = 0, $5706 = 0, $5707 = 0, $5708 = 0, $5709 = 0, $571 = 0, $5710 = 0.0, $5711 = 0, $5712 = 0, $5713 = 0, $5714 = 0, $5715 = 0, $5716 = 0, $5717 = 0;
 var $5718 = 0, $5719 = 0, $572 = 0, $5720 = 0, $5721 = 0, $5722 = 0, $5723 = 0, $5724 = 0, $5725 = 0.0, $5726 = 0, $5727 = 0, $5728 = 0, $5729 = 0, $573 = 0, $5730 = 0, $5731 = 0, $5732 = 0, $5733 = 0, $5734 = 0, $5735 = 0;
 var $5736 = 0, $5737 = 0, $5738 = 0, $5739 = 0, $574 = 0, $5740 = 0, $5741 = 0, $5742 = 0, $5743 = 0, $5744 = 0, $5745 = 0.0, $5746 = 0.0, $5747 = 0, $5748 = 0, $5749 = 0, $575 = 0, $5750 = 0, $5751 = 0, $5752 = 0, $5753 = 0;
 var $5754 = 0, $5755 = 0, $5756 = 0.0, $5757 = 0.0, $5758 = 0, $5759 = 0, $576 = 0, $5760 = 0, $5761 = 0, $5762 = 0, $5763 = 0, $5764 = 0, $5765 = 0, $5766 = 0, $5767 = 0.0, $5768 = 0, $5769 = 0, $577 = 0, $5770 = 0.0, $5771 = 0.0;
 var $5772 = 0, $5773 = 0, $5774 = 0, $5775 = 0, $5776 = 0, $5777 = 0, $5778 = 0, $5779 = 0, $578 = 0, $5780 = 0.0, $5781 = 0, $5782 = 0, $5783 = 0.0, $5784 = 0.0, $5785 = 0, $5786 = 0, $5787 = 0, $5788 = 0, $5789 = 0, $579 = 0;
 var $5790 = 0, $5791 = 0, $5792 = 0, $5793 = 0.0, $5794 = 0, $5795 = 0, $5796 = 0.0, $5797 = 0.0, $5798 = 0, $5799 = 0, $58 = 0, $580 = 0, $5800 = 0, $5801 = 0, $5802 = 0, $5803 = 0, $5804 = 0, $5805 = 0, $5806 = 0.0, $5807 = 0;
 var $5808 = 0, $5809 = 0.0, $581 = 0, $5810 = 0.0, $5811 = 0, $5812 = 0, $5813 = 0, $5814 = 0, $5815 = 0, $5816 = 0, $5817 = 0, $5818 = 0, $5819 = 0, $582 = 0, $5820 = 0.0, $5821 = 0, $5822 = 0.0, $5823 = 0.0, $5824 = 0, $5825 = 0;
 var $5826 = 0, $5827 = 0, $5828 = 0, $5829 = 0, $583 = 0, $5830 = 0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0.0, $5836 = 0, $5837 = 0.0, $5838 = 0, $5839 = 0, $584 = 0, $5840 = 0, $5841 = 0, $5842 = 0, $5843 = 0;
 var $5844 = 0, $5845 = 0, $5846 = 0, $5847 = 0, $5848 = 0, $5849 = 0, $585 = 0, $5850 = 0, $5851 = 0.0, $5852 = 0, $5853 = 0.0, $5854 = 0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0, $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0;
 var $5862 = 0, $5863 = 0, $5864 = 0, $5865 = 0, $5866 = 0, $5867 = 0.0, $5868 = 0, $5869 = 0.0, $587 = 0, $5870 = 0, $5871 = 0, $5872 = 0, $5873 = 0, $5874 = 0, $5875 = 0, $5876 = 0, $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0;
 var $5880 = 0, $5881 = 0, $5882 = 0.0, $5883 = 0, $5884 = 0, $5885 = 0, $5886 = 0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0.0, $5895 = 0.0, $5896 = 0, $5897 = 0, $5898 = 0;
 var $5899 = 0, $59 = 0, $590 = 0, $5900 = 0, $5901 = 0, $5902 = 0, $5903 = 0, $5904 = 0, $5905 = 0.0, $5906 = 0, $5907 = 0, $5908 = 0, $5909 = 0, $591 = 0, $5910 = 0, $5911 = 0, $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0;
 var $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0, $592 = 0, $5920 = 0, $5921 = 0.0, $5922 = 0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0, $5930 = 0, $5931 = 0, $5932 = 0, $5933 = 0.0;
 var $5934 = 0.0, $5935 = 0, $5936 = 0, $5937 = 0, $5938 = 0.0, $5939 = 0.0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0, $5944 = 0.0, $5945 = 0.0, $5946 = 0, $5947 = 0, $5948 = 0, $5949 = 0, $595 = 0, $5950 = 0.0, $5951 = 0.0;
 var $5952 = 0, $5953 = 0, $5954 = 0, $5955 = 0, $5956 = 0, $5957 = 0, $5958 = 0, $5959 = 0, $596 = 0, $5960 = 0, $5961 = 0, $5962 = 0.0, $5963 = 0, $5964 = 0, $5965 = 0.0, $5966 = 0.0, $5967 = 0, $5968 = 0, $5969 = 0.0, $597 = 0;
 var $5970 = 0, $5971 = 0, $5972 = 0.0, $5973 = 0.0, $5974 = 0, $5975 = 0, $5976 = 0.0, $5977 = 0, $5978 = 0, $5979 = 0.0, $598 = 0, $5980 = 0.0, $5981 = 0, $5982 = 0, $5983 = 0.0, $5984 = 0, $5985 = 0, $5986 = 0.0, $5987 = 0.0, $5988 = 0;
 var $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0, $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0, $5996 = 0.0, $5997 = 0, $5998 = 0, $5999 = 0.0, $6 = 0, $60 = 0, $600 = 0, $6000 = 0.0, $6001 = 0, $6002 = 0, $6003 = 0.0, $6004 = 0;
 var $6005 = 0, $6006 = 0.0, $6007 = 0.0, $6008 = 0, $6009 = 0, $601 = 0, $6010 = 0.0, $6011 = 0, $6012 = 0, $6013 = 0.0, $6014 = 0.0, $6015 = 0, $6016 = 0, $6017 = 0.0, $6018 = 0, $6019 = 0, $602 = 0, $6020 = 0.0, $6021 = 0.0, $6022 = 0;
 var $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0, $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0.0, $6031 = 0, $6032 = 0, $6033 = 0.0, $6034 = 0.0, $6035 = 0, $6036 = 0, $6037 = 0.0, $6038 = 0, $6039 = 0, $604 = 0, $6040 = 0.0;
 var $6041 = 0.0, $6042 = 0, $6043 = 0, $6044 = 0.0, $6045 = 0, $6046 = 0, $6047 = 0.0, $6048 = 0.0, $6049 = 0, $605 = 0, $6050 = 0, $6051 = 0.0, $6052 = 0, $6053 = 0, $6054 = 0.0, $6055 = 0.0, $6056 = 0, $6057 = 0, $6058 = 0, $6059 = 0;
 var $606 = 0, $6060 = 0, $6061 = 0, $6062 = 0, $6063 = 0, $6064 = 0.0, $6065 = 0, $6066 = 0, $6067 = 0.0, $6068 = 0.0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0.0, $6072 = 0, $6073 = 0, $6074 = 0.0, $6075 = 0.0, $6076 = 0, $6077 = 0;
 var $6078 = 0.0, $6079 = 0, $608 = 0, $6080 = 0, $6081 = 0.0, $6082 = 0.0, $6083 = 0, $6084 = 0, $6085 = 0.0, $6086 = 0, $6087 = 0, $6088 = 0.0, $6089 = 0.0, $609 = 0, $6090 = 0, $6091 = 0, $6092 = 0, $6093 = 0, $6094 = 0, $6095 = 0;
 var $6096 = 0, $6097 = 0, $6098 = 0, $6099 = 0.0, $61 = 0, $610 = 0, $6100 = 0, $6101 = 0.0, $6102 = 0, $6103 = 0, $6104 = 0, $6105 = 0.0, $6106 = 0, $6107 = 0, $6108 = 0.0, $6109 = 0, $611 = 0, $6110 = 0, $6111 = 0, $6112 = 0.0;
 var $6113 = 0, $6114 = 0, $6115 = 0.0, $6116 = 0, $6117 = 0, $6118 = 0, $6119 = 0.0, $612 = 0, $6120 = 0, $6121 = 0, $6122 = 0.0, $6123 = 0, $6124 = 0, $6125 = 0, $6126 = 0, $6127 = 0, $6128 = 0, $6129 = 0, $613 = 0, $6130 = 0;
 var $6131 = 0, $6132 = 0, $6133 = 0, $6134 = 0, $6135 = 0, $6136 = 0, $6137 = 0.0, $6138 = 0, $6139 = 0.0, $614 = 0, $6140 = 0, $6141 = 0, $6142 = 0.0, $6143 = 0, $6144 = 0, $6145 = 0, $6146 = 0, $6147 = 0.0, $6148 = 0, $6149 = 0;
 var $615 = 0, $6150 = 0.0, $6151 = 0, $6152 = 0, $6153 = 0, $6154 = 0.0, $6155 = 0, $6156 = 0, $6157 = 0, $6158 = 0, $6159 = 0.0, $616 = 0, $6160 = 0, $6161 = 0, $6162 = 0.0, $6163 = 0, $6164 = 0, $6165 = 0, $6166 = 0.0, $6167 = 0;
 var $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0, $6171 = 0.0, $6172 = 0, $6173 = 0, $6174 = 0.0, $6175 = 0, $6176 = 0, $6177 = 0, $6178 = 0.0, $6179 = 0, $618 = 0, $6180 = 0, $6181 = 0, $6182 = 0, $6183 = 0, $6184 = 0, $6185 = 0;
 var $6186 = 0, $6187 = 0, $6188 = 0, $6189 = 0, $619 = 0, $6190 = 0.0, $6191 = 0, $6192 = 0.0, $6193 = 0, $6194 = 0, $6195 = 0.0, $6196 = 0, $6197 = 0, $6198 = 0, $6199 = 0, $62 = 0, $620 = 0, $6200 = 0.0, $6201 = 0, $6202 = 0;
 var $6203 = 0.0, $6204 = 0, $6205 = 0, $6206 = 0, $6207 = 0.0, $6208 = 0, $6209 = 0, $621 = 0, $6210 = 0, $6211 = 0, $6212 = 0.0, $6213 = 0, $6214 = 0, $6215 = 0.0, $6216 = 0, $6217 = 0, $6218 = 0, $6219 = 0.0, $622 = 0, $6220 = 0;
 var $6221 = 0, $6222 = 0, $6223 = 0, $6224 = 0.0, $6225 = 0, $6226 = 0, $6227 = 0.0, $6228 = 0, $6229 = 0, $623 = 0, $6230 = 0, $6231 = 0.0, $6232 = 0, $6233 = 0, $6234 = 0, $6235 = 0, $6236 = 0, $6237 = 0, $6238 = 0, $6239 = 0;
 var $624 = 0, $6240 = 0, $6241 = 0, $6242 = 0, $6243 = 0.0, $6244 = 0, $6245 = 0.0, $6246 = 0.0, $6247 = 0, $6248 = 0, $6249 = 0.0, $625 = 0, $6250 = 0, $6251 = 0, $6252 = 0.0, $6253 = 0.0, $6254 = 0.0, $6255 = 0, $6256 = 0, $6257 = 0.0;
 var $6258 = 0, $6259 = 0, $626 = 0, $6260 = 0.0, $6261 = 0.0, $6262 = 0.0, $6263 = 0, $6264 = 0, $6265 = 0, $6266 = 0, $6267 = 0, $6268 = 0, $6269 = 0, $627 = 0, $6270 = 0, $6271 = 0, $6272 = 0, $6273 = 0, $6274 = 0.0, $6275 = 0;
 var $6276 = 0.0, $6277 = 0.0, $6278 = 0, $6279 = 0, $628 = 0, $6280 = 0.0, $6281 = 0, $6282 = 0, $6283 = 0.0, $6284 = 0.0, $6285 = 0.0, $6286 = 0, $6287 = 0, $6288 = 0.0, $6289 = 0, $629 = 0, $6290 = 0, $6291 = 0.0, $6292 = 0.0, $6293 = 0.0;
 var $6294 = 0, $6295 = 0, $6296 = 0.0, $6297 = 0.0, $6298 = 0, $6299 = 0, $63 = 0, $630 = 0, $6300 = 0, $6301 = 0, $6302 = 0, $6303 = 0, $6304 = 0, $6305 = 0, $6306 = 0, $6307 = 0.0, $6308 = 0, $6309 = 0.0, $631 = 0, $6310 = 0.0;
 var $6311 = 0, $6312 = 0, $6313 = 0.0, $6314 = 0, $6315 = 0, $6316 = 0.0, $6317 = 0.0, $6318 = 0.0, $6319 = 0, $632 = 0, $6320 = 0, $6321 = 0.0, $6322 = 0, $6323 = 0, $6324 = 0.0, $6325 = 0.0, $6326 = 0.0, $6327 = 0, $6328 = 0, $6329 = 0.0;
 var $633 = 0, $6330 = 0, $6331 = 0, $6332 = 0.0, $6333 = 0.0, $6334 = 0.0, $6335 = 0, $6336 = 0, $6337 = 0, $6338 = 0, $6339 = 0, $634 = 0, $6340 = 0, $6341 = 0, $6342 = 0, $6343 = 0, $6344 = 0.0, $6345 = 0.0, $6346 = 0, $6347 = 0;
 var $6348 = 0, $6349 = 0.0, $635 = 0, $6350 = 0.0, $6351 = 0, $6352 = 0, $6353 = 0, $6354 = 0, $6355 = 0, $6356 = 0, $6357 = 0, $6358 = 0, $6359 = 0, $636 = 0, $6360 = 0, $6361 = 0.0, $6362 = 0, $6363 = 0, $6364 = 0.0, $6365 = 0.0;
 var $6366 = 0, $6367 = 0, $6368 = 0.0, $6369 = 0, $637 = 0, $6370 = 0, $6371 = 0.0, $6372 = 0.0, $6373 = 0, $6374 = 0, $6375 = 0, $6376 = 0, $6377 = 0, $6378 = 0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0.0, $6382 = 0, $6383 = 0;
 var $6384 = 0.0, $6385 = 0.0, $6386 = 0, $6387 = 0, $6388 = 0.0, $6389 = 0, $639 = 0, $6390 = 0, $6391 = 0.0, $6392 = 0.0, $6393 = 0, $6394 = 0, $6395 = 0, $6396 = 0, $6397 = 0, $6398 = 0, $6399 = 0, $64 = 0, $640 = 0, $6400 = 0;
 var $6401 = 0.0, $6402 = 0, $6403 = 0, $6404 = 0.0, $6405 = 0.0, $6406 = 0, $6407 = 0, $6408 = 0.0, $6409 = 0, $641 = 0, $6410 = 0, $6411 = 0.0, $6412 = 0.0, $6413 = 0, $6414 = 0, $6415 = 0, $6416 = 0, $6417 = 0, $6418 = 0, $6419 = 0;
 var $642 = 0, $6420 = 0, $6421 = 0.0, $6422 = 0, $6423 = 0, $6424 = 0.0, $6425 = 0.0, $6426 = 0, $6427 = 0, $6428 = 0.0, $6429 = 0, $643 = 0, $6430 = 0, $6431 = 0.0, $6432 = 0.0, $6433 = 0, $6434 = 0, $6435 = 0, $6436 = 0, $6437 = 0;
 var $6438 = 0, $6439 = 0, $644 = 0, $6440 = 0, $6441 = 0, $6442 = 0, $6443 = 0, $6444 = 0, $6445 = 0, $6446 = 0, $6447 = 0, $6448 = 0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0, $6452 = 0, $6453 = 0, $6454 = 0, $6455 = 0;
 var $6456 = 0, $6457 = 0, $6458 = 0, $6459 = 0, $646 = 0, $6460 = 0, $6461 = 0, $6462 = 0, $6463 = 0, $6464 = 0, $6465 = 0, $6466 = 0, $6467 = 0, $6468 = 0, $6469 = 0, $647 = 0, $6470 = 0, $6471 = 0, $6472 = 0, $6473 = 0;
 var $6474 = 0, $6475 = 0, $6476 = 0, $6477 = 0, $6478 = 0, $6479 = 0, $648 = 0, $6480 = 0, $6481 = 0, $6482 = 0, $6483 = 0, $6484 = 0, $6485 = 0, $6486 = 0, $6487 = 0.0, $6488 = 0, $6489 = 0.0, $649 = 0, $6490 = 0, $6491 = 0;
 var $6492 = 0, $6493 = 0.0, $6494 = 0, $6495 = 0, $6496 = 0.0, $6497 = 0, $6498 = 0, $6499 = 0, $65 = 0, $650 = 0, $6500 = 0, $6501 = 0, $6502 = 0, $6503 = 0, $6504 = 0, $6505 = 0, $6506 = 0, $6507 = 0, $6508 = 0, $6509 = 0;
 var $651 = 0, $6510 = 0, $6511 = 0.0, $6512 = 0, $6513 = 0.0, $6514 = 0, $6515 = 0, $6516 = 0.0, $6517 = 0, $6518 = 0, $6519 = 0, $652 = 0, $6520 = 0, $6521 = 0.0, $6522 = 0, $6523 = 0, $6524 = 0.0, $6525 = 0, $6526 = 0, $6527 = 0;
 var $6528 = 0.0, $6529 = 0, $653 = 0, $6530 = 0, $6531 = 0, $6532 = 0, $6533 = 0, $6534 = 0, $6535 = 0, $6536 = 0, $6537 = 0, $6538 = 0, $6539 = 0, $654 = 0, $6540 = 0.0, $6541 = 0, $6542 = 0.0, $6543 = 0, $6544 = 0, $6545 = 0.0;
 var $6546 = 0, $6547 = 0, $6548 = 0, $6549 = 0, $655 = 0, $6550 = 0.0, $6551 = 0, $6552 = 0, $6553 = 0.0, $6554 = 0, $6555 = 0, $6556 = 0, $6557 = 0.0, $6558 = 0, $6559 = 0, $656 = 0, $6560 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $spec$store$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $28 = sp + 364|0;
 $61 = sp + 176|0;
 $63 = sp + 144|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $91 = $5;
 $92 = ((($91)) + 24|0);
 $93 = HEAP32[$92>>2]|0;
 $9 = $93;
 $10 = 0;
 $11 = 1;
 $94 = $5;
 $95 = ((($94)) + 140|0);
 $96 = HEAP32[$95>>2]|0;
 $12 = $96;
 $97 = $5;
 $98 = ((($97)) + 24|0);
 $99 = ((($98)) + 20|0);
 $100 = HEAP32[$99>>2]|0;
 $13 = $100;
 $101 = $5;
 $102 = ((($101)) + 144|0);
 $14 = $102;
 $103 = $6;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $6;
 $107 = ((($106)) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($105) + ($108)|0);
 $15 = $109;
 $110 = $7;
 $111 = ($110|0)==(0|0);
 if (!($111)) {
  $112 = $7;
  $113 = ((($112)) + 20|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)==(0);
  if (!($115)) {
   $118 = $5;
   $119 = ((($118)) + 20|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)!=(0|0);
   if (!($121)) {
    L6: while(1) {
     $3474 = $6;
     $3475 = HEAP32[$3474>>2]|0;
     $59 = $3475;
     $3476 = $6;
     $3477 = ((($3476)) + 12|0);
     $3478 = HEAP32[$3477>>2]|0;
     $60 = $3478;
     $3479 = $59;
     $3480 = HEAP8[$3479>>0]|0;
     $3481 = $3480&255;
     L8: do {
      switch ($3481|0) {
      case 0:  {
       $3502 = $6;
       $3503 = ((($3502)) + 12|0);
       $3504 = HEAP32[$3503>>2]|0;
       HEAP32[$3503>>2] = $3504;
       $3505 = $6;
       $3506 = HEAP32[$3505>>2]|0;
       $3507 = ((($3506)) + 1|0);
       HEAP32[$3505>>2] = $3507;
       break;
      }
      case 1:  {
       $3508 = $6;
       $3509 = ((($3508)) + 12|0);
       $3510 = HEAP32[$3509>>2]|0;
       HEAP32[$3509>>2] = $3510;
       $3511 = $6;
       $3512 = HEAP32[$3511>>2]|0;
       $3513 = ((($3512)) + 4|0);
       HEAP32[$3511>>2] = $3513;
       $3514 = $9;
       $3515 = $59;
       $3516 = ((($3515)) + 1|0);
       $3517 = HEAPU8[$3516>>0]|(HEAPU8[$3516+1>>0]<<8)|(HEAPU8[$3516+2>>0]<<16)|(HEAPU8[$3516+3>>0]<<24);
       $3518 = $3517 << 8;
       $3519 = $3518 >> 8;
       $3520 = (($3514) + ($3519<<2)|0);
       $3521 = HEAP32[$3520>>2]|0;
       $62 = $3521;
       $3522 = $5;
       HEAP32[$63>>2] = $3522;
       $3523 = $62;
       $3524 = ((($3523)) + 8|0);
       $3525 = HEAP32[$3524>>2]|0;
       $3526 = ((($63)) + 4|0);
       HEAP32[$3526>>2] = $3525;
       $3527 = $8;
       $3528 = ((($63)) + 12|0);
       HEAP32[$3528>>2] = $3527;
       $3529 = $62;
       $3530 = ((($3529)) + 4|0);
       $3531 = HEAP32[$3530>>2]|0;
       $3532 = ((($63)) + 8|0);
       HEAP32[$3532>>2] = $3531;
       $3533 = $60;
       $3534 = ((($63)) + 16|0);
       HEAP32[$3534>>2] = $3533;
       $3535 = $62;
       $3536 = ((($3535)) + 16|0);
       $3537 = HEAP32[$3536>>2]|0;
       $3538 = $3537<<2;
       $3539 = ((($63)) + 20|0);
       HEAP32[$3539>>2] = $3538;
       $3540 = ((($63)) + 24|0);
       HEAP32[$3540>>2] = (-1);
       $3541 = $62;
       $3542 = HEAP32[$3541>>2]|0;
       $3543 = (FUNCTION_TABLE_ii[$3542 & 127]($63)|0);
       $64 = $3543;
       $3544 = $64;
       $3545 = ($3544|0)!=(0);
       if ($3545) {
        label = 297;
        break L6;
       }
       $3546 = $59;
       $3547 = ((($3546)) + 1|0);
       $3548 = HEAPU8[$3547>>0]|(HEAPU8[$3547+1>>0]<<8)|(HEAPU8[$3547+2>>0]<<16)|(HEAPU8[$3547+3>>0]<<24);
       $3549 = $3548 << 8;
       $3550 = $3549 >> 8;
       $3551 = ($3550|0)==(0);
       if ($3551) {
        break L6;
       }
       $3552 = $62;
       $3553 = ((($3552)) + 20|0);
       $3554 = HEAP32[$3553>>2]|0;
       $3555 = $62;
       $3556 = ((($3555)) + 16|0);
       $3557 = HEAP32[$3556>>2]|0;
       $3558 = (($3554) - ($3557))|0;
       $3559 = $6;
       $3560 = ((($3559)) + 12|0);
       $3561 = HEAP32[$3560>>2]|0;
       $3562 = (0 - ($3558))|0;
       $3563 = (($3561) + ($3562<<2)|0);
       HEAP32[$3560>>2] = $3563;
       $3564 = $6;
       $3565 = HEAP32[$3564>>2]|0;
       HEAP32[$3564>>2] = $3565;
       break;
      }
      case 2:  {
       $3566 = $6;
       $3567 = ((($3566)) + 12|0);
       $3568 = HEAP32[$3567>>2]|0;
       HEAP32[$3567>>2] = $3568;
       $3569 = $6;
       $3570 = HEAP32[$3569>>2]|0;
       $3571 = ((($3570)) + 1|0);
       HEAP32[$3569>>2] = $3571;
       $3572 = $60;
       $3573 = HEAP32[$3572>>2]|0;
       $65 = $3573;
       $3574 = $6;
       $3575 = HEAP32[$3574>>2]|0;
       $3576 = $14;
       $3577 = $3575;
       $3578 = $3576;
       $3579 = (($3577) - ($3578))|0;
       $66 = $3579;
       $3580 = $65;
       $3581 = ($3580>>>0)<=(0);
       if ($3581) {
        label = 291;
        break L6;
       }
       $3582 = $65;
       $3583 = $12;
       $3584 = ($3582>>>0)>($3583>>>0);
       if ($3584) {
        label = 291;
        break L6;
       }
       $3585 = $14;
       $3586 = $65;
       $3587 = (($3585) + ($3586)|0);
       $3588 = $6;
       HEAP32[$3588>>2] = $3587;
       $3589 = $66;
       $3590 = $60;
       HEAP32[$3590>>2] = $3589;
       break;
      }
      case 3:  {
       $3591 = $6;
       $3592 = ((($3591)) + 12|0);
       $3593 = HEAP32[$3592>>2]|0;
       $3594 = ((($3593)) + 4|0);
       HEAP32[$3592>>2] = $3594;
       $3595 = $6;
       $3596 = HEAP32[$3595>>2]|0;
       $3597 = ((($3596)) + 1|0);
       HEAP32[$3595>>2] = $3597;
       $3598 = $60;
       $3599 = HEAP32[$3598>>2]|0;
       $67 = $3599;
       $3600 = $67;
       $3601 = ($3600>>>0)<=(0);
       if ($3601) {
        label = 291;
        break L6;
       }
       $3602 = $67;
       $3603 = $12;
       $3604 = ($3602>>>0)>($3603>>>0);
       if ($3604) {
        label = 291;
        break L6;
       }
       $3605 = $14;
       $3606 = $67;
       $3607 = (($3605) + ($3606)|0);
       $3608 = $6;
       HEAP32[$3608>>2] = $3607;
       break;
      }
      case 4:  {
       $3609 = $6;
       $3610 = ((($3609)) + 12|0);
       $3611 = HEAP32[$3610>>2]|0;
       HEAP32[$3610>>2] = $3611;
       $3612 = $6;
       $3613 = HEAP32[$3612>>2]|0;
       $3614 = ((($3613)) + 4|0);
       HEAP32[$3612>>2] = $3614;
       $3615 = $59;
       $3616 = ((($3615)) + 1|0);
       $3617 = HEAPU8[$3616>>0]|(HEAPU8[$3616+1>>0]<<8)|(HEAPU8[$3616+2>>0]<<16)|(HEAPU8[$3616+3>>0]<<24);
       $3618 = $3617 << 8;
       $3619 = $3618 >> 8;
       $3620 = (($3619) - 4)|0;
       $3621 = $6;
       $3622 = HEAP32[$3621>>2]|0;
       $3623 = (($3622) + ($3620)|0);
       HEAP32[$3621>>2] = $3623;
       break;
      }
      case 5:  {
       $3624 = $6;
       $3625 = ((($3624)) + 12|0);
       $3626 = HEAP32[$3625>>2]|0;
       $3627 = ((($3626)) + 4|0);
       HEAP32[$3625>>2] = $3627;
       $3628 = $6;
       $3629 = HEAP32[$3628>>2]|0;
       $3630 = ((($3629)) + 4|0);
       HEAP32[$3628>>2] = $3630;
       $3631 = $60;
       $3632 = HEAP32[$3631>>2]|0;
       $3633 = ($3632|0)!=(0);
       if ($3633) {
        $3634 = $59;
        $3635 = ((($3634)) + 1|0);
        $3636 = HEAPU8[$3635>>0]|(HEAPU8[$3635+1>>0]<<8)|(HEAPU8[$3635+2>>0]<<16)|(HEAPU8[$3635+3>>0]<<24);
        $3637 = $3636 << 8;
        $3638 = $3637 >> 8;
        $3639 = (($3638) - 4)|0;
        $3640 = $6;
        $3641 = HEAP32[$3640>>2]|0;
        $3642 = (($3641) + ($3639)|0);
        HEAP32[$3640>>2] = $3642;
       }
       break;
      }
      case 6:  {
       $3643 = $6;
       $3644 = ((($3643)) + 12|0);
       $3645 = HEAP32[$3644>>2]|0;
       $3646 = ((($3645)) + 4|0);
       HEAP32[$3644>>2] = $3646;
       $3647 = $6;
       $3648 = HEAP32[$3647>>2]|0;
       $3649 = ((($3648)) + 4|0);
       HEAP32[$3647>>2] = $3649;
       $3650 = $60;
       $3651 = HEAP32[$3650>>2]|0;
       $3652 = ($3651|0)==(0);
       if ($3652) {
        $3653 = $59;
        $3654 = ((($3653)) + 1|0);
        $3655 = HEAPU8[$3654>>0]|(HEAPU8[$3654+1>>0]<<8)|(HEAPU8[$3654+2>>0]<<16)|(HEAPU8[$3654+3>>0]<<24);
        $3656 = $3655 << 8;
        $3657 = $3656 >> 8;
        $3658 = (($3657) - 4)|0;
        $3659 = $6;
        $3660 = HEAP32[$3659>>2]|0;
        $3661 = (($3660) + ($3658)|0);
        HEAP32[$3659>>2] = $3661;
       }
       break;
      }
      case 7:  {
       $3662 = $6;
       $3663 = ((($3662)) + 12|0);
       $3664 = HEAP32[$3663>>2]|0;
       HEAP32[$3663>>2] = $3664;
       $3665 = $6;
       $3666 = HEAP32[$3665>>2]|0;
       $3667 = ((($3666)) + 4|0);
       HEAP32[$3665>>2] = $3667;
       $3668 = $6;
       $3669 = $59;
       $3670 = ((($3669)) + 1|0);
       $3671 = ((($3670)) + 1|0);
       $3672 = HEAPU8[$3671>>0]|(HEAPU8[$3671+1>>0]<<8);
       $3673 = $3672&65535;
       $3674 = $3673<<2;
       $3675 = (_vmFork($3668,1,-1,$3674)|0);
       $3676 = ($3675|0)!=(0);
       if ($3676) {
        $3677 = $59;
        $3678 = ((($3677)) + 1|0);
        $3679 = ((($3678)) + 1|0);
        $3680 = HEAPU8[$3679>>0]|(HEAPU8[$3679+1>>0]<<8);
        $3681 = $3680&65535;
        $3682 = (($3681) - 4)|0;
        $3683 = $6;
        $3684 = HEAP32[$3683>>2]|0;
        $3685 = (($3684) + ($3682)|0);
        HEAP32[$3683>>2] = $3685;
       }
       break;
      }
      case 8:  {
       $3686 = $6;
       $3687 = ((($3686)) + 12|0);
       $3688 = HEAP32[$3687>>2]|0;
       HEAP32[$3687>>2] = $3688;
       $3689 = $6;
       $3690 = HEAP32[$3689>>2]|0;
       $3691 = ((($3690)) + 2|0);
       HEAP32[$3689>>2] = $3691;
       $3692 = $6;
       $3693 = $59;
       $3694 = ((($3693)) + 1|0);
       $3695 = HEAP8[$3694>>0]|0;
       $3696 = $3695&255;
       $3697 = (_vmJoin($3692,-1,$3696)|0);
       $3698 = ($3697|0)!=(0);
       if (!($3698)) {
        $3699 = $6;
        $3700 = ((($3699)) + 12|0);
        $3701 = HEAP32[$3700>>2]|0;
        HEAP32[$3700>>2] = $3701;
        $3702 = $6;
        $3703 = HEAP32[$3702>>2]|0;
        $3704 = ((($3703)) + -2|0);
        HEAP32[$3702>>2] = $3704;
       }
       break;
      }
      case 10:  {
       $3705 = $6;
       $3706 = ((($3705)) + 12|0);
       $3707 = HEAP32[$3706>>2]|0;
       HEAP32[$3706>>2] = $3707;
       $3708 = $6;
       $3709 = HEAP32[$3708>>2]|0;
       $3710 = ((($3709)) + 1|0);
       HEAP32[$3708>>2] = $3710;
       $3711 = $60;
       $3712 = HEAP32[$3711>>2]|0;
       $3713 = ($3712|0)!=(0);
       $3714 = $3713 ^ 1;
       $3715 = $3714&1;
       $3716 = $60;
       HEAP32[$3716>>2] = $3715;
       break;
      }
      case 11:  {
       $3717 = $6;
       $3718 = ((($3717)) + 12|0);
       $3719 = HEAP32[$3718>>2]|0;
       HEAP32[$3718>>2] = $3719;
       $3720 = $6;
       $3721 = HEAP32[$3720>>2]|0;
       $3722 = ((($3721)) + 4|0);
       HEAP32[$3720>>2] = $3722;
       $3723 = $59;
       $3724 = ((($3723)) + 1|0);
       $3725 = HEAPU8[$3724>>0]|(HEAPU8[$3724+1>>0]<<8)|(HEAPU8[$3724+2>>0]<<16)|(HEAPU8[$3724+3>>0]<<24);
       $3726 = $3725 << 8;
       $3727 = $3726 >> 8;
       $3728 = $60;
       $3729 = HEAP32[$3728>>2]|0;
       $3730 = (($3729) + ($3727))|0;
       HEAP32[$3728>>2] = $3730;
       break;
      }
      case 12:  {
       $3731 = $6;
       $3732 = ((($3731)) + 12|0);
       $3733 = HEAP32[$3732>>2]|0;
       $3734 = ((($3733)) + 4|0);
       HEAP32[$3732>>2] = $3734;
       $3735 = $6;
       $3736 = HEAP32[$3735>>2]|0;
       $3737 = ((($3736)) + 4|0);
       HEAP32[$3735>>2] = $3737;
       $3738 = $60;
       $3739 = HEAP32[$3738>>2]|0;
       $3740 = $59;
       $3741 = ((($3740)) + 1|0);
       $3742 = HEAPU8[$3741>>0]|(HEAPU8[$3741+1>>0]<<8)|(HEAPU8[$3741+2>>0]<<16)|(HEAPU8[$3741+3>>0]<<24);
       $3743 = $3742 << 8;
       $3744 = $3743 >> 8;
       $3745 = Math_imul($3739, $3744)|0;
       $3746 = $60;
       $3747 = ((($3746)) + 4|0);
       $3748 = HEAP32[$3747>>2]|0;
       $3749 = (($3748) + ($3745))|0;
       HEAP32[$3747>>2] = $3749;
       break;
      }
      case 16:  {
       $3750 = $6;
       $3751 = ((($3750)) + 12|0);
       $3752 = HEAP32[$3751>>2]|0;
       HEAP32[$3751>>2] = $3752;
       $3753 = $6;
       $3754 = HEAP32[$3753>>2]|0;
       $3755 = ((($3754)) + 4|0);
       HEAP32[$3753>>2] = $3755;
       $3756 = $59;
       $3757 = ((($3756)) + 1|0);
       $3758 = HEAPU8[$3757>>0]|(HEAPU8[$3757+1>>0]<<8)|(HEAPU8[$3757+2>>0]<<16)|(HEAPU8[$3757+3>>0]<<24);
       $3759 = $3758 << 8;
       $3760 = $3759 >> 8;
       $3761 = (($3760|0) / 4)&-1;
       $68 = $3761;
       $3762 = $59;
       $3763 = ((($3762)) + 1|0);
       $3764 = HEAPU8[$3763>>0]|(HEAPU8[$3763+1>>0]<<8)|(HEAPU8[$3763+2>>0]<<16)|(HEAPU8[$3763+3>>0]<<24);
       $3765 = $3764 << 8;
       $3766 = $3765 >> 8;
       $3767 = $3766 & 3;
       $3768 = ($3767|0)!=(0);
       if ($3768) {
        label = 291;
        break L6;
       }
       $3769 = $68;
       $3770 = ($3769|0)>(0);
       $3771 = $68;
       $3772 = $6;
       $3773 = ((($3772)) + 12|0);
       $3774 = HEAP32[$3773>>2]|0;
       $3775 = (0 - ($3771))|0;
       $3776 = (($3774) + ($3775<<2)|0);
       HEAP32[$3773>>2] = $3776;
       $3777 = $6;
       $3778 = HEAP32[$3777>>2]|0;
       HEAP32[$3777>>2] = $3778;
       if ($3770) {
        $3779 = $6;
        $3780 = (_ovf($3779)|0);
        $3781 = ($3780|0)!=(0);
        if ($3781) {
         label = 292;
         break L6;
        }
       }
       break;
      }
      case 17:  {
       $3782 = $6;
       $3783 = ((($3782)) + 12|0);
       $3784 = HEAP32[$3783>>2]|0;
       $3785 = ((($3784)) + -4|0);
       HEAP32[$3783>>2] = $3785;
       $3786 = $6;
       $3787 = HEAP32[$3786>>2]|0;
       $3788 = ((($3787)) + 4|0);
       HEAP32[$3786>>2] = $3788;
       $3789 = $6;
       $3790 = (_ovf($3789)|0);
       $3791 = ($3790|0)!=(0);
       if ($3791) {
        label = 292;
        break L6;
       }
       $3792 = $60;
       $3793 = $14;
       $3794 = $3792;
       $3795 = $3793;
       $3796 = (($3794) - ($3795))|0;
       $3797 = $59;
       $3798 = ((($3797)) + 1|0);
       $3799 = HEAPU8[$3798>>0]|(HEAPU8[$3798+1>>0]<<8)|(HEAPU8[$3798+2>>0]<<16)|(HEAPU8[$3798+3>>0]<<24);
       $3800 = $3799 << 8;
       $3801 = $3800 >> 8;
       $3802 = (($3796) + ($3801))|0;
       $3803 = $60;
       $3804 = ((($3803)) + -4|0);
       HEAP32[$3804>>2] = $3802;
       break;
      }
      case 18:  {
       $3805 = $6;
       $3806 = ((($3805)) + 12|0);
       $3807 = HEAP32[$3806>>2]|0;
       $3808 = ((($3807)) + -4|0);
       HEAP32[$3806>>2] = $3808;
       $3809 = $6;
       $3810 = HEAP32[$3809>>2]|0;
       $3811 = ((($3810)) + 2|0);
       HEAP32[$3809>>2] = $3811;
       $3812 = $6;
       $3813 = (_ovf($3812)|0);
       $3814 = ($3813|0)!=(0);
       if ($3814) {
        label = 292;
        break L6;
       }
       $3815 = $60;
       $3816 = $59;
       $3817 = ((($3816)) + 1|0);
       $3818 = HEAP8[$3817>>0]|0;
       $3819 = $3818&255;
       $3820 = (($3815) + ($3819<<2)|0);
       $3821 = HEAP32[$3820>>2]|0;
       $3822 = $60;
       $3823 = ((($3822)) + -4|0);
       HEAP32[$3823>>2] = $3821;
       break;
      }
      case 19:  {
       $3824 = $6;
       $3825 = ((($3824)) + 12|0);
       $3826 = HEAP32[$3825>>2]|0;
       $3827 = ((($3826)) + -8|0);
       HEAP32[$3825>>2] = $3827;
       $3828 = $6;
       $3829 = HEAP32[$3828>>2]|0;
       $3830 = ((($3829)) + 2|0);
       HEAP32[$3828>>2] = $3830;
       $3831 = $6;
       $3832 = (_ovf($3831)|0);
       $3833 = ($3832|0)!=(0);
       if ($3833) {
        label = 292;
        break L6;
       }
       $3834 = $60;
       $3835 = $59;
       $3836 = ((($3835)) + 1|0);
       $3837 = HEAP8[$3836>>0]|0;
       $3838 = $3837&255;
       $3839 = (($3834) + ($3838<<2)|0);
       $3840 = $3839;
       $3841 = $3840;
       $3842 = HEAP32[$3841>>2]|0;
       $3843 = (($3840) + 4)|0;
       $3844 = $3843;
       $3845 = HEAP32[$3844>>2]|0;
       $3846 = $60;
       $3847 = ((($3846)) + -8|0);
       $3848 = $3847;
       $3849 = $3848;
       HEAP32[$3849>>2] = $3842;
       $3850 = (($3848) + 4)|0;
       $3851 = $3850;
       HEAP32[$3851>>2] = $3845;
       break;
      }
      case 20:  {
       $3852 = $6;
       $3853 = ((($3852)) + 12|0);
       $3854 = HEAP32[$3853>>2]|0;
       $3855 = ((($3854)) + -16|0);
       HEAP32[$3853>>2] = $3855;
       $3856 = $6;
       $3857 = HEAP32[$3856>>2]|0;
       $3858 = ((($3857)) + 2|0);
       HEAP32[$3856>>2] = $3858;
       $3859 = $6;
       $3860 = (_ovf($3859)|0);
       $3861 = ($3860|0)!=(0);
       if ($3861) {
        label = 292;
        break L6;
       }
       $3862 = $60;
       $3863 = $59;
       $3864 = ((($3863)) + 1|0);
       $3865 = HEAP8[$3864>>0]|0;
       $3866 = $3865&255;
       $3867 = (($3866) + 0)|0;
       $3868 = (($3862) + ($3867<<2)|0);
       $3869 = HEAP32[$3868>>2]|0;
       $3870 = $60;
       $3871 = ((($3870)) + -16|0);
       HEAP32[$3871>>2] = $3869;
       $3872 = $60;
       $3873 = $59;
       $3874 = ((($3873)) + 1|0);
       $3875 = HEAP8[$3874>>0]|0;
       $3876 = $3875&255;
       $3877 = (($3876) + 1)|0;
       $3878 = (($3872) + ($3877<<2)|0);
       $3879 = HEAP32[$3878>>2]|0;
       $3880 = $60;
       $3881 = ((($3880)) + -12|0);
       HEAP32[$3881>>2] = $3879;
       $3882 = $60;
       $3883 = $59;
       $3884 = ((($3883)) + 1|0);
       $3885 = HEAP8[$3884>>0]|0;
       $3886 = $3885&255;
       $3887 = (($3886) + 2)|0;
       $3888 = (($3882) + ($3887<<2)|0);
       $3889 = HEAP32[$3888>>2]|0;
       $3890 = $60;
       $3891 = ((($3890)) + -8|0);
       HEAP32[$3891>>2] = $3889;
       $3892 = $60;
       $3893 = $59;
       $3894 = ((($3893)) + 1|0);
       $3895 = HEAP8[$3894>>0]|0;
       $3896 = $3895&255;
       $3897 = (($3896) + 3)|0;
       $3898 = (($3892) + ($3897<<2)|0);
       $3899 = HEAP32[$3898>>2]|0;
       $3900 = $60;
       $3901 = ((($3900)) + -4|0);
       HEAP32[$3901>>2] = $3899;
       break;
      }
      case 21:  {
       $3902 = $59;
       $3903 = ((($3902)) + 1|0);
       $3904 = HEAP8[$3903>>0]|0;
       $3905 = $3904&255;
       $3906 = ($3905|0)<=(1);
       if ($3906) {
        $3907 = $59;
        $3908 = ((($3907)) + 1|0);
        $3909 = HEAP8[$3908>>0]|0;
        $3910 = $3909&255;
        $3911 = (0 - ($3910))|0;
        $3916 = $3911;
       } else {
        $3916 = -1;
       }
       $3912 = $6;
       $3913 = ((($3912)) + 12|0);
       $3914 = HEAP32[$3913>>2]|0;
       $3915 = (0 - ($3916))|0;
       $3917 = (($3914) + ($3915<<2)|0);
       HEAP32[$3913>>2] = $3917;
       $3918 = $6;
       $3919 = HEAP32[$3918>>2]|0;
       $3920 = ((($3919)) + 2|0);
       HEAP32[$3918>>2] = $3920;
       $3921 = $60;
       $3922 = HEAP32[$3921>>2]|0;
       $3923 = $60;
       $3924 = $59;
       $3925 = ((($3924)) + 1|0);
       $3926 = HEAP8[$3925>>0]|0;
       $3927 = $3926&255;
       $3928 = (($3923) + ($3927<<2)|0);
       HEAP32[$3928>>2] = $3922;
       break;
      }
      case 22:  {
       $3929 = $59;
       $3930 = ((($3929)) + 1|0);
       $3931 = HEAP8[$3930>>0]|0;
       $3932 = $3931&255;
       $3933 = ($3932|0)<=(2);
       if ($3933) {
        $3934 = $59;
        $3935 = ((($3934)) + 1|0);
        $3936 = HEAP8[$3935>>0]|0;
        $3937 = $3936&255;
        $3938 = (0 - ($3937))|0;
        $3943 = $3938;
       } else {
        $3943 = -2;
       }
       $3939 = $6;
       $3940 = ((($3939)) + 12|0);
       $3941 = HEAP32[$3940>>2]|0;
       $3942 = (0 - ($3943))|0;
       $3944 = (($3941) + ($3942<<2)|0);
       HEAP32[$3940>>2] = $3944;
       $3945 = $6;
       $3946 = HEAP32[$3945>>2]|0;
       $3947 = ((($3946)) + 2|0);
       HEAP32[$3945>>2] = $3947;
       $3948 = $60;
       $3949 = $3948;
       $3950 = $3949;
       $3951 = HEAP32[$3950>>2]|0;
       $3952 = (($3949) + 4)|0;
       $3953 = $3952;
       $3954 = HEAP32[$3953>>2]|0;
       $3955 = $60;
       $3956 = $59;
       $3957 = ((($3956)) + 1|0);
       $3958 = HEAP8[$3957>>0]|0;
       $3959 = $3958&255;
       $3960 = (($3955) + ($3959<<2)|0);
       $3961 = $3960;
       $3962 = $3961;
       HEAP32[$3962>>2] = $3951;
       $3963 = (($3961) + 4)|0;
       $3964 = $3963;
       HEAP32[$3964>>2] = $3954;
       break;
      }
      case 23:  {
       $3965 = $59;
       $3966 = ((($3965)) + 1|0);
       $3967 = HEAP8[$3966>>0]|0;
       $3968 = $3967&255;
       $3969 = ($3968|0)<=(4);
       if ($3969) {
        $3970 = $59;
        $3971 = ((($3970)) + 1|0);
        $3972 = HEAP8[$3971>>0]|0;
        $3973 = $3972&255;
        $3974 = (0 - ($3973))|0;
        $3979 = $3974;
       } else {
        $3979 = -4;
       }
       $3975 = $6;
       $3976 = ((($3975)) + 12|0);
       $3977 = HEAP32[$3976>>2]|0;
       $3978 = (0 - ($3979))|0;
       $3980 = (($3977) + ($3978<<2)|0);
       HEAP32[$3976>>2] = $3980;
       $3981 = $6;
       $3982 = HEAP32[$3981>>2]|0;
       $3983 = ((($3982)) + 2|0);
       HEAP32[$3981>>2] = $3983;
       $3984 = $60;
       $3985 = ((($3984)) + 12|0);
       $3986 = HEAP32[$3985>>2]|0;
       $3987 = $60;
       $3988 = $59;
       $3989 = ((($3988)) + 1|0);
       $3990 = HEAP8[$3989>>0]|0;
       $3991 = $3990&255;
       $3992 = (($3991) + 3)|0;
       $3993 = (($3987) + ($3992<<2)|0);
       HEAP32[$3993>>2] = $3986;
       $3994 = $60;
       $3995 = ((($3994)) + 8|0);
       $3996 = HEAP32[$3995>>2]|0;
       $3997 = $60;
       $3998 = $59;
       $3999 = ((($3998)) + 1|0);
       $4000 = HEAP8[$3999>>0]|0;
       $4001 = $4000&255;
       $4002 = (($4001) + 2)|0;
       $4003 = (($3997) + ($4002<<2)|0);
       HEAP32[$4003>>2] = $3996;
       $4004 = $60;
       $4005 = ((($4004)) + 4|0);
       $4006 = HEAP32[$4005>>2]|0;
       $4007 = $60;
       $4008 = $59;
       $4009 = ((($4008)) + 1|0);
       $4010 = HEAP8[$4009>>0]|0;
       $4011 = $4010&255;
       $4012 = (($4011) + 1)|0;
       $4013 = (($4007) + ($4012<<2)|0);
       HEAP32[$4013>>2] = $4006;
       $4014 = $60;
       $4015 = HEAP32[$4014>>2]|0;
       $4016 = $60;
       $4017 = $59;
       $4018 = ((($4017)) + 1|0);
       $4019 = HEAP8[$4018>>0]|0;
       $4020 = $4019&255;
       $4021 = (($4020) + 0)|0;
       $4022 = (($4016) + ($4021<<2)|0);
       HEAP32[$4022>>2] = $4015;
       break;
      }
      case 24:  {
       $4023 = $6;
       $4024 = ((($4023)) + 12|0);
       $4025 = HEAP32[$4024>>2]|0;
       $4026 = ((($4025)) + -4|0);
       HEAP32[$4024>>2] = $4026;
       $4027 = $6;
       $4028 = HEAP32[$4027>>2]|0;
       $4029 = ((($4028)) + 1|0);
       HEAP32[$4027>>2] = $4029;
       $4030 = $6;
       $4031 = (_ovf($4030)|0);
       $4032 = ($4031|0)!=(0);
       if ($4032) {
        label = 292;
        break L6;
       }
       $4033 = $60;
       $4034 = ((($4033)) + -4|0);
       HEAP32[$4034>>2] = 0;
       break;
      }
      case 25:  {
       $4035 = $6;
       $4036 = ((($4035)) + 12|0);
       $4037 = HEAP32[$4036>>2]|0;
       $4038 = ((($4037)) + -8|0);
       HEAP32[$4036>>2] = $4038;
       $4039 = $6;
       $4040 = HEAP32[$4039>>2]|0;
       $4041 = ((($4040)) + 1|0);
       HEAP32[$4039>>2] = $4041;
       $4042 = $6;
       $4043 = (_ovf($4042)|0);
       $4044 = ($4043|0)!=(0);
       if ($4044) {
        label = 292;
        break L6;
       }
       $4045 = $60;
       $4046 = ((($4045)) + -4|0);
       HEAP32[$4046>>2] = 0;
       $4047 = $60;
       $4048 = ((($4047)) + -8|0);
       HEAP32[$4048>>2] = 0;
       break;
      }
      case 26:  {
       $4049 = $6;
       $4050 = ((($4049)) + 12|0);
       $4051 = HEAP32[$4050>>2]|0;
       $4052 = ((($4051)) + -16|0);
       HEAP32[$4050>>2] = $4052;
       $4053 = $6;
       $4054 = HEAP32[$4053>>2]|0;
       $4055 = ((($4054)) + 1|0);
       HEAP32[$4053>>2] = $4055;
       $4056 = $6;
       $4057 = (_ovf($4056)|0);
       $4058 = ($4057|0)!=(0);
       if ($4058) {
        label = 292;
        break L6;
       }
       $4059 = $60;
       $4060 = ((($4059)) + -4|0);
       HEAP32[$4060>>2] = 0;
       $4061 = $60;
       $4062 = ((($4061)) + -8|0);
       HEAP32[$4062>>2] = 0;
       $4063 = $60;
       $4064 = ((($4063)) + -12|0);
       HEAP32[$4064>>2] = 0;
       $4065 = $60;
       $4066 = ((($4065)) + -16|0);
       HEAP32[$4066>>2] = 0;
       break;
      }
      case 27: case 31: case 29:  {
       $4067 = $6;
       $4068 = ((($4067)) + 12|0);
       $4069 = HEAP32[$4068>>2]|0;
       $4070 = ((($4069)) + -4|0);
       HEAP32[$4068>>2] = $4070;
       $4071 = $6;
       $4072 = HEAP32[$4071>>2]|0;
       $4073 = ((($4072)) + 5|0);
       HEAP32[$4071>>2] = $4073;
       $4074 = $6;
       $4075 = (_ovf($4074)|0);
       $4076 = ($4075|0)!=(0);
       if ($4076) {
        label = 292;
        break L6;
       }
       $4077 = $59;
       $4078 = ((($4077)) + 1|0);
       $4079 = HEAPU8[$4078>>0]|(HEAPU8[$4078+1>>0]<<8)|(HEAPU8[$4078+2>>0]<<16)|(HEAPU8[$4078+3>>0]<<24);
       $4080 = $60;
       $4081 = ((($4080)) + -4|0);
       HEAP32[$4081>>2] = $4079;
       break;
      }
      case 28: case 30:  {
       $4082 = $6;
       $4083 = ((($4082)) + 12|0);
       $4084 = HEAP32[$4083>>2]|0;
       $4085 = ((($4084)) + -8|0);
       HEAP32[$4083>>2] = $4085;
       $4086 = $6;
       $4087 = HEAP32[$4086>>2]|0;
       $4088 = ((($4087)) + 9|0);
       HEAP32[$4086>>2] = $4088;
       $4089 = $6;
       $4090 = (_ovf($4089)|0);
       $4091 = ($4090|0)!=(0);
       if ($4091) {
        label = 292;
        break L6;
       }
       $4092 = $59;
       $4093 = ((($4092)) + 1|0);
       $4094 = $4093;
       $4095 = $4094;
       $4096 = HEAPU8[$4095>>0]|(HEAPU8[$4095+1>>0]<<8)|(HEAPU8[$4095+2>>0]<<16)|(HEAPU8[$4095+3>>0]<<24);
       $4097 = (($4094) + 4)|0;
       $4098 = $4097;
       $4099 = HEAPU8[$4098>>0]|(HEAPU8[$4098+1>>0]<<8)|(HEAPU8[$4098+2>>0]<<16)|(HEAPU8[$4098+3>>0]<<24);
       $4100 = $60;
       $4101 = ((($4100)) + -8|0);
       $4102 = $4101;
       $4103 = $4102;
       HEAP32[$4103>>2] = $4096;
       $4104 = (($4102) + 4)|0;
       $4105 = $4104;
       HEAP32[$4105>>2] = $4099;
       break;
      }
      case 32:  {
       $4106 = $6;
       $4107 = ((($4106)) + 12|0);
       $4108 = HEAP32[$4107>>2]|0;
       HEAP32[$4107>>2] = $4108;
       $4109 = $6;
       $4110 = HEAP32[$4109>>2]|0;
       $4111 = ((($4110)) + 1|0);
       HEAP32[$4109>>2] = $4111;
       $4112 = $60;
       $4113 = HEAP32[$4112>>2]|0;
       $69 = $4113;
       $4114 = $69;
       $4115 = ($4114>>>0)<=(0);
       if ($4115) {
        label = 293;
        break L6;
       }
       $4116 = $69;
       $4117 = $12;
       $4118 = (($4117) - 1)|0;
       $4119 = ($4116>>>0)>($4118>>>0);
       if ($4119) {
        label = 293;
        break L6;
       }
       $4120 = $14;
       $4121 = $69;
       $4122 = (($4120) + ($4121)|0);
       $4123 = HEAP8[$4122>>0]|0;
       $4124 = $4123 << 24 >> 24;
       $4125 = $60;
       HEAP32[$4125>>2] = $4124;
       break;
      }
      case 33:  {
       $4126 = $6;
       $4127 = ((($4126)) + 12|0);
       $4128 = HEAP32[$4127>>2]|0;
       HEAP32[$4127>>2] = $4128;
       $4129 = $6;
       $4130 = HEAP32[$4129>>2]|0;
       $4131 = ((($4130)) + 1|0);
       HEAP32[$4129>>2] = $4131;
       $4132 = $60;
       $4133 = HEAP32[$4132>>2]|0;
       $70 = $4133;
       $4134 = $70;
       $4135 = ($4134>>>0)<=(0);
       if ($4135) {
        label = 293;
        break L6;
       }
       $4136 = $70;
       $4137 = $12;
       $4138 = (($4137) - 2)|0;
       $4139 = ($4136>>>0)>($4138>>>0);
       if ($4139) {
        label = 293;
        break L6;
       }
       $4140 = $14;
       $4141 = $70;
       $4142 = (($4140) + ($4141)|0);
       $4143 = HEAP16[$4142>>1]|0;
       $4144 = $4143 << 16 >> 16;
       $4145 = $60;
       HEAP32[$4145>>2] = $4144;
       break;
      }
      case 34:  {
       $4146 = $6;
       $4147 = ((($4146)) + 12|0);
       $4148 = HEAP32[$4147>>2]|0;
       HEAP32[$4147>>2] = $4148;
       $4149 = $6;
       $4150 = HEAP32[$4149>>2]|0;
       $4151 = ((($4150)) + 1|0);
       HEAP32[$4149>>2] = $4151;
       $4152 = $60;
       $4153 = HEAP32[$4152>>2]|0;
       $71 = $4153;
       $4154 = $71;
       $4155 = ($4154>>>0)<=(0);
       if ($4155) {
        label = 293;
        break L6;
       }
       $4156 = $71;
       $4157 = $12;
       $4158 = (($4157) - 4)|0;
       $4159 = ($4156>>>0)>($4158>>>0);
       if ($4159) {
        label = 293;
        break L6;
       }
       $4160 = $14;
       $4161 = $71;
       $4162 = (($4160) + ($4161)|0);
       $4163 = HEAP32[$4162>>2]|0;
       $4164 = $60;
       HEAP32[$4164>>2] = $4163;
       break;
      }
      case 35:  {
       $4165 = $6;
       $4166 = ((($4165)) + 12|0);
       $4167 = HEAP32[$4166>>2]|0;
       $4168 = ((($4167)) + -4|0);
       HEAP32[$4166>>2] = $4168;
       $4169 = $6;
       $4170 = HEAP32[$4169>>2]|0;
       $4171 = ((($4170)) + 1|0);
       HEAP32[$4169>>2] = $4171;
       $4172 = $60;
       $4173 = HEAP32[$4172>>2]|0;
       $72 = $4173;
       $4174 = $6;
       $4175 = (_ovf($4174)|0);
       $4176 = ($4175|0)!=(0);
       if ($4176) {
        label = 292;
        break L6;
       }
       $4177 = $72;
       $4178 = ($4177>>>0)<=(0);
       if ($4178) {
        label = 293;
        break L6;
       }
       $4179 = $72;
       $4180 = $12;
       $4181 = (($4180) - 8)|0;
       $4182 = ($4179>>>0)>($4181>>>0);
       if ($4182) {
        label = 293;
        break L6;
       }
       $4183 = $14;
       $4184 = $72;
       $4185 = (($4183) + ($4184)|0);
       $4186 = $4185;
       $4187 = $4186;
       $4188 = HEAP32[$4187>>2]|0;
       $4189 = (($4186) + 4)|0;
       $4190 = $4189;
       $4191 = HEAP32[$4190>>2]|0;
       $4192 = $60;
       $4193 = ((($4192)) + -4|0);
       $4194 = $4193;
       $4195 = $4194;
       HEAP32[$4195>>2] = $4188;
       $4196 = (($4194) + 4)|0;
       $4197 = $4196;
       HEAP32[$4197>>2] = $4191;
       break;
      }
      case 36:  {
       $4198 = $6;
       $4199 = ((($4198)) + 12|0);
       $4200 = HEAP32[$4199>>2]|0;
       $4201 = ((($4200)) + -12|0);
       HEAP32[$4199>>2] = $4201;
       $4202 = $6;
       $4203 = HEAP32[$4202>>2]|0;
       $4204 = ((($4203)) + 1|0);
       HEAP32[$4202>>2] = $4204;
       $4205 = $60;
       $4206 = HEAP32[$4205>>2]|0;
       $73 = $4206;
       $4207 = $6;
       $4208 = (_ovf($4207)|0);
       $4209 = ($4208|0)!=(0);
       if ($4209) {
        label = 292;
        break L6;
       }
       $4210 = $73;
       $4211 = ($4210>>>0)<=(0);
       if ($4211) {
        label = 293;
        break L6;
       }
       $4212 = $73;
       $4213 = $12;
       $4214 = (($4213) - 16)|0;
       $4215 = ($4212>>>0)>($4214>>>0);
       if ($4215) {
        label = 293;
        break L6;
       }
       $4216 = $60;
       $4217 = ((($4216)) + -12|0);
       $4218 = $14;
       $4219 = $73;
       $4220 = (($4218) + ($4219)|0);
       _memmove(($4217|0),($4220|0),16)|0;
       break;
      }
      case 37:  {
       $4221 = $6;
       $4222 = ((($4221)) + 12|0);
       $4223 = HEAP32[$4222>>2]|0;
       $4224 = ((($4223)) + 8|0);
       HEAP32[$4222>>2] = $4224;
       $4225 = $6;
       $4226 = HEAP32[$4225>>2]|0;
       $4227 = ((($4226)) + 1|0);
       HEAP32[$4225>>2] = $4227;
       $4228 = $60;
       $4229 = HEAP32[$4228>>2]|0;
       $74 = $4229;
       $4230 = $74;
       $4231 = $13;
       $4232 = ($4230>>>0)<($4231>>>0);
       if ($4232) {
        label = 293;
        break L6;
       }
       $4233 = $74;
       $4234 = $12;
       $4235 = (($4234) - 1)|0;
       $4236 = ($4233>>>0)>($4235>>>0);
       if ($4236) {
        label = 293;
        break L6;
       }
       $4237 = $60;
       $4238 = ((($4237)) + 4|0);
       $4239 = HEAP8[$4238>>0]|0;
       $4240 = $14;
       $4241 = $74;
       $4242 = (($4240) + ($4241)|0);
       HEAP8[$4242>>0] = $4239;
       break;
      }
      case 38:  {
       $4243 = $6;
       $4244 = ((($4243)) + 12|0);
       $4245 = HEAP32[$4244>>2]|0;
       $4246 = ((($4245)) + 8|0);
       HEAP32[$4244>>2] = $4246;
       $4247 = $6;
       $4248 = HEAP32[$4247>>2]|0;
       $4249 = ((($4248)) + 1|0);
       HEAP32[$4247>>2] = $4249;
       $4250 = $60;
       $4251 = HEAP32[$4250>>2]|0;
       $75 = $4251;
       $4252 = $75;
       $4253 = $13;
       $4254 = ($4252>>>0)<($4253>>>0);
       if ($4254) {
        label = 293;
        break L6;
       }
       $4255 = $75;
       $4256 = $12;
       $4257 = (($4256) - 2)|0;
       $4258 = ($4255>>>0)>($4257>>>0);
       if ($4258) {
        label = 293;
        break L6;
       }
       $4259 = $60;
       $4260 = ((($4259)) + 4|0);
       $4261 = HEAP16[$4260>>1]|0;
       $4262 = $14;
       $4263 = $75;
       $4264 = (($4262) + ($4263)|0);
       HEAP16[$4264>>1] = $4261;
       break;
      }
      case 39:  {
       $4265 = $6;
       $4266 = ((($4265)) + 12|0);
       $4267 = HEAP32[$4266>>2]|0;
       $4268 = ((($4267)) + 8|0);
       HEAP32[$4266>>2] = $4268;
       $4269 = $6;
       $4270 = HEAP32[$4269>>2]|0;
       $4271 = ((($4270)) + 1|0);
       HEAP32[$4269>>2] = $4271;
       $4272 = $60;
       $4273 = HEAP32[$4272>>2]|0;
       $76 = $4273;
       $4274 = $76;
       $4275 = $13;
       $4276 = ($4274>>>0)<($4275>>>0);
       if ($4276) {
        label = 293;
        break L6;
       }
       $4277 = $76;
       $4278 = $12;
       $4279 = (($4278) - 4)|0;
       $4280 = ($4277>>>0)>($4279>>>0);
       if ($4280) {
        label = 293;
        break L6;
       }
       $4281 = $60;
       $4282 = ((($4281)) + 4|0);
       $4283 = HEAP32[$4282>>2]|0;
       $4284 = $14;
       $4285 = $76;
       $4286 = (($4284) + ($4285)|0);
       HEAP32[$4286>>2] = $4283;
       break;
      }
      case 40:  {
       $4287 = $6;
       $4288 = ((($4287)) + 12|0);
       $4289 = HEAP32[$4288>>2]|0;
       $4290 = ((($4289)) + 12|0);
       HEAP32[$4288>>2] = $4290;
       $4291 = $6;
       $4292 = HEAP32[$4291>>2]|0;
       $4293 = ((($4292)) + 1|0);
       HEAP32[$4291>>2] = $4293;
       $4294 = $60;
       $4295 = HEAP32[$4294>>2]|0;
       $77 = $4295;
       $4296 = $77;
       $4297 = $13;
       $4298 = ($4296>>>0)<($4297>>>0);
       if ($4298) {
        label = 293;
        break L6;
       }
       $4299 = $77;
       $4300 = $12;
       $4301 = (($4300) - 8)|0;
       $4302 = ($4299>>>0)>($4301>>>0);
       if ($4302) {
        label = 293;
        break L6;
       }
       $4303 = $60;
       $4304 = ((($4303)) + 4|0);
       $4305 = $4304;
       $4306 = $4305;
       $4307 = HEAP32[$4306>>2]|0;
       $4308 = (($4305) + 4)|0;
       $4309 = $4308;
       $4310 = HEAP32[$4309>>2]|0;
       $4311 = $14;
       $4312 = $77;
       $4313 = (($4311) + ($4312)|0);
       $4314 = $4313;
       $4315 = $4314;
       HEAP32[$4315>>2] = $4307;
       $4316 = (($4314) + 4)|0;
       $4317 = $4316;
       HEAP32[$4317>>2] = $4310;
       break;
      }
      case 41:  {
       $4318 = $6;
       $4319 = ((($4318)) + 12|0);
       $4320 = HEAP32[$4319>>2]|0;
       $4321 = ((($4320)) + 20|0);
       HEAP32[$4319>>2] = $4321;
       $4322 = $6;
       $4323 = HEAP32[$4322>>2]|0;
       $4324 = ((($4323)) + 1|0);
       HEAP32[$4322>>2] = $4324;
       $4325 = $60;
       $4326 = HEAP32[$4325>>2]|0;
       $78 = $4326;
       $4327 = $78;
       $4328 = $13;
       $4329 = ($4327>>>0)<($4328>>>0);
       if ($4329) {
        label = 293;
        break L6;
       }
       $4330 = $78;
       $4331 = $12;
       $4332 = (($4331) - 16)|0;
       $4333 = ($4330>>>0)>($4332>>>0);
       if ($4333) {
        label = 293;
        break L6;
       }
       $4334 = $14;
       $4335 = $78;
       $4336 = (($4334) + ($4335)|0);
       $4337 = $60;
       $4338 = ((($4337)) + 4|0);
       _memmove(($4336|0),($4338|0),16)|0;
       break;
      }
      case 42:  {
       $4339 = $6;
       $4340 = ((($4339)) + 12|0);
       $4341 = HEAP32[$4340>>2]|0;
       $4342 = ((($4341)) + -4|0);
       HEAP32[$4340>>2] = $4342;
       $4343 = $6;
       $4344 = HEAP32[$4343>>2]|0;
       $4345 = ((($4344)) + 4|0);
       HEAP32[$4343>>2] = $4345;
       $4346 = $59;
       $4347 = ((($4346)) + 1|0);
       $4348 = HEAPU8[$4347>>0]|(HEAPU8[$4347+1>>0]<<8)|(HEAPU8[$4347+2>>0]<<16)|(HEAPU8[$4347+3>>0]<<24);
       $4349 = $4348 << 8;
       $4350 = $4349 >> 8;
       $79 = $4350;
       $4351 = $79;
       $4352 = ($4351>>>0)<=(0);
       if ($4352) {
        label = 293;
        break L6;
       }
       $4353 = $79;
       $4354 = $12;
       $4355 = (($4354) - 4)|0;
       $4356 = ($4353>>>0)>($4355>>>0);
       if ($4356) {
        label = 293;
        break L6;
       }
       $4357 = $14;
       $4358 = $79;
       $4359 = (($4357) + ($4358)|0);
       $4360 = HEAP32[$4359>>2]|0;
       $4361 = $60;
       $4362 = ((($4361)) + -4|0);
       HEAP32[$4362>>2] = $4360;
       break;
      }
      case 43:  {
       $4363 = $6;
       $4364 = ((($4363)) + 12|0);
       $4365 = HEAP32[$4364>>2]|0;
       $4366 = ((($4365)) + -8|0);
       HEAP32[$4364>>2] = $4366;
       $4367 = $6;
       $4368 = HEAP32[$4367>>2]|0;
       $4369 = ((($4368)) + 4|0);
       HEAP32[$4367>>2] = $4369;
       $4370 = $59;
       $4371 = ((($4370)) + 1|0);
       $4372 = HEAPU8[$4371>>0]|(HEAPU8[$4371+1>>0]<<8)|(HEAPU8[$4371+2>>0]<<16)|(HEAPU8[$4371+3>>0]<<24);
       $4373 = $4372 << 8;
       $4374 = $4373 >> 8;
       $80 = $4374;
       $4375 = $80;
       $4376 = ($4375>>>0)<=(0);
       if ($4376) {
        label = 293;
        break L6;
       }
       $4377 = $80;
       $4378 = $12;
       $4379 = (($4378) - 8)|0;
       $4380 = ($4377>>>0)>($4379>>>0);
       if ($4380) {
        label = 293;
        break L6;
       }
       $4381 = $14;
       $4382 = $80;
       $4383 = (($4381) + ($4382)|0);
       $4384 = $4383;
       $4385 = $4384;
       $4386 = HEAP32[$4385>>2]|0;
       $4387 = (($4384) + 4)|0;
       $4388 = $4387;
       $4389 = HEAP32[$4388>>2]|0;
       $4390 = $60;
       $4391 = ((($4390)) + -8|0);
       $4392 = $4391;
       $4393 = $4392;
       HEAP32[$4393>>2] = $4386;
       $4394 = (($4392) + 4)|0;
       $4395 = $4394;
       HEAP32[$4395>>2] = $4389;
       break;
      }
      case 45:  {
       $4396 = $6;
       $4397 = ((($4396)) + 12|0);
       $4398 = HEAP32[$4397>>2]|0;
       $4399 = ((($4398)) + 4|0);
       HEAP32[$4397>>2] = $4399;
       $4400 = $6;
       $4401 = HEAP32[$4400>>2]|0;
       $4402 = ((($4401)) + 4|0);
       HEAP32[$4400>>2] = $4402;
       $4403 = $59;
       $4404 = ((($4403)) + 1|0);
       $4405 = HEAPU8[$4404>>0]|(HEAPU8[$4404+1>>0]<<8)|(HEAPU8[$4404+2>>0]<<16)|(HEAPU8[$4404+3>>0]<<24);
       $4406 = $4405 << 8;
       $4407 = $4406 >> 8;
       $81 = $4407;
       $4408 = $81;
       $4409 = $13;
       $4410 = ($4408>>>0)<($4409>>>0);
       if ($4410) {
        label = 293;
        break L6;
       }
       $4411 = $81;
       $4412 = $12;
       $4413 = (($4412) - 4)|0;
       $4414 = ($4411>>>0)>($4413>>>0);
       if ($4414) {
        label = 293;
        break L6;
       }
       $4415 = $60;
       $4416 = HEAP32[$4415>>2]|0;
       $4417 = $14;
       $4418 = $81;
       $4419 = (($4417) + ($4418)|0);
       HEAP32[$4419>>2] = $4416;
       break;
      }
      case 46:  {
       $4420 = $6;
       $4421 = ((($4420)) + 12|0);
       $4422 = HEAP32[$4421>>2]|0;
       $4423 = ((($4422)) + 8|0);
       HEAP32[$4421>>2] = $4423;
       $4424 = $6;
       $4425 = HEAP32[$4424>>2]|0;
       $4426 = ((($4425)) + 4|0);
       HEAP32[$4424>>2] = $4426;
       $4427 = $59;
       $4428 = ((($4427)) + 1|0);
       $4429 = HEAPU8[$4428>>0]|(HEAPU8[$4428+1>>0]<<8)|(HEAPU8[$4428+2>>0]<<16)|(HEAPU8[$4428+3>>0]<<24);
       $4430 = $4429 << 8;
       $4431 = $4430 >> 8;
       $82 = $4431;
       $4432 = $82;
       $4433 = $13;
       $4434 = ($4432>>>0)<($4433>>>0);
       if ($4434) {
        label = 293;
        break L6;
       }
       $4435 = $82;
       $4436 = $12;
       $4437 = (($4436) - 8)|0;
       $4438 = ($4435>>>0)>($4437>>>0);
       if ($4438) {
        label = 293;
        break L6;
       }
       $4439 = $60;
       $4440 = $4439;
       $4441 = $4440;
       $4442 = HEAP32[$4441>>2]|0;
       $4443 = (($4440) + 4)|0;
       $4444 = $4443;
       $4445 = HEAP32[$4444>>2]|0;
       $4446 = $14;
       $4447 = $82;
       $4448 = (($4446) + ($4447)|0);
       $4449 = $4448;
       $4450 = $4449;
       HEAP32[$4450>>2] = $4442;
       $4451 = (($4449) + 4)|0;
       $4452 = $4451;
       HEAP32[$4452>>2] = $4445;
       break;
      }
      case 47:  {
       $4453 = $6;
       $4454 = ((($4453)) + 12|0);
       $4455 = HEAP32[$4454>>2]|0;
       $4456 = ((($4455)) + 8|0);
       HEAP32[$4454>>2] = $4456;
       $4457 = $6;
       $4458 = HEAP32[$4457>>2]|0;
       $4459 = ((($4458)) + 4|0);
       HEAP32[$4457>>2] = $4459;
       $4460 = $59;
       $4461 = ((($4460)) + 1|0);
       $4462 = HEAPU8[$4461>>0]|(HEAPU8[$4461+1>>0]<<8)|(HEAPU8[$4461+2>>0]<<16)|(HEAPU8[$4461+3>>0]<<24);
       $4463 = $4462 << 8;
       $4464 = $4463 >> 8;
       $85 = $4464;
       $4465 = $85;
       $4466 = ($4465|0)<(0);
       if ($4466) {
        $4467 = $85;
        $4468 = (0 - ($4467))|0;
        $85 = $4468;
        $4469 = $60;
        $4470 = ((($4469)) + 4|0);
        $4471 = HEAP32[$4470>>2]|0;
        $83 = $4471;
        $4472 = $60;
        $4473 = HEAP32[$4472>>2]|0;
        $84 = $4473;
       } else {
        $4474 = $60;
        $4475 = HEAP32[$4474>>2]|0;
        $83 = $4475;
        $4476 = $60;
        $4477 = ((($4476)) + 4|0);
        $4478 = HEAP32[$4477>>2]|0;
        $84 = $4478;
       }
       $4479 = $83;
       $4480 = ($4479>>>0)<=(0);
       if ($4480) {
        label = 293;
        break L6;
       }
       $4481 = $83;
       $4482 = $12;
       $4483 = $85;
       $4484 = (($4482) - ($4483))|0;
       $4485 = ($4481>>>0)>($4484>>>0);
       if ($4485) {
        label = 293;
        break L6;
       }
       $4486 = $84;
       $4487 = $13;
       $4488 = ($4486>>>0)<($4487>>>0);
       if ($4488) {
        label = 293;
        break L6;
       }
       $4489 = $84;
       $4490 = $12;
       $4491 = $85;
       $4492 = (($4490) - ($4491))|0;
       $4493 = ($4489>>>0)>($4492>>>0);
       if ($4493) {
        label = 293;
        break L6;
       }
       $4494 = $14;
       $4495 = $84;
       $4496 = (($4494) + ($4495)|0);
       $4497 = $14;
       $4498 = $83;
       $4499 = (($4497) + ($4498)|0);
       $4500 = $85;
       _memmove(($4496|0),($4499|0),($4500|0))|0;
       break;
      }
      case 48:  {
       $4501 = $6;
       $4502 = ((($4501)) + 12|0);
       $4503 = HEAP32[$4502>>2]|0;
       HEAP32[$4502>>2] = $4503;
       $4504 = $6;
       $4505 = HEAP32[$4504>>2]|0;
       $4506 = ((($4505)) + 1|0);
       HEAP32[$4504>>2] = $4506;
       $4507 = $60;
       $4508 = HEAP32[$4507>>2]|0;
       $4509 = $4508 ^ -1;
       $4510 = $60;
       HEAP32[$4510>>2] = $4509;
       break;
      }
      case 49:  {
       $4511 = $6;
       $4512 = ((($4511)) + 12|0);
       $4513 = HEAP32[$4512>>2]|0;
       $4514 = ((($4513)) + 4|0);
       HEAP32[$4512>>2] = $4514;
       $4515 = $6;
       $4516 = HEAP32[$4515>>2]|0;
       $4517 = ((($4516)) + 1|0);
       HEAP32[$4515>>2] = $4517;
       $4518 = $60;
       $4519 = HEAP32[$4518>>2]|0;
       $4520 = $60;
       $4521 = ((($4520)) + 4|0);
       $4522 = HEAP32[$4521>>2]|0;
       $4523 = $4522 & $4519;
       HEAP32[$4521>>2] = $4523;
       break;
      }
      case 50:  {
       $4524 = $6;
       $4525 = ((($4524)) + 12|0);
       $4526 = HEAP32[$4525>>2]|0;
       $4527 = ((($4526)) + 4|0);
       HEAP32[$4525>>2] = $4527;
       $4528 = $6;
       $4529 = HEAP32[$4528>>2]|0;
       $4530 = ((($4529)) + 1|0);
       HEAP32[$4528>>2] = $4530;
       $4531 = $60;
       $4532 = HEAP32[$4531>>2]|0;
       $4533 = $60;
       $4534 = ((($4533)) + 4|0);
       $4535 = HEAP32[$4534>>2]|0;
       $4536 = $4535 | $4532;
       HEAP32[$4534>>2] = $4536;
       break;
      }
      case 51:  {
       $4537 = $6;
       $4538 = ((($4537)) + 12|0);
       $4539 = HEAP32[$4538>>2]|0;
       $4540 = ((($4539)) + 4|0);
       HEAP32[$4538>>2] = $4540;
       $4541 = $6;
       $4542 = HEAP32[$4541>>2]|0;
       $4543 = ((($4542)) + 1|0);
       HEAP32[$4541>>2] = $4543;
       $4544 = $60;
       $4545 = HEAP32[$4544>>2]|0;
       $4546 = $60;
       $4547 = ((($4546)) + 4|0);
       $4548 = HEAP32[$4547>>2]|0;
       $4549 = Math_imul($4548, $4545)|0;
       HEAP32[$4547>>2] = $4549;
       break;
      }
      case 52:  {
       $4550 = $6;
       $4551 = ((($4550)) + 12|0);
       $4552 = HEAP32[$4551>>2]|0;
       $4553 = ((($4552)) + 4|0);
       HEAP32[$4551>>2] = $4553;
       $4554 = $6;
       $4555 = HEAP32[$4554>>2]|0;
       $4556 = ((($4555)) + 1|0);
       HEAP32[$4554>>2] = $4556;
       $4557 = $60;
       $4558 = HEAP32[$4557>>2]|0;
       $4559 = ($4558|0)==(0);
       if ($4559) {
        label = 294;
        break L6;
       }
       $4560 = $60;
       $4561 = HEAP32[$4560>>2]|0;
       $4562 = $60;
       $4563 = ((($4562)) + 4|0);
       $4564 = HEAP32[$4563>>2]|0;
       $4565 = (($4564>>>0) / ($4561>>>0))&-1;
       HEAP32[$4563>>2] = $4565;
       break;
      }
      case 53:  {
       $4566 = $6;
       $4567 = ((($4566)) + 12|0);
       $4568 = HEAP32[$4567>>2]|0;
       $4569 = ((($4568)) + 4|0);
       HEAP32[$4567>>2] = $4569;
       $4570 = $6;
       $4571 = HEAP32[$4570>>2]|0;
       $4572 = ((($4571)) + 1|0);
       HEAP32[$4570>>2] = $4572;
       $4573 = $60;
       $4574 = HEAP32[$4573>>2]|0;
       $4575 = ($4574|0)==(0);
       if ($4575) {
        label = 294;
        break L6;
       }
       $4576 = $60;
       $4577 = HEAP32[$4576>>2]|0;
       $4578 = $60;
       $4579 = ((($4578)) + 4|0);
       $4580 = HEAP32[$4579>>2]|0;
       $4581 = (($4580>>>0) % ($4577>>>0))&-1;
       HEAP32[$4579>>2] = $4581;
       break;
      }
      case 54:  {
       $4582 = $6;
       $4583 = ((($4582)) + 12|0);
       $4584 = HEAP32[$4583>>2]|0;
       $4585 = ((($4584)) + 4|0);
       HEAP32[$4583>>2] = $4585;
       $4586 = $6;
       $4587 = HEAP32[$4586>>2]|0;
       $4588 = ((($4587)) + 1|0);
       HEAP32[$4586>>2] = $4588;
       $4589 = $60;
       $4590 = HEAP32[$4589>>2]|0;
       $4591 = $60;
       $4592 = ((($4591)) + 4|0);
       $4593 = HEAP32[$4592>>2]|0;
       $4594 = $4593 ^ $4590;
       HEAP32[$4592>>2] = $4594;
       break;
      }
      case 56:  {
       $4595 = $6;
       $4596 = ((($4595)) + 12|0);
       $4597 = HEAP32[$4596>>2]|0;
       $4598 = ((($4597)) + 4|0);
       HEAP32[$4596>>2] = $4598;
       $4599 = $6;
       $4600 = HEAP32[$4599>>2]|0;
       $4601 = ((($4600)) + 1|0);
       HEAP32[$4599>>2] = $4601;
       $4602 = $60;
       $4603 = ((($4602)) + 4|0);
       $4604 = HEAP32[$4603>>2]|0;
       $4605 = $60;
       $4606 = HEAP32[$4605>>2]|0;
       $4607 = ($4604>>>0)<($4606>>>0);
       $4608 = $4607&1;
       $4609 = $60;
       $4610 = ((($4609)) + 4|0);
       HEAP32[$4610>>2] = $4608;
       break;
      }
      case 57:  {
       $4611 = $6;
       $4612 = ((($4611)) + 12|0);
       $4613 = HEAP32[$4612>>2]|0;
       $4614 = ((($4613)) + 4|0);
       HEAP32[$4612>>2] = $4614;
       $4615 = $6;
       $4616 = HEAP32[$4615>>2]|0;
       $4617 = ((($4616)) + 1|0);
       HEAP32[$4615>>2] = $4617;
       $4618 = $60;
       $4619 = ((($4618)) + 4|0);
       $4620 = HEAP32[$4619>>2]|0;
       $4621 = $60;
       $4622 = HEAP32[$4621>>2]|0;
       $4623 = ($4620>>>0)>($4622>>>0);
       $4624 = $4623&1;
       $4625 = $60;
       $4626 = ((($4625)) + 4|0);
       HEAP32[$4626>>2] = $4624;
       break;
      }
      case 58:  {
       $4627 = $6;
       $4628 = ((($4627)) + 12|0);
       $4629 = HEAP32[$4628>>2]|0;
       $4630 = ((($4629)) + 4|0);
       HEAP32[$4628>>2] = $4630;
       $4631 = $6;
       $4632 = HEAP32[$4631>>2]|0;
       $4633 = ((($4632)) + 1|0);
       HEAP32[$4631>>2] = $4633;
       $4634 = $60;
       $4635 = HEAP32[$4634>>2]|0;
       $4636 = $60;
       $4637 = ((($4636)) + 4|0);
       $4638 = HEAP32[$4637>>2]|0;
       $4639 = $4638 << $4635;
       HEAP32[$4637>>2] = $4639;
       break;
      }
      case 59:  {
       $4640 = $6;
       $4641 = ((($4640)) + 12|0);
       $4642 = HEAP32[$4641>>2]|0;
       $4643 = ((($4642)) + 4|0);
       HEAP32[$4641>>2] = $4643;
       $4644 = $6;
       $4645 = HEAP32[$4644>>2]|0;
       $4646 = ((($4645)) + 1|0);
       HEAP32[$4644>>2] = $4646;
       $4647 = $60;
       $4648 = HEAP32[$4647>>2]|0;
       $4649 = $60;
       $4650 = ((($4649)) + 4|0);
       $4651 = HEAP32[$4650>>2]|0;
       $4652 = $4651 >>> $4648;
       HEAP32[$4650>>2] = $4652;
       break;
      }
      case 60:  {
       $4653 = $6;
       $4654 = ((($4653)) + 12|0);
       $4655 = HEAP32[$4654>>2]|0;
       $4656 = ((($4655)) + 4|0);
       HEAP32[$4654>>2] = $4656;
       $4657 = $6;
       $4658 = HEAP32[$4657>>2]|0;
       $4659 = ((($4658)) + 1|0);
       HEAP32[$4657>>2] = $4659;
       $4660 = $60;
       $4661 = HEAP32[$4660>>2]|0;
       $4662 = $60;
       $4663 = ((($4662)) + 4|0);
       $4664 = HEAP32[$4663>>2]|0;
       $4665 = $4664 >> $4661;
       HEAP32[$4663>>2] = $4665;
       break;
      }
      case 62:  {
       $4666 = $6;
       $4667 = ((($4666)) + 12|0);
       $4668 = HEAP32[$4667>>2]|0;
       $4669 = ((($4668)) + -4|0);
       HEAP32[$4667>>2] = $4669;
       $4670 = $6;
       $4671 = HEAP32[$4670>>2]|0;
       $4672 = ((($4671)) + 1|0);
       HEAP32[$4670>>2] = $4672;
       $4673 = $60;
       $4674 = HEAP32[$4673>>2]|0;
       $4675 = $60;
       $4676 = ((($4675)) + -4|0);
       $4677 = $4676;
       $4678 = $4677;
       HEAP32[$4678>>2] = $4674;
       $4679 = (($4677) + 4)|0;
       $4680 = $4679;
       HEAP32[$4680>>2] = 0;
       break;
      }
      case 63:  {
       $4681 = $6;
       $4682 = ((($4681)) + 12|0);
       $4683 = HEAP32[$4682>>2]|0;
       HEAP32[$4682>>2] = $4683;
       $4684 = $6;
       $4685 = HEAP32[$4684>>2]|0;
       $4686 = ((($4685)) + 2|0);
       HEAP32[$4684>>2] = $4686;
       $4687 = $59;
       $4688 = ((($4687)) + 1|0);
       $4689 = HEAP8[$4688>>0]|0;
       $4690 = $4689&255;
       $4691 = $4690 & 192;
       $4692 = (($4691) - 0)|0;
       $4693 = $4692 >>> 6;
       $4694 = $4692 << 26;
       $4695 = $4693 | $4694;
       switch ($4695|0) {
       case 0:  {
        $4696 = $59;
        $4697 = ((($4696)) + 1|0);
        $4698 = HEAP8[$4697>>0]|0;
        $4699 = $4698&255;
        $4700 = $4699 & 63;
        $4701 = 1 << $4700;
        $4702 = (($4701) - 1)|0;
        $4703 = $60;
        $4704 = HEAP32[$4703>>2]|0;
        $4705 = $4704 & $4702;
        HEAP32[$4703>>2] = $4705;
        break L8;
        break;
       }
       case 1:  {
        $4706 = $59;
        $4707 = ((($4706)) + 1|0);
        $4708 = HEAP8[$4707>>0]|0;
        $4709 = $4708&255;
        $4710 = $4709 & 63;
        $4711 = $60;
        $4712 = HEAP32[$4711>>2]|0;
        $4713 = $4712 << $4710;
        HEAP32[$4711>>2] = $4713;
        break L8;
        break;
       }
       case 2:  {
        $4714 = $59;
        $4715 = ((($4714)) + 1|0);
        $4716 = HEAP8[$4715>>0]|0;
        $4717 = $4716&255;
        $4718 = $4717 & 63;
        $4719 = $60;
        $4720 = HEAP32[$4719>>2]|0;
        $4721 = $4720 >>> $4718;
        HEAP32[$4719>>2] = $4721;
        break L8;
        break;
       }
       case 3:  {
        $4722 = $59;
        $4723 = ((($4722)) + 1|0);
        $4724 = HEAP8[$4723>>0]|0;
        $4725 = $4724&255;
        $4726 = $4725 & 63;
        $4727 = $60;
        $4728 = HEAP32[$4727>>2]|0;
        $4729 = $4728 >> $4726;
        HEAP32[$4727>>2] = $4729;
        break L8;
        break;
       }
       default: {
        label = 420;
        break L6;
       }
       }
       break;
      }
      case 64:  {
       $4730 = $6;
       $4731 = ((($4730)) + 12|0);
       $4732 = HEAP32[$4731>>2]|0;
       HEAP32[$4731>>2] = $4732;
       $4733 = $6;
       $4734 = HEAP32[$4733>>2]|0;
       $4735 = ((($4734)) + 1|0);
       HEAP32[$4733>>2] = $4735;
       $4736 = $60;
       $4737 = $4736;
       $4738 = $4737;
       $4739 = HEAP32[$4738>>2]|0;
       $4740 = (($4737) + 4)|0;
       $4741 = $4740;
       $4742 = HEAP32[$4741>>2]|0;
       $4743 = $4739 ^ -1;
       $4744 = $4742 ^ -1;
       $4745 = $60;
       $4746 = $4745;
       $4747 = $4746;
       HEAP32[$4747>>2] = $4743;
       $4748 = (($4746) + 4)|0;
       $4749 = $4748;
       HEAP32[$4749>>2] = $4744;
       break;
      }
      case 65:  {
       $4750 = $6;
       $4751 = ((($4750)) + 12|0);
       $4752 = HEAP32[$4751>>2]|0;
       $4753 = ((($4752)) + 8|0);
       HEAP32[$4751>>2] = $4753;
       $4754 = $6;
       $4755 = HEAP32[$4754>>2]|0;
       $4756 = ((($4755)) + 1|0);
       HEAP32[$4754>>2] = $4756;
       $4757 = $60;
       $4758 = $4757;
       $4759 = $4758;
       $4760 = HEAP32[$4759>>2]|0;
       $4761 = (($4758) + 4)|0;
       $4762 = $4761;
       $4763 = HEAP32[$4762>>2]|0;
       $4764 = $60;
       $4765 = ((($4764)) + 8|0);
       $4766 = $4765;
       $4767 = $4766;
       $4768 = HEAP32[$4767>>2]|0;
       $4769 = (($4766) + 4)|0;
       $4770 = $4769;
       $4771 = HEAP32[$4770>>2]|0;
       $4772 = $4768 & $4760;
       $4773 = $4771 & $4763;
       $4774 = $4765;
       $4775 = $4774;
       HEAP32[$4775>>2] = $4772;
       $4776 = (($4774) + 4)|0;
       $4777 = $4776;
       HEAP32[$4777>>2] = $4773;
       break;
      }
      case 66:  {
       $4778 = $6;
       $4779 = ((($4778)) + 12|0);
       $4780 = HEAP32[$4779>>2]|0;
       $4781 = ((($4780)) + 8|0);
       HEAP32[$4779>>2] = $4781;
       $4782 = $6;
       $4783 = HEAP32[$4782>>2]|0;
       $4784 = ((($4783)) + 1|0);
       HEAP32[$4782>>2] = $4784;
       $4785 = $60;
       $4786 = $4785;
       $4787 = $4786;
       $4788 = HEAP32[$4787>>2]|0;
       $4789 = (($4786) + 4)|0;
       $4790 = $4789;
       $4791 = HEAP32[$4790>>2]|0;
       $4792 = $60;
       $4793 = ((($4792)) + 8|0);
       $4794 = $4793;
       $4795 = $4794;
       $4796 = HEAP32[$4795>>2]|0;
       $4797 = (($4794) + 4)|0;
       $4798 = $4797;
       $4799 = HEAP32[$4798>>2]|0;
       $4800 = $4796 | $4788;
       $4801 = $4799 | $4791;
       $4802 = $4793;
       $4803 = $4802;
       HEAP32[$4803>>2] = $4800;
       $4804 = (($4802) + 4)|0;
       $4805 = $4804;
       HEAP32[$4805>>2] = $4801;
       break;
      }
      case 67:  {
       $4806 = $6;
       $4807 = ((($4806)) + 12|0);
       $4808 = HEAP32[$4807>>2]|0;
       $4809 = ((($4808)) + 8|0);
       HEAP32[$4807>>2] = $4809;
       $4810 = $6;
       $4811 = HEAP32[$4810>>2]|0;
       $4812 = ((($4811)) + 1|0);
       HEAP32[$4810>>2] = $4812;
       $4813 = $60;
       $4814 = $4813;
       $4815 = $4814;
       $4816 = HEAP32[$4815>>2]|0;
       $4817 = (($4814) + 4)|0;
       $4818 = $4817;
       $4819 = HEAP32[$4818>>2]|0;
       $4820 = $60;
       $4821 = ((($4820)) + 8|0);
       $4822 = $4821;
       $4823 = $4822;
       $4824 = HEAP32[$4823>>2]|0;
       $4825 = (($4822) + 4)|0;
       $4826 = $4825;
       $4827 = HEAP32[$4826>>2]|0;
       $4828 = (___muldi3(($4824|0),($4827|0),($4816|0),($4819|0))|0);
       $4829 = (getTempRet0() | 0);
       $4830 = $4821;
       $4831 = $4830;
       HEAP32[$4831>>2] = $4828;
       $4832 = (($4830) + 4)|0;
       $4833 = $4832;
       HEAP32[$4833>>2] = $4829;
       break;
      }
      case 68:  {
       $4834 = $6;
       $4835 = ((($4834)) + 12|0);
       $4836 = HEAP32[$4835>>2]|0;
       $4837 = ((($4836)) + 8|0);
       HEAP32[$4835>>2] = $4837;
       $4838 = $6;
       $4839 = HEAP32[$4838>>2]|0;
       $4840 = ((($4839)) + 1|0);
       HEAP32[$4838>>2] = $4840;
       $4841 = $60;
       $4842 = HEAP32[$4841>>2]|0;
       $4843 = ($4842|0)==(0);
       if ($4843) {
        label = 294;
        break L6;
       }
       $4844 = $60;
       $4845 = $4844;
       $4846 = $4845;
       $4847 = HEAP32[$4846>>2]|0;
       $4848 = (($4845) + 4)|0;
       $4849 = $4848;
       $4850 = HEAP32[$4849>>2]|0;
       $4851 = $60;
       $4852 = ((($4851)) + 8|0);
       $4853 = $4852;
       $4854 = $4853;
       $4855 = HEAP32[$4854>>2]|0;
       $4856 = (($4853) + 4)|0;
       $4857 = $4856;
       $4858 = HEAP32[$4857>>2]|0;
       $4859 = (___udivdi3(($4855|0),($4858|0),($4847|0),($4850|0))|0);
       $4860 = (getTempRet0() | 0);
       $4861 = $4852;
       $4862 = $4861;
       HEAP32[$4862>>2] = $4859;
       $4863 = (($4861) + 4)|0;
       $4864 = $4863;
       HEAP32[$4864>>2] = $4860;
       break;
      }
      case 69:  {
       $4865 = $6;
       $4866 = ((($4865)) + 12|0);
       $4867 = HEAP32[$4866>>2]|0;
       $4868 = ((($4867)) + 8|0);
       HEAP32[$4866>>2] = $4868;
       $4869 = $6;
       $4870 = HEAP32[$4869>>2]|0;
       $4871 = ((($4870)) + 1|0);
       HEAP32[$4869>>2] = $4871;
       $4872 = $60;
       $4873 = HEAP32[$4872>>2]|0;
       $4874 = ($4873|0)==(0);
       if ($4874) {
        label = 294;
        break L6;
       }
       $4875 = $60;
       $4876 = $4875;
       $4877 = $4876;
       $4878 = HEAP32[$4877>>2]|0;
       $4879 = (($4876) + 4)|0;
       $4880 = $4879;
       $4881 = HEAP32[$4880>>2]|0;
       $4882 = $60;
       $4883 = ((($4882)) + 8|0);
       $4884 = $4883;
       $4885 = $4884;
       $4886 = HEAP32[$4885>>2]|0;
       $4887 = (($4884) + 4)|0;
       $4888 = $4887;
       $4889 = HEAP32[$4888>>2]|0;
       $4890 = (___uremdi3(($4886|0),($4889|0),($4878|0),($4881|0))|0);
       $4891 = (getTempRet0() | 0);
       $4892 = $4883;
       $4893 = $4892;
       HEAP32[$4893>>2] = $4890;
       $4894 = (($4892) + 4)|0;
       $4895 = $4894;
       HEAP32[$4895>>2] = $4891;
       break;
      }
      case 70:  {
       $4896 = $6;
       $4897 = ((($4896)) + 12|0);
       $4898 = HEAP32[$4897>>2]|0;
       $4899 = ((($4898)) + 8|0);
       HEAP32[$4897>>2] = $4899;
       $4900 = $6;
       $4901 = HEAP32[$4900>>2]|0;
       $4902 = ((($4901)) + 1|0);
       HEAP32[$4900>>2] = $4902;
       $4903 = $60;
       $4904 = $4903;
       $4905 = $4904;
       $4906 = HEAP32[$4905>>2]|0;
       $4907 = (($4904) + 4)|0;
       $4908 = $4907;
       $4909 = HEAP32[$4908>>2]|0;
       $4910 = $60;
       $4911 = ((($4910)) + 8|0);
       $4912 = $4911;
       $4913 = $4912;
       $4914 = HEAP32[$4913>>2]|0;
       $4915 = (($4912) + 4)|0;
       $4916 = $4915;
       $4917 = HEAP32[$4916>>2]|0;
       $4918 = $4914 ^ $4906;
       $4919 = $4917 ^ $4909;
       $4920 = $4911;
       $4921 = $4920;
       HEAP32[$4921>>2] = $4918;
       $4922 = (($4920) + 4)|0;
       $4923 = $4922;
       HEAP32[$4923>>2] = $4919;
       break;
      }
      case 72:  {
       $4924 = $6;
       $4925 = ((($4924)) + 12|0);
       $4926 = HEAP32[$4925>>2]|0;
       $4927 = ((($4926)) + 12|0);
       HEAP32[$4925>>2] = $4927;
       $4928 = $6;
       $4929 = HEAP32[$4928>>2]|0;
       $4930 = ((($4929)) + 1|0);
       HEAP32[$4928>>2] = $4930;
       $4931 = $60;
       $4932 = ((($4931)) + 8|0);
       $4933 = $4932;
       $4934 = $4933;
       $4935 = HEAP32[$4934>>2]|0;
       $4936 = (($4933) + 4)|0;
       $4937 = $4936;
       $4938 = HEAP32[$4937>>2]|0;
       $4939 = $60;
       $4940 = $4939;
       $4941 = $4940;
       $4942 = HEAP32[$4941>>2]|0;
       $4943 = (($4940) + 4)|0;
       $4944 = $4943;
       $4945 = HEAP32[$4944>>2]|0;
       $4946 = ($4938>>>0)<($4945>>>0);
       $4947 = ($4935>>>0)<($4942>>>0);
       $4948 = ($4938|0)==($4945|0);
       $4949 = $4948 & $4947;
       $4950 = $4946 | $4949;
       $4951 = $4950&1;
       $4952 = $60;
       $4953 = ((($4952)) + 12|0);
       HEAP32[$4953>>2] = $4951;
       break;
      }
      case 73:  {
       $4954 = $6;
       $4955 = ((($4954)) + 12|0);
       $4956 = HEAP32[$4955>>2]|0;
       $4957 = ((($4956)) + 12|0);
       HEAP32[$4955>>2] = $4957;
       $4958 = $6;
       $4959 = HEAP32[$4958>>2]|0;
       $4960 = ((($4959)) + 1|0);
       HEAP32[$4958>>2] = $4960;
       $4961 = $60;
       $4962 = ((($4961)) + 8|0);
       $4963 = $4962;
       $4964 = $4963;
       $4965 = HEAP32[$4964>>2]|0;
       $4966 = (($4963) + 4)|0;
       $4967 = $4966;
       $4968 = HEAP32[$4967>>2]|0;
       $4969 = $60;
       $4970 = $4969;
       $4971 = $4970;
       $4972 = HEAP32[$4971>>2]|0;
       $4973 = (($4970) + 4)|0;
       $4974 = $4973;
       $4975 = HEAP32[$4974>>2]|0;
       $4976 = ($4968>>>0)>($4975>>>0);
       $4977 = ($4965>>>0)>($4972>>>0);
       $4978 = ($4968|0)==($4975|0);
       $4979 = $4978 & $4977;
       $4980 = $4976 | $4979;
       $4981 = $4980&1;
       $4982 = $60;
       $4983 = ((($4982)) + 12|0);
       HEAP32[$4983>>2] = $4981;
       break;
      }
      case 74:  {
       $4984 = $6;
       $4985 = ((($4984)) + 12|0);
       $4986 = HEAP32[$4985>>2]|0;
       $4987 = ((($4986)) + 4|0);
       HEAP32[$4985>>2] = $4987;
       $4988 = $6;
       $4989 = HEAP32[$4988>>2]|0;
       $4990 = ((($4989)) + 1|0);
       HEAP32[$4988>>2] = $4990;
       $4991 = $60;
       $4992 = HEAP32[$4991>>2]|0;
       $4993 = $60;
       $4994 = ((($4993)) + 4|0);
       $4995 = $4994;
       $4996 = $4995;
       $4997 = HEAP32[$4996>>2]|0;
       $4998 = (($4995) + 4)|0;
       $4999 = $4998;
       $5000 = HEAP32[$4999>>2]|0;
       $5001 = (_bitshift64Shl(($4997|0),($5000|0),($4992|0))|0);
       $5002 = (getTempRet0() | 0);
       $5003 = $4994;
       $5004 = $5003;
       HEAP32[$5004>>2] = $5001;
       $5005 = (($5003) + 4)|0;
       $5006 = $5005;
       HEAP32[$5006>>2] = $5002;
       break;
      }
      case 75:  {
       $5007 = $6;
       $5008 = ((($5007)) + 12|0);
       $5009 = HEAP32[$5008>>2]|0;
       $5010 = ((($5009)) + 4|0);
       HEAP32[$5008>>2] = $5010;
       $5011 = $6;
       $5012 = HEAP32[$5011>>2]|0;
       $5013 = ((($5012)) + 1|0);
       HEAP32[$5011>>2] = $5013;
       $5014 = $60;
       $5015 = HEAP32[$5014>>2]|0;
       $5016 = $60;
       $5017 = ((($5016)) + 4|0);
       $5018 = $5017;
       $5019 = $5018;
       $5020 = HEAP32[$5019>>2]|0;
       $5021 = (($5018) + 4)|0;
       $5022 = $5021;
       $5023 = HEAP32[$5022>>2]|0;
       $5024 = (_bitshift64Lshr(($5020|0),($5023|0),($5015|0))|0);
       $5025 = (getTempRet0() | 0);
       $5026 = $5017;
       $5027 = $5026;
       HEAP32[$5027>>2] = $5024;
       $5028 = (($5026) + 4)|0;
       $5029 = $5028;
       HEAP32[$5029>>2] = $5025;
       break;
      }
      case 76:  {
       $5030 = $6;
       $5031 = ((($5030)) + 12|0);
       $5032 = HEAP32[$5031>>2]|0;
       $5033 = ((($5032)) + 4|0);
       HEAP32[$5031>>2] = $5033;
       $5034 = $6;
       $5035 = HEAP32[$5034>>2]|0;
       $5036 = ((($5035)) + 1|0);
       HEAP32[$5034>>2] = $5036;
       $5037 = $60;
       $5038 = HEAP32[$5037>>2]|0;
       $5039 = $60;
       $5040 = ((($5039)) + 4|0);
       $5041 = $5040;
       $5042 = $5041;
       $5043 = HEAP32[$5042>>2]|0;
       $5044 = (($5041) + 4)|0;
       $5045 = $5044;
       $5046 = HEAP32[$5045>>2]|0;
       $5047 = (_bitshift64Ashr(($5043|0),($5046|0),($5038|0))|0);
       $5048 = (getTempRet0() | 0);
       $5049 = $5040;
       $5050 = $5049;
       HEAP32[$5050>>2] = $5047;
       $5051 = (($5049) + 4)|0;
       $5052 = $5051;
       HEAP32[$5052>>2] = $5048;
       break;
      }
      case 80:  {
       $5053 = $6;
       $5054 = ((($5053)) + 12|0);
       $5055 = HEAP32[$5054>>2]|0;
       HEAP32[$5054>>2] = $5055;
       $5056 = $6;
       $5057 = HEAP32[$5056>>2]|0;
       $5058 = ((($5057)) + 1|0);
       HEAP32[$5056>>2] = $5058;
       $5059 = $60;
       $5060 = HEAP32[$5059>>2]|0;
       $5061 = (0 - ($5060))|0;
       $5062 = $60;
       HEAP32[$5062>>2] = $5061;
       break;
      }
      case 81:  {
       $5063 = $6;
       $5064 = ((($5063)) + 12|0);
       $5065 = HEAP32[$5064>>2]|0;
       $5066 = ((($5065)) + 4|0);
       HEAP32[$5064>>2] = $5066;
       $5067 = $6;
       $5068 = HEAP32[$5067>>2]|0;
       $5069 = ((($5068)) + 1|0);
       HEAP32[$5067>>2] = $5069;
       $5070 = $60;
       $5071 = HEAP32[$5070>>2]|0;
       $5072 = $60;
       $5073 = ((($5072)) + 4|0);
       $5074 = HEAP32[$5073>>2]|0;
       $5075 = (($5074) + ($5071))|0;
       HEAP32[$5073>>2] = $5075;
       break;
      }
      case 82:  {
       $5076 = $6;
       $5077 = ((($5076)) + 12|0);
       $5078 = HEAP32[$5077>>2]|0;
       $5079 = ((($5078)) + 4|0);
       HEAP32[$5077>>2] = $5079;
       $5080 = $6;
       $5081 = HEAP32[$5080>>2]|0;
       $5082 = ((($5081)) + 1|0);
       HEAP32[$5080>>2] = $5082;
       $5083 = $60;
       $5084 = HEAP32[$5083>>2]|0;
       $5085 = $60;
       $5086 = ((($5085)) + 4|0);
       $5087 = HEAP32[$5086>>2]|0;
       $5088 = (($5087) - ($5084))|0;
       HEAP32[$5086>>2] = $5088;
       break;
      }
      case 83:  {
       $5089 = $6;
       $5090 = ((($5089)) + 12|0);
       $5091 = HEAP32[$5090>>2]|0;
       $5092 = ((($5091)) + 4|0);
       HEAP32[$5090>>2] = $5092;
       $5093 = $6;
       $5094 = HEAP32[$5093>>2]|0;
       $5095 = ((($5094)) + 1|0);
       HEAP32[$5093>>2] = $5095;
       $5096 = $60;
       $5097 = HEAP32[$5096>>2]|0;
       $5098 = $60;
       $5099 = ((($5098)) + 4|0);
       $5100 = HEAP32[$5099>>2]|0;
       $5101 = Math_imul($5100, $5097)|0;
       HEAP32[$5099>>2] = $5101;
       break;
      }
      case 84:  {
       $5102 = $6;
       $5103 = ((($5102)) + 12|0);
       $5104 = HEAP32[$5103>>2]|0;
       $5105 = ((($5104)) + 4|0);
       HEAP32[$5103>>2] = $5105;
       $5106 = $6;
       $5107 = HEAP32[$5106>>2]|0;
       $5108 = ((($5107)) + 1|0);
       HEAP32[$5106>>2] = $5108;
       $5109 = $60;
       $5110 = HEAP32[$5109>>2]|0;
       $5111 = ($5110|0)==(0);
       if ($5111) {
        label = 294;
        break L6;
       }
       $5112 = $60;
       $5113 = HEAP32[$5112>>2]|0;
       $5114 = $60;
       $5115 = ((($5114)) + 4|0);
       $5116 = HEAP32[$5115>>2]|0;
       $5117 = (($5116|0) / ($5113|0))&-1;
       HEAP32[$5115>>2] = $5117;
       break;
      }
      case 85:  {
       $5118 = $6;
       $5119 = ((($5118)) + 12|0);
       $5120 = HEAP32[$5119>>2]|0;
       $5121 = ((($5120)) + 4|0);
       HEAP32[$5119>>2] = $5121;
       $5122 = $6;
       $5123 = HEAP32[$5122>>2]|0;
       $5124 = ((($5123)) + 1|0);
       HEAP32[$5122>>2] = $5124;
       $5125 = $60;
       $5126 = HEAP32[$5125>>2]|0;
       $5127 = ($5126|0)==(0);
       if ($5127) {
        label = 294;
        break L6;
       }
       $5128 = $60;
       $5129 = HEAP32[$5128>>2]|0;
       $5130 = $60;
       $5131 = ((($5130)) + 4|0);
       $5132 = HEAP32[$5131>>2]|0;
       $5133 = (($5132|0) % ($5129|0))&-1;
       HEAP32[$5131>>2] = $5133;
       break;
      }
      case 87:  {
       $5134 = $6;
       $5135 = ((($5134)) + 12|0);
       $5136 = HEAP32[$5135>>2]|0;
       $5137 = ((($5136)) + 4|0);
       HEAP32[$5135>>2] = $5137;
       $5138 = $6;
       $5139 = HEAP32[$5138>>2]|0;
       $5140 = ((($5139)) + 1|0);
       HEAP32[$5138>>2] = $5140;
       $5141 = $60;
       $5142 = ((($5141)) + 4|0);
       $5143 = HEAP32[$5142>>2]|0;
       $5144 = $60;
       $5145 = HEAP32[$5144>>2]|0;
       $5146 = ($5143|0)==($5145|0);
       $5147 = $5146&1;
       $5148 = $60;
       $5149 = ((($5148)) + 4|0);
       HEAP32[$5149>>2] = $5147;
       break;
      }
      case 88:  {
       $5150 = $6;
       $5151 = ((($5150)) + 12|0);
       $5152 = HEAP32[$5151>>2]|0;
       $5153 = ((($5152)) + 4|0);
       HEAP32[$5151>>2] = $5153;
       $5154 = $6;
       $5155 = HEAP32[$5154>>2]|0;
       $5156 = ((($5155)) + 1|0);
       HEAP32[$5154>>2] = $5156;
       $5157 = $60;
       $5158 = ((($5157)) + 4|0);
       $5159 = HEAP32[$5158>>2]|0;
       $5160 = $60;
       $5161 = HEAP32[$5160>>2]|0;
       $5162 = ($5159|0)<($5161|0);
       $5163 = $5162&1;
       $5164 = $60;
       $5165 = ((($5164)) + 4|0);
       HEAP32[$5165>>2] = $5163;
       break;
      }
      case 89:  {
       $5166 = $6;
       $5167 = ((($5166)) + 12|0);
       $5168 = HEAP32[$5167>>2]|0;
       $5169 = ((($5168)) + 4|0);
       HEAP32[$5167>>2] = $5169;
       $5170 = $6;
       $5171 = HEAP32[$5170>>2]|0;
       $5172 = ((($5171)) + 1|0);
       HEAP32[$5170>>2] = $5172;
       $5173 = $60;
       $5174 = ((($5173)) + 4|0);
       $5175 = HEAP32[$5174>>2]|0;
       $5176 = $60;
       $5177 = HEAP32[$5176>>2]|0;
       $5178 = ($5175|0)>($5177|0);
       $5179 = $5178&1;
       $5180 = $60;
       $5181 = ((($5180)) + 4|0);
       HEAP32[$5181>>2] = $5179;
       break;
      }
      case 90:  {
       $5182 = $6;
       $5183 = ((($5182)) + 12|0);
       $5184 = HEAP32[$5183>>2]|0;
       HEAP32[$5183>>2] = $5184;
       $5185 = $6;
       $5186 = HEAP32[$5185>>2]|0;
       $5187 = ((($5186)) + 1|0);
       HEAP32[$5185>>2] = $5187;
       $5188 = $60;
       $5189 = HEAP32[$5188>>2]|0;
       $5190 = (0)!=($5189|0);
       $5191 = $5190&1;
       $5192 = $60;
       HEAP32[$5192>>2] = $5191;
       break;
      }
      case 91:  {
       $5193 = $6;
       $5194 = ((($5193)) + 12|0);
       $5195 = HEAP32[$5194>>2]|0;
       HEAP32[$5194>>2] = $5195;
       $5196 = $6;
       $5197 = HEAP32[$5196>>2]|0;
       $5198 = ((($5197)) + 1|0);
       HEAP32[$5196>>2] = $5198;
       $5199 = $60;
       $5200 = HEAP32[$5199>>2]|0;
       $5201 = (+($5200|0));
       $5202 = $60;
       HEAPF32[$5202>>2] = $5201;
       break;
      }
      case 92:  {
       $5203 = $6;
       $5204 = ((($5203)) + 12|0);
       $5205 = HEAP32[$5204>>2]|0;
       $5206 = ((($5205)) + -4|0);
       HEAP32[$5204>>2] = $5206;
       $5207 = $6;
       $5208 = HEAP32[$5207>>2]|0;
       $5209 = ((($5208)) + 1|0);
       HEAP32[$5207>>2] = $5209;
       $5210 = $60;
       $5211 = HEAP32[$5210>>2]|0;
       $5212 = ($5211|0)<(0);
       $5213 = $5212 << 31 >> 31;
       $5214 = $60;
       $5215 = ((($5214)) + -4|0);
       $5216 = $5215;
       $5217 = $5216;
       HEAP32[$5217>>2] = $5211;
       $5218 = (($5216) + 4)|0;
       $5219 = $5218;
       HEAP32[$5219>>2] = $5213;
       break;
      }
      case 93:  {
       $5220 = $6;
       $5221 = ((($5220)) + 12|0);
       $5222 = HEAP32[$5221>>2]|0;
       $5223 = ((($5222)) + -4|0);
       HEAP32[$5221>>2] = $5223;
       $5224 = $6;
       $5225 = HEAP32[$5224>>2]|0;
       $5226 = ((($5225)) + 1|0);
       HEAP32[$5224>>2] = $5226;
       $5227 = $60;
       $5228 = HEAP32[$5227>>2]|0;
       $5229 = (+($5228|0));
       $5230 = $60;
       $5231 = ((($5230)) + -4|0);
       HEAPF64[$5231>>3] = $5229;
       break;
      }
      case 96:  {
       $5232 = $6;
       $5233 = ((($5232)) + 12|0);
       $5234 = HEAP32[$5233>>2]|0;
       HEAP32[$5233>>2] = $5234;
       $5235 = $6;
       $5236 = HEAP32[$5235>>2]|0;
       $5237 = ((($5236)) + 1|0);
       HEAP32[$5235>>2] = $5237;
       $5238 = $60;
       $5239 = $5238;
       $5240 = $5239;
       $5241 = HEAP32[$5240>>2]|0;
       $5242 = (($5239) + 4)|0;
       $5243 = $5242;
       $5244 = HEAP32[$5243>>2]|0;
       $5245 = (_i64Subtract(0,0,($5241|0),($5244|0))|0);
       $5246 = (getTempRet0() | 0);
       $5247 = $60;
       $5248 = $5247;
       $5249 = $5248;
       HEAP32[$5249>>2] = $5245;
       $5250 = (($5248) + 4)|0;
       $5251 = $5250;
       HEAP32[$5251>>2] = $5246;
       break;
      }
      case 97:  {
       $5252 = $6;
       $5253 = ((($5252)) + 12|0);
       $5254 = HEAP32[$5253>>2]|0;
       $5255 = ((($5254)) + 8|0);
       HEAP32[$5253>>2] = $5255;
       $5256 = $6;
       $5257 = HEAP32[$5256>>2]|0;
       $5258 = ((($5257)) + 1|0);
       HEAP32[$5256>>2] = $5258;
       $5259 = $60;
       $5260 = $5259;
       $5261 = $5260;
       $5262 = HEAP32[$5261>>2]|0;
       $5263 = (($5260) + 4)|0;
       $5264 = $5263;
       $5265 = HEAP32[$5264>>2]|0;
       $5266 = $60;
       $5267 = ((($5266)) + 8|0);
       $5268 = $5267;
       $5269 = $5268;
       $5270 = HEAP32[$5269>>2]|0;
       $5271 = (($5268) + 4)|0;
       $5272 = $5271;
       $5273 = HEAP32[$5272>>2]|0;
       $5274 = (_i64Add(($5270|0),($5273|0),($5262|0),($5265|0))|0);
       $5275 = (getTempRet0() | 0);
       $5276 = $5267;
       $5277 = $5276;
       HEAP32[$5277>>2] = $5274;
       $5278 = (($5276) + 4)|0;
       $5279 = $5278;
       HEAP32[$5279>>2] = $5275;
       break;
      }
      case 98:  {
       $5280 = $6;
       $5281 = ((($5280)) + 12|0);
       $5282 = HEAP32[$5281>>2]|0;
       $5283 = ((($5282)) + 8|0);
       HEAP32[$5281>>2] = $5283;
       $5284 = $6;
       $5285 = HEAP32[$5284>>2]|0;
       $5286 = ((($5285)) + 1|0);
       HEAP32[$5284>>2] = $5286;
       $5287 = $60;
       $5288 = $5287;
       $5289 = $5288;
       $5290 = HEAP32[$5289>>2]|0;
       $5291 = (($5288) + 4)|0;
       $5292 = $5291;
       $5293 = HEAP32[$5292>>2]|0;
       $5294 = $60;
       $5295 = ((($5294)) + 8|0);
       $5296 = $5295;
       $5297 = $5296;
       $5298 = HEAP32[$5297>>2]|0;
       $5299 = (($5296) + 4)|0;
       $5300 = $5299;
       $5301 = HEAP32[$5300>>2]|0;
       $5302 = (_i64Subtract(($5298|0),($5301|0),($5290|0),($5293|0))|0);
       $5303 = (getTempRet0() | 0);
       $5304 = $5295;
       $5305 = $5304;
       HEAP32[$5305>>2] = $5302;
       $5306 = (($5304) + 4)|0;
       $5307 = $5306;
       HEAP32[$5307>>2] = $5303;
       break;
      }
      case 99:  {
       $5308 = $6;
       $5309 = ((($5308)) + 12|0);
       $5310 = HEAP32[$5309>>2]|0;
       $5311 = ((($5310)) + 8|0);
       HEAP32[$5309>>2] = $5311;
       $5312 = $6;
       $5313 = HEAP32[$5312>>2]|0;
       $5314 = ((($5313)) + 1|0);
       HEAP32[$5312>>2] = $5314;
       $5315 = $60;
       $5316 = $5315;
       $5317 = $5316;
       $5318 = HEAP32[$5317>>2]|0;
       $5319 = (($5316) + 4)|0;
       $5320 = $5319;
       $5321 = HEAP32[$5320>>2]|0;
       $5322 = $60;
       $5323 = ((($5322)) + 8|0);
       $5324 = $5323;
       $5325 = $5324;
       $5326 = HEAP32[$5325>>2]|0;
       $5327 = (($5324) + 4)|0;
       $5328 = $5327;
       $5329 = HEAP32[$5328>>2]|0;
       $5330 = (___muldi3(($5326|0),($5329|0),($5318|0),($5321|0))|0);
       $5331 = (getTempRet0() | 0);
       $5332 = $5323;
       $5333 = $5332;
       HEAP32[$5333>>2] = $5330;
       $5334 = (($5332) + 4)|0;
       $5335 = $5334;
       HEAP32[$5335>>2] = $5331;
       break;
      }
      case 100:  {
       $5336 = $6;
       $5337 = ((($5336)) + 12|0);
       $5338 = HEAP32[$5337>>2]|0;
       $5339 = ((($5338)) + 8|0);
       HEAP32[$5337>>2] = $5339;
       $5340 = $6;
       $5341 = HEAP32[$5340>>2]|0;
       $5342 = ((($5341)) + 1|0);
       HEAP32[$5340>>2] = $5342;
       $5343 = $60;
       $5344 = $5343;
       $5345 = $5344;
       $5346 = HEAP32[$5345>>2]|0;
       $5347 = (($5344) + 4)|0;
       $5348 = $5347;
       $5349 = HEAP32[$5348>>2]|0;
       $5350 = ($5346|0)==(0);
       $5351 = ($5349|0)==(0);
       $5352 = $5350 & $5351;
       if ($5352) {
        label = 294;
        break L6;
       }
       $5353 = $60;
       $5354 = $5353;
       $5355 = $5354;
       $5356 = HEAP32[$5355>>2]|0;
       $5357 = (($5354) + 4)|0;
       $5358 = $5357;
       $5359 = HEAP32[$5358>>2]|0;
       $5360 = $60;
       $5361 = ((($5360)) + 8|0);
       $5362 = $5361;
       $5363 = $5362;
       $5364 = HEAP32[$5363>>2]|0;
       $5365 = (($5362) + 4)|0;
       $5366 = $5365;
       $5367 = HEAP32[$5366>>2]|0;
       $5368 = (___divdi3(($5364|0),($5367|0),($5356|0),($5359|0))|0);
       $5369 = (getTempRet0() | 0);
       $5370 = $5361;
       $5371 = $5370;
       HEAP32[$5371>>2] = $5368;
       $5372 = (($5370) + 4)|0;
       $5373 = $5372;
       HEAP32[$5373>>2] = $5369;
       break;
      }
      case 101:  {
       $5374 = $6;
       $5375 = ((($5374)) + 12|0);
       $5376 = HEAP32[$5375>>2]|0;
       $5377 = ((($5376)) + 8|0);
       HEAP32[$5375>>2] = $5377;
       $5378 = $6;
       $5379 = HEAP32[$5378>>2]|0;
       $5380 = ((($5379)) + 1|0);
       HEAP32[$5378>>2] = $5380;
       $5381 = $60;
       $5382 = $5381;
       $5383 = $5382;
       $5384 = HEAP32[$5383>>2]|0;
       $5385 = (($5382) + 4)|0;
       $5386 = $5385;
       $5387 = HEAP32[$5386>>2]|0;
       $5388 = ($5384|0)==(0);
       $5389 = ($5387|0)==(0);
       $5390 = $5388 & $5389;
       if ($5390) {
        label = 294;
        break L6;
       }
       $5391 = $60;
       $5392 = $5391;
       $5393 = $5392;
       $5394 = HEAP32[$5393>>2]|0;
       $5395 = (($5392) + 4)|0;
       $5396 = $5395;
       $5397 = HEAP32[$5396>>2]|0;
       $5398 = $60;
       $5399 = ((($5398)) + 8|0);
       $5400 = $5399;
       $5401 = $5400;
       $5402 = HEAP32[$5401>>2]|0;
       $5403 = (($5400) + 4)|0;
       $5404 = $5403;
       $5405 = HEAP32[$5404>>2]|0;
       $5406 = (___remdi3(($5402|0),($5405|0),($5394|0),($5397|0))|0);
       $5407 = (getTempRet0() | 0);
       $5408 = $5399;
       $5409 = $5408;
       HEAP32[$5409>>2] = $5406;
       $5410 = (($5408) + 4)|0;
       $5411 = $5410;
       HEAP32[$5411>>2] = $5407;
       break;
      }
      case 103:  {
       $5412 = $6;
       $5413 = ((($5412)) + 12|0);
       $5414 = HEAP32[$5413>>2]|0;
       $5415 = ((($5414)) + 12|0);
       HEAP32[$5413>>2] = $5415;
       $5416 = $6;
       $5417 = HEAP32[$5416>>2]|0;
       $5418 = ((($5417)) + 1|0);
       HEAP32[$5416>>2] = $5418;
       $5419 = $60;
       $5420 = ((($5419)) + 8|0);
       $5421 = $5420;
       $5422 = $5421;
       $5423 = HEAP32[$5422>>2]|0;
       $5424 = (($5421) + 4)|0;
       $5425 = $5424;
       $5426 = HEAP32[$5425>>2]|0;
       $5427 = $60;
       $5428 = $5427;
       $5429 = $5428;
       $5430 = HEAP32[$5429>>2]|0;
       $5431 = (($5428) + 4)|0;
       $5432 = $5431;
       $5433 = HEAP32[$5432>>2]|0;
       $5434 = ($5423|0)==($5430|0);
       $5435 = ($5426|0)==($5433|0);
       $5436 = $5434 & $5435;
       $5437 = $5436&1;
       $5438 = $60;
       $5439 = ((($5438)) + 12|0);
       HEAP32[$5439>>2] = $5437;
       break;
      }
      case 104:  {
       $5440 = $6;
       $5441 = ((($5440)) + 12|0);
       $5442 = HEAP32[$5441>>2]|0;
       $5443 = ((($5442)) + 12|0);
       HEAP32[$5441>>2] = $5443;
       $5444 = $6;
       $5445 = HEAP32[$5444>>2]|0;
       $5446 = ((($5445)) + 1|0);
       HEAP32[$5444>>2] = $5446;
       $5447 = $60;
       $5448 = ((($5447)) + 8|0);
       $5449 = $5448;
       $5450 = $5449;
       $5451 = HEAP32[$5450>>2]|0;
       $5452 = (($5449) + 4)|0;
       $5453 = $5452;
       $5454 = HEAP32[$5453>>2]|0;
       $5455 = $60;
       $5456 = $5455;
       $5457 = $5456;
       $5458 = HEAP32[$5457>>2]|0;
       $5459 = (($5456) + 4)|0;
       $5460 = $5459;
       $5461 = HEAP32[$5460>>2]|0;
       $5462 = ($5454|0)<($5461|0);
       $5463 = ($5451>>>0)<($5458>>>0);
       $5464 = ($5454|0)==($5461|0);
       $5465 = $5464 & $5463;
       $5466 = $5462 | $5465;
       $5467 = $5466&1;
       $5468 = $60;
       $5469 = ((($5468)) + 12|0);
       HEAP32[$5469>>2] = $5467;
       break;
      }
      case 105:  {
       $5470 = $6;
       $5471 = ((($5470)) + 12|0);
       $5472 = HEAP32[$5471>>2]|0;
       $5473 = ((($5472)) + 12|0);
       HEAP32[$5471>>2] = $5473;
       $5474 = $6;
       $5475 = HEAP32[$5474>>2]|0;
       $5476 = ((($5475)) + 1|0);
       HEAP32[$5474>>2] = $5476;
       $5477 = $60;
       $5478 = ((($5477)) + 8|0);
       $5479 = $5478;
       $5480 = $5479;
       $5481 = HEAP32[$5480>>2]|0;
       $5482 = (($5479) + 4)|0;
       $5483 = $5482;
       $5484 = HEAP32[$5483>>2]|0;
       $5485 = $60;
       $5486 = $5485;
       $5487 = $5486;
       $5488 = HEAP32[$5487>>2]|0;
       $5489 = (($5486) + 4)|0;
       $5490 = $5489;
       $5491 = HEAP32[$5490>>2]|0;
       $5492 = ($5484|0)>($5491|0);
       $5493 = ($5481>>>0)>($5488>>>0);
       $5494 = ($5484|0)==($5491|0);
       $5495 = $5494 & $5493;
       $5496 = $5492 | $5495;
       $5497 = $5496&1;
       $5498 = $60;
       $5499 = ((($5498)) + 12|0);
       HEAP32[$5499>>2] = $5497;
       break;
      }
      case 106:  {
       $5500 = $6;
       $5501 = ((($5500)) + 12|0);
       $5502 = HEAP32[$5501>>2]|0;
       $5503 = ((($5502)) + 4|0);
       HEAP32[$5501>>2] = $5503;
       $5504 = $6;
       $5505 = HEAP32[$5504>>2]|0;
       $5506 = ((($5505)) + 1|0);
       HEAP32[$5504>>2] = $5506;
       $5507 = $60;
       $5508 = $5507;
       $5509 = $5508;
       $5510 = HEAP32[$5509>>2]|0;
       $5511 = (($5508) + 4)|0;
       $5512 = $5511;
       $5513 = HEAP32[$5512>>2]|0;
       $5514 = $60;
       $5515 = ((($5514)) + 4|0);
       HEAP32[$5515>>2] = $5510;
       break;
      }
      case 107:  {
       $5516 = $6;
       $5517 = ((($5516)) + 12|0);
       $5518 = HEAP32[$5517>>2]|0;
       $5519 = ((($5518)) + 4|0);
       HEAP32[$5517>>2] = $5519;
       $5520 = $6;
       $5521 = HEAP32[$5520>>2]|0;
       $5522 = ((($5521)) + 1|0);
       HEAP32[$5520>>2] = $5522;
       $5523 = $60;
       $5524 = $5523;
       $5525 = $5524;
       $5526 = HEAP32[$5525>>2]|0;
       $5527 = (($5524) + 4)|0;
       $5528 = $5527;
       $5529 = HEAP32[$5528>>2]|0;
       $5530 = (+($5526>>>0)) + (4294967296.0*(+($5529|0)));
       $5531 = $60;
       $5532 = ((($5531)) + 4|0);
       HEAPF32[$5532>>2] = $5530;
       break;
      }
      case 108:  {
       $5533 = $6;
       $5534 = ((($5533)) + 12|0);
       $5535 = HEAP32[$5534>>2]|0;
       $5536 = ((($5535)) + 4|0);
       HEAP32[$5534>>2] = $5536;
       $5537 = $6;
       $5538 = HEAP32[$5537>>2]|0;
       $5539 = ((($5538)) + 1|0);
       HEAP32[$5537>>2] = $5539;
       $5540 = $60;
       $5541 = $5540;
       $5542 = $5541;
       $5543 = HEAP32[$5542>>2]|0;
       $5544 = (($5541) + 4)|0;
       $5545 = $5544;
       $5546 = HEAP32[$5545>>2]|0;
       $5547 = (0)!=($5543|0);
       $5548 = (0)!=($5546|0);
       $5549 = $5547 | $5548;
       $5550 = $5549&1;
       $5551 = $60;
       $5552 = ((($5551)) + 4|0);
       HEAP32[$5552>>2] = $5550;
       break;
      }
      case 109:  {
       $5553 = $6;
       $5554 = ((($5553)) + 12|0);
       $5555 = HEAP32[$5554>>2]|0;
       HEAP32[$5554>>2] = $5555;
       $5556 = $6;
       $5557 = HEAP32[$5556>>2]|0;
       $5558 = ((($5557)) + 1|0);
       HEAP32[$5556>>2] = $5558;
       $5559 = $60;
       $5560 = $5559;
       $5561 = $5560;
       $5562 = HEAP32[$5561>>2]|0;
       $5563 = (($5560) + 4)|0;
       $5564 = $5563;
       $5565 = HEAP32[$5564>>2]|0;
       $5566 = (+($5562>>>0)) + (4294967296.0*(+($5565|0)));
       $5567 = $60;
       HEAPF64[$5567>>3] = $5566;
       break;
      }
      case 112:  {
       $5568 = $6;
       $5569 = ((($5568)) + 12|0);
       $5570 = HEAP32[$5569>>2]|0;
       HEAP32[$5569>>2] = $5570;
       $5571 = $6;
       $5572 = HEAP32[$5571>>2]|0;
       $5573 = ((($5572)) + 1|0);
       HEAP32[$5571>>2] = $5573;
       $5574 = $60;
       $5575 = +HEAPF32[$5574>>2];
       $5576 = - $5575;
       $5577 = $60;
       HEAPF32[$5577>>2] = $5576;
       break;
      }
      case 113:  {
       $5578 = $6;
       $5579 = ((($5578)) + 12|0);
       $5580 = HEAP32[$5579>>2]|0;
       $5581 = ((($5580)) + 4|0);
       HEAP32[$5579>>2] = $5581;
       $5582 = $6;
       $5583 = HEAP32[$5582>>2]|0;
       $5584 = ((($5583)) + 1|0);
       HEAP32[$5582>>2] = $5584;
       $5585 = $60;
       $5586 = +HEAPF32[$5585>>2];
       $5587 = $60;
       $5588 = ((($5587)) + 4|0);
       $5589 = +HEAPF32[$5588>>2];
       $5590 = $5589 + $5586;
       HEAPF32[$5588>>2] = $5590;
       break;
      }
      case 114:  {
       $5591 = $6;
       $5592 = ((($5591)) + 12|0);
       $5593 = HEAP32[$5592>>2]|0;
       $5594 = ((($5593)) + 4|0);
       HEAP32[$5592>>2] = $5594;
       $5595 = $6;
       $5596 = HEAP32[$5595>>2]|0;
       $5597 = ((($5596)) + 1|0);
       HEAP32[$5595>>2] = $5597;
       $5598 = $60;
       $5599 = +HEAPF32[$5598>>2];
       $5600 = $60;
       $5601 = ((($5600)) + 4|0);
       $5602 = +HEAPF32[$5601>>2];
       $5603 = $5602 - $5599;
       HEAPF32[$5601>>2] = $5603;
       break;
      }
      case 115:  {
       $5604 = $6;
       $5605 = ((($5604)) + 12|0);
       $5606 = HEAP32[$5605>>2]|0;
       $5607 = ((($5606)) + 4|0);
       HEAP32[$5605>>2] = $5607;
       $5608 = $6;
       $5609 = HEAP32[$5608>>2]|0;
       $5610 = ((($5609)) + 1|0);
       HEAP32[$5608>>2] = $5610;
       $5611 = $60;
       $5612 = +HEAPF32[$5611>>2];
       $5613 = $60;
       $5614 = ((($5613)) + 4|0);
       $5615 = +HEAPF32[$5614>>2];
       $5616 = $5615 * $5612;
       HEAPF32[$5614>>2] = $5616;
       break;
      }
      case 116:  {
       $5617 = $6;
       $5618 = ((($5617)) + 12|0);
       $5619 = HEAP32[$5618>>2]|0;
       $5620 = ((($5619)) + 4|0);
       HEAP32[$5618>>2] = $5620;
       $5621 = $6;
       $5622 = HEAP32[$5621>>2]|0;
       $5623 = ((($5622)) + 1|0);
       HEAP32[$5621>>2] = $5623;
       $5624 = $60;
       $5625 = +HEAPF32[$5624>>2];
       $5626 = $60;
       $5627 = ((($5626)) + 4|0);
       $5628 = +HEAPF32[$5627>>2];
       $5629 = $5628 / $5625;
       HEAPF32[$5627>>2] = $5629;
       break;
      }
      case 117:  {
       $5630 = $6;
       $5631 = ((($5630)) + 12|0);
       $5632 = HEAP32[$5631>>2]|0;
       $5633 = ((($5632)) + 4|0);
       HEAP32[$5631>>2] = $5633;
       $5634 = $6;
       $5635 = HEAP32[$5634>>2]|0;
       $5636 = ((($5635)) + 1|0);
       HEAP32[$5634>>2] = $5636;
       $5637 = $60;
       $5638 = ((($5637)) + 4|0);
       $5639 = +HEAPF32[$5638>>2];
       $5640 = $60;
       $5641 = +HEAPF32[$5640>>2];
       $5642 = $5639 % $5641;
       $5643 = $60;
       $5644 = ((($5643)) + 4|0);
       HEAPF32[$5644>>2] = $5642;
       break;
      }
      case 119:  {
       $5645 = $6;
       $5646 = ((($5645)) + 12|0);
       $5647 = HEAP32[$5646>>2]|0;
       $5648 = ((($5647)) + 4|0);
       HEAP32[$5646>>2] = $5648;
       $5649 = $6;
       $5650 = HEAP32[$5649>>2]|0;
       $5651 = ((($5650)) + 1|0);
       HEAP32[$5649>>2] = $5651;
       $5652 = $60;
       $5653 = ((($5652)) + 4|0);
       $5654 = +HEAPF32[$5653>>2];
       $5655 = $60;
       $5656 = +HEAPF32[$5655>>2];
       $5657 = $5654 == $5656;
       $5658 = $5657&1;
       $5659 = $60;
       $5660 = ((($5659)) + 4|0);
       HEAP32[$5660>>2] = $5658;
       break;
      }
      case 120:  {
       $5661 = $6;
       $5662 = ((($5661)) + 12|0);
       $5663 = HEAP32[$5662>>2]|0;
       $5664 = ((($5663)) + 4|0);
       HEAP32[$5662>>2] = $5664;
       $5665 = $6;
       $5666 = HEAP32[$5665>>2]|0;
       $5667 = ((($5666)) + 1|0);
       HEAP32[$5665>>2] = $5667;
       $5668 = $60;
       $5669 = ((($5668)) + 4|0);
       $5670 = +HEAPF32[$5669>>2];
       $5671 = $60;
       $5672 = +HEAPF32[$5671>>2];
       $5673 = $5670 < $5672;
       $5674 = $5673&1;
       $5675 = $60;
       $5676 = ((($5675)) + 4|0);
       HEAP32[$5676>>2] = $5674;
       break;
      }
      case 121:  {
       $5677 = $6;
       $5678 = ((($5677)) + 12|0);
       $5679 = HEAP32[$5678>>2]|0;
       $5680 = ((($5679)) + 4|0);
       HEAP32[$5678>>2] = $5680;
       $5681 = $6;
       $5682 = HEAP32[$5681>>2]|0;
       $5683 = ((($5682)) + 1|0);
       HEAP32[$5681>>2] = $5683;
       $5684 = $60;
       $5685 = ((($5684)) + 4|0);
       $5686 = +HEAPF32[$5685>>2];
       $5687 = $60;
       $5688 = +HEAPF32[$5687>>2];
       $5689 = $5686 > $5688;
       $5690 = $5689&1;
       $5691 = $60;
       $5692 = ((($5691)) + 4|0);
       HEAP32[$5692>>2] = $5690;
       break;
      }
      case 122:  {
       $5693 = $6;
       $5694 = ((($5693)) + 12|0);
       $5695 = HEAP32[$5694>>2]|0;
       HEAP32[$5694>>2] = $5695;
       $5696 = $6;
       $5697 = HEAP32[$5696>>2]|0;
       $5698 = ((($5697)) + 1|0);
       HEAP32[$5696>>2] = $5698;
       $5699 = $60;
       $5700 = +HEAPF32[$5699>>2];
       $5701 = (~~(($5700)));
       $5702 = $60;
       HEAP32[$5702>>2] = $5701;
       break;
      }
      case 123:  {
       $5703 = $6;
       $5704 = ((($5703)) + 12|0);
       $5705 = HEAP32[$5704>>2]|0;
       HEAP32[$5704>>2] = $5705;
       $5706 = $6;
       $5707 = HEAP32[$5706>>2]|0;
       $5708 = ((($5707)) + 1|0);
       HEAP32[$5706>>2] = $5708;
       $5709 = $60;
       $5710 = +HEAPF32[$5709>>2];
       $5711 = 0.0 != $5710;
       $5712 = $5711&1;
       $5713 = $60;
       HEAP32[$5713>>2] = $5712;
       break;
      }
      case 124:  {
       $5714 = $6;
       $5715 = ((($5714)) + 12|0);
       $5716 = HEAP32[$5715>>2]|0;
       $5717 = ((($5716)) + -4|0);
       HEAP32[$5715>>2] = $5717;
       $5718 = $6;
       $5719 = HEAP32[$5718>>2]|0;
       $5720 = ((($5719)) + 1|0);
       HEAP32[$5718>>2] = $5720;
       $5721 = $6;
       $5722 = (_ovf($5721)|0);
       $5723 = ($5722|0)!=(0);
       if ($5723) {
        label = 292;
        break L6;
       }
       $5724 = $60;
       $5725 = +HEAPF32[$5724>>2];
       $5726 = (~~$5725)>>>0;
       $5727 = +Math_abs($5725) >= 1.0 ? $5725 > 0.0 ? (~~+Math_min(+Math_floor($5725 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($5725 - +(~~$5725 >>> 0)) / 4294967296.0) >>> 0 : 0;
       $5728 = $60;
       $5729 = ((($5728)) + -4|0);
       $5730 = $5729;
       $5731 = $5730;
       HEAP32[$5731>>2] = $5726;
       $5732 = (($5730) + 4)|0;
       $5733 = $5732;
       HEAP32[$5733>>2] = $5727;
       break;
      }
      case 125:  {
       $5734 = $6;
       $5735 = ((($5734)) + 12|0);
       $5736 = HEAP32[$5735>>2]|0;
       $5737 = ((($5736)) + -4|0);
       HEAP32[$5735>>2] = $5737;
       $5738 = $6;
       $5739 = HEAP32[$5738>>2]|0;
       $5740 = ((($5739)) + 1|0);
       HEAP32[$5738>>2] = $5740;
       $5741 = $6;
       $5742 = (_ovf($5741)|0);
       $5743 = ($5742|0)!=(0);
       if ($5743) {
        label = 292;
        break L6;
       }
       $5744 = $60;
       $5745 = +HEAPF32[$5744>>2];
       $5746 = $5745;
       $5747 = $60;
       $5748 = ((($5747)) + -4|0);
       HEAPF64[$5748>>3] = $5746;
       break;
      }
      case 128:  {
       $5749 = $6;
       $5750 = ((($5749)) + 12|0);
       $5751 = HEAP32[$5750>>2]|0;
       HEAP32[$5750>>2] = $5751;
       $5752 = $6;
       $5753 = HEAP32[$5752>>2]|0;
       $5754 = ((($5753)) + 1|0);
       HEAP32[$5752>>2] = $5754;
       $5755 = $60;
       $5756 = +HEAPF64[$5755>>3];
       $5757 = - $5756;
       $5758 = $60;
       HEAPF64[$5758>>3] = $5757;
       break;
      }
      case 129:  {
       $5759 = $6;
       $5760 = ((($5759)) + 12|0);
       $5761 = HEAP32[$5760>>2]|0;
       $5762 = ((($5761)) + 8|0);
       HEAP32[$5760>>2] = $5762;
       $5763 = $6;
       $5764 = HEAP32[$5763>>2]|0;
       $5765 = ((($5764)) + 1|0);
       HEAP32[$5763>>2] = $5765;
       $5766 = $60;
       $5767 = +HEAPF64[$5766>>3];
       $5768 = $60;
       $5769 = ((($5768)) + 8|0);
       $5770 = +HEAPF64[$5769>>3];
       $5771 = $5770 + $5767;
       HEAPF64[$5769>>3] = $5771;
       break;
      }
      case 130:  {
       $5772 = $6;
       $5773 = ((($5772)) + 12|0);
       $5774 = HEAP32[$5773>>2]|0;
       $5775 = ((($5774)) + 8|0);
       HEAP32[$5773>>2] = $5775;
       $5776 = $6;
       $5777 = HEAP32[$5776>>2]|0;
       $5778 = ((($5777)) + 1|0);
       HEAP32[$5776>>2] = $5778;
       $5779 = $60;
       $5780 = +HEAPF64[$5779>>3];
       $5781 = $60;
       $5782 = ((($5781)) + 8|0);
       $5783 = +HEAPF64[$5782>>3];
       $5784 = $5783 - $5780;
       HEAPF64[$5782>>3] = $5784;
       break;
      }
      case 131:  {
       $5785 = $6;
       $5786 = ((($5785)) + 12|0);
       $5787 = HEAP32[$5786>>2]|0;
       $5788 = ((($5787)) + 8|0);
       HEAP32[$5786>>2] = $5788;
       $5789 = $6;
       $5790 = HEAP32[$5789>>2]|0;
       $5791 = ((($5790)) + 1|0);
       HEAP32[$5789>>2] = $5791;
       $5792 = $60;
       $5793 = +HEAPF64[$5792>>3];
       $5794 = $60;
       $5795 = ((($5794)) + 8|0);
       $5796 = +HEAPF64[$5795>>3];
       $5797 = $5796 * $5793;
       HEAPF64[$5795>>3] = $5797;
       break;
      }
      case 132:  {
       $5798 = $6;
       $5799 = ((($5798)) + 12|0);
       $5800 = HEAP32[$5799>>2]|0;
       $5801 = ((($5800)) + 8|0);
       HEAP32[$5799>>2] = $5801;
       $5802 = $6;
       $5803 = HEAP32[$5802>>2]|0;
       $5804 = ((($5803)) + 1|0);
       HEAP32[$5802>>2] = $5804;
       $5805 = $60;
       $5806 = +HEAPF64[$5805>>3];
       $5807 = $60;
       $5808 = ((($5807)) + 8|0);
       $5809 = +HEAPF64[$5808>>3];
       $5810 = $5809 / $5806;
       HEAPF64[$5808>>3] = $5810;
       break;
      }
      case 133:  {
       $5811 = $6;
       $5812 = ((($5811)) + 12|0);
       $5813 = HEAP32[$5812>>2]|0;
       $5814 = ((($5813)) + 8|0);
       HEAP32[$5812>>2] = $5814;
       $5815 = $6;
       $5816 = HEAP32[$5815>>2]|0;
       $5817 = ((($5816)) + 1|0);
       HEAP32[$5815>>2] = $5817;
       $5818 = $60;
       $5819 = ((($5818)) + 8|0);
       $5820 = +HEAPF64[$5819>>3];
       $5821 = $60;
       $5822 = +HEAPF64[$5821>>3];
       $5823 = $5820 % $5822;
       $5824 = $60;
       $5825 = ((($5824)) + 8|0);
       HEAPF64[$5825>>3] = $5823;
       break;
      }
      case 135:  {
       $5826 = $6;
       $5827 = ((($5826)) + 12|0);
       $5828 = HEAP32[$5827>>2]|0;
       $5829 = ((($5828)) + 12|0);
       HEAP32[$5827>>2] = $5829;
       $5830 = $6;
       $5831 = HEAP32[$5830>>2]|0;
       $5832 = ((($5831)) + 1|0);
       HEAP32[$5830>>2] = $5832;
       $5833 = $60;
       $5834 = ((($5833)) + 8|0);
       $5835 = +HEAPF64[$5834>>3];
       $5836 = $60;
       $5837 = +HEAPF64[$5836>>3];
       $5838 = $5835 == $5837;
       $5839 = $5838&1;
       $5840 = $60;
       $5841 = ((($5840)) + 12|0);
       HEAP32[$5841>>2] = $5839;
       break;
      }
      case 136:  {
       $5842 = $6;
       $5843 = ((($5842)) + 12|0);
       $5844 = HEAP32[$5843>>2]|0;
       $5845 = ((($5844)) + 12|0);
       HEAP32[$5843>>2] = $5845;
       $5846 = $6;
       $5847 = HEAP32[$5846>>2]|0;
       $5848 = ((($5847)) + 1|0);
       HEAP32[$5846>>2] = $5848;
       $5849 = $60;
       $5850 = ((($5849)) + 8|0);
       $5851 = +HEAPF64[$5850>>3];
       $5852 = $60;
       $5853 = +HEAPF64[$5852>>3];
       $5854 = $5851 < $5853;
       $5855 = $5854&1;
       $5856 = $60;
       $5857 = ((($5856)) + 12|0);
       HEAP32[$5857>>2] = $5855;
       break;
      }
      case 137:  {
       $5858 = $6;
       $5859 = ((($5858)) + 12|0);
       $5860 = HEAP32[$5859>>2]|0;
       $5861 = ((($5860)) + 12|0);
       HEAP32[$5859>>2] = $5861;
       $5862 = $6;
       $5863 = HEAP32[$5862>>2]|0;
       $5864 = ((($5863)) + 1|0);
       HEAP32[$5862>>2] = $5864;
       $5865 = $60;
       $5866 = ((($5865)) + 8|0);
       $5867 = +HEAPF64[$5866>>3];
       $5868 = $60;
       $5869 = +HEAPF64[$5868>>3];
       $5870 = $5867 > $5869;
       $5871 = $5870&1;
       $5872 = $60;
       $5873 = ((($5872)) + 12|0);
       HEAP32[$5873>>2] = $5871;
       break;
      }
      case 138:  {
       $5874 = $6;
       $5875 = ((($5874)) + 12|0);
       $5876 = HEAP32[$5875>>2]|0;
       $5877 = ((($5876)) + 4|0);
       HEAP32[$5875>>2] = $5877;
       $5878 = $6;
       $5879 = HEAP32[$5878>>2]|0;
       $5880 = ((($5879)) + 1|0);
       HEAP32[$5878>>2] = $5880;
       $5881 = $60;
       $5882 = +HEAPF64[$5881>>3];
       $5883 = (~~(($5882)));
       $5884 = $60;
       $5885 = ((($5884)) + 4|0);
       HEAP32[$5885>>2] = $5883;
       break;
      }
      case 139:  {
       $5886 = $6;
       $5887 = ((($5886)) + 12|0);
       $5888 = HEAP32[$5887>>2]|0;
       $5889 = ((($5888)) + 4|0);
       HEAP32[$5887>>2] = $5889;
       $5890 = $6;
       $5891 = HEAP32[$5890>>2]|0;
       $5892 = ((($5891)) + 1|0);
       HEAP32[$5890>>2] = $5892;
       $5893 = $60;
       $5894 = +HEAPF64[$5893>>3];
       $5895 = $5894;
       $5896 = $60;
       $5897 = ((($5896)) + 4|0);
       HEAPF32[$5897>>2] = $5895;
       break;
      }
      case 140:  {
       $5898 = $6;
       $5899 = ((($5898)) + 12|0);
       $5900 = HEAP32[$5899>>2]|0;
       HEAP32[$5899>>2] = $5900;
       $5901 = $6;
       $5902 = HEAP32[$5901>>2]|0;
       $5903 = ((($5902)) + 1|0);
       HEAP32[$5901>>2] = $5903;
       $5904 = $60;
       $5905 = +HEAPF64[$5904>>3];
       $5906 = (~~$5905)>>>0;
       $5907 = +Math_abs($5905) >= 1.0 ? $5905 > 0.0 ? (~~+Math_min(+Math_floor($5905 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($5905 - +(~~$5905 >>> 0)) / 4294967296.0) >>> 0 : 0;
       $5908 = $60;
       $5909 = $5908;
       $5910 = $5909;
       HEAP32[$5910>>2] = $5906;
       $5911 = (($5909) + 4)|0;
       $5912 = $5911;
       HEAP32[$5912>>2] = $5907;
       break;
      }
      case 141:  {
       $5913 = $6;
       $5914 = ((($5913)) + 12|0);
       $5915 = HEAP32[$5914>>2]|0;
       $5916 = ((($5915)) + 4|0);
       HEAP32[$5914>>2] = $5916;
       $5917 = $6;
       $5918 = HEAP32[$5917>>2]|0;
       $5919 = ((($5918)) + 1|0);
       HEAP32[$5917>>2] = $5919;
       $5920 = $60;
       $5921 = +HEAPF64[$5920>>3];
       $5922 = 0.0 != $5921;
       $5923 = $5922&1;
       $5924 = $60;
       $5925 = ((($5924)) + 4|0);
       HEAP32[$5925>>2] = $5923;
       break;
      }
      case 144:  {
       $5926 = $6;
       $5927 = ((($5926)) + 12|0);
       $5928 = HEAP32[$5927>>2]|0;
       HEAP32[$5927>>2] = $5928;
       $5929 = $6;
       $5930 = HEAP32[$5929>>2]|0;
       $5931 = ((($5930)) + 1|0);
       HEAP32[$5929>>2] = $5931;
       $5932 = $60;
       $5933 = +HEAPF32[$5932>>2];
       $5934 = - $5933;
       $5935 = $60;
       HEAPF32[$5935>>2] = $5934;
       $5936 = $60;
       $5937 = ((($5936)) + 4|0);
       $5938 = +HEAPF32[$5937>>2];
       $5939 = - $5938;
       $5940 = $60;
       $5941 = ((($5940)) + 4|0);
       HEAPF32[$5941>>2] = $5939;
       $5942 = $60;
       $5943 = ((($5942)) + 8|0);
       $5944 = +HEAPF32[$5943>>2];
       $5945 = - $5944;
       $5946 = $60;
       $5947 = ((($5946)) + 8|0);
       HEAPF32[$5947>>2] = $5945;
       $5948 = $60;
       $5949 = ((($5948)) + 12|0);
       $5950 = +HEAPF32[$5949>>2];
       $5951 = - $5950;
       $5952 = $60;
       $5953 = ((($5952)) + 12|0);
       HEAPF32[$5953>>2] = $5951;
       break;
      }
      case 145:  {
       $5954 = $6;
       $5955 = ((($5954)) + 12|0);
       $5956 = HEAP32[$5955>>2]|0;
       $5957 = ((($5956)) + 16|0);
       HEAP32[$5955>>2] = $5957;
       $5958 = $6;
       $5959 = HEAP32[$5958>>2]|0;
       $5960 = ((($5959)) + 1|0);
       HEAP32[$5958>>2] = $5960;
       $5961 = $60;
       $5962 = +HEAPF32[$5961>>2];
       $5963 = $60;
       $5964 = ((($5963)) + 16|0);
       $5965 = +HEAPF32[$5964>>2];
       $5966 = $5965 + $5962;
       HEAPF32[$5964>>2] = $5966;
       $5967 = $60;
       $5968 = ((($5967)) + 4|0);
       $5969 = +HEAPF32[$5968>>2];
       $5970 = $60;
       $5971 = ((($5970)) + 20|0);
       $5972 = +HEAPF32[$5971>>2];
       $5973 = $5972 + $5969;
       HEAPF32[$5971>>2] = $5973;
       $5974 = $60;
       $5975 = ((($5974)) + 8|0);
       $5976 = +HEAPF32[$5975>>2];
       $5977 = $60;
       $5978 = ((($5977)) + 24|0);
       $5979 = +HEAPF32[$5978>>2];
       $5980 = $5979 + $5976;
       HEAPF32[$5978>>2] = $5980;
       $5981 = $60;
       $5982 = ((($5981)) + 12|0);
       $5983 = +HEAPF32[$5982>>2];
       $5984 = $60;
       $5985 = ((($5984)) + 28|0);
       $5986 = +HEAPF32[$5985>>2];
       $5987 = $5986 + $5983;
       HEAPF32[$5985>>2] = $5987;
       break;
      }
      case 146:  {
       $5988 = $6;
       $5989 = ((($5988)) + 12|0);
       $5990 = HEAP32[$5989>>2]|0;
       $5991 = ((($5990)) + 16|0);
       HEAP32[$5989>>2] = $5991;
       $5992 = $6;
       $5993 = HEAP32[$5992>>2]|0;
       $5994 = ((($5993)) + 1|0);
       HEAP32[$5992>>2] = $5994;
       $5995 = $60;
       $5996 = +HEAPF32[$5995>>2];
       $5997 = $60;
       $5998 = ((($5997)) + 16|0);
       $5999 = +HEAPF32[$5998>>2];
       $6000 = $5999 - $5996;
       HEAPF32[$5998>>2] = $6000;
       $6001 = $60;
       $6002 = ((($6001)) + 4|0);
       $6003 = +HEAPF32[$6002>>2];
       $6004 = $60;
       $6005 = ((($6004)) + 20|0);
       $6006 = +HEAPF32[$6005>>2];
       $6007 = $6006 - $6003;
       HEAPF32[$6005>>2] = $6007;
       $6008 = $60;
       $6009 = ((($6008)) + 8|0);
       $6010 = +HEAPF32[$6009>>2];
       $6011 = $60;
       $6012 = ((($6011)) + 24|0);
       $6013 = +HEAPF32[$6012>>2];
       $6014 = $6013 - $6010;
       HEAPF32[$6012>>2] = $6014;
       $6015 = $60;
       $6016 = ((($6015)) + 12|0);
       $6017 = +HEAPF32[$6016>>2];
       $6018 = $60;
       $6019 = ((($6018)) + 28|0);
       $6020 = +HEAPF32[$6019>>2];
       $6021 = $6020 - $6017;
       HEAPF32[$6019>>2] = $6021;
       break;
      }
      case 147:  {
       $6022 = $6;
       $6023 = ((($6022)) + 12|0);
       $6024 = HEAP32[$6023>>2]|0;
       $6025 = ((($6024)) + 16|0);
       HEAP32[$6023>>2] = $6025;
       $6026 = $6;
       $6027 = HEAP32[$6026>>2]|0;
       $6028 = ((($6027)) + 1|0);
       HEAP32[$6026>>2] = $6028;
       $6029 = $60;
       $6030 = +HEAPF32[$6029>>2];
       $6031 = $60;
       $6032 = ((($6031)) + 16|0);
       $6033 = +HEAPF32[$6032>>2];
       $6034 = $6033 * $6030;
       HEAPF32[$6032>>2] = $6034;
       $6035 = $60;
       $6036 = ((($6035)) + 4|0);
       $6037 = +HEAPF32[$6036>>2];
       $6038 = $60;
       $6039 = ((($6038)) + 20|0);
       $6040 = +HEAPF32[$6039>>2];
       $6041 = $6040 * $6037;
       HEAPF32[$6039>>2] = $6041;
       $6042 = $60;
       $6043 = ((($6042)) + 8|0);
       $6044 = +HEAPF32[$6043>>2];
       $6045 = $60;
       $6046 = ((($6045)) + 24|0);
       $6047 = +HEAPF32[$6046>>2];
       $6048 = $6047 * $6044;
       HEAPF32[$6046>>2] = $6048;
       $6049 = $60;
       $6050 = ((($6049)) + 12|0);
       $6051 = +HEAPF32[$6050>>2];
       $6052 = $60;
       $6053 = ((($6052)) + 28|0);
       $6054 = +HEAPF32[$6053>>2];
       $6055 = $6054 * $6051;
       HEAPF32[$6053>>2] = $6055;
       break;
      }
      case 148:  {
       $6056 = $6;
       $6057 = ((($6056)) + 12|0);
       $6058 = HEAP32[$6057>>2]|0;
       $6059 = ((($6058)) + 16|0);
       HEAP32[$6057>>2] = $6059;
       $6060 = $6;
       $6061 = HEAP32[$6060>>2]|0;
       $6062 = ((($6061)) + 1|0);
       HEAP32[$6060>>2] = $6062;
       $6063 = $60;
       $6064 = +HEAPF32[$6063>>2];
       $6065 = $60;
       $6066 = ((($6065)) + 16|0);
       $6067 = +HEAPF32[$6066>>2];
       $6068 = $6067 / $6064;
       HEAPF32[$6066>>2] = $6068;
       $6069 = $60;
       $6070 = ((($6069)) + 4|0);
       $6071 = +HEAPF32[$6070>>2];
       $6072 = $60;
       $6073 = ((($6072)) + 20|0);
       $6074 = +HEAPF32[$6073>>2];
       $6075 = $6074 / $6071;
       HEAPF32[$6073>>2] = $6075;
       $6076 = $60;
       $6077 = ((($6076)) + 8|0);
       $6078 = +HEAPF32[$6077>>2];
       $6079 = $60;
       $6080 = ((($6079)) + 24|0);
       $6081 = +HEAPF32[$6080>>2];
       $6082 = $6081 / $6078;
       HEAPF32[$6080>>2] = $6082;
       $6083 = $60;
       $6084 = ((($6083)) + 12|0);
       $6085 = +HEAPF32[$6084>>2];
       $6086 = $60;
       $6087 = ((($6086)) + 28|0);
       $6088 = +HEAPF32[$6087>>2];
       $6089 = $6088 / $6085;
       HEAPF32[$6087>>2] = $6089;
       break;
      }
      case 151:  {
       $6090 = $6;
       $6091 = ((($6090)) + 12|0);
       $6092 = HEAP32[$6091>>2]|0;
       $6093 = ((($6092)) + 28|0);
       HEAP32[$6091>>2] = $6093;
       $6094 = $6;
       $6095 = HEAP32[$6094>>2]|0;
       $6096 = ((($6095)) + 1|0);
       HEAP32[$6094>>2] = $6096;
       $6097 = $60;
       $6098 = ((($6097)) + 16|0);
       $6099 = +HEAPF32[$6098>>2];
       $6100 = $60;
       $6101 = +HEAPF32[$6100>>2];
       $6102 = $6099 == $6101;
       if ($6102) {
        $6103 = $60;
        $6104 = ((($6103)) + 20|0);
        $6105 = +HEAPF32[$6104>>2];
        $6106 = $60;
        $6107 = ((($6106)) + 4|0);
        $6108 = +HEAPF32[$6107>>2];
        $6109 = $6105 == $6108;
        if ($6109) {
         $6110 = $60;
         $6111 = ((($6110)) + 24|0);
         $6112 = +HEAPF32[$6111>>2];
         $6113 = $60;
         $6114 = ((($6113)) + 8|0);
         $6115 = +HEAPF32[$6114>>2];
         $6116 = $6112 == $6115;
         if ($6116) {
          $6117 = $60;
          $6118 = ((($6117)) + 28|0);
          $6119 = +HEAPF32[$6118>>2];
          $6120 = $60;
          $6121 = ((($6120)) + 12|0);
          $6122 = +HEAPF32[$6121>>2];
          $6123 = $6119 == $6122;
          $6125 = $6123;
         } else {
          $6125 = 0;
         }
        } else {
         $6125 = 0;
        }
       } else {
        $6125 = 0;
       }
       $6124 = $6125&1;
       $6126 = $60;
       $6127 = ((($6126)) + 28|0);
       HEAP32[$6127>>2] = $6124;
       break;
      }
      case 152:  {
       $6128 = $6;
       $6129 = ((($6128)) + 12|0);
       $6130 = HEAP32[$6129>>2]|0;
       $6131 = ((($6130)) + 16|0);
       HEAP32[$6129>>2] = $6131;
       $6132 = $6;
       $6133 = HEAP32[$6132>>2]|0;
       $6134 = ((($6133)) + 1|0);
       HEAP32[$6132>>2] = $6134;
       $6135 = $60;
       $6136 = ((($6135)) + 16|0);
       $6137 = +HEAPF32[$6136>>2];
       $6138 = $60;
       $6139 = +HEAPF32[$6138>>2];
       $6140 = $6137 > $6139;
       if ($6140) {
        $6141 = $60;
        $6142 = +HEAPF32[$6141>>2];
        $6143 = $60;
        $6144 = ((($6143)) + 16|0);
        HEAPF32[$6144>>2] = $6142;
       }
       $6145 = $60;
       $6146 = ((($6145)) + 20|0);
       $6147 = +HEAPF32[$6146>>2];
       $6148 = $60;
       $6149 = ((($6148)) + 4|0);
       $6150 = +HEAPF32[$6149>>2];
       $6151 = $6147 > $6150;
       if ($6151) {
        $6152 = $60;
        $6153 = ((($6152)) + 4|0);
        $6154 = +HEAPF32[$6153>>2];
        $6155 = $60;
        $6156 = ((($6155)) + 20|0);
        HEAPF32[$6156>>2] = $6154;
       }
       $6157 = $60;
       $6158 = ((($6157)) + 24|0);
       $6159 = +HEAPF32[$6158>>2];
       $6160 = $60;
       $6161 = ((($6160)) + 8|0);
       $6162 = +HEAPF32[$6161>>2];
       $6163 = $6159 > $6162;
       if ($6163) {
        $6164 = $60;
        $6165 = ((($6164)) + 8|0);
        $6166 = +HEAPF32[$6165>>2];
        $6167 = $60;
        $6168 = ((($6167)) + 24|0);
        HEAPF32[$6168>>2] = $6166;
       }
       $6169 = $60;
       $6170 = ((($6169)) + 28|0);
       $6171 = +HEAPF32[$6170>>2];
       $6172 = $60;
       $6173 = ((($6172)) + 12|0);
       $6174 = +HEAPF32[$6173>>2];
       $6175 = $6171 > $6174;
       if ($6175) {
        $6176 = $60;
        $6177 = ((($6176)) + 12|0);
        $6178 = +HEAPF32[$6177>>2];
        $6179 = $60;
        $6180 = ((($6179)) + 28|0);
        HEAPF32[$6180>>2] = $6178;
       }
       break;
      }
      case 153:  {
       $6181 = $6;
       $6182 = ((($6181)) + 12|0);
       $6183 = HEAP32[$6182>>2]|0;
       $6184 = ((($6183)) + 16|0);
       HEAP32[$6182>>2] = $6184;
       $6185 = $6;
       $6186 = HEAP32[$6185>>2]|0;
       $6187 = ((($6186)) + 1|0);
       HEAP32[$6185>>2] = $6187;
       $6188 = $60;
       $6189 = ((($6188)) + 16|0);
       $6190 = +HEAPF32[$6189>>2];
       $6191 = $60;
       $6192 = +HEAPF32[$6191>>2];
       $6193 = $6190 < $6192;
       if ($6193) {
        $6194 = $60;
        $6195 = +HEAPF32[$6194>>2];
        $6196 = $60;
        $6197 = ((($6196)) + 16|0);
        HEAPF32[$6197>>2] = $6195;
       }
       $6198 = $60;
       $6199 = ((($6198)) + 20|0);
       $6200 = +HEAPF32[$6199>>2];
       $6201 = $60;
       $6202 = ((($6201)) + 4|0);
       $6203 = +HEAPF32[$6202>>2];
       $6204 = $6200 < $6203;
       if ($6204) {
        $6205 = $60;
        $6206 = ((($6205)) + 4|0);
        $6207 = +HEAPF32[$6206>>2];
        $6208 = $60;
        $6209 = ((($6208)) + 20|0);
        HEAPF32[$6209>>2] = $6207;
       }
       $6210 = $60;
       $6211 = ((($6210)) + 24|0);
       $6212 = +HEAPF32[$6211>>2];
       $6213 = $60;
       $6214 = ((($6213)) + 8|0);
       $6215 = +HEAPF32[$6214>>2];
       $6216 = $6212 < $6215;
       if ($6216) {
        $6217 = $60;
        $6218 = ((($6217)) + 8|0);
        $6219 = +HEAPF32[$6218>>2];
        $6220 = $60;
        $6221 = ((($6220)) + 24|0);
        HEAPF32[$6221>>2] = $6219;
       }
       $6222 = $60;
       $6223 = ((($6222)) + 28|0);
       $6224 = +HEAPF32[$6223>>2];
       $6225 = $60;
       $6226 = ((($6225)) + 12|0);
       $6227 = +HEAPF32[$6226>>2];
       $6228 = $6224 < $6227;
       if ($6228) {
        $6229 = $60;
        $6230 = ((($6229)) + 12|0);
        $6231 = +HEAPF32[$6230>>2];
        $6232 = $60;
        $6233 = ((($6232)) + 28|0);
        HEAPF32[$6233>>2] = $6231;
       }
       break;
      }
      case 154:  {
       $6234 = $6;
       $6235 = ((($6234)) + 12|0);
       $6236 = HEAP32[$6235>>2]|0;
       $6237 = ((($6236)) + 28|0);
       HEAP32[$6235>>2] = $6237;
       $6238 = $6;
       $6239 = HEAP32[$6238>>2]|0;
       $6240 = ((($6239)) + 1|0);
       HEAP32[$6238>>2] = $6240;
       $6241 = $60;
       $6242 = ((($6241)) + 16|0);
       $6243 = +HEAPF32[$6242>>2];
       $6244 = $60;
       $6245 = +HEAPF32[$6244>>2];
       $6246 = $6243 * $6245;
       $6247 = $60;
       $6248 = ((($6247)) + 20|0);
       $6249 = +HEAPF32[$6248>>2];
       $6250 = $60;
       $6251 = ((($6250)) + 4|0);
       $6252 = +HEAPF32[$6251>>2];
       $6253 = $6249 * $6252;
       $6254 = $6246 + $6253;
       $6255 = $60;
       $6256 = ((($6255)) + 24|0);
       $6257 = +HEAPF32[$6256>>2];
       $6258 = $60;
       $6259 = ((($6258)) + 8|0);
       $6260 = +HEAPF32[$6259>>2];
       $6261 = $6257 * $6260;
       $6262 = $6254 + $6261;
       $6263 = $60;
       $6264 = ((($6263)) + 28|0);
       HEAPF32[$6264>>2] = $6262;
       break;
      }
      case 156:  {
       $6265 = $6;
       $6266 = ((($6265)) + 12|0);
       $6267 = HEAP32[$6266>>2]|0;
       $6268 = ((($6267)) + 28|0);
       HEAP32[$6266>>2] = $6268;
       $6269 = $6;
       $6270 = HEAP32[$6269>>2]|0;
       $6271 = ((($6270)) + 1|0);
       HEAP32[$6269>>2] = $6271;
       $6272 = $60;
       $6273 = ((($6272)) + 16|0);
       $6274 = +HEAPF32[$6273>>2];
       $6275 = $60;
       $6276 = +HEAPF32[$6275>>2];
       $6277 = $6274 * $6276;
       $6278 = $60;
       $6279 = ((($6278)) + 20|0);
       $6280 = +HEAPF32[$6279>>2];
       $6281 = $60;
       $6282 = ((($6281)) + 4|0);
       $6283 = +HEAPF32[$6282>>2];
       $6284 = $6280 * $6283;
       $6285 = $6277 + $6284;
       $6286 = $60;
       $6287 = ((($6286)) + 24|0);
       $6288 = +HEAPF32[$6287>>2];
       $6289 = $60;
       $6290 = ((($6289)) + 8|0);
       $6291 = +HEAPF32[$6290>>2];
       $6292 = $6288 * $6291;
       $6293 = $6285 + $6292;
       $6294 = $60;
       $6295 = ((($6294)) + 28|0);
       $6296 = +HEAPF32[$6295>>2];
       $6297 = $6296 + $6293;
       HEAPF32[$6295>>2] = $6297;
       break;
      }
      case 155:  {
       $6298 = $6;
       $6299 = ((($6298)) + 12|0);
       $6300 = HEAP32[$6299>>2]|0;
       $6301 = ((($6300)) + 28|0);
       HEAP32[$6299>>2] = $6301;
       $6302 = $6;
       $6303 = HEAP32[$6302>>2]|0;
       $6304 = ((($6303)) + 1|0);
       HEAP32[$6302>>2] = $6304;
       $6305 = $60;
       $6306 = ((($6305)) + 16|0);
       $6307 = +HEAPF32[$6306>>2];
       $6308 = $60;
       $6309 = +HEAPF32[$6308>>2];
       $6310 = $6307 * $6309;
       $6311 = $60;
       $6312 = ((($6311)) + 20|0);
       $6313 = +HEAPF32[$6312>>2];
       $6314 = $60;
       $6315 = ((($6314)) + 4|0);
       $6316 = +HEAPF32[$6315>>2];
       $6317 = $6313 * $6316;
       $6318 = $6310 + $6317;
       $6319 = $60;
       $6320 = ((($6319)) + 24|0);
       $6321 = +HEAPF32[$6320>>2];
       $6322 = $60;
       $6323 = ((($6322)) + 8|0);
       $6324 = +HEAPF32[$6323>>2];
       $6325 = $6321 * $6324;
       $6326 = $6318 + $6325;
       $6327 = $60;
       $6328 = ((($6327)) + 28|0);
       $6329 = +HEAPF32[$6328>>2];
       $6330 = $60;
       $6331 = ((($6330)) + 12|0);
       $6332 = +HEAPF32[$6331>>2];
       $6333 = $6329 * $6332;
       $6334 = $6326 + $6333;
       $6335 = $60;
       $6336 = ((($6335)) + 28|0);
       HEAPF32[$6336>>2] = $6334;
       break;
      }
      case 160:  {
       $6337 = $6;
       $6338 = ((($6337)) + 12|0);
       $6339 = HEAP32[$6338>>2]|0;
       HEAP32[$6338>>2] = $6339;
       $6340 = $6;
       $6341 = HEAP32[$6340>>2]|0;
       $6342 = ((($6341)) + 1|0);
       HEAP32[$6340>>2] = $6342;
       $6343 = $60;
       $6344 = +HEAPF64[$6343>>3];
       $6345 = - $6344;
       $6346 = $60;
       HEAPF64[$6346>>3] = $6345;
       $6347 = $60;
       $6348 = ((($6347)) + 8|0);
       $6349 = +HEAPF64[$6348>>3];
       $6350 = - $6349;
       $6351 = $60;
       $6352 = ((($6351)) + 8|0);
       HEAPF64[$6352>>3] = $6350;
       break;
      }
      case 161:  {
       $6353 = $6;
       $6354 = ((($6353)) + 12|0);
       $6355 = HEAP32[$6354>>2]|0;
       $6356 = ((($6355)) + 16|0);
       HEAP32[$6354>>2] = $6356;
       $6357 = $6;
       $6358 = HEAP32[$6357>>2]|0;
       $6359 = ((($6358)) + 1|0);
       HEAP32[$6357>>2] = $6359;
       $6360 = $60;
       $6361 = +HEAPF64[$6360>>3];
       $6362 = $60;
       $6363 = ((($6362)) + 16|0);
       $6364 = +HEAPF64[$6363>>3];
       $6365 = $6364 + $6361;
       HEAPF64[$6363>>3] = $6365;
       $6366 = $60;
       $6367 = ((($6366)) + 8|0);
       $6368 = +HEAPF64[$6367>>3];
       $6369 = $60;
       $6370 = ((($6369)) + 24|0);
       $6371 = +HEAPF64[$6370>>3];
       $6372 = $6371 + $6368;
       HEAPF64[$6370>>3] = $6372;
       break;
      }
      case 162:  {
       $6373 = $6;
       $6374 = ((($6373)) + 12|0);
       $6375 = HEAP32[$6374>>2]|0;
       $6376 = ((($6375)) + 16|0);
       HEAP32[$6374>>2] = $6376;
       $6377 = $6;
       $6378 = HEAP32[$6377>>2]|0;
       $6379 = ((($6378)) + 1|0);
       HEAP32[$6377>>2] = $6379;
       $6380 = $60;
       $6381 = +HEAPF64[$6380>>3];
       $6382 = $60;
       $6383 = ((($6382)) + 16|0);
       $6384 = +HEAPF64[$6383>>3];
       $6385 = $6384 - $6381;
       HEAPF64[$6383>>3] = $6385;
       $6386 = $60;
       $6387 = ((($6386)) + 8|0);
       $6388 = +HEAPF64[$6387>>3];
       $6389 = $60;
       $6390 = ((($6389)) + 24|0);
       $6391 = +HEAPF64[$6390>>3];
       $6392 = $6391 - $6388;
       HEAPF64[$6390>>3] = $6392;
       break;
      }
      case 163:  {
       $6393 = $6;
       $6394 = ((($6393)) + 12|0);
       $6395 = HEAP32[$6394>>2]|0;
       $6396 = ((($6395)) + 16|0);
       HEAP32[$6394>>2] = $6396;
       $6397 = $6;
       $6398 = HEAP32[$6397>>2]|0;
       $6399 = ((($6398)) + 1|0);
       HEAP32[$6397>>2] = $6399;
       $6400 = $60;
       $6401 = +HEAPF64[$6400>>3];
       $6402 = $60;
       $6403 = ((($6402)) + 16|0);
       $6404 = +HEAPF64[$6403>>3];
       $6405 = $6404 * $6401;
       HEAPF64[$6403>>3] = $6405;
       $6406 = $60;
       $6407 = ((($6406)) + 8|0);
       $6408 = +HEAPF64[$6407>>3];
       $6409 = $60;
       $6410 = ((($6409)) + 24|0);
       $6411 = +HEAPF64[$6410>>3];
       $6412 = $6411 * $6408;
       HEAPF64[$6410>>3] = $6412;
       break;
      }
      case 164:  {
       $6413 = $6;
       $6414 = ((($6413)) + 12|0);
       $6415 = HEAP32[$6414>>2]|0;
       $6416 = ((($6415)) + 16|0);
       HEAP32[$6414>>2] = $6416;
       $6417 = $6;
       $6418 = HEAP32[$6417>>2]|0;
       $6419 = ((($6418)) + 1|0);
       HEAP32[$6417>>2] = $6419;
       $6420 = $60;
       $6421 = +HEAPF64[$6420>>3];
       $6422 = $60;
       $6423 = ((($6422)) + 16|0);
       $6424 = +HEAPF64[$6423>>3];
       $6425 = $6424 / $6421;
       HEAPF64[$6423>>3] = $6425;
       $6426 = $60;
       $6427 = ((($6426)) + 8|0);
       $6428 = +HEAPF64[$6427>>3];
       $6429 = $60;
       $6430 = ((($6429)) + 24|0);
       $6431 = +HEAPF64[$6430>>3];
       $6432 = $6431 / $6428;
       HEAPF64[$6430>>3] = $6432;
       break;
      }
      case 170:  {
       $6433 = $6;
       $6434 = ((($6433)) + 12|0);
       $6435 = HEAP32[$6434>>2]|0;
       HEAP32[$6434>>2] = $6435;
       $6436 = $6;
       $6437 = HEAP32[$6436>>2]|0;
       $6438 = ((($6437)) + 2|0);
       HEAP32[$6436>>2] = $6438;
       $6439 = $59;
       $6440 = ((($6439)) + 1|0);
       $6441 = HEAP8[$6440>>0]|0;
       $6442 = $6441&255;
       $86 = $6442;
       $6443 = $60;
       $6444 = $86;
       $6445 = $6444 >>> 0;
       $6446 = $6445 & 3;
       $6447 = (($6443) + ($6446<<2)|0);
       $6448 = HEAP32[$6447>>2]|0;
       $87 = $6448;
       $6449 = $60;
       $6450 = $86;
       $6451 = $6450 >>> 2;
       $6452 = $6451 & 3;
       $6453 = (($6449) + ($6452<<2)|0);
       $6454 = HEAP32[$6453>>2]|0;
       $88 = $6454;
       $6455 = $60;
       $6456 = $86;
       $6457 = $6456 >>> 4;
       $6458 = $6457 & 3;
       $6459 = (($6455) + ($6458<<2)|0);
       $6460 = HEAP32[$6459>>2]|0;
       $89 = $6460;
       $6461 = $60;
       $6462 = $86;
       $6463 = $6462 >>> 6;
       $6464 = $6463 & 3;
       $6465 = (($6461) + ($6464<<2)|0);
       $6466 = HEAP32[$6465>>2]|0;
       $90 = $6466;
       $6467 = $87;
       $6468 = $60;
       HEAP32[$6468>>2] = $6467;
       $6469 = $88;
       $6470 = $60;
       $6471 = ((($6470)) + 4|0);
       HEAP32[$6471>>2] = $6469;
       $6472 = $89;
       $6473 = $60;
       $6474 = ((($6473)) + 8|0);
       HEAP32[$6474>>2] = $6472;
       $6475 = $90;
       $6476 = $60;
       $6477 = ((($6476)) + 12|0);
       HEAP32[$6477>>2] = $6475;
       break;
      }
      case 167:  {
       $6478 = $6;
       $6479 = ((($6478)) + 12|0);
       $6480 = HEAP32[$6479>>2]|0;
       $6481 = ((($6480)) + 28|0);
       HEAP32[$6479>>2] = $6481;
       $6482 = $6;
       $6483 = HEAP32[$6482>>2]|0;
       $6484 = ((($6483)) + 1|0);
       HEAP32[$6482>>2] = $6484;
       $6485 = $60;
       $6486 = ((($6485)) + 16|0);
       $6487 = +HEAPF64[$6486>>3];
       $6488 = $60;
       $6489 = +HEAPF64[$6488>>3];
       $6490 = $6487 == $6489;
       if ($6490) {
        $6491 = $60;
        $6492 = ((($6491)) + 24|0);
        $6493 = +HEAPF64[$6492>>3];
        $6494 = $60;
        $6495 = ((($6494)) + 8|0);
        $6496 = +HEAPF64[$6495>>3];
        $6497 = $6493 == $6496;
        $6499 = $6497;
       } else {
        $6499 = 0;
       }
       $6498 = $6499&1;
       $6500 = $60;
       $6501 = ((($6500)) + 28|0);
       HEAP32[$6501>>2] = $6498;
       break;
      }
      case 168:  {
       $6502 = $6;
       $6503 = ((($6502)) + 12|0);
       $6504 = HEAP32[$6503>>2]|0;
       $6505 = ((($6504)) + 16|0);
       HEAP32[$6503>>2] = $6505;
       $6506 = $6;
       $6507 = HEAP32[$6506>>2]|0;
       $6508 = ((($6507)) + 1|0);
       HEAP32[$6506>>2] = $6508;
       $6509 = $60;
       $6510 = ((($6509)) + 16|0);
       $6511 = +HEAPF64[$6510>>3];
       $6512 = $60;
       $6513 = +HEAPF64[$6512>>3];
       $6514 = $6511 > $6513;
       if ($6514) {
        $6515 = $60;
        $6516 = +HEAPF64[$6515>>3];
        $6517 = $60;
        $6518 = ((($6517)) + 16|0);
        HEAPF64[$6518>>3] = $6516;
       }
       $6519 = $60;
       $6520 = ((($6519)) + 24|0);
       $6521 = +HEAPF64[$6520>>3];
       $6522 = $60;
       $6523 = ((($6522)) + 8|0);
       $6524 = +HEAPF64[$6523>>3];
       $6525 = $6521 > $6524;
       if ($6525) {
        $6526 = $60;
        $6527 = ((($6526)) + 8|0);
        $6528 = +HEAPF64[$6527>>3];
        $6529 = $60;
        $6530 = ((($6529)) + 24|0);
        HEAPF64[$6530>>3] = $6528;
       }
       break;
      }
      case 169:  {
       $6531 = $6;
       $6532 = ((($6531)) + 12|0);
       $6533 = HEAP32[$6532>>2]|0;
       $6534 = ((($6533)) + 16|0);
       HEAP32[$6532>>2] = $6534;
       $6535 = $6;
       $6536 = HEAP32[$6535>>2]|0;
       $6537 = ((($6536)) + 1|0);
       HEAP32[$6535>>2] = $6537;
       $6538 = $60;
       $6539 = ((($6538)) + 16|0);
       $6540 = +HEAPF64[$6539>>3];
       $6541 = $60;
       $6542 = +HEAPF64[$6541>>3];
       $6543 = $6540 < $6542;
       if ($6543) {
        $6544 = $60;
        $6545 = +HEAPF64[$6544>>3];
        $6546 = $60;
        $6547 = ((($6546)) + 16|0);
        HEAPF64[$6547>>3] = $6545;
       }
       $6548 = $60;
       $6549 = ((($6548)) + 24|0);
       $6550 = +HEAPF64[$6549>>3];
       $6551 = $60;
       $6552 = ((($6551)) + 8|0);
       $6553 = +HEAPF64[$6552>>3];
       $6554 = $6550 < $6553;
       if ($6554) {
        $6555 = $60;
        $6556 = ((($6555)) + 8|0);
        $6557 = +HEAPF64[$6556>>3];
        $6558 = $60;
        $6559 = ((($6558)) + 24|0);
        HEAPF64[$6559>>3] = $6557;
       }
       break;
      }
      default: {
       label = 291;
       break L6;
      }
      }
     } while(0);
    }
    if ((label|0) == 291) {
     $10 = 4;
    }
    else if ((label|0) == 292) {
     $10 = 2;
    }
    else if ((label|0) == 293) {
     $10 = 5;
    }
    else if ((label|0) == 294) {
     $10 = 3;
    }
    else if ((label|0) == 297) {
     $10 = 6;
    }
    else if ((label|0) == 420) {
     // unreachable;
    }
    $3482 = $10;
    $3483 = ($3482|0)!=(0);
    if ($3483) {
     $3484 = $7;
     $3485 = $5;
     $3486 = ((($3485)) + 12|0);
     $3487 = HEAP32[$3486>>2]|0;
     $3488 = ($3484|0)==($3487|0);
     if ($3488) {
      $3489 = $5;
      HEAP32[$61>>2] = $3489;
      $3490 = $10;
      $3491 = $15;
      $3492 = $60;
      $3493 = $3491;
      $3494 = $3492;
      $3495 = (($3493) - ($3494))|0;
      $3496 = (($3495|0) / 4)&-1;
      $3497 = $60;
      $3498 = $5;
      $3499 = $59;
      $3500 = (_vmOffset_92($3498,$3499)|0);
      (_dbgDummy($61,$3490,$3496,$3497,$3500,0)|0);
     }
    }
    $3501 = $10;
    $4 = $3501;
    $6560 = $4;
    STACKTOP = sp;return ($6560|0);
   }
   $122 = $6;
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $16 = $124;
   $125 = $6;
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $17 = $127;
   $128 = $6;
   $129 = ((($128)) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $6;
   $132 = ((($131)) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($130) + ($133)|0);
   $18 = $134;
   $135 = $5;
   $136 = ((($135)) + 144|0);
   $137 = $5;
   $138 = ((($137)) + 24|0);
   $139 = ((($138)) + 20|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($136) + ($140)|0);
   $19 = $141;
   $142 = $5;
   $143 = ((($142)) + 144|0);
   $144 = $5;
   $145 = ((($144)) + 24|0);
   $146 = ((($145)) + 16|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($143) + ($147)|0);
   $149 = ((($148)) + 4|0);
   $20 = $149;
   $150 = $5;
   $151 = ((($150)) + 20|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ((($152)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   $21 = $154;
   $155 = $21;
   $156 = ($155|0)==(0|0);
   $spec$store$select = $156 ? 40 : $154;
   $21 = $spec$store$select;
   $157 = $5;
   $158 = $6;
   $159 = ((($158)) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $7;
   $162 = ((($161)) + 20|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (_vmTrace($157,$160,0,$163)|0);
   $10 = $164;
   $165 = $10;
   $166 = ($165|0)!=(0);
   if ($166) {
    $167 = $21;
    $168 = $5;
    $169 = ((($168)) + 20|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $10;
    $172 = $6;
    $173 = ((($172)) + 12|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $5;
    $176 = $6;
    $177 = HEAP32[$176>>2]|0;
    $178 = (_vmOffset_92($175,$177)|0);
    (FUNCTION_TABLE_iiiiiii[$167 & 127]($170,$171,0,$174,$178,0)|0);
    $179 = $10;
    $4 = $179;
    $6560 = $4;
    STACKTOP = sp;return ($6560|0);
   }
   L285: while(1) {
    $180 = $6;
    $181 = HEAP32[$180>>2]|0;
    $22 = $181;
    $182 = $6;
    $183 = ((($182)) + 12|0);
    $184 = HEAP32[$183>>2]|0;
    $23 = $184;
    $185 = $6;
    $186 = ((($185)) + 8|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ((($187)) + -20|0);
    $24 = $188;
    $189 = $5;
    $190 = $22;
    $191 = (_vmOffset_92($189,$190)|0);
    $25 = $191;
    $192 = $22;
    $193 = $20;
    $194 = ($192>>>0)>=($193>>>0);
    if ($194) {
     label = 10;
     break;
    }
    $195 = $22;
    $196 = $19;
    $197 = ($195>>>0)<($196>>>0);
    if ($197) {
     label = 10;
     break;
    }
    $211 = $23;
    $212 = $18;
    $213 = ($211>>>0)>($212>>>0);
    if ($213) {
     label = 13;
     break;
    }
    $214 = $23;
    $215 = $17;
    $216 = ($214>>>0)<($215>>>0);
    if ($216) {
     label = 13;
     break;
    }
    $230 = $21;
    $231 = $5;
    $232 = ((($231)) + 20|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $15;
    $235 = $23;
    $236 = $234;
    $237 = $235;
    $238 = (($236) - ($237))|0;
    $239 = (($238|0) / 4)&-1;
    $240 = $23;
    $241 = $25;
    $242 = (FUNCTION_TABLE_iiiiiii[$230 & 127]($233,0,$239,$240,$241,0)|0);
    $26 = $242;
    $243 = $26;
    $244 = $5;
    $245 = ((($244)) + 20|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = ((($246)) + 52|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ($243|0)==($248|0);
    if ($249) {
     label = 15;
     break;
    }
    $250 = $26;
    $251 = ($250|0)!=(0|0);
    if ($251) {
     $252 = $25;
     $253 = $26;
     $254 = ((($253)) + 16|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($252|0)==($255|0);
     if ($256) {
      $257 = $26;
      $258 = ((($257)) + 48|0);
      $259 = $258;
      $260 = $259;
      $261 = HEAP32[$260>>2]|0;
      $262 = (($259) + 4)|0;
      $263 = $262;
      $264 = HEAP32[$263>>2]|0;
      $265 = (_i64Add(($261|0),($264|0),1,0)|0);
      $266 = (getTempRet0() | 0);
      $267 = $258;
      $268 = $267;
      HEAP32[$268>>2] = $265;
      $269 = (($267) + 4)|0;
      $270 = $269;
      HEAP32[$270>>2] = $266;
      $271 = (_clock()|0);
      $272 = $24;
      $273 = ((($272)) + 12|0);
      HEAP32[$273>>2] = $271;
     }
    }
    $274 = $22;
    $275 = HEAP8[$274>>0]|0;
    $276 = $275&255;
    L296: do {
     switch ($276|0) {
     case 0:  {
      $317 = $6;
      $318 = ((($317)) + 12|0);
      $319 = HEAP32[$318>>2]|0;
      HEAP32[$318>>2] = $319;
      $320 = $6;
      $321 = HEAP32[$320>>2]|0;
      $322 = ((($321)) + 1|0);
      HEAP32[$320>>2] = $322;
      break;
     }
     case 1:  {
      $323 = $6;
      $324 = ((($323)) + 12|0);
      $325 = HEAP32[$324>>2]|0;
      HEAP32[$324>>2] = $325;
      $326 = $6;
      $327 = HEAP32[$326>>2]|0;
      $328 = ((($327)) + 4|0);
      HEAP32[$326>>2] = $328;
      $329 = $9;
      $330 = $22;
      $331 = ((($330)) + 1|0);
      $332 = HEAPU8[$331>>0]|(HEAPU8[$331+1>>0]<<8)|(HEAPU8[$331+2>>0]<<16)|(HEAPU8[$331+3>>0]<<24);
      $333 = $332 << 8;
      $334 = $333 >> 8;
      $335 = (($329) + ($334<<2)|0);
      $336 = HEAP32[$335>>2]|0;
      $27 = $336;
      $337 = $5;
      HEAP32[$28>>2] = $337;
      $338 = $27;
      $339 = ((($338)) + 8|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = ((($28)) + 4|0);
      HEAP32[$341>>2] = $340;
      $342 = $8;
      $343 = ((($28)) + 12|0);
      HEAP32[$343>>2] = $342;
      $344 = $27;
      $345 = ((($344)) + 4|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = ((($28)) + 8|0);
      HEAP32[$347>>2] = $346;
      $348 = $23;
      $349 = ((($28)) + 16|0);
      HEAP32[$349>>2] = $348;
      $350 = $27;
      $351 = ((($350)) + 16|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = $352<<2;
      $354 = ((($28)) + 20|0);
      HEAP32[$354>>2] = $353;
      $355 = ((($28)) + 24|0);
      HEAP32[$355>>2] = (-1);
      $356 = $5;
      $357 = $23;
      $358 = $25;
      $359 = $27;
      $360 = ((($359)) + 8|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ((($361)) + 20|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = (_vmTrace($356,$357,$358,$363)|0);
      $10 = $364;
      $365 = ($364|0)!=(0);
      if ($365) {
       break L285;
      }
      $366 = $27;
      $367 = HEAP32[$366>>2]|0;
      $368 = (FUNCTION_TABLE_ii[$367 & 127]($28)|0);
      $29 = $368;
      $369 = $5;
      $370 = $23;
      $371 = $25;
      $372 = (_vmTrace($369,$370,$371,-1)|0);
      $10 = $372;
      $373 = ($372|0)!=(0);
      if ($373) {
       break L285;
      }
      $374 = $29;
      $375 = ($374|0)!=(0);
      if ($375) {
       label = 37;
       break L285;
      }
      $376 = $22;
      $377 = ((($376)) + 1|0);
      $378 = HEAPU8[$377>>0]|(HEAPU8[$377+1>>0]<<8)|(HEAPU8[$377+2>>0]<<16)|(HEAPU8[$377+3>>0]<<24);
      $379 = $378 << 8;
      $380 = $379 >> 8;
      $381 = ($380|0)==(0);
      if ($381) {
       break L285;
      }
      $382 = $27;
      $383 = ((($382)) + 20|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = $27;
      $386 = ((($385)) + 16|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = (($384) - ($387))|0;
      $389 = $6;
      $390 = ((($389)) + 12|0);
      $391 = HEAP32[$390>>2]|0;
      $392 = (0 - ($388))|0;
      $393 = (($391) + ($392<<2)|0);
      HEAP32[$390>>2] = $393;
      $394 = $6;
      $395 = HEAP32[$394>>2]|0;
      HEAP32[$394>>2] = $395;
      break;
     }
     case 2:  {
      $396 = $6;
      $397 = ((($396)) + 12|0);
      $398 = HEAP32[$397>>2]|0;
      HEAP32[$397>>2] = $398;
      $399 = $6;
      $400 = HEAP32[$399>>2]|0;
      $401 = ((($400)) + 1|0);
      HEAP32[$399>>2] = $401;
      $402 = $23;
      $403 = HEAP32[$402>>2]|0;
      $30 = $403;
      $404 = $6;
      $405 = HEAP32[$404>>2]|0;
      $406 = $14;
      $407 = $405;
      $408 = $406;
      $409 = (($407) - ($408))|0;
      $31 = $409;
      $410 = $30;
      $411 = ($410>>>0)<=(0);
      if ($411) {
       label = 28;
       break L285;
      }
      $412 = $30;
      $413 = $12;
      $414 = ($412>>>0)>($413>>>0);
      if ($414) {
       label = 28;
       break L285;
      }
      $415 = $14;
      $416 = $30;
      $417 = (($415) + ($416)|0);
      $418 = $6;
      HEAP32[$418>>2] = $417;
      $419 = $31;
      $420 = $23;
      HEAP32[$420>>2] = $419;
      $421 = $5;
      $422 = $23;
      $423 = $25;
      $424 = $30;
      $425 = (_vmTrace($421,$422,$423,$424)|0);
      $10 = $425;
      $426 = ($425|0)!=(0);
      if ($426) {
       break L285;
      }
      break;
     }
     case 3:  {
      $427 = $6;
      $428 = ((($427)) + 12|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = ((($429)) + 4|0);
      HEAP32[$428>>2] = $430;
      $431 = $6;
      $432 = HEAP32[$431>>2]|0;
      $433 = ((($432)) + 1|0);
      HEAP32[$431>>2] = $433;
      $434 = $23;
      $435 = HEAP32[$434>>2]|0;
      $32 = $435;
      $436 = $32;
      $437 = ($436>>>0)<=(0);
      if ($437) {
       label = 28;
       break L285;
      }
      $438 = $32;
      $439 = $12;
      $440 = ($438>>>0)>($439>>>0);
      if ($440) {
       label = 28;
       break L285;
      }
      $441 = $14;
      $442 = $32;
      $443 = (($441) + ($442)|0);
      $444 = $6;
      HEAP32[$444>>2] = $443;
      $445 = $5;
      $446 = $23;
      $447 = $25;
      $448 = (_vmTrace($445,$446,$447,-1)|0);
      $10 = $448;
      $449 = ($448|0)!=(0);
      if ($449) {
       break L285;
      }
      break;
     }
     case 4:  {
      $450 = $6;
      $451 = ((($450)) + 12|0);
      $452 = HEAP32[$451>>2]|0;
      HEAP32[$451>>2] = $452;
      $453 = $6;
      $454 = HEAP32[$453>>2]|0;
      $455 = ((($454)) + 4|0);
      HEAP32[$453>>2] = $455;
      $456 = $22;
      $457 = ((($456)) + 1|0);
      $458 = HEAPU8[$457>>0]|(HEAPU8[$457+1>>0]<<8)|(HEAPU8[$457+2>>0]<<16)|(HEAPU8[$457+3>>0]<<24);
      $459 = $458 << 8;
      $460 = $459 >> 8;
      $461 = (($460) - 4)|0;
      $462 = $6;
      $463 = HEAP32[$462>>2]|0;
      $464 = (($463) + ($461)|0);
      HEAP32[$462>>2] = $464;
      break;
     }
     case 5:  {
      $465 = $6;
      $466 = ((($465)) + 12|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ((($467)) + 4|0);
      HEAP32[$466>>2] = $468;
      $469 = $6;
      $470 = HEAP32[$469>>2]|0;
      $471 = ((($470)) + 4|0);
      HEAP32[$469>>2] = $471;
      $472 = $23;
      $473 = HEAP32[$472>>2]|0;
      $474 = ($473|0)!=(0);
      if ($474) {
       $475 = $22;
       $476 = ((($475)) + 1|0);
       $477 = HEAPU8[$476>>0]|(HEAPU8[$476+1>>0]<<8)|(HEAPU8[$476+2>>0]<<16)|(HEAPU8[$476+3>>0]<<24);
       $478 = $477 << 8;
       $479 = $478 >> 8;
       $480 = (($479) - 4)|0;
       $481 = $6;
       $482 = HEAP32[$481>>2]|0;
       $483 = (($482) + ($480)|0);
       HEAP32[$481>>2] = $483;
      }
      break;
     }
     case 6:  {
      $484 = $6;
      $485 = ((($484)) + 12|0);
      $486 = HEAP32[$485>>2]|0;
      $487 = ((($486)) + 4|0);
      HEAP32[$485>>2] = $487;
      $488 = $6;
      $489 = HEAP32[$488>>2]|0;
      $490 = ((($489)) + 4|0);
      HEAP32[$488>>2] = $490;
      $491 = $23;
      $492 = HEAP32[$491>>2]|0;
      $493 = ($492|0)==(0);
      if ($493) {
       $494 = $22;
       $495 = ((($494)) + 1|0);
       $496 = HEAPU8[$495>>0]|(HEAPU8[$495+1>>0]<<8)|(HEAPU8[$495+2>>0]<<16)|(HEAPU8[$495+3>>0]<<24);
       $497 = $496 << 8;
       $498 = $497 >> 8;
       $499 = (($498) - 4)|0;
       $500 = $6;
       $501 = HEAP32[$500>>2]|0;
       $502 = (($501) + ($499)|0);
       HEAP32[$500>>2] = $502;
      }
      break;
     }
     case 7:  {
      $503 = $6;
      $504 = ((($503)) + 12|0);
      $505 = HEAP32[$504>>2]|0;
      HEAP32[$504>>2] = $505;
      $506 = $6;
      $507 = HEAP32[$506>>2]|0;
      $508 = ((($507)) + 4|0);
      HEAP32[$506>>2] = $508;
      $509 = $6;
      $510 = $22;
      $511 = ((($510)) + 1|0);
      $512 = ((($511)) + 1|0);
      $513 = HEAPU8[$512>>0]|(HEAPU8[$512+1>>0]<<8);
      $514 = $513&65535;
      $515 = $514<<2;
      $516 = (_vmFork($509,1,-1,$515)|0);
      $517 = ($516|0)!=(0);
      if ($517) {
       $518 = $22;
       $519 = ((($518)) + 1|0);
       $520 = ((($519)) + 1|0);
       $521 = HEAPU8[$520>>0]|(HEAPU8[$520+1>>0]<<8);
       $522 = $521&65535;
       $523 = (($522) - 4)|0;
       $524 = $6;
       $525 = HEAP32[$524>>2]|0;
       $526 = (($525) + ($523)|0);
       HEAP32[$524>>2] = $526;
      }
      break;
     }
     case 8:  {
      $527 = $6;
      $528 = ((($527)) + 12|0);
      $529 = HEAP32[$528>>2]|0;
      HEAP32[$528>>2] = $529;
      $530 = $6;
      $531 = HEAP32[$530>>2]|0;
      $532 = ((($531)) + 2|0);
      HEAP32[$530>>2] = $532;
      $533 = $6;
      $534 = $22;
      $535 = ((($534)) + 1|0);
      $536 = HEAP8[$535>>0]|0;
      $537 = $536&255;
      $538 = (_vmJoin($533,-1,$537)|0);
      $539 = ($538|0)!=(0);
      if (!($539)) {
       $540 = $6;
       $541 = ((($540)) + 12|0);
       $542 = HEAP32[$541>>2]|0;
       HEAP32[$541>>2] = $542;
       $543 = $6;
       $544 = HEAP32[$543>>2]|0;
       $545 = ((($544)) + -2|0);
       HEAP32[$543>>2] = $545;
      }
      break;
     }
     case 10:  {
      $546 = $6;
      $547 = ((($546)) + 12|0);
      $548 = HEAP32[$547>>2]|0;
      HEAP32[$547>>2] = $548;
      $549 = $6;
      $550 = HEAP32[$549>>2]|0;
      $551 = ((($550)) + 1|0);
      HEAP32[$549>>2] = $551;
      $552 = $23;
      $553 = HEAP32[$552>>2]|0;
      $554 = ($553|0)!=(0);
      $555 = $554 ^ 1;
      $556 = $555&1;
      $557 = $23;
      HEAP32[$557>>2] = $556;
      break;
     }
     case 11:  {
      $558 = $6;
      $559 = ((($558)) + 12|0);
      $560 = HEAP32[$559>>2]|0;
      HEAP32[$559>>2] = $560;
      $561 = $6;
      $562 = HEAP32[$561>>2]|0;
      $563 = ((($562)) + 4|0);
      HEAP32[$561>>2] = $563;
      $564 = $22;
      $565 = ((($564)) + 1|0);
      $566 = HEAPU8[$565>>0]|(HEAPU8[$565+1>>0]<<8)|(HEAPU8[$565+2>>0]<<16)|(HEAPU8[$565+3>>0]<<24);
      $567 = $566 << 8;
      $568 = $567 >> 8;
      $569 = $23;
      $570 = HEAP32[$569>>2]|0;
      $571 = (($570) + ($568))|0;
      HEAP32[$569>>2] = $571;
      break;
     }
     case 12:  {
      $572 = $6;
      $573 = ((($572)) + 12|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = ((($574)) + 4|0);
      HEAP32[$573>>2] = $575;
      $576 = $6;
      $577 = HEAP32[$576>>2]|0;
      $578 = ((($577)) + 4|0);
      HEAP32[$576>>2] = $578;
      $579 = $23;
      $580 = HEAP32[$579>>2]|0;
      $581 = $22;
      $582 = ((($581)) + 1|0);
      $583 = HEAPU8[$582>>0]|(HEAPU8[$582+1>>0]<<8)|(HEAPU8[$582+2>>0]<<16)|(HEAPU8[$582+3>>0]<<24);
      $584 = $583 << 8;
      $585 = $584 >> 8;
      $586 = Math_imul($580, $585)|0;
      $587 = $23;
      $588 = ((($587)) + 4|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($589) + ($586))|0;
      HEAP32[$588>>2] = $590;
      break;
     }
     case 16:  {
      $591 = $6;
      $592 = ((($591)) + 12|0);
      $593 = HEAP32[$592>>2]|0;
      HEAP32[$592>>2] = $593;
      $594 = $6;
      $595 = HEAP32[$594>>2]|0;
      $596 = ((($595)) + 4|0);
      HEAP32[$594>>2] = $596;
      $597 = $22;
      $598 = ((($597)) + 1|0);
      $599 = HEAPU8[$598>>0]|(HEAPU8[$598+1>>0]<<8)|(HEAPU8[$598+2>>0]<<16)|(HEAPU8[$598+3>>0]<<24);
      $600 = $599 << 8;
      $601 = $600 >> 8;
      $602 = (($601|0) / 4)&-1;
      $33 = $602;
      $603 = $22;
      $604 = ((($603)) + 1|0);
      $605 = HEAPU8[$604>>0]|(HEAPU8[$604+1>>0]<<8)|(HEAPU8[$604+2>>0]<<16)|(HEAPU8[$604+3>>0]<<24);
      $606 = $605 << 8;
      $607 = $606 >> 8;
      $608 = $607 & 3;
      $609 = ($608|0)!=(0);
      if ($609) {
       label = 28;
       break L285;
      }
      $610 = $33;
      $611 = ($610|0)>(0);
      $612 = $33;
      $613 = $6;
      $614 = ((($613)) + 12|0);
      $615 = HEAP32[$614>>2]|0;
      $616 = (0 - ($612))|0;
      $617 = (($615) + ($616<<2)|0);
      HEAP32[$614>>2] = $617;
      $618 = $6;
      $619 = HEAP32[$618>>2]|0;
      HEAP32[$618>>2] = $619;
      if ($611) {
       $620 = $6;
       $621 = (_ovf($620)|0);
       $622 = ($621|0)!=(0);
       if ($622) {
        label = 29;
        break L285;
       }
      }
      break;
     }
     case 17:  {
      $623 = $6;
      $624 = ((($623)) + 12|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = ((($625)) + -4|0);
      HEAP32[$624>>2] = $626;
      $627 = $6;
      $628 = HEAP32[$627>>2]|0;
      $629 = ((($628)) + 4|0);
      HEAP32[$627>>2] = $629;
      $630 = $6;
      $631 = (_ovf($630)|0);
      $632 = ($631|0)!=(0);
      if ($632) {
       label = 29;
       break L285;
      }
      $633 = $23;
      $634 = $14;
      $635 = $633;
      $636 = $634;
      $637 = (($635) - ($636))|0;
      $638 = $22;
      $639 = ((($638)) + 1|0);
      $640 = HEAPU8[$639>>0]|(HEAPU8[$639+1>>0]<<8)|(HEAPU8[$639+2>>0]<<16)|(HEAPU8[$639+3>>0]<<24);
      $641 = $640 << 8;
      $642 = $641 >> 8;
      $643 = (($637) + ($642))|0;
      $644 = $23;
      $645 = ((($644)) + -4|0);
      HEAP32[$645>>2] = $643;
      break;
     }
     case 18:  {
      $646 = $6;
      $647 = ((($646)) + 12|0);
      $648 = HEAP32[$647>>2]|0;
      $649 = ((($648)) + -4|0);
      HEAP32[$647>>2] = $649;
      $650 = $6;
      $651 = HEAP32[$650>>2]|0;
      $652 = ((($651)) + 2|0);
      HEAP32[$650>>2] = $652;
      $653 = $6;
      $654 = (_ovf($653)|0);
      $655 = ($654|0)!=(0);
      if ($655) {
       label = 29;
       break L285;
      }
      $656 = $23;
      $657 = $22;
      $658 = ((($657)) + 1|0);
      $659 = HEAP8[$658>>0]|0;
      $660 = $659&255;
      $661 = (($656) + ($660<<2)|0);
      $662 = HEAP32[$661>>2]|0;
      $663 = $23;
      $664 = ((($663)) + -4|0);
      HEAP32[$664>>2] = $662;
      break;
     }
     case 19:  {
      $665 = $6;
      $666 = ((($665)) + 12|0);
      $667 = HEAP32[$666>>2]|0;
      $668 = ((($667)) + -8|0);
      HEAP32[$666>>2] = $668;
      $669 = $6;
      $670 = HEAP32[$669>>2]|0;
      $671 = ((($670)) + 2|0);
      HEAP32[$669>>2] = $671;
      $672 = $6;
      $673 = (_ovf($672)|0);
      $674 = ($673|0)!=(0);
      if ($674) {
       label = 29;
       break L285;
      }
      $675 = $23;
      $676 = $22;
      $677 = ((($676)) + 1|0);
      $678 = HEAP8[$677>>0]|0;
      $679 = $678&255;
      $680 = (($675) + ($679<<2)|0);
      $681 = $680;
      $682 = $681;
      $683 = HEAP32[$682>>2]|0;
      $684 = (($681) + 4)|0;
      $685 = $684;
      $686 = HEAP32[$685>>2]|0;
      $687 = $23;
      $688 = ((($687)) + -8|0);
      $689 = $688;
      $690 = $689;
      HEAP32[$690>>2] = $683;
      $691 = (($689) + 4)|0;
      $692 = $691;
      HEAP32[$692>>2] = $686;
      break;
     }
     case 20:  {
      $693 = $6;
      $694 = ((($693)) + 12|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = ((($695)) + -16|0);
      HEAP32[$694>>2] = $696;
      $697 = $6;
      $698 = HEAP32[$697>>2]|0;
      $699 = ((($698)) + 2|0);
      HEAP32[$697>>2] = $699;
      $700 = $6;
      $701 = (_ovf($700)|0);
      $702 = ($701|0)!=(0);
      if ($702) {
       label = 29;
       break L285;
      }
      $703 = $23;
      $704 = $22;
      $705 = ((($704)) + 1|0);
      $706 = HEAP8[$705>>0]|0;
      $707 = $706&255;
      $708 = (($707) + 0)|0;
      $709 = (($703) + ($708<<2)|0);
      $710 = HEAP32[$709>>2]|0;
      $711 = $23;
      $712 = ((($711)) + -16|0);
      HEAP32[$712>>2] = $710;
      $713 = $23;
      $714 = $22;
      $715 = ((($714)) + 1|0);
      $716 = HEAP8[$715>>0]|0;
      $717 = $716&255;
      $718 = (($717) + 1)|0;
      $719 = (($713) + ($718<<2)|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = $23;
      $722 = ((($721)) + -12|0);
      HEAP32[$722>>2] = $720;
      $723 = $23;
      $724 = $22;
      $725 = ((($724)) + 1|0);
      $726 = HEAP8[$725>>0]|0;
      $727 = $726&255;
      $728 = (($727) + 2)|0;
      $729 = (($723) + ($728<<2)|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = $23;
      $732 = ((($731)) + -8|0);
      HEAP32[$732>>2] = $730;
      $733 = $23;
      $734 = $22;
      $735 = ((($734)) + 1|0);
      $736 = HEAP8[$735>>0]|0;
      $737 = $736&255;
      $738 = (($737) + 3)|0;
      $739 = (($733) + ($738<<2)|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = $23;
      $742 = ((($741)) + -4|0);
      HEAP32[$742>>2] = $740;
      break;
     }
     case 21:  {
      $743 = $22;
      $744 = ((($743)) + 1|0);
      $745 = HEAP8[$744>>0]|0;
      $746 = $745&255;
      $747 = ($746|0)<=(1);
      if ($747) {
       $748 = $22;
       $749 = ((($748)) + 1|0);
       $750 = HEAP8[$749>>0]|0;
       $751 = $750&255;
       $752 = (0 - ($751))|0;
       $757 = $752;
      } else {
       $757 = -1;
      }
      $753 = $6;
      $754 = ((($753)) + 12|0);
      $755 = HEAP32[$754>>2]|0;
      $756 = (0 - ($757))|0;
      $758 = (($755) + ($756<<2)|0);
      HEAP32[$754>>2] = $758;
      $759 = $6;
      $760 = HEAP32[$759>>2]|0;
      $761 = ((($760)) + 2|0);
      HEAP32[$759>>2] = $761;
      $762 = $23;
      $763 = HEAP32[$762>>2]|0;
      $764 = $23;
      $765 = $22;
      $766 = ((($765)) + 1|0);
      $767 = HEAP8[$766>>0]|0;
      $768 = $767&255;
      $769 = (($764) + ($768<<2)|0);
      HEAP32[$769>>2] = $763;
      break;
     }
     case 22:  {
      $770 = $22;
      $771 = ((($770)) + 1|0);
      $772 = HEAP8[$771>>0]|0;
      $773 = $772&255;
      $774 = ($773|0)<=(2);
      if ($774) {
       $775 = $22;
       $776 = ((($775)) + 1|0);
       $777 = HEAP8[$776>>0]|0;
       $778 = $777&255;
       $779 = (0 - ($778))|0;
       $784 = $779;
      } else {
       $784 = -2;
      }
      $780 = $6;
      $781 = ((($780)) + 12|0);
      $782 = HEAP32[$781>>2]|0;
      $783 = (0 - ($784))|0;
      $785 = (($782) + ($783<<2)|0);
      HEAP32[$781>>2] = $785;
      $786 = $6;
      $787 = HEAP32[$786>>2]|0;
      $788 = ((($787)) + 2|0);
      HEAP32[$786>>2] = $788;
      $789 = $23;
      $790 = $789;
      $791 = $790;
      $792 = HEAP32[$791>>2]|0;
      $793 = (($790) + 4)|0;
      $794 = $793;
      $795 = HEAP32[$794>>2]|0;
      $796 = $23;
      $797 = $22;
      $798 = ((($797)) + 1|0);
      $799 = HEAP8[$798>>0]|0;
      $800 = $799&255;
      $801 = (($796) + ($800<<2)|0);
      $802 = $801;
      $803 = $802;
      HEAP32[$803>>2] = $792;
      $804 = (($802) + 4)|0;
      $805 = $804;
      HEAP32[$805>>2] = $795;
      break;
     }
     case 23:  {
      $806 = $22;
      $807 = ((($806)) + 1|0);
      $808 = HEAP8[$807>>0]|0;
      $809 = $808&255;
      $810 = ($809|0)<=(4);
      if ($810) {
       $811 = $22;
       $812 = ((($811)) + 1|0);
       $813 = HEAP8[$812>>0]|0;
       $814 = $813&255;
       $815 = (0 - ($814))|0;
       $820 = $815;
      } else {
       $820 = -4;
      }
      $816 = $6;
      $817 = ((($816)) + 12|0);
      $818 = HEAP32[$817>>2]|0;
      $819 = (0 - ($820))|0;
      $821 = (($818) + ($819<<2)|0);
      HEAP32[$817>>2] = $821;
      $822 = $6;
      $823 = HEAP32[$822>>2]|0;
      $824 = ((($823)) + 2|0);
      HEAP32[$822>>2] = $824;
      $825 = $23;
      $826 = ((($825)) + 12|0);
      $827 = HEAP32[$826>>2]|0;
      $828 = $23;
      $829 = $22;
      $830 = ((($829)) + 1|0);
      $831 = HEAP8[$830>>0]|0;
      $832 = $831&255;
      $833 = (($832) + 3)|0;
      $834 = (($828) + ($833<<2)|0);
      HEAP32[$834>>2] = $827;
      $835 = $23;
      $836 = ((($835)) + 8|0);
      $837 = HEAP32[$836>>2]|0;
      $838 = $23;
      $839 = $22;
      $840 = ((($839)) + 1|0);
      $841 = HEAP8[$840>>0]|0;
      $842 = $841&255;
      $843 = (($842) + 2)|0;
      $844 = (($838) + ($843<<2)|0);
      HEAP32[$844>>2] = $837;
      $845 = $23;
      $846 = ((($845)) + 4|0);
      $847 = HEAP32[$846>>2]|0;
      $848 = $23;
      $849 = $22;
      $850 = ((($849)) + 1|0);
      $851 = HEAP8[$850>>0]|0;
      $852 = $851&255;
      $853 = (($852) + 1)|0;
      $854 = (($848) + ($853<<2)|0);
      HEAP32[$854>>2] = $847;
      $855 = $23;
      $856 = HEAP32[$855>>2]|0;
      $857 = $23;
      $858 = $22;
      $859 = ((($858)) + 1|0);
      $860 = HEAP8[$859>>0]|0;
      $861 = $860&255;
      $862 = (($861) + 0)|0;
      $863 = (($857) + ($862<<2)|0);
      HEAP32[$863>>2] = $856;
      break;
     }
     case 24:  {
      $864 = $6;
      $865 = ((($864)) + 12|0);
      $866 = HEAP32[$865>>2]|0;
      $867 = ((($866)) + -4|0);
      HEAP32[$865>>2] = $867;
      $868 = $6;
      $869 = HEAP32[$868>>2]|0;
      $870 = ((($869)) + 1|0);
      HEAP32[$868>>2] = $870;
      $871 = $6;
      $872 = (_ovf($871)|0);
      $873 = ($872|0)!=(0);
      if ($873) {
       label = 29;
       break L285;
      }
      $874 = $23;
      $875 = ((($874)) + -4|0);
      HEAP32[$875>>2] = 0;
      break;
     }
     case 25:  {
      $876 = $6;
      $877 = ((($876)) + 12|0);
      $878 = HEAP32[$877>>2]|0;
      $879 = ((($878)) + -8|0);
      HEAP32[$877>>2] = $879;
      $880 = $6;
      $881 = HEAP32[$880>>2]|0;
      $882 = ((($881)) + 1|0);
      HEAP32[$880>>2] = $882;
      $883 = $6;
      $884 = (_ovf($883)|0);
      $885 = ($884|0)!=(0);
      if ($885) {
       label = 29;
       break L285;
      }
      $886 = $23;
      $887 = ((($886)) + -4|0);
      HEAP32[$887>>2] = 0;
      $888 = $23;
      $889 = ((($888)) + -8|0);
      HEAP32[$889>>2] = 0;
      break;
     }
     case 26:  {
      $890 = $6;
      $891 = ((($890)) + 12|0);
      $892 = HEAP32[$891>>2]|0;
      $893 = ((($892)) + -16|0);
      HEAP32[$891>>2] = $893;
      $894 = $6;
      $895 = HEAP32[$894>>2]|0;
      $896 = ((($895)) + 1|0);
      HEAP32[$894>>2] = $896;
      $897 = $6;
      $898 = (_ovf($897)|0);
      $899 = ($898|0)!=(0);
      if ($899) {
       label = 29;
       break L285;
      }
      $900 = $23;
      $901 = ((($900)) + -4|0);
      HEAP32[$901>>2] = 0;
      $902 = $23;
      $903 = ((($902)) + -8|0);
      HEAP32[$903>>2] = 0;
      $904 = $23;
      $905 = ((($904)) + -12|0);
      HEAP32[$905>>2] = 0;
      $906 = $23;
      $907 = ((($906)) + -16|0);
      HEAP32[$907>>2] = 0;
      break;
     }
     case 27: case 31: case 29:  {
      $908 = $6;
      $909 = ((($908)) + 12|0);
      $910 = HEAP32[$909>>2]|0;
      $911 = ((($910)) + -4|0);
      HEAP32[$909>>2] = $911;
      $912 = $6;
      $913 = HEAP32[$912>>2]|0;
      $914 = ((($913)) + 5|0);
      HEAP32[$912>>2] = $914;
      $915 = $6;
      $916 = (_ovf($915)|0);
      $917 = ($916|0)!=(0);
      if ($917) {
       label = 29;
       break L285;
      }
      $918 = $22;
      $919 = ((($918)) + 1|0);
      $920 = HEAPU8[$919>>0]|(HEAPU8[$919+1>>0]<<8)|(HEAPU8[$919+2>>0]<<16)|(HEAPU8[$919+3>>0]<<24);
      $921 = $23;
      $922 = ((($921)) + -4|0);
      HEAP32[$922>>2] = $920;
      break;
     }
     case 28: case 30:  {
      $923 = $6;
      $924 = ((($923)) + 12|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = ((($925)) + -8|0);
      HEAP32[$924>>2] = $926;
      $927 = $6;
      $928 = HEAP32[$927>>2]|0;
      $929 = ((($928)) + 9|0);
      HEAP32[$927>>2] = $929;
      $930 = $6;
      $931 = (_ovf($930)|0);
      $932 = ($931|0)!=(0);
      if ($932) {
       label = 29;
       break L285;
      }
      $933 = $22;
      $934 = ((($933)) + 1|0);
      $935 = $934;
      $936 = $935;
      $937 = HEAPU8[$936>>0]|(HEAPU8[$936+1>>0]<<8)|(HEAPU8[$936+2>>0]<<16)|(HEAPU8[$936+3>>0]<<24);
      $938 = (($935) + 4)|0;
      $939 = $938;
      $940 = HEAPU8[$939>>0]|(HEAPU8[$939+1>>0]<<8)|(HEAPU8[$939+2>>0]<<16)|(HEAPU8[$939+3>>0]<<24);
      $941 = $23;
      $942 = ((($941)) + -8|0);
      $943 = $942;
      $944 = $943;
      HEAP32[$944>>2] = $937;
      $945 = (($943) + 4)|0;
      $946 = $945;
      HEAP32[$946>>2] = $940;
      break;
     }
     case 32:  {
      $947 = $6;
      $948 = ((($947)) + 12|0);
      $949 = HEAP32[$948>>2]|0;
      HEAP32[$948>>2] = $949;
      $950 = $6;
      $951 = HEAP32[$950>>2]|0;
      $952 = ((($951)) + 1|0);
      HEAP32[$950>>2] = $952;
      $953 = $23;
      $954 = HEAP32[$953>>2]|0;
      $34 = $954;
      $955 = $34;
      $956 = ($955>>>0)<=(0);
      if ($956) {
       label = 30;
       break L285;
      }
      $957 = $34;
      $958 = $12;
      $959 = (($958) - 1)|0;
      $960 = ($957>>>0)>($959>>>0);
      if ($960) {
       label = 30;
       break L285;
      }
      $961 = $14;
      $962 = $34;
      $963 = (($961) + ($962)|0);
      $964 = HEAP8[$963>>0]|0;
      $965 = $964 << 24 >> 24;
      $966 = $23;
      HEAP32[$966>>2] = $965;
      break;
     }
     case 33:  {
      $967 = $6;
      $968 = ((($967)) + 12|0);
      $969 = HEAP32[$968>>2]|0;
      HEAP32[$968>>2] = $969;
      $970 = $6;
      $971 = HEAP32[$970>>2]|0;
      $972 = ((($971)) + 1|0);
      HEAP32[$970>>2] = $972;
      $973 = $23;
      $974 = HEAP32[$973>>2]|0;
      $35 = $974;
      $975 = $35;
      $976 = ($975>>>0)<=(0);
      if ($976) {
       label = 30;
       break L285;
      }
      $977 = $35;
      $978 = $12;
      $979 = (($978) - 2)|0;
      $980 = ($977>>>0)>($979>>>0);
      if ($980) {
       label = 30;
       break L285;
      }
      $981 = $14;
      $982 = $35;
      $983 = (($981) + ($982)|0);
      $984 = HEAP16[$983>>1]|0;
      $985 = $984 << 16 >> 16;
      $986 = $23;
      HEAP32[$986>>2] = $985;
      break;
     }
     case 34:  {
      $987 = $6;
      $988 = ((($987)) + 12|0);
      $989 = HEAP32[$988>>2]|0;
      HEAP32[$988>>2] = $989;
      $990 = $6;
      $991 = HEAP32[$990>>2]|0;
      $992 = ((($991)) + 1|0);
      HEAP32[$990>>2] = $992;
      $993 = $23;
      $994 = HEAP32[$993>>2]|0;
      $36 = $994;
      $995 = $36;
      $996 = ($995>>>0)<=(0);
      if ($996) {
       label = 30;
       break L285;
      }
      $997 = $36;
      $998 = $12;
      $999 = (($998) - 4)|0;
      $1000 = ($997>>>0)>($999>>>0);
      if ($1000) {
       label = 30;
       break L285;
      }
      $1001 = $14;
      $1002 = $36;
      $1003 = (($1001) + ($1002)|0);
      $1004 = HEAP32[$1003>>2]|0;
      $1005 = $23;
      HEAP32[$1005>>2] = $1004;
      break;
     }
     case 35:  {
      $1006 = $6;
      $1007 = ((($1006)) + 12|0);
      $1008 = HEAP32[$1007>>2]|0;
      $1009 = ((($1008)) + -4|0);
      HEAP32[$1007>>2] = $1009;
      $1010 = $6;
      $1011 = HEAP32[$1010>>2]|0;
      $1012 = ((($1011)) + 1|0);
      HEAP32[$1010>>2] = $1012;
      $1013 = $23;
      $1014 = HEAP32[$1013>>2]|0;
      $37 = $1014;
      $1015 = $6;
      $1016 = (_ovf($1015)|0);
      $1017 = ($1016|0)!=(0);
      if ($1017) {
       label = 29;
       break L285;
      }
      $1018 = $37;
      $1019 = ($1018>>>0)<=(0);
      if ($1019) {
       label = 30;
       break L285;
      }
      $1020 = $37;
      $1021 = $12;
      $1022 = (($1021) - 8)|0;
      $1023 = ($1020>>>0)>($1022>>>0);
      if ($1023) {
       label = 30;
       break L285;
      }
      $1024 = $14;
      $1025 = $37;
      $1026 = (($1024) + ($1025)|0);
      $1027 = $1026;
      $1028 = $1027;
      $1029 = HEAP32[$1028>>2]|0;
      $1030 = (($1027) + 4)|0;
      $1031 = $1030;
      $1032 = HEAP32[$1031>>2]|0;
      $1033 = $23;
      $1034 = ((($1033)) + -4|0);
      $1035 = $1034;
      $1036 = $1035;
      HEAP32[$1036>>2] = $1029;
      $1037 = (($1035) + 4)|0;
      $1038 = $1037;
      HEAP32[$1038>>2] = $1032;
      break;
     }
     case 36:  {
      $1039 = $6;
      $1040 = ((($1039)) + 12|0);
      $1041 = HEAP32[$1040>>2]|0;
      $1042 = ((($1041)) + -12|0);
      HEAP32[$1040>>2] = $1042;
      $1043 = $6;
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = ((($1044)) + 1|0);
      HEAP32[$1043>>2] = $1045;
      $1046 = $23;
      $1047 = HEAP32[$1046>>2]|0;
      $38 = $1047;
      $1048 = $6;
      $1049 = (_ovf($1048)|0);
      $1050 = ($1049|0)!=(0);
      if ($1050) {
       label = 29;
       break L285;
      }
      $1051 = $38;
      $1052 = ($1051>>>0)<=(0);
      if ($1052) {
       label = 30;
       break L285;
      }
      $1053 = $38;
      $1054 = $12;
      $1055 = (($1054) - 16)|0;
      $1056 = ($1053>>>0)>($1055>>>0);
      if ($1056) {
       label = 30;
       break L285;
      }
      $1057 = $23;
      $1058 = ((($1057)) + -12|0);
      $1059 = $14;
      $1060 = $38;
      $1061 = (($1059) + ($1060)|0);
      _memmove(($1058|0),($1061|0),16)|0;
      break;
     }
     case 37:  {
      $1062 = $6;
      $1063 = ((($1062)) + 12|0);
      $1064 = HEAP32[$1063>>2]|0;
      $1065 = ((($1064)) + 8|0);
      HEAP32[$1063>>2] = $1065;
      $1066 = $6;
      $1067 = HEAP32[$1066>>2]|0;
      $1068 = ((($1067)) + 1|0);
      HEAP32[$1066>>2] = $1068;
      $1069 = $23;
      $1070 = HEAP32[$1069>>2]|0;
      $39 = $1070;
      $1071 = $39;
      $1072 = $13;
      $1073 = ($1071>>>0)<($1072>>>0);
      if ($1073) {
       label = 30;
       break L285;
      }
      $1074 = $39;
      $1075 = $12;
      $1076 = (($1075) - 1)|0;
      $1077 = ($1074>>>0)>($1076>>>0);
      if ($1077) {
       label = 30;
       break L285;
      }
      $1078 = $23;
      $1079 = ((($1078)) + 4|0);
      $1080 = HEAP8[$1079>>0]|0;
      $1081 = $14;
      $1082 = $39;
      $1083 = (($1081) + ($1082)|0);
      HEAP8[$1083>>0] = $1080;
      break;
     }
     case 38:  {
      $1084 = $6;
      $1085 = ((($1084)) + 12|0);
      $1086 = HEAP32[$1085>>2]|0;
      $1087 = ((($1086)) + 8|0);
      HEAP32[$1085>>2] = $1087;
      $1088 = $6;
      $1089 = HEAP32[$1088>>2]|0;
      $1090 = ((($1089)) + 1|0);
      HEAP32[$1088>>2] = $1090;
      $1091 = $23;
      $1092 = HEAP32[$1091>>2]|0;
      $40 = $1092;
      $1093 = $40;
      $1094 = $13;
      $1095 = ($1093>>>0)<($1094>>>0);
      if ($1095) {
       label = 30;
       break L285;
      }
      $1096 = $40;
      $1097 = $12;
      $1098 = (($1097) - 2)|0;
      $1099 = ($1096>>>0)>($1098>>>0);
      if ($1099) {
       label = 30;
       break L285;
      }
      $1100 = $23;
      $1101 = ((($1100)) + 4|0);
      $1102 = HEAP16[$1101>>1]|0;
      $1103 = $14;
      $1104 = $40;
      $1105 = (($1103) + ($1104)|0);
      HEAP16[$1105>>1] = $1102;
      break;
     }
     case 39:  {
      $1106 = $6;
      $1107 = ((($1106)) + 12|0);
      $1108 = HEAP32[$1107>>2]|0;
      $1109 = ((($1108)) + 8|0);
      HEAP32[$1107>>2] = $1109;
      $1110 = $6;
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = ((($1111)) + 1|0);
      HEAP32[$1110>>2] = $1112;
      $1113 = $23;
      $1114 = HEAP32[$1113>>2]|0;
      $41 = $1114;
      $1115 = $41;
      $1116 = $13;
      $1117 = ($1115>>>0)<($1116>>>0);
      if ($1117) {
       label = 30;
       break L285;
      }
      $1118 = $41;
      $1119 = $12;
      $1120 = (($1119) - 4)|0;
      $1121 = ($1118>>>0)>($1120>>>0);
      if ($1121) {
       label = 30;
       break L285;
      }
      $1122 = $23;
      $1123 = ((($1122)) + 4|0);
      $1124 = HEAP32[$1123>>2]|0;
      $1125 = $14;
      $1126 = $41;
      $1127 = (($1125) + ($1126)|0);
      HEAP32[$1127>>2] = $1124;
      break;
     }
     case 40:  {
      $1128 = $6;
      $1129 = ((($1128)) + 12|0);
      $1130 = HEAP32[$1129>>2]|0;
      $1131 = ((($1130)) + 12|0);
      HEAP32[$1129>>2] = $1131;
      $1132 = $6;
      $1133 = HEAP32[$1132>>2]|0;
      $1134 = ((($1133)) + 1|0);
      HEAP32[$1132>>2] = $1134;
      $1135 = $23;
      $1136 = HEAP32[$1135>>2]|0;
      $42 = $1136;
      $1137 = $42;
      $1138 = $13;
      $1139 = ($1137>>>0)<($1138>>>0);
      if ($1139) {
       label = 30;
       break L285;
      }
      $1140 = $42;
      $1141 = $12;
      $1142 = (($1141) - 8)|0;
      $1143 = ($1140>>>0)>($1142>>>0);
      if ($1143) {
       label = 30;
       break L285;
      }
      $1144 = $23;
      $1145 = ((($1144)) + 4|0);
      $1146 = $1145;
      $1147 = $1146;
      $1148 = HEAP32[$1147>>2]|0;
      $1149 = (($1146) + 4)|0;
      $1150 = $1149;
      $1151 = HEAP32[$1150>>2]|0;
      $1152 = $14;
      $1153 = $42;
      $1154 = (($1152) + ($1153)|0);
      $1155 = $1154;
      $1156 = $1155;
      HEAP32[$1156>>2] = $1148;
      $1157 = (($1155) + 4)|0;
      $1158 = $1157;
      HEAP32[$1158>>2] = $1151;
      break;
     }
     case 41:  {
      $1159 = $6;
      $1160 = ((($1159)) + 12|0);
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = ((($1161)) + 20|0);
      HEAP32[$1160>>2] = $1162;
      $1163 = $6;
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = ((($1164)) + 1|0);
      HEAP32[$1163>>2] = $1165;
      $1166 = $23;
      $1167 = HEAP32[$1166>>2]|0;
      $43 = $1167;
      $1168 = $43;
      $1169 = $13;
      $1170 = ($1168>>>0)<($1169>>>0);
      if ($1170) {
       label = 30;
       break L285;
      }
      $1171 = $43;
      $1172 = $12;
      $1173 = (($1172) - 16)|0;
      $1174 = ($1171>>>0)>($1173>>>0);
      if ($1174) {
       label = 30;
       break L285;
      }
      $1175 = $14;
      $1176 = $43;
      $1177 = (($1175) + ($1176)|0);
      $1178 = $23;
      $1179 = ((($1178)) + 4|0);
      _memmove(($1177|0),($1179|0),16)|0;
      break;
     }
     case 42:  {
      $1180 = $6;
      $1181 = ((($1180)) + 12|0);
      $1182 = HEAP32[$1181>>2]|0;
      $1183 = ((($1182)) + -4|0);
      HEAP32[$1181>>2] = $1183;
      $1184 = $6;
      $1185 = HEAP32[$1184>>2]|0;
      $1186 = ((($1185)) + 4|0);
      HEAP32[$1184>>2] = $1186;
      $1187 = $22;
      $1188 = ((($1187)) + 1|0);
      $1189 = HEAPU8[$1188>>0]|(HEAPU8[$1188+1>>0]<<8)|(HEAPU8[$1188+2>>0]<<16)|(HEAPU8[$1188+3>>0]<<24);
      $1190 = $1189 << 8;
      $1191 = $1190 >> 8;
      $44 = $1191;
      $1192 = $44;
      $1193 = ($1192>>>0)<=(0);
      if ($1193) {
       label = 30;
       break L285;
      }
      $1194 = $44;
      $1195 = $12;
      $1196 = (($1195) - 4)|0;
      $1197 = ($1194>>>0)>($1196>>>0);
      if ($1197) {
       label = 30;
       break L285;
      }
      $1198 = $14;
      $1199 = $44;
      $1200 = (($1198) + ($1199)|0);
      $1201 = HEAP32[$1200>>2]|0;
      $1202 = $23;
      $1203 = ((($1202)) + -4|0);
      HEAP32[$1203>>2] = $1201;
      break;
     }
     case 43:  {
      $1204 = $6;
      $1205 = ((($1204)) + 12|0);
      $1206 = HEAP32[$1205>>2]|0;
      $1207 = ((($1206)) + -8|0);
      HEAP32[$1205>>2] = $1207;
      $1208 = $6;
      $1209 = HEAP32[$1208>>2]|0;
      $1210 = ((($1209)) + 4|0);
      HEAP32[$1208>>2] = $1210;
      $1211 = $22;
      $1212 = ((($1211)) + 1|0);
      $1213 = HEAPU8[$1212>>0]|(HEAPU8[$1212+1>>0]<<8)|(HEAPU8[$1212+2>>0]<<16)|(HEAPU8[$1212+3>>0]<<24);
      $1214 = $1213 << 8;
      $1215 = $1214 >> 8;
      $45 = $1215;
      $1216 = $45;
      $1217 = ($1216>>>0)<=(0);
      if ($1217) {
       label = 30;
       break L285;
      }
      $1218 = $45;
      $1219 = $12;
      $1220 = (($1219) - 8)|0;
      $1221 = ($1218>>>0)>($1220>>>0);
      if ($1221) {
       label = 30;
       break L285;
      }
      $1222 = $14;
      $1223 = $45;
      $1224 = (($1222) + ($1223)|0);
      $1225 = $1224;
      $1226 = $1225;
      $1227 = HEAP32[$1226>>2]|0;
      $1228 = (($1225) + 4)|0;
      $1229 = $1228;
      $1230 = HEAP32[$1229>>2]|0;
      $1231 = $23;
      $1232 = ((($1231)) + -8|0);
      $1233 = $1232;
      $1234 = $1233;
      HEAP32[$1234>>2] = $1227;
      $1235 = (($1233) + 4)|0;
      $1236 = $1235;
      HEAP32[$1236>>2] = $1230;
      break;
     }
     case 45:  {
      $1237 = $6;
      $1238 = ((($1237)) + 12|0);
      $1239 = HEAP32[$1238>>2]|0;
      $1240 = ((($1239)) + 4|0);
      HEAP32[$1238>>2] = $1240;
      $1241 = $6;
      $1242 = HEAP32[$1241>>2]|0;
      $1243 = ((($1242)) + 4|0);
      HEAP32[$1241>>2] = $1243;
      $1244 = $22;
      $1245 = ((($1244)) + 1|0);
      $1246 = HEAPU8[$1245>>0]|(HEAPU8[$1245+1>>0]<<8)|(HEAPU8[$1245+2>>0]<<16)|(HEAPU8[$1245+3>>0]<<24);
      $1247 = $1246 << 8;
      $1248 = $1247 >> 8;
      $46 = $1248;
      $1249 = $46;
      $1250 = $13;
      $1251 = ($1249>>>0)<($1250>>>0);
      if ($1251) {
       label = 30;
       break L285;
      }
      $1252 = $46;
      $1253 = $12;
      $1254 = (($1253) - 4)|0;
      $1255 = ($1252>>>0)>($1254>>>0);
      if ($1255) {
       label = 30;
       break L285;
      }
      $1256 = $23;
      $1257 = HEAP32[$1256>>2]|0;
      $1258 = $14;
      $1259 = $46;
      $1260 = (($1258) + ($1259)|0);
      HEAP32[$1260>>2] = $1257;
      break;
     }
     case 46:  {
      $1261 = $6;
      $1262 = ((($1261)) + 12|0);
      $1263 = HEAP32[$1262>>2]|0;
      $1264 = ((($1263)) + 8|0);
      HEAP32[$1262>>2] = $1264;
      $1265 = $6;
      $1266 = HEAP32[$1265>>2]|0;
      $1267 = ((($1266)) + 4|0);
      HEAP32[$1265>>2] = $1267;
      $1268 = $22;
      $1269 = ((($1268)) + 1|0);
      $1270 = HEAPU8[$1269>>0]|(HEAPU8[$1269+1>>0]<<8)|(HEAPU8[$1269+2>>0]<<16)|(HEAPU8[$1269+3>>0]<<24);
      $1271 = $1270 << 8;
      $1272 = $1271 >> 8;
      $47 = $1272;
      $1273 = $47;
      $1274 = $13;
      $1275 = ($1273>>>0)<($1274>>>0);
      if ($1275) {
       label = 30;
       break L285;
      }
      $1276 = $47;
      $1277 = $12;
      $1278 = (($1277) - 8)|0;
      $1279 = ($1276>>>0)>($1278>>>0);
      if ($1279) {
       label = 30;
       break L285;
      }
      $1280 = $23;
      $1281 = $1280;
      $1282 = $1281;
      $1283 = HEAP32[$1282>>2]|0;
      $1284 = (($1281) + 4)|0;
      $1285 = $1284;
      $1286 = HEAP32[$1285>>2]|0;
      $1287 = $14;
      $1288 = $47;
      $1289 = (($1287) + ($1288)|0);
      $1290 = $1289;
      $1291 = $1290;
      HEAP32[$1291>>2] = $1283;
      $1292 = (($1290) + 4)|0;
      $1293 = $1292;
      HEAP32[$1293>>2] = $1286;
      break;
     }
     case 47:  {
      $1294 = $6;
      $1295 = ((($1294)) + 12|0);
      $1296 = HEAP32[$1295>>2]|0;
      $1297 = ((($1296)) + 8|0);
      HEAP32[$1295>>2] = $1297;
      $1298 = $6;
      $1299 = HEAP32[$1298>>2]|0;
      $1300 = ((($1299)) + 4|0);
      HEAP32[$1298>>2] = $1300;
      $1301 = $22;
      $1302 = ((($1301)) + 1|0);
      $1303 = HEAPU8[$1302>>0]|(HEAPU8[$1302+1>>0]<<8)|(HEAPU8[$1302+2>>0]<<16)|(HEAPU8[$1302+3>>0]<<24);
      $1304 = $1303 << 8;
      $1305 = $1304 >> 8;
      $50 = $1305;
      $1306 = $50;
      $1307 = ($1306|0)<(0);
      if ($1307) {
       $1308 = $50;
       $1309 = (0 - ($1308))|0;
       $50 = $1309;
       $1310 = $23;
       $1311 = ((($1310)) + 4|0);
       $1312 = HEAP32[$1311>>2]|0;
       $48 = $1312;
       $1313 = $23;
       $1314 = HEAP32[$1313>>2]|0;
       $49 = $1314;
      } else {
       $1315 = $23;
       $1316 = HEAP32[$1315>>2]|0;
       $48 = $1316;
       $1317 = $23;
       $1318 = ((($1317)) + 4|0);
       $1319 = HEAP32[$1318>>2]|0;
       $49 = $1319;
      }
      $1320 = $48;
      $1321 = ($1320>>>0)<=(0);
      if ($1321) {
       label = 30;
       break L285;
      }
      $1322 = $48;
      $1323 = $12;
      $1324 = $50;
      $1325 = (($1323) - ($1324))|0;
      $1326 = ($1322>>>0)>($1325>>>0);
      if ($1326) {
       label = 30;
       break L285;
      }
      $1327 = $49;
      $1328 = $13;
      $1329 = ($1327>>>0)<($1328>>>0);
      if ($1329) {
       label = 30;
       break L285;
      }
      $1330 = $49;
      $1331 = $12;
      $1332 = $50;
      $1333 = (($1331) - ($1332))|0;
      $1334 = ($1330>>>0)>($1333>>>0);
      if ($1334) {
       label = 30;
       break L285;
      }
      $1335 = $14;
      $1336 = $49;
      $1337 = (($1335) + ($1336)|0);
      $1338 = $14;
      $1339 = $48;
      $1340 = (($1338) + ($1339)|0);
      $1341 = $50;
      _memmove(($1337|0),($1340|0),($1341|0))|0;
      break;
     }
     case 48:  {
      $1342 = $6;
      $1343 = ((($1342)) + 12|0);
      $1344 = HEAP32[$1343>>2]|0;
      HEAP32[$1343>>2] = $1344;
      $1345 = $6;
      $1346 = HEAP32[$1345>>2]|0;
      $1347 = ((($1346)) + 1|0);
      HEAP32[$1345>>2] = $1347;
      $1348 = $23;
      $1349 = HEAP32[$1348>>2]|0;
      $1350 = $1349 ^ -1;
      $1351 = $23;
      HEAP32[$1351>>2] = $1350;
      break;
     }
     case 49:  {
      $1352 = $6;
      $1353 = ((($1352)) + 12|0);
      $1354 = HEAP32[$1353>>2]|0;
      $1355 = ((($1354)) + 4|0);
      HEAP32[$1353>>2] = $1355;
      $1356 = $6;
      $1357 = HEAP32[$1356>>2]|0;
      $1358 = ((($1357)) + 1|0);
      HEAP32[$1356>>2] = $1358;
      $1359 = $23;
      $1360 = HEAP32[$1359>>2]|0;
      $1361 = $23;
      $1362 = ((($1361)) + 4|0);
      $1363 = HEAP32[$1362>>2]|0;
      $1364 = $1363 & $1360;
      HEAP32[$1362>>2] = $1364;
      break;
     }
     case 50:  {
      $1365 = $6;
      $1366 = ((($1365)) + 12|0);
      $1367 = HEAP32[$1366>>2]|0;
      $1368 = ((($1367)) + 4|0);
      HEAP32[$1366>>2] = $1368;
      $1369 = $6;
      $1370 = HEAP32[$1369>>2]|0;
      $1371 = ((($1370)) + 1|0);
      HEAP32[$1369>>2] = $1371;
      $1372 = $23;
      $1373 = HEAP32[$1372>>2]|0;
      $1374 = $23;
      $1375 = ((($1374)) + 4|0);
      $1376 = HEAP32[$1375>>2]|0;
      $1377 = $1376 | $1373;
      HEAP32[$1375>>2] = $1377;
      break;
     }
     case 51:  {
      $1378 = $6;
      $1379 = ((($1378)) + 12|0);
      $1380 = HEAP32[$1379>>2]|0;
      $1381 = ((($1380)) + 4|0);
      HEAP32[$1379>>2] = $1381;
      $1382 = $6;
      $1383 = HEAP32[$1382>>2]|0;
      $1384 = ((($1383)) + 1|0);
      HEAP32[$1382>>2] = $1384;
      $1385 = $23;
      $1386 = HEAP32[$1385>>2]|0;
      $1387 = $23;
      $1388 = ((($1387)) + 4|0);
      $1389 = HEAP32[$1388>>2]|0;
      $1390 = Math_imul($1389, $1386)|0;
      HEAP32[$1388>>2] = $1390;
      break;
     }
     case 52:  {
      $1391 = $6;
      $1392 = ((($1391)) + 12|0);
      $1393 = HEAP32[$1392>>2]|0;
      $1394 = ((($1393)) + 4|0);
      HEAP32[$1392>>2] = $1394;
      $1395 = $6;
      $1396 = HEAP32[$1395>>2]|0;
      $1397 = ((($1396)) + 1|0);
      HEAP32[$1395>>2] = $1397;
      $1398 = $23;
      $1399 = HEAP32[$1398>>2]|0;
      $1400 = ($1399|0)==(0);
      if ($1400) {
       label = 32;
       break L285;
      }
      $1401 = $23;
      $1402 = HEAP32[$1401>>2]|0;
      $1403 = $23;
      $1404 = ((($1403)) + 4|0);
      $1405 = HEAP32[$1404>>2]|0;
      $1406 = (($1405>>>0) / ($1402>>>0))&-1;
      HEAP32[$1404>>2] = $1406;
      break;
     }
     case 53:  {
      $1407 = $6;
      $1408 = ((($1407)) + 12|0);
      $1409 = HEAP32[$1408>>2]|0;
      $1410 = ((($1409)) + 4|0);
      HEAP32[$1408>>2] = $1410;
      $1411 = $6;
      $1412 = HEAP32[$1411>>2]|0;
      $1413 = ((($1412)) + 1|0);
      HEAP32[$1411>>2] = $1413;
      $1414 = $23;
      $1415 = HEAP32[$1414>>2]|0;
      $1416 = ($1415|0)==(0);
      if ($1416) {
       label = 32;
       break L285;
      }
      $1417 = $23;
      $1418 = HEAP32[$1417>>2]|0;
      $1419 = $23;
      $1420 = ((($1419)) + 4|0);
      $1421 = HEAP32[$1420>>2]|0;
      $1422 = (($1421>>>0) % ($1418>>>0))&-1;
      HEAP32[$1420>>2] = $1422;
      break;
     }
     case 54:  {
      $1423 = $6;
      $1424 = ((($1423)) + 12|0);
      $1425 = HEAP32[$1424>>2]|0;
      $1426 = ((($1425)) + 4|0);
      HEAP32[$1424>>2] = $1426;
      $1427 = $6;
      $1428 = HEAP32[$1427>>2]|0;
      $1429 = ((($1428)) + 1|0);
      HEAP32[$1427>>2] = $1429;
      $1430 = $23;
      $1431 = HEAP32[$1430>>2]|0;
      $1432 = $23;
      $1433 = ((($1432)) + 4|0);
      $1434 = HEAP32[$1433>>2]|0;
      $1435 = $1434 ^ $1431;
      HEAP32[$1433>>2] = $1435;
      break;
     }
     case 56:  {
      $1436 = $6;
      $1437 = ((($1436)) + 12|0);
      $1438 = HEAP32[$1437>>2]|0;
      $1439 = ((($1438)) + 4|0);
      HEAP32[$1437>>2] = $1439;
      $1440 = $6;
      $1441 = HEAP32[$1440>>2]|0;
      $1442 = ((($1441)) + 1|0);
      HEAP32[$1440>>2] = $1442;
      $1443 = $23;
      $1444 = ((($1443)) + 4|0);
      $1445 = HEAP32[$1444>>2]|0;
      $1446 = $23;
      $1447 = HEAP32[$1446>>2]|0;
      $1448 = ($1445>>>0)<($1447>>>0);
      $1449 = $1448&1;
      $1450 = $23;
      $1451 = ((($1450)) + 4|0);
      HEAP32[$1451>>2] = $1449;
      break;
     }
     case 57:  {
      $1452 = $6;
      $1453 = ((($1452)) + 12|0);
      $1454 = HEAP32[$1453>>2]|0;
      $1455 = ((($1454)) + 4|0);
      HEAP32[$1453>>2] = $1455;
      $1456 = $6;
      $1457 = HEAP32[$1456>>2]|0;
      $1458 = ((($1457)) + 1|0);
      HEAP32[$1456>>2] = $1458;
      $1459 = $23;
      $1460 = ((($1459)) + 4|0);
      $1461 = HEAP32[$1460>>2]|0;
      $1462 = $23;
      $1463 = HEAP32[$1462>>2]|0;
      $1464 = ($1461>>>0)>($1463>>>0);
      $1465 = $1464&1;
      $1466 = $23;
      $1467 = ((($1466)) + 4|0);
      HEAP32[$1467>>2] = $1465;
      break;
     }
     case 58:  {
      $1468 = $6;
      $1469 = ((($1468)) + 12|0);
      $1470 = HEAP32[$1469>>2]|0;
      $1471 = ((($1470)) + 4|0);
      HEAP32[$1469>>2] = $1471;
      $1472 = $6;
      $1473 = HEAP32[$1472>>2]|0;
      $1474 = ((($1473)) + 1|0);
      HEAP32[$1472>>2] = $1474;
      $1475 = $23;
      $1476 = HEAP32[$1475>>2]|0;
      $1477 = $23;
      $1478 = ((($1477)) + 4|0);
      $1479 = HEAP32[$1478>>2]|0;
      $1480 = $1479 << $1476;
      HEAP32[$1478>>2] = $1480;
      break;
     }
     case 59:  {
      $1481 = $6;
      $1482 = ((($1481)) + 12|0);
      $1483 = HEAP32[$1482>>2]|0;
      $1484 = ((($1483)) + 4|0);
      HEAP32[$1482>>2] = $1484;
      $1485 = $6;
      $1486 = HEAP32[$1485>>2]|0;
      $1487 = ((($1486)) + 1|0);
      HEAP32[$1485>>2] = $1487;
      $1488 = $23;
      $1489 = HEAP32[$1488>>2]|0;
      $1490 = $23;
      $1491 = ((($1490)) + 4|0);
      $1492 = HEAP32[$1491>>2]|0;
      $1493 = $1492 >>> $1489;
      HEAP32[$1491>>2] = $1493;
      break;
     }
     case 60:  {
      $1494 = $6;
      $1495 = ((($1494)) + 12|0);
      $1496 = HEAP32[$1495>>2]|0;
      $1497 = ((($1496)) + 4|0);
      HEAP32[$1495>>2] = $1497;
      $1498 = $6;
      $1499 = HEAP32[$1498>>2]|0;
      $1500 = ((($1499)) + 1|0);
      HEAP32[$1498>>2] = $1500;
      $1501 = $23;
      $1502 = HEAP32[$1501>>2]|0;
      $1503 = $23;
      $1504 = ((($1503)) + 4|0);
      $1505 = HEAP32[$1504>>2]|0;
      $1506 = $1505 >> $1502;
      HEAP32[$1504>>2] = $1506;
      break;
     }
     case 62:  {
      $1507 = $6;
      $1508 = ((($1507)) + 12|0);
      $1509 = HEAP32[$1508>>2]|0;
      $1510 = ((($1509)) + -4|0);
      HEAP32[$1508>>2] = $1510;
      $1511 = $6;
      $1512 = HEAP32[$1511>>2]|0;
      $1513 = ((($1512)) + 1|0);
      HEAP32[$1511>>2] = $1513;
      $1514 = $23;
      $1515 = HEAP32[$1514>>2]|0;
      $1516 = $23;
      $1517 = ((($1516)) + -4|0);
      $1518 = $1517;
      $1519 = $1518;
      HEAP32[$1519>>2] = $1515;
      $1520 = (($1518) + 4)|0;
      $1521 = $1520;
      HEAP32[$1521>>2] = 0;
      break;
     }
     case 63:  {
      $1522 = $6;
      $1523 = ((($1522)) + 12|0);
      $1524 = HEAP32[$1523>>2]|0;
      HEAP32[$1523>>2] = $1524;
      $1525 = $6;
      $1526 = HEAP32[$1525>>2]|0;
      $1527 = ((($1526)) + 2|0);
      HEAP32[$1525>>2] = $1527;
      $1528 = $22;
      $1529 = ((($1528)) + 1|0);
      $1530 = HEAP8[$1529>>0]|0;
      $1531 = $1530&255;
      $1532 = $1531 & 192;
      $1533 = (($1532) - 0)|0;
      $1534 = $1533 >>> 6;
      $1535 = $1533 << 26;
      $1536 = $1534 | $1535;
      switch ($1536|0) {
      case 0:  {
       $1537 = $22;
       $1538 = ((($1537)) + 1|0);
       $1539 = HEAP8[$1538>>0]|0;
       $1540 = $1539&255;
       $1541 = $1540 & 63;
       $1542 = 1 << $1541;
       $1543 = (($1542) - 1)|0;
       $1544 = $23;
       $1545 = HEAP32[$1544>>2]|0;
       $1546 = $1545 & $1543;
       HEAP32[$1544>>2] = $1546;
       break L296;
       break;
      }
      case 1:  {
       $1547 = $22;
       $1548 = ((($1547)) + 1|0);
       $1549 = HEAP8[$1548>>0]|0;
       $1550 = $1549&255;
       $1551 = $1550 & 63;
       $1552 = $23;
       $1553 = HEAP32[$1552>>2]|0;
       $1554 = $1553 << $1551;
       HEAP32[$1552>>2] = $1554;
       break L296;
       break;
      }
      case 2:  {
       $1555 = $22;
       $1556 = ((($1555)) + 1|0);
       $1557 = HEAP8[$1556>>0]|0;
       $1558 = $1557&255;
       $1559 = $1558 & 63;
       $1560 = $23;
       $1561 = HEAP32[$1560>>2]|0;
       $1562 = $1561 >>> $1559;
       HEAP32[$1560>>2] = $1562;
       break L296;
       break;
      }
      case 3:  {
       $1563 = $22;
       $1564 = ((($1563)) + 1|0);
       $1565 = HEAP8[$1564>>0]|0;
       $1566 = $1565&255;
       $1567 = $1566 & 63;
       $1568 = $23;
       $1569 = HEAP32[$1568>>2]|0;
       $1570 = $1569 >> $1567;
       HEAP32[$1568>>2] = $1570;
       break L296;
       break;
      }
      default: {
       label = 160;
       break L285;
      }
      }
      break;
     }
     case 64:  {
      $1571 = $6;
      $1572 = ((($1571)) + 12|0);
      $1573 = HEAP32[$1572>>2]|0;
      HEAP32[$1572>>2] = $1573;
      $1574 = $6;
      $1575 = HEAP32[$1574>>2]|0;
      $1576 = ((($1575)) + 1|0);
      HEAP32[$1574>>2] = $1576;
      $1577 = $23;
      $1578 = $1577;
      $1579 = $1578;
      $1580 = HEAP32[$1579>>2]|0;
      $1581 = (($1578) + 4)|0;
      $1582 = $1581;
      $1583 = HEAP32[$1582>>2]|0;
      $1584 = $1580 ^ -1;
      $1585 = $1583 ^ -1;
      $1586 = $23;
      $1587 = $1586;
      $1588 = $1587;
      HEAP32[$1588>>2] = $1584;
      $1589 = (($1587) + 4)|0;
      $1590 = $1589;
      HEAP32[$1590>>2] = $1585;
      break;
     }
     case 65:  {
      $1591 = $6;
      $1592 = ((($1591)) + 12|0);
      $1593 = HEAP32[$1592>>2]|0;
      $1594 = ((($1593)) + 8|0);
      HEAP32[$1592>>2] = $1594;
      $1595 = $6;
      $1596 = HEAP32[$1595>>2]|0;
      $1597 = ((($1596)) + 1|0);
      HEAP32[$1595>>2] = $1597;
      $1598 = $23;
      $1599 = $1598;
      $1600 = $1599;
      $1601 = HEAP32[$1600>>2]|0;
      $1602 = (($1599) + 4)|0;
      $1603 = $1602;
      $1604 = HEAP32[$1603>>2]|0;
      $1605 = $23;
      $1606 = ((($1605)) + 8|0);
      $1607 = $1606;
      $1608 = $1607;
      $1609 = HEAP32[$1608>>2]|0;
      $1610 = (($1607) + 4)|0;
      $1611 = $1610;
      $1612 = HEAP32[$1611>>2]|0;
      $1613 = $1609 & $1601;
      $1614 = $1612 & $1604;
      $1615 = $1606;
      $1616 = $1615;
      HEAP32[$1616>>2] = $1613;
      $1617 = (($1615) + 4)|0;
      $1618 = $1617;
      HEAP32[$1618>>2] = $1614;
      break;
     }
     case 66:  {
      $1619 = $6;
      $1620 = ((($1619)) + 12|0);
      $1621 = HEAP32[$1620>>2]|0;
      $1622 = ((($1621)) + 8|0);
      HEAP32[$1620>>2] = $1622;
      $1623 = $6;
      $1624 = HEAP32[$1623>>2]|0;
      $1625 = ((($1624)) + 1|0);
      HEAP32[$1623>>2] = $1625;
      $1626 = $23;
      $1627 = $1626;
      $1628 = $1627;
      $1629 = HEAP32[$1628>>2]|0;
      $1630 = (($1627) + 4)|0;
      $1631 = $1630;
      $1632 = HEAP32[$1631>>2]|0;
      $1633 = $23;
      $1634 = ((($1633)) + 8|0);
      $1635 = $1634;
      $1636 = $1635;
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = (($1635) + 4)|0;
      $1639 = $1638;
      $1640 = HEAP32[$1639>>2]|0;
      $1641 = $1637 | $1629;
      $1642 = $1640 | $1632;
      $1643 = $1634;
      $1644 = $1643;
      HEAP32[$1644>>2] = $1641;
      $1645 = (($1643) + 4)|0;
      $1646 = $1645;
      HEAP32[$1646>>2] = $1642;
      break;
     }
     case 67:  {
      $1647 = $6;
      $1648 = ((($1647)) + 12|0);
      $1649 = HEAP32[$1648>>2]|0;
      $1650 = ((($1649)) + 8|0);
      HEAP32[$1648>>2] = $1650;
      $1651 = $6;
      $1652 = HEAP32[$1651>>2]|0;
      $1653 = ((($1652)) + 1|0);
      HEAP32[$1651>>2] = $1653;
      $1654 = $23;
      $1655 = $1654;
      $1656 = $1655;
      $1657 = HEAP32[$1656>>2]|0;
      $1658 = (($1655) + 4)|0;
      $1659 = $1658;
      $1660 = HEAP32[$1659>>2]|0;
      $1661 = $23;
      $1662 = ((($1661)) + 8|0);
      $1663 = $1662;
      $1664 = $1663;
      $1665 = HEAP32[$1664>>2]|0;
      $1666 = (($1663) + 4)|0;
      $1667 = $1666;
      $1668 = HEAP32[$1667>>2]|0;
      $1669 = (___muldi3(($1665|0),($1668|0),($1657|0),($1660|0))|0);
      $1670 = (getTempRet0() | 0);
      $1671 = $1662;
      $1672 = $1671;
      HEAP32[$1672>>2] = $1669;
      $1673 = (($1671) + 4)|0;
      $1674 = $1673;
      HEAP32[$1674>>2] = $1670;
      break;
     }
     case 68:  {
      $1675 = $6;
      $1676 = ((($1675)) + 12|0);
      $1677 = HEAP32[$1676>>2]|0;
      $1678 = ((($1677)) + 8|0);
      HEAP32[$1676>>2] = $1678;
      $1679 = $6;
      $1680 = HEAP32[$1679>>2]|0;
      $1681 = ((($1680)) + 1|0);
      HEAP32[$1679>>2] = $1681;
      $1682 = $23;
      $1683 = HEAP32[$1682>>2]|0;
      $1684 = ($1683|0)==(0);
      if ($1684) {
       label = 32;
       break L285;
      }
      $1685 = $23;
      $1686 = $1685;
      $1687 = $1686;
      $1688 = HEAP32[$1687>>2]|0;
      $1689 = (($1686) + 4)|0;
      $1690 = $1689;
      $1691 = HEAP32[$1690>>2]|0;
      $1692 = $23;
      $1693 = ((($1692)) + 8|0);
      $1694 = $1693;
      $1695 = $1694;
      $1696 = HEAP32[$1695>>2]|0;
      $1697 = (($1694) + 4)|0;
      $1698 = $1697;
      $1699 = HEAP32[$1698>>2]|0;
      $1700 = (___udivdi3(($1696|0),($1699|0),($1688|0),($1691|0))|0);
      $1701 = (getTempRet0() | 0);
      $1702 = $1693;
      $1703 = $1702;
      HEAP32[$1703>>2] = $1700;
      $1704 = (($1702) + 4)|0;
      $1705 = $1704;
      HEAP32[$1705>>2] = $1701;
      break;
     }
     case 69:  {
      $1706 = $6;
      $1707 = ((($1706)) + 12|0);
      $1708 = HEAP32[$1707>>2]|0;
      $1709 = ((($1708)) + 8|0);
      HEAP32[$1707>>2] = $1709;
      $1710 = $6;
      $1711 = HEAP32[$1710>>2]|0;
      $1712 = ((($1711)) + 1|0);
      HEAP32[$1710>>2] = $1712;
      $1713 = $23;
      $1714 = HEAP32[$1713>>2]|0;
      $1715 = ($1714|0)==(0);
      if ($1715) {
       label = 32;
       break L285;
      }
      $1716 = $23;
      $1717 = $1716;
      $1718 = $1717;
      $1719 = HEAP32[$1718>>2]|0;
      $1720 = (($1717) + 4)|0;
      $1721 = $1720;
      $1722 = HEAP32[$1721>>2]|0;
      $1723 = $23;
      $1724 = ((($1723)) + 8|0);
      $1725 = $1724;
      $1726 = $1725;
      $1727 = HEAP32[$1726>>2]|0;
      $1728 = (($1725) + 4)|0;
      $1729 = $1728;
      $1730 = HEAP32[$1729>>2]|0;
      $1731 = (___uremdi3(($1727|0),($1730|0),($1719|0),($1722|0))|0);
      $1732 = (getTempRet0() | 0);
      $1733 = $1724;
      $1734 = $1733;
      HEAP32[$1734>>2] = $1731;
      $1735 = (($1733) + 4)|0;
      $1736 = $1735;
      HEAP32[$1736>>2] = $1732;
      break;
     }
     case 70:  {
      $1737 = $6;
      $1738 = ((($1737)) + 12|0);
      $1739 = HEAP32[$1738>>2]|0;
      $1740 = ((($1739)) + 8|0);
      HEAP32[$1738>>2] = $1740;
      $1741 = $6;
      $1742 = HEAP32[$1741>>2]|0;
      $1743 = ((($1742)) + 1|0);
      HEAP32[$1741>>2] = $1743;
      $1744 = $23;
      $1745 = $1744;
      $1746 = $1745;
      $1747 = HEAP32[$1746>>2]|0;
      $1748 = (($1745) + 4)|0;
      $1749 = $1748;
      $1750 = HEAP32[$1749>>2]|0;
      $1751 = $23;
      $1752 = ((($1751)) + 8|0);
      $1753 = $1752;
      $1754 = $1753;
      $1755 = HEAP32[$1754>>2]|0;
      $1756 = (($1753) + 4)|0;
      $1757 = $1756;
      $1758 = HEAP32[$1757>>2]|0;
      $1759 = $1755 ^ $1747;
      $1760 = $1758 ^ $1750;
      $1761 = $1752;
      $1762 = $1761;
      HEAP32[$1762>>2] = $1759;
      $1763 = (($1761) + 4)|0;
      $1764 = $1763;
      HEAP32[$1764>>2] = $1760;
      break;
     }
     case 72:  {
      $1765 = $6;
      $1766 = ((($1765)) + 12|0);
      $1767 = HEAP32[$1766>>2]|0;
      $1768 = ((($1767)) + 12|0);
      HEAP32[$1766>>2] = $1768;
      $1769 = $6;
      $1770 = HEAP32[$1769>>2]|0;
      $1771 = ((($1770)) + 1|0);
      HEAP32[$1769>>2] = $1771;
      $1772 = $23;
      $1773 = ((($1772)) + 8|0);
      $1774 = $1773;
      $1775 = $1774;
      $1776 = HEAP32[$1775>>2]|0;
      $1777 = (($1774) + 4)|0;
      $1778 = $1777;
      $1779 = HEAP32[$1778>>2]|0;
      $1780 = $23;
      $1781 = $1780;
      $1782 = $1781;
      $1783 = HEAP32[$1782>>2]|0;
      $1784 = (($1781) + 4)|0;
      $1785 = $1784;
      $1786 = HEAP32[$1785>>2]|0;
      $1787 = ($1779>>>0)<($1786>>>0);
      $1788 = ($1776>>>0)<($1783>>>0);
      $1789 = ($1779|0)==($1786|0);
      $1790 = $1789 & $1788;
      $1791 = $1787 | $1790;
      $1792 = $1791&1;
      $1793 = $23;
      $1794 = ((($1793)) + 12|0);
      HEAP32[$1794>>2] = $1792;
      break;
     }
     case 73:  {
      $1795 = $6;
      $1796 = ((($1795)) + 12|0);
      $1797 = HEAP32[$1796>>2]|0;
      $1798 = ((($1797)) + 12|0);
      HEAP32[$1796>>2] = $1798;
      $1799 = $6;
      $1800 = HEAP32[$1799>>2]|0;
      $1801 = ((($1800)) + 1|0);
      HEAP32[$1799>>2] = $1801;
      $1802 = $23;
      $1803 = ((($1802)) + 8|0);
      $1804 = $1803;
      $1805 = $1804;
      $1806 = HEAP32[$1805>>2]|0;
      $1807 = (($1804) + 4)|0;
      $1808 = $1807;
      $1809 = HEAP32[$1808>>2]|0;
      $1810 = $23;
      $1811 = $1810;
      $1812 = $1811;
      $1813 = HEAP32[$1812>>2]|0;
      $1814 = (($1811) + 4)|0;
      $1815 = $1814;
      $1816 = HEAP32[$1815>>2]|0;
      $1817 = ($1809>>>0)>($1816>>>0);
      $1818 = ($1806>>>0)>($1813>>>0);
      $1819 = ($1809|0)==($1816|0);
      $1820 = $1819 & $1818;
      $1821 = $1817 | $1820;
      $1822 = $1821&1;
      $1823 = $23;
      $1824 = ((($1823)) + 12|0);
      HEAP32[$1824>>2] = $1822;
      break;
     }
     case 74:  {
      $1825 = $6;
      $1826 = ((($1825)) + 12|0);
      $1827 = HEAP32[$1826>>2]|0;
      $1828 = ((($1827)) + 4|0);
      HEAP32[$1826>>2] = $1828;
      $1829 = $6;
      $1830 = HEAP32[$1829>>2]|0;
      $1831 = ((($1830)) + 1|0);
      HEAP32[$1829>>2] = $1831;
      $1832 = $23;
      $1833 = HEAP32[$1832>>2]|0;
      $1834 = $23;
      $1835 = ((($1834)) + 4|0);
      $1836 = $1835;
      $1837 = $1836;
      $1838 = HEAP32[$1837>>2]|0;
      $1839 = (($1836) + 4)|0;
      $1840 = $1839;
      $1841 = HEAP32[$1840>>2]|0;
      $1842 = (_bitshift64Shl(($1838|0),($1841|0),($1833|0))|0);
      $1843 = (getTempRet0() | 0);
      $1844 = $1835;
      $1845 = $1844;
      HEAP32[$1845>>2] = $1842;
      $1846 = (($1844) + 4)|0;
      $1847 = $1846;
      HEAP32[$1847>>2] = $1843;
      break;
     }
     case 75:  {
      $1848 = $6;
      $1849 = ((($1848)) + 12|0);
      $1850 = HEAP32[$1849>>2]|0;
      $1851 = ((($1850)) + 4|0);
      HEAP32[$1849>>2] = $1851;
      $1852 = $6;
      $1853 = HEAP32[$1852>>2]|0;
      $1854 = ((($1853)) + 1|0);
      HEAP32[$1852>>2] = $1854;
      $1855 = $23;
      $1856 = HEAP32[$1855>>2]|0;
      $1857 = $23;
      $1858 = ((($1857)) + 4|0);
      $1859 = $1858;
      $1860 = $1859;
      $1861 = HEAP32[$1860>>2]|0;
      $1862 = (($1859) + 4)|0;
      $1863 = $1862;
      $1864 = HEAP32[$1863>>2]|0;
      $1865 = (_bitshift64Lshr(($1861|0),($1864|0),($1856|0))|0);
      $1866 = (getTempRet0() | 0);
      $1867 = $1858;
      $1868 = $1867;
      HEAP32[$1868>>2] = $1865;
      $1869 = (($1867) + 4)|0;
      $1870 = $1869;
      HEAP32[$1870>>2] = $1866;
      break;
     }
     case 76:  {
      $1871 = $6;
      $1872 = ((($1871)) + 12|0);
      $1873 = HEAP32[$1872>>2]|0;
      $1874 = ((($1873)) + 4|0);
      HEAP32[$1872>>2] = $1874;
      $1875 = $6;
      $1876 = HEAP32[$1875>>2]|0;
      $1877 = ((($1876)) + 1|0);
      HEAP32[$1875>>2] = $1877;
      $1878 = $23;
      $1879 = HEAP32[$1878>>2]|0;
      $1880 = $23;
      $1881 = ((($1880)) + 4|0);
      $1882 = $1881;
      $1883 = $1882;
      $1884 = HEAP32[$1883>>2]|0;
      $1885 = (($1882) + 4)|0;
      $1886 = $1885;
      $1887 = HEAP32[$1886>>2]|0;
      $1888 = (_bitshift64Ashr(($1884|0),($1887|0),($1879|0))|0);
      $1889 = (getTempRet0() | 0);
      $1890 = $1881;
      $1891 = $1890;
      HEAP32[$1891>>2] = $1888;
      $1892 = (($1890) + 4)|0;
      $1893 = $1892;
      HEAP32[$1893>>2] = $1889;
      break;
     }
     case 80:  {
      $1894 = $6;
      $1895 = ((($1894)) + 12|0);
      $1896 = HEAP32[$1895>>2]|0;
      HEAP32[$1895>>2] = $1896;
      $1897 = $6;
      $1898 = HEAP32[$1897>>2]|0;
      $1899 = ((($1898)) + 1|0);
      HEAP32[$1897>>2] = $1899;
      $1900 = $23;
      $1901 = HEAP32[$1900>>2]|0;
      $1902 = (0 - ($1901))|0;
      $1903 = $23;
      HEAP32[$1903>>2] = $1902;
      break;
     }
     case 81:  {
      $1904 = $6;
      $1905 = ((($1904)) + 12|0);
      $1906 = HEAP32[$1905>>2]|0;
      $1907 = ((($1906)) + 4|0);
      HEAP32[$1905>>2] = $1907;
      $1908 = $6;
      $1909 = HEAP32[$1908>>2]|0;
      $1910 = ((($1909)) + 1|0);
      HEAP32[$1908>>2] = $1910;
      $1911 = $23;
      $1912 = HEAP32[$1911>>2]|0;
      $1913 = $23;
      $1914 = ((($1913)) + 4|0);
      $1915 = HEAP32[$1914>>2]|0;
      $1916 = (($1915) + ($1912))|0;
      HEAP32[$1914>>2] = $1916;
      break;
     }
     case 82:  {
      $1917 = $6;
      $1918 = ((($1917)) + 12|0);
      $1919 = HEAP32[$1918>>2]|0;
      $1920 = ((($1919)) + 4|0);
      HEAP32[$1918>>2] = $1920;
      $1921 = $6;
      $1922 = HEAP32[$1921>>2]|0;
      $1923 = ((($1922)) + 1|0);
      HEAP32[$1921>>2] = $1923;
      $1924 = $23;
      $1925 = HEAP32[$1924>>2]|0;
      $1926 = $23;
      $1927 = ((($1926)) + 4|0);
      $1928 = HEAP32[$1927>>2]|0;
      $1929 = (($1928) - ($1925))|0;
      HEAP32[$1927>>2] = $1929;
      break;
     }
     case 83:  {
      $1930 = $6;
      $1931 = ((($1930)) + 12|0);
      $1932 = HEAP32[$1931>>2]|0;
      $1933 = ((($1932)) + 4|0);
      HEAP32[$1931>>2] = $1933;
      $1934 = $6;
      $1935 = HEAP32[$1934>>2]|0;
      $1936 = ((($1935)) + 1|0);
      HEAP32[$1934>>2] = $1936;
      $1937 = $23;
      $1938 = HEAP32[$1937>>2]|0;
      $1939 = $23;
      $1940 = ((($1939)) + 4|0);
      $1941 = HEAP32[$1940>>2]|0;
      $1942 = Math_imul($1941, $1938)|0;
      HEAP32[$1940>>2] = $1942;
      break;
     }
     case 84:  {
      $1943 = $6;
      $1944 = ((($1943)) + 12|0);
      $1945 = HEAP32[$1944>>2]|0;
      $1946 = ((($1945)) + 4|0);
      HEAP32[$1944>>2] = $1946;
      $1947 = $6;
      $1948 = HEAP32[$1947>>2]|0;
      $1949 = ((($1948)) + 1|0);
      HEAP32[$1947>>2] = $1949;
      $1950 = $23;
      $1951 = HEAP32[$1950>>2]|0;
      $1952 = ($1951|0)==(0);
      if ($1952) {
       label = 32;
       break L285;
      }
      $1953 = $23;
      $1954 = HEAP32[$1953>>2]|0;
      $1955 = $23;
      $1956 = ((($1955)) + 4|0);
      $1957 = HEAP32[$1956>>2]|0;
      $1958 = (($1957|0) / ($1954|0))&-1;
      HEAP32[$1956>>2] = $1958;
      break;
     }
     case 85:  {
      $1959 = $6;
      $1960 = ((($1959)) + 12|0);
      $1961 = HEAP32[$1960>>2]|0;
      $1962 = ((($1961)) + 4|0);
      HEAP32[$1960>>2] = $1962;
      $1963 = $6;
      $1964 = HEAP32[$1963>>2]|0;
      $1965 = ((($1964)) + 1|0);
      HEAP32[$1963>>2] = $1965;
      $1966 = $23;
      $1967 = HEAP32[$1966>>2]|0;
      $1968 = ($1967|0)==(0);
      if ($1968) {
       label = 32;
       break L285;
      }
      $1969 = $23;
      $1970 = HEAP32[$1969>>2]|0;
      $1971 = $23;
      $1972 = ((($1971)) + 4|0);
      $1973 = HEAP32[$1972>>2]|0;
      $1974 = (($1973|0) % ($1970|0))&-1;
      HEAP32[$1972>>2] = $1974;
      break;
     }
     case 87:  {
      $1975 = $6;
      $1976 = ((($1975)) + 12|0);
      $1977 = HEAP32[$1976>>2]|0;
      $1978 = ((($1977)) + 4|0);
      HEAP32[$1976>>2] = $1978;
      $1979 = $6;
      $1980 = HEAP32[$1979>>2]|0;
      $1981 = ((($1980)) + 1|0);
      HEAP32[$1979>>2] = $1981;
      $1982 = $23;
      $1983 = ((($1982)) + 4|0);
      $1984 = HEAP32[$1983>>2]|0;
      $1985 = $23;
      $1986 = HEAP32[$1985>>2]|0;
      $1987 = ($1984|0)==($1986|0);
      $1988 = $1987&1;
      $1989 = $23;
      $1990 = ((($1989)) + 4|0);
      HEAP32[$1990>>2] = $1988;
      break;
     }
     case 88:  {
      $1991 = $6;
      $1992 = ((($1991)) + 12|0);
      $1993 = HEAP32[$1992>>2]|0;
      $1994 = ((($1993)) + 4|0);
      HEAP32[$1992>>2] = $1994;
      $1995 = $6;
      $1996 = HEAP32[$1995>>2]|0;
      $1997 = ((($1996)) + 1|0);
      HEAP32[$1995>>2] = $1997;
      $1998 = $23;
      $1999 = ((($1998)) + 4|0);
      $2000 = HEAP32[$1999>>2]|0;
      $2001 = $23;
      $2002 = HEAP32[$2001>>2]|0;
      $2003 = ($2000|0)<($2002|0);
      $2004 = $2003&1;
      $2005 = $23;
      $2006 = ((($2005)) + 4|0);
      HEAP32[$2006>>2] = $2004;
      break;
     }
     case 89:  {
      $2007 = $6;
      $2008 = ((($2007)) + 12|0);
      $2009 = HEAP32[$2008>>2]|0;
      $2010 = ((($2009)) + 4|0);
      HEAP32[$2008>>2] = $2010;
      $2011 = $6;
      $2012 = HEAP32[$2011>>2]|0;
      $2013 = ((($2012)) + 1|0);
      HEAP32[$2011>>2] = $2013;
      $2014 = $23;
      $2015 = ((($2014)) + 4|0);
      $2016 = HEAP32[$2015>>2]|0;
      $2017 = $23;
      $2018 = HEAP32[$2017>>2]|0;
      $2019 = ($2016|0)>($2018|0);
      $2020 = $2019&1;
      $2021 = $23;
      $2022 = ((($2021)) + 4|0);
      HEAP32[$2022>>2] = $2020;
      break;
     }
     case 90:  {
      $2023 = $6;
      $2024 = ((($2023)) + 12|0);
      $2025 = HEAP32[$2024>>2]|0;
      HEAP32[$2024>>2] = $2025;
      $2026 = $6;
      $2027 = HEAP32[$2026>>2]|0;
      $2028 = ((($2027)) + 1|0);
      HEAP32[$2026>>2] = $2028;
      $2029 = $23;
      $2030 = HEAP32[$2029>>2]|0;
      $2031 = (0)!=($2030|0);
      $2032 = $2031&1;
      $2033 = $23;
      HEAP32[$2033>>2] = $2032;
      break;
     }
     case 91:  {
      $2034 = $6;
      $2035 = ((($2034)) + 12|0);
      $2036 = HEAP32[$2035>>2]|0;
      HEAP32[$2035>>2] = $2036;
      $2037 = $6;
      $2038 = HEAP32[$2037>>2]|0;
      $2039 = ((($2038)) + 1|0);
      HEAP32[$2037>>2] = $2039;
      $2040 = $23;
      $2041 = HEAP32[$2040>>2]|0;
      $2042 = (+($2041|0));
      $2043 = $23;
      HEAPF32[$2043>>2] = $2042;
      break;
     }
     case 92:  {
      $2044 = $6;
      $2045 = ((($2044)) + 12|0);
      $2046 = HEAP32[$2045>>2]|0;
      $2047 = ((($2046)) + -4|0);
      HEAP32[$2045>>2] = $2047;
      $2048 = $6;
      $2049 = HEAP32[$2048>>2]|0;
      $2050 = ((($2049)) + 1|0);
      HEAP32[$2048>>2] = $2050;
      $2051 = $23;
      $2052 = HEAP32[$2051>>2]|0;
      $2053 = ($2052|0)<(0);
      $2054 = $2053 << 31 >> 31;
      $2055 = $23;
      $2056 = ((($2055)) + -4|0);
      $2057 = $2056;
      $2058 = $2057;
      HEAP32[$2058>>2] = $2052;
      $2059 = (($2057) + 4)|0;
      $2060 = $2059;
      HEAP32[$2060>>2] = $2054;
      break;
     }
     case 93:  {
      $2061 = $6;
      $2062 = ((($2061)) + 12|0);
      $2063 = HEAP32[$2062>>2]|0;
      $2064 = ((($2063)) + -4|0);
      HEAP32[$2062>>2] = $2064;
      $2065 = $6;
      $2066 = HEAP32[$2065>>2]|0;
      $2067 = ((($2066)) + 1|0);
      HEAP32[$2065>>2] = $2067;
      $2068 = $23;
      $2069 = HEAP32[$2068>>2]|0;
      $2070 = (+($2069|0));
      $2071 = $23;
      $2072 = ((($2071)) + -4|0);
      HEAPF64[$2072>>3] = $2070;
      break;
     }
     case 96:  {
      $2073 = $6;
      $2074 = ((($2073)) + 12|0);
      $2075 = HEAP32[$2074>>2]|0;
      HEAP32[$2074>>2] = $2075;
      $2076 = $6;
      $2077 = HEAP32[$2076>>2]|0;
      $2078 = ((($2077)) + 1|0);
      HEAP32[$2076>>2] = $2078;
      $2079 = $23;
      $2080 = $2079;
      $2081 = $2080;
      $2082 = HEAP32[$2081>>2]|0;
      $2083 = (($2080) + 4)|0;
      $2084 = $2083;
      $2085 = HEAP32[$2084>>2]|0;
      $2086 = (_i64Subtract(0,0,($2082|0),($2085|0))|0);
      $2087 = (getTempRet0() | 0);
      $2088 = $23;
      $2089 = $2088;
      $2090 = $2089;
      HEAP32[$2090>>2] = $2086;
      $2091 = (($2089) + 4)|0;
      $2092 = $2091;
      HEAP32[$2092>>2] = $2087;
      break;
     }
     case 97:  {
      $2093 = $6;
      $2094 = ((($2093)) + 12|0);
      $2095 = HEAP32[$2094>>2]|0;
      $2096 = ((($2095)) + 8|0);
      HEAP32[$2094>>2] = $2096;
      $2097 = $6;
      $2098 = HEAP32[$2097>>2]|0;
      $2099 = ((($2098)) + 1|0);
      HEAP32[$2097>>2] = $2099;
      $2100 = $23;
      $2101 = $2100;
      $2102 = $2101;
      $2103 = HEAP32[$2102>>2]|0;
      $2104 = (($2101) + 4)|0;
      $2105 = $2104;
      $2106 = HEAP32[$2105>>2]|0;
      $2107 = $23;
      $2108 = ((($2107)) + 8|0);
      $2109 = $2108;
      $2110 = $2109;
      $2111 = HEAP32[$2110>>2]|0;
      $2112 = (($2109) + 4)|0;
      $2113 = $2112;
      $2114 = HEAP32[$2113>>2]|0;
      $2115 = (_i64Add(($2111|0),($2114|0),($2103|0),($2106|0))|0);
      $2116 = (getTempRet0() | 0);
      $2117 = $2108;
      $2118 = $2117;
      HEAP32[$2118>>2] = $2115;
      $2119 = (($2117) + 4)|0;
      $2120 = $2119;
      HEAP32[$2120>>2] = $2116;
      break;
     }
     case 98:  {
      $2121 = $6;
      $2122 = ((($2121)) + 12|0);
      $2123 = HEAP32[$2122>>2]|0;
      $2124 = ((($2123)) + 8|0);
      HEAP32[$2122>>2] = $2124;
      $2125 = $6;
      $2126 = HEAP32[$2125>>2]|0;
      $2127 = ((($2126)) + 1|0);
      HEAP32[$2125>>2] = $2127;
      $2128 = $23;
      $2129 = $2128;
      $2130 = $2129;
      $2131 = HEAP32[$2130>>2]|0;
      $2132 = (($2129) + 4)|0;
      $2133 = $2132;
      $2134 = HEAP32[$2133>>2]|0;
      $2135 = $23;
      $2136 = ((($2135)) + 8|0);
      $2137 = $2136;
      $2138 = $2137;
      $2139 = HEAP32[$2138>>2]|0;
      $2140 = (($2137) + 4)|0;
      $2141 = $2140;
      $2142 = HEAP32[$2141>>2]|0;
      $2143 = (_i64Subtract(($2139|0),($2142|0),($2131|0),($2134|0))|0);
      $2144 = (getTempRet0() | 0);
      $2145 = $2136;
      $2146 = $2145;
      HEAP32[$2146>>2] = $2143;
      $2147 = (($2145) + 4)|0;
      $2148 = $2147;
      HEAP32[$2148>>2] = $2144;
      break;
     }
     case 99:  {
      $2149 = $6;
      $2150 = ((($2149)) + 12|0);
      $2151 = HEAP32[$2150>>2]|0;
      $2152 = ((($2151)) + 8|0);
      HEAP32[$2150>>2] = $2152;
      $2153 = $6;
      $2154 = HEAP32[$2153>>2]|0;
      $2155 = ((($2154)) + 1|0);
      HEAP32[$2153>>2] = $2155;
      $2156 = $23;
      $2157 = $2156;
      $2158 = $2157;
      $2159 = HEAP32[$2158>>2]|0;
      $2160 = (($2157) + 4)|0;
      $2161 = $2160;
      $2162 = HEAP32[$2161>>2]|0;
      $2163 = $23;
      $2164 = ((($2163)) + 8|0);
      $2165 = $2164;
      $2166 = $2165;
      $2167 = HEAP32[$2166>>2]|0;
      $2168 = (($2165) + 4)|0;
      $2169 = $2168;
      $2170 = HEAP32[$2169>>2]|0;
      $2171 = (___muldi3(($2167|0),($2170|0),($2159|0),($2162|0))|0);
      $2172 = (getTempRet0() | 0);
      $2173 = $2164;
      $2174 = $2173;
      HEAP32[$2174>>2] = $2171;
      $2175 = (($2173) + 4)|0;
      $2176 = $2175;
      HEAP32[$2176>>2] = $2172;
      break;
     }
     case 100:  {
      $2177 = $6;
      $2178 = ((($2177)) + 12|0);
      $2179 = HEAP32[$2178>>2]|0;
      $2180 = ((($2179)) + 8|0);
      HEAP32[$2178>>2] = $2180;
      $2181 = $6;
      $2182 = HEAP32[$2181>>2]|0;
      $2183 = ((($2182)) + 1|0);
      HEAP32[$2181>>2] = $2183;
      $2184 = $23;
      $2185 = $2184;
      $2186 = $2185;
      $2187 = HEAP32[$2186>>2]|0;
      $2188 = (($2185) + 4)|0;
      $2189 = $2188;
      $2190 = HEAP32[$2189>>2]|0;
      $2191 = ($2187|0)==(0);
      $2192 = ($2190|0)==(0);
      $2193 = $2191 & $2192;
      if ($2193) {
       label = 32;
       break L285;
      }
      $2194 = $23;
      $2195 = $2194;
      $2196 = $2195;
      $2197 = HEAP32[$2196>>2]|0;
      $2198 = (($2195) + 4)|0;
      $2199 = $2198;
      $2200 = HEAP32[$2199>>2]|0;
      $2201 = $23;
      $2202 = ((($2201)) + 8|0);
      $2203 = $2202;
      $2204 = $2203;
      $2205 = HEAP32[$2204>>2]|0;
      $2206 = (($2203) + 4)|0;
      $2207 = $2206;
      $2208 = HEAP32[$2207>>2]|0;
      $2209 = (___divdi3(($2205|0),($2208|0),($2197|0),($2200|0))|0);
      $2210 = (getTempRet0() | 0);
      $2211 = $2202;
      $2212 = $2211;
      HEAP32[$2212>>2] = $2209;
      $2213 = (($2211) + 4)|0;
      $2214 = $2213;
      HEAP32[$2214>>2] = $2210;
      break;
     }
     case 101:  {
      $2215 = $6;
      $2216 = ((($2215)) + 12|0);
      $2217 = HEAP32[$2216>>2]|0;
      $2218 = ((($2217)) + 8|0);
      HEAP32[$2216>>2] = $2218;
      $2219 = $6;
      $2220 = HEAP32[$2219>>2]|0;
      $2221 = ((($2220)) + 1|0);
      HEAP32[$2219>>2] = $2221;
      $2222 = $23;
      $2223 = $2222;
      $2224 = $2223;
      $2225 = HEAP32[$2224>>2]|0;
      $2226 = (($2223) + 4)|0;
      $2227 = $2226;
      $2228 = HEAP32[$2227>>2]|0;
      $2229 = ($2225|0)==(0);
      $2230 = ($2228|0)==(0);
      $2231 = $2229 & $2230;
      if ($2231) {
       label = 32;
       break L285;
      }
      $2232 = $23;
      $2233 = $2232;
      $2234 = $2233;
      $2235 = HEAP32[$2234>>2]|0;
      $2236 = (($2233) + 4)|0;
      $2237 = $2236;
      $2238 = HEAP32[$2237>>2]|0;
      $2239 = $23;
      $2240 = ((($2239)) + 8|0);
      $2241 = $2240;
      $2242 = $2241;
      $2243 = HEAP32[$2242>>2]|0;
      $2244 = (($2241) + 4)|0;
      $2245 = $2244;
      $2246 = HEAP32[$2245>>2]|0;
      $2247 = (___remdi3(($2243|0),($2246|0),($2235|0),($2238|0))|0);
      $2248 = (getTempRet0() | 0);
      $2249 = $2240;
      $2250 = $2249;
      HEAP32[$2250>>2] = $2247;
      $2251 = (($2249) + 4)|0;
      $2252 = $2251;
      HEAP32[$2252>>2] = $2248;
      break;
     }
     case 103:  {
      $2253 = $6;
      $2254 = ((($2253)) + 12|0);
      $2255 = HEAP32[$2254>>2]|0;
      $2256 = ((($2255)) + 12|0);
      HEAP32[$2254>>2] = $2256;
      $2257 = $6;
      $2258 = HEAP32[$2257>>2]|0;
      $2259 = ((($2258)) + 1|0);
      HEAP32[$2257>>2] = $2259;
      $2260 = $23;
      $2261 = ((($2260)) + 8|0);
      $2262 = $2261;
      $2263 = $2262;
      $2264 = HEAP32[$2263>>2]|0;
      $2265 = (($2262) + 4)|0;
      $2266 = $2265;
      $2267 = HEAP32[$2266>>2]|0;
      $2268 = $23;
      $2269 = $2268;
      $2270 = $2269;
      $2271 = HEAP32[$2270>>2]|0;
      $2272 = (($2269) + 4)|0;
      $2273 = $2272;
      $2274 = HEAP32[$2273>>2]|0;
      $2275 = ($2264|0)==($2271|0);
      $2276 = ($2267|0)==($2274|0);
      $2277 = $2275 & $2276;
      $2278 = $2277&1;
      $2279 = $23;
      $2280 = ((($2279)) + 12|0);
      HEAP32[$2280>>2] = $2278;
      break;
     }
     case 104:  {
      $2281 = $6;
      $2282 = ((($2281)) + 12|0);
      $2283 = HEAP32[$2282>>2]|0;
      $2284 = ((($2283)) + 12|0);
      HEAP32[$2282>>2] = $2284;
      $2285 = $6;
      $2286 = HEAP32[$2285>>2]|0;
      $2287 = ((($2286)) + 1|0);
      HEAP32[$2285>>2] = $2287;
      $2288 = $23;
      $2289 = ((($2288)) + 8|0);
      $2290 = $2289;
      $2291 = $2290;
      $2292 = HEAP32[$2291>>2]|0;
      $2293 = (($2290) + 4)|0;
      $2294 = $2293;
      $2295 = HEAP32[$2294>>2]|0;
      $2296 = $23;
      $2297 = $2296;
      $2298 = $2297;
      $2299 = HEAP32[$2298>>2]|0;
      $2300 = (($2297) + 4)|0;
      $2301 = $2300;
      $2302 = HEAP32[$2301>>2]|0;
      $2303 = ($2295|0)<($2302|0);
      $2304 = ($2292>>>0)<($2299>>>0);
      $2305 = ($2295|0)==($2302|0);
      $2306 = $2305 & $2304;
      $2307 = $2303 | $2306;
      $2308 = $2307&1;
      $2309 = $23;
      $2310 = ((($2309)) + 12|0);
      HEAP32[$2310>>2] = $2308;
      break;
     }
     case 105:  {
      $2311 = $6;
      $2312 = ((($2311)) + 12|0);
      $2313 = HEAP32[$2312>>2]|0;
      $2314 = ((($2313)) + 12|0);
      HEAP32[$2312>>2] = $2314;
      $2315 = $6;
      $2316 = HEAP32[$2315>>2]|0;
      $2317 = ((($2316)) + 1|0);
      HEAP32[$2315>>2] = $2317;
      $2318 = $23;
      $2319 = ((($2318)) + 8|0);
      $2320 = $2319;
      $2321 = $2320;
      $2322 = HEAP32[$2321>>2]|0;
      $2323 = (($2320) + 4)|0;
      $2324 = $2323;
      $2325 = HEAP32[$2324>>2]|0;
      $2326 = $23;
      $2327 = $2326;
      $2328 = $2327;
      $2329 = HEAP32[$2328>>2]|0;
      $2330 = (($2327) + 4)|0;
      $2331 = $2330;
      $2332 = HEAP32[$2331>>2]|0;
      $2333 = ($2325|0)>($2332|0);
      $2334 = ($2322>>>0)>($2329>>>0);
      $2335 = ($2325|0)==($2332|0);
      $2336 = $2335 & $2334;
      $2337 = $2333 | $2336;
      $2338 = $2337&1;
      $2339 = $23;
      $2340 = ((($2339)) + 12|0);
      HEAP32[$2340>>2] = $2338;
      break;
     }
     case 106:  {
      $2341 = $6;
      $2342 = ((($2341)) + 12|0);
      $2343 = HEAP32[$2342>>2]|0;
      $2344 = ((($2343)) + 4|0);
      HEAP32[$2342>>2] = $2344;
      $2345 = $6;
      $2346 = HEAP32[$2345>>2]|0;
      $2347 = ((($2346)) + 1|0);
      HEAP32[$2345>>2] = $2347;
      $2348 = $23;
      $2349 = $2348;
      $2350 = $2349;
      $2351 = HEAP32[$2350>>2]|0;
      $2352 = (($2349) + 4)|0;
      $2353 = $2352;
      $2354 = HEAP32[$2353>>2]|0;
      $2355 = $23;
      $2356 = ((($2355)) + 4|0);
      HEAP32[$2356>>2] = $2351;
      break;
     }
     case 107:  {
      $2357 = $6;
      $2358 = ((($2357)) + 12|0);
      $2359 = HEAP32[$2358>>2]|0;
      $2360 = ((($2359)) + 4|0);
      HEAP32[$2358>>2] = $2360;
      $2361 = $6;
      $2362 = HEAP32[$2361>>2]|0;
      $2363 = ((($2362)) + 1|0);
      HEAP32[$2361>>2] = $2363;
      $2364 = $23;
      $2365 = $2364;
      $2366 = $2365;
      $2367 = HEAP32[$2366>>2]|0;
      $2368 = (($2365) + 4)|0;
      $2369 = $2368;
      $2370 = HEAP32[$2369>>2]|0;
      $2371 = (+($2367>>>0)) + (4294967296.0*(+($2370|0)));
      $2372 = $23;
      $2373 = ((($2372)) + 4|0);
      HEAPF32[$2373>>2] = $2371;
      break;
     }
     case 108:  {
      $2374 = $6;
      $2375 = ((($2374)) + 12|0);
      $2376 = HEAP32[$2375>>2]|0;
      $2377 = ((($2376)) + 4|0);
      HEAP32[$2375>>2] = $2377;
      $2378 = $6;
      $2379 = HEAP32[$2378>>2]|0;
      $2380 = ((($2379)) + 1|0);
      HEAP32[$2378>>2] = $2380;
      $2381 = $23;
      $2382 = $2381;
      $2383 = $2382;
      $2384 = HEAP32[$2383>>2]|0;
      $2385 = (($2382) + 4)|0;
      $2386 = $2385;
      $2387 = HEAP32[$2386>>2]|0;
      $2388 = (0)!=($2384|0);
      $2389 = (0)!=($2387|0);
      $2390 = $2388 | $2389;
      $2391 = $2390&1;
      $2392 = $23;
      $2393 = ((($2392)) + 4|0);
      HEAP32[$2393>>2] = $2391;
      break;
     }
     case 109:  {
      $2394 = $6;
      $2395 = ((($2394)) + 12|0);
      $2396 = HEAP32[$2395>>2]|0;
      HEAP32[$2395>>2] = $2396;
      $2397 = $6;
      $2398 = HEAP32[$2397>>2]|0;
      $2399 = ((($2398)) + 1|0);
      HEAP32[$2397>>2] = $2399;
      $2400 = $23;
      $2401 = $2400;
      $2402 = $2401;
      $2403 = HEAP32[$2402>>2]|0;
      $2404 = (($2401) + 4)|0;
      $2405 = $2404;
      $2406 = HEAP32[$2405>>2]|0;
      $2407 = (+($2403>>>0)) + (4294967296.0*(+($2406|0)));
      $2408 = $23;
      HEAPF64[$2408>>3] = $2407;
      break;
     }
     case 112:  {
      $2409 = $6;
      $2410 = ((($2409)) + 12|0);
      $2411 = HEAP32[$2410>>2]|0;
      HEAP32[$2410>>2] = $2411;
      $2412 = $6;
      $2413 = HEAP32[$2412>>2]|0;
      $2414 = ((($2413)) + 1|0);
      HEAP32[$2412>>2] = $2414;
      $2415 = $23;
      $2416 = +HEAPF32[$2415>>2];
      $2417 = - $2416;
      $2418 = $23;
      HEAPF32[$2418>>2] = $2417;
      break;
     }
     case 113:  {
      $2419 = $6;
      $2420 = ((($2419)) + 12|0);
      $2421 = HEAP32[$2420>>2]|0;
      $2422 = ((($2421)) + 4|0);
      HEAP32[$2420>>2] = $2422;
      $2423 = $6;
      $2424 = HEAP32[$2423>>2]|0;
      $2425 = ((($2424)) + 1|0);
      HEAP32[$2423>>2] = $2425;
      $2426 = $23;
      $2427 = +HEAPF32[$2426>>2];
      $2428 = $23;
      $2429 = ((($2428)) + 4|0);
      $2430 = +HEAPF32[$2429>>2];
      $2431 = $2430 + $2427;
      HEAPF32[$2429>>2] = $2431;
      break;
     }
     case 114:  {
      $2432 = $6;
      $2433 = ((($2432)) + 12|0);
      $2434 = HEAP32[$2433>>2]|0;
      $2435 = ((($2434)) + 4|0);
      HEAP32[$2433>>2] = $2435;
      $2436 = $6;
      $2437 = HEAP32[$2436>>2]|0;
      $2438 = ((($2437)) + 1|0);
      HEAP32[$2436>>2] = $2438;
      $2439 = $23;
      $2440 = +HEAPF32[$2439>>2];
      $2441 = $23;
      $2442 = ((($2441)) + 4|0);
      $2443 = +HEAPF32[$2442>>2];
      $2444 = $2443 - $2440;
      HEAPF32[$2442>>2] = $2444;
      break;
     }
     case 115:  {
      $2445 = $6;
      $2446 = ((($2445)) + 12|0);
      $2447 = HEAP32[$2446>>2]|0;
      $2448 = ((($2447)) + 4|0);
      HEAP32[$2446>>2] = $2448;
      $2449 = $6;
      $2450 = HEAP32[$2449>>2]|0;
      $2451 = ((($2450)) + 1|0);
      HEAP32[$2449>>2] = $2451;
      $2452 = $23;
      $2453 = +HEAPF32[$2452>>2];
      $2454 = $23;
      $2455 = ((($2454)) + 4|0);
      $2456 = +HEAPF32[$2455>>2];
      $2457 = $2456 * $2453;
      HEAPF32[$2455>>2] = $2457;
      break;
     }
     case 116:  {
      $2458 = $6;
      $2459 = ((($2458)) + 12|0);
      $2460 = HEAP32[$2459>>2]|0;
      $2461 = ((($2460)) + 4|0);
      HEAP32[$2459>>2] = $2461;
      $2462 = $6;
      $2463 = HEAP32[$2462>>2]|0;
      $2464 = ((($2463)) + 1|0);
      HEAP32[$2462>>2] = $2464;
      $2465 = $23;
      $2466 = +HEAPF32[$2465>>2];
      $2467 = $23;
      $2468 = ((($2467)) + 4|0);
      $2469 = +HEAPF32[$2468>>2];
      $2470 = $2469 / $2466;
      HEAPF32[$2468>>2] = $2470;
      $2471 = $23;
      $2472 = +HEAPF32[$2471>>2];
      $2473 = $2472;
      $2474 = $2473 == 0.0;
      if ($2474) {
       label = 31;
      }
      break;
     }
     case 117:  {
      $2475 = $6;
      $2476 = ((($2475)) + 12|0);
      $2477 = HEAP32[$2476>>2]|0;
      $2478 = ((($2477)) + 4|0);
      HEAP32[$2476>>2] = $2478;
      $2479 = $6;
      $2480 = HEAP32[$2479>>2]|0;
      $2481 = ((($2480)) + 1|0);
      HEAP32[$2479>>2] = $2481;
      $2482 = $23;
      $2483 = ((($2482)) + 4|0);
      $2484 = +HEAPF32[$2483>>2];
      $2485 = $23;
      $2486 = +HEAPF32[$2485>>2];
      $2487 = $2484 % $2486;
      $2488 = $23;
      $2489 = ((($2488)) + 4|0);
      HEAPF32[$2489>>2] = $2487;
      $2490 = $23;
      $2491 = +HEAPF32[$2490>>2];
      $2492 = $2491 == 0.0;
      if ($2492) {
       label = 31;
      }
      break;
     }
     case 119:  {
      $2493 = $6;
      $2494 = ((($2493)) + 12|0);
      $2495 = HEAP32[$2494>>2]|0;
      $2496 = ((($2495)) + 4|0);
      HEAP32[$2494>>2] = $2496;
      $2497 = $6;
      $2498 = HEAP32[$2497>>2]|0;
      $2499 = ((($2498)) + 1|0);
      HEAP32[$2497>>2] = $2499;
      $2500 = $23;
      $2501 = ((($2500)) + 4|0);
      $2502 = +HEAPF32[$2501>>2];
      $2503 = $23;
      $2504 = +HEAPF32[$2503>>2];
      $2505 = $2502 == $2504;
      $2506 = $2505&1;
      $2507 = $23;
      $2508 = ((($2507)) + 4|0);
      HEAP32[$2508>>2] = $2506;
      break;
     }
     case 120:  {
      $2509 = $6;
      $2510 = ((($2509)) + 12|0);
      $2511 = HEAP32[$2510>>2]|0;
      $2512 = ((($2511)) + 4|0);
      HEAP32[$2510>>2] = $2512;
      $2513 = $6;
      $2514 = HEAP32[$2513>>2]|0;
      $2515 = ((($2514)) + 1|0);
      HEAP32[$2513>>2] = $2515;
      $2516 = $23;
      $2517 = ((($2516)) + 4|0);
      $2518 = +HEAPF32[$2517>>2];
      $2519 = $23;
      $2520 = +HEAPF32[$2519>>2];
      $2521 = $2518 < $2520;
      $2522 = $2521&1;
      $2523 = $23;
      $2524 = ((($2523)) + 4|0);
      HEAP32[$2524>>2] = $2522;
      break;
     }
     case 121:  {
      $2525 = $6;
      $2526 = ((($2525)) + 12|0);
      $2527 = HEAP32[$2526>>2]|0;
      $2528 = ((($2527)) + 4|0);
      HEAP32[$2526>>2] = $2528;
      $2529 = $6;
      $2530 = HEAP32[$2529>>2]|0;
      $2531 = ((($2530)) + 1|0);
      HEAP32[$2529>>2] = $2531;
      $2532 = $23;
      $2533 = ((($2532)) + 4|0);
      $2534 = +HEAPF32[$2533>>2];
      $2535 = $23;
      $2536 = +HEAPF32[$2535>>2];
      $2537 = $2534 > $2536;
      $2538 = $2537&1;
      $2539 = $23;
      $2540 = ((($2539)) + 4|0);
      HEAP32[$2540>>2] = $2538;
      break;
     }
     case 122:  {
      $2541 = $6;
      $2542 = ((($2541)) + 12|0);
      $2543 = HEAP32[$2542>>2]|0;
      HEAP32[$2542>>2] = $2543;
      $2544 = $6;
      $2545 = HEAP32[$2544>>2]|0;
      $2546 = ((($2545)) + 1|0);
      HEAP32[$2544>>2] = $2546;
      $2547 = $23;
      $2548 = +HEAPF32[$2547>>2];
      $2549 = (~~(($2548)));
      $2550 = $23;
      HEAP32[$2550>>2] = $2549;
      break;
     }
     case 123:  {
      $2551 = $6;
      $2552 = ((($2551)) + 12|0);
      $2553 = HEAP32[$2552>>2]|0;
      HEAP32[$2552>>2] = $2553;
      $2554 = $6;
      $2555 = HEAP32[$2554>>2]|0;
      $2556 = ((($2555)) + 1|0);
      HEAP32[$2554>>2] = $2556;
      $2557 = $23;
      $2558 = +HEAPF32[$2557>>2];
      $2559 = 0.0 != $2558;
      $2560 = $2559&1;
      $2561 = $23;
      HEAP32[$2561>>2] = $2560;
      break;
     }
     case 124:  {
      $2562 = $6;
      $2563 = ((($2562)) + 12|0);
      $2564 = HEAP32[$2563>>2]|0;
      $2565 = ((($2564)) + -4|0);
      HEAP32[$2563>>2] = $2565;
      $2566 = $6;
      $2567 = HEAP32[$2566>>2]|0;
      $2568 = ((($2567)) + 1|0);
      HEAP32[$2566>>2] = $2568;
      $2569 = $6;
      $2570 = (_ovf($2569)|0);
      $2571 = ($2570|0)!=(0);
      if ($2571) {
       label = 29;
       break L285;
      }
      $2572 = $23;
      $2573 = +HEAPF32[$2572>>2];
      $2574 = (~~$2573)>>>0;
      $2575 = +Math_abs($2573) >= 1.0 ? $2573 > 0.0 ? (~~+Math_min(+Math_floor($2573 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($2573 - +(~~$2573 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $2576 = $23;
      $2577 = ((($2576)) + -4|0);
      $2578 = $2577;
      $2579 = $2578;
      HEAP32[$2579>>2] = $2574;
      $2580 = (($2578) + 4)|0;
      $2581 = $2580;
      HEAP32[$2581>>2] = $2575;
      break;
     }
     case 125:  {
      $2582 = $6;
      $2583 = ((($2582)) + 12|0);
      $2584 = HEAP32[$2583>>2]|0;
      $2585 = ((($2584)) + -4|0);
      HEAP32[$2583>>2] = $2585;
      $2586 = $6;
      $2587 = HEAP32[$2586>>2]|0;
      $2588 = ((($2587)) + 1|0);
      HEAP32[$2586>>2] = $2588;
      $2589 = $6;
      $2590 = (_ovf($2589)|0);
      $2591 = ($2590|0)!=(0);
      if ($2591) {
       label = 29;
       break L285;
      }
      $2592 = $23;
      $2593 = +HEAPF32[$2592>>2];
      $2594 = $2593;
      $2595 = $23;
      $2596 = ((($2595)) + -4|0);
      HEAPF64[$2596>>3] = $2594;
      break;
     }
     case 128:  {
      $2597 = $6;
      $2598 = ((($2597)) + 12|0);
      $2599 = HEAP32[$2598>>2]|0;
      HEAP32[$2598>>2] = $2599;
      $2600 = $6;
      $2601 = HEAP32[$2600>>2]|0;
      $2602 = ((($2601)) + 1|0);
      HEAP32[$2600>>2] = $2602;
      $2603 = $23;
      $2604 = +HEAPF64[$2603>>3];
      $2605 = - $2604;
      $2606 = $23;
      HEAPF64[$2606>>3] = $2605;
      break;
     }
     case 129:  {
      $2607 = $6;
      $2608 = ((($2607)) + 12|0);
      $2609 = HEAP32[$2608>>2]|0;
      $2610 = ((($2609)) + 8|0);
      HEAP32[$2608>>2] = $2610;
      $2611 = $6;
      $2612 = HEAP32[$2611>>2]|0;
      $2613 = ((($2612)) + 1|0);
      HEAP32[$2611>>2] = $2613;
      $2614 = $23;
      $2615 = +HEAPF64[$2614>>3];
      $2616 = $23;
      $2617 = ((($2616)) + 8|0);
      $2618 = +HEAPF64[$2617>>3];
      $2619 = $2618 + $2615;
      HEAPF64[$2617>>3] = $2619;
      break;
     }
     case 130:  {
      $2620 = $6;
      $2621 = ((($2620)) + 12|0);
      $2622 = HEAP32[$2621>>2]|0;
      $2623 = ((($2622)) + 8|0);
      HEAP32[$2621>>2] = $2623;
      $2624 = $6;
      $2625 = HEAP32[$2624>>2]|0;
      $2626 = ((($2625)) + 1|0);
      HEAP32[$2624>>2] = $2626;
      $2627 = $23;
      $2628 = +HEAPF64[$2627>>3];
      $2629 = $23;
      $2630 = ((($2629)) + 8|0);
      $2631 = +HEAPF64[$2630>>3];
      $2632 = $2631 - $2628;
      HEAPF64[$2630>>3] = $2632;
      break;
     }
     case 131:  {
      $2633 = $6;
      $2634 = ((($2633)) + 12|0);
      $2635 = HEAP32[$2634>>2]|0;
      $2636 = ((($2635)) + 8|0);
      HEAP32[$2634>>2] = $2636;
      $2637 = $6;
      $2638 = HEAP32[$2637>>2]|0;
      $2639 = ((($2638)) + 1|0);
      HEAP32[$2637>>2] = $2639;
      $2640 = $23;
      $2641 = +HEAPF64[$2640>>3];
      $2642 = $23;
      $2643 = ((($2642)) + 8|0);
      $2644 = +HEAPF64[$2643>>3];
      $2645 = $2644 * $2641;
      HEAPF64[$2643>>3] = $2645;
      break;
     }
     case 132:  {
      $2646 = $6;
      $2647 = ((($2646)) + 12|0);
      $2648 = HEAP32[$2647>>2]|0;
      $2649 = ((($2648)) + 8|0);
      HEAP32[$2647>>2] = $2649;
      $2650 = $6;
      $2651 = HEAP32[$2650>>2]|0;
      $2652 = ((($2651)) + 1|0);
      HEAP32[$2650>>2] = $2652;
      $2653 = $23;
      $2654 = +HEAPF64[$2653>>3];
      $2655 = $23;
      $2656 = ((($2655)) + 8|0);
      $2657 = +HEAPF64[$2656>>3];
      $2658 = $2657 / $2654;
      HEAPF64[$2656>>3] = $2658;
      $2659 = $23;
      $2660 = +HEAPF64[$2659>>3];
      $2661 = $2660 == 0.0;
      if ($2661) {
       label = 31;
      }
      break;
     }
     case 133:  {
      $2662 = $6;
      $2663 = ((($2662)) + 12|0);
      $2664 = HEAP32[$2663>>2]|0;
      $2665 = ((($2664)) + 8|0);
      HEAP32[$2663>>2] = $2665;
      $2666 = $6;
      $2667 = HEAP32[$2666>>2]|0;
      $2668 = ((($2667)) + 1|0);
      HEAP32[$2666>>2] = $2668;
      $2669 = $23;
      $2670 = ((($2669)) + 8|0);
      $2671 = +HEAPF64[$2670>>3];
      $2672 = $23;
      $2673 = +HEAPF64[$2672>>3];
      $2674 = $2671 % $2673;
      $2675 = $23;
      $2676 = ((($2675)) + 8|0);
      HEAPF64[$2676>>3] = $2674;
      $2677 = $23;
      $2678 = +HEAPF64[$2677>>3];
      $2679 = $2678 == 0.0;
      if ($2679) {
       label = 31;
      }
      break;
     }
     case 135:  {
      $2680 = $6;
      $2681 = ((($2680)) + 12|0);
      $2682 = HEAP32[$2681>>2]|0;
      $2683 = ((($2682)) + 12|0);
      HEAP32[$2681>>2] = $2683;
      $2684 = $6;
      $2685 = HEAP32[$2684>>2]|0;
      $2686 = ((($2685)) + 1|0);
      HEAP32[$2684>>2] = $2686;
      $2687 = $23;
      $2688 = ((($2687)) + 8|0);
      $2689 = +HEAPF64[$2688>>3];
      $2690 = $23;
      $2691 = +HEAPF64[$2690>>3];
      $2692 = $2689 == $2691;
      $2693 = $2692&1;
      $2694 = $23;
      $2695 = ((($2694)) + 12|0);
      HEAP32[$2695>>2] = $2693;
      break;
     }
     case 136:  {
      $2696 = $6;
      $2697 = ((($2696)) + 12|0);
      $2698 = HEAP32[$2697>>2]|0;
      $2699 = ((($2698)) + 12|0);
      HEAP32[$2697>>2] = $2699;
      $2700 = $6;
      $2701 = HEAP32[$2700>>2]|0;
      $2702 = ((($2701)) + 1|0);
      HEAP32[$2700>>2] = $2702;
      $2703 = $23;
      $2704 = ((($2703)) + 8|0);
      $2705 = +HEAPF64[$2704>>3];
      $2706 = $23;
      $2707 = +HEAPF64[$2706>>3];
      $2708 = $2705 < $2707;
      $2709 = $2708&1;
      $2710 = $23;
      $2711 = ((($2710)) + 12|0);
      HEAP32[$2711>>2] = $2709;
      break;
     }
     case 137:  {
      $2712 = $6;
      $2713 = ((($2712)) + 12|0);
      $2714 = HEAP32[$2713>>2]|0;
      $2715 = ((($2714)) + 12|0);
      HEAP32[$2713>>2] = $2715;
      $2716 = $6;
      $2717 = HEAP32[$2716>>2]|0;
      $2718 = ((($2717)) + 1|0);
      HEAP32[$2716>>2] = $2718;
      $2719 = $23;
      $2720 = ((($2719)) + 8|0);
      $2721 = +HEAPF64[$2720>>3];
      $2722 = $23;
      $2723 = +HEAPF64[$2722>>3];
      $2724 = $2721 > $2723;
      $2725 = $2724&1;
      $2726 = $23;
      $2727 = ((($2726)) + 12|0);
      HEAP32[$2727>>2] = $2725;
      break;
     }
     case 138:  {
      $2728 = $6;
      $2729 = ((($2728)) + 12|0);
      $2730 = HEAP32[$2729>>2]|0;
      $2731 = ((($2730)) + 4|0);
      HEAP32[$2729>>2] = $2731;
      $2732 = $6;
      $2733 = HEAP32[$2732>>2]|0;
      $2734 = ((($2733)) + 1|0);
      HEAP32[$2732>>2] = $2734;
      $2735 = $23;
      $2736 = +HEAPF64[$2735>>3];
      $2737 = (~~(($2736)));
      $2738 = $23;
      $2739 = ((($2738)) + 4|0);
      HEAP32[$2739>>2] = $2737;
      break;
     }
     case 139:  {
      $2740 = $6;
      $2741 = ((($2740)) + 12|0);
      $2742 = HEAP32[$2741>>2]|0;
      $2743 = ((($2742)) + 4|0);
      HEAP32[$2741>>2] = $2743;
      $2744 = $6;
      $2745 = HEAP32[$2744>>2]|0;
      $2746 = ((($2745)) + 1|0);
      HEAP32[$2744>>2] = $2746;
      $2747 = $23;
      $2748 = +HEAPF64[$2747>>3];
      $2749 = $2748;
      $2750 = $23;
      $2751 = ((($2750)) + 4|0);
      HEAPF32[$2751>>2] = $2749;
      break;
     }
     case 140:  {
      $2752 = $6;
      $2753 = ((($2752)) + 12|0);
      $2754 = HEAP32[$2753>>2]|0;
      HEAP32[$2753>>2] = $2754;
      $2755 = $6;
      $2756 = HEAP32[$2755>>2]|0;
      $2757 = ((($2756)) + 1|0);
      HEAP32[$2755>>2] = $2757;
      $2758 = $23;
      $2759 = +HEAPF64[$2758>>3];
      $2760 = (~~$2759)>>>0;
      $2761 = +Math_abs($2759) >= 1.0 ? $2759 > 0.0 ? (~~+Math_min(+Math_floor($2759 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($2759 - +(~~$2759 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $2762 = $23;
      $2763 = $2762;
      $2764 = $2763;
      HEAP32[$2764>>2] = $2760;
      $2765 = (($2763) + 4)|0;
      $2766 = $2765;
      HEAP32[$2766>>2] = $2761;
      break;
     }
     case 141:  {
      $2767 = $6;
      $2768 = ((($2767)) + 12|0);
      $2769 = HEAP32[$2768>>2]|0;
      $2770 = ((($2769)) + 4|0);
      HEAP32[$2768>>2] = $2770;
      $2771 = $6;
      $2772 = HEAP32[$2771>>2]|0;
      $2773 = ((($2772)) + 1|0);
      HEAP32[$2771>>2] = $2773;
      $2774 = $23;
      $2775 = +HEAPF64[$2774>>3];
      $2776 = 0.0 != $2775;
      $2777 = $2776&1;
      $2778 = $23;
      $2779 = ((($2778)) + 4|0);
      HEAP32[$2779>>2] = $2777;
      break;
     }
     case 144:  {
      $2780 = $6;
      $2781 = ((($2780)) + 12|0);
      $2782 = HEAP32[$2781>>2]|0;
      HEAP32[$2781>>2] = $2782;
      $2783 = $6;
      $2784 = HEAP32[$2783>>2]|0;
      $2785 = ((($2784)) + 1|0);
      HEAP32[$2783>>2] = $2785;
      $2786 = $23;
      $2787 = +HEAPF32[$2786>>2];
      $2788 = - $2787;
      $2789 = $23;
      HEAPF32[$2789>>2] = $2788;
      $2790 = $23;
      $2791 = ((($2790)) + 4|0);
      $2792 = +HEAPF32[$2791>>2];
      $2793 = - $2792;
      $2794 = $23;
      $2795 = ((($2794)) + 4|0);
      HEAPF32[$2795>>2] = $2793;
      $2796 = $23;
      $2797 = ((($2796)) + 8|0);
      $2798 = +HEAPF32[$2797>>2];
      $2799 = - $2798;
      $2800 = $23;
      $2801 = ((($2800)) + 8|0);
      HEAPF32[$2801>>2] = $2799;
      $2802 = $23;
      $2803 = ((($2802)) + 12|0);
      $2804 = +HEAPF32[$2803>>2];
      $2805 = - $2804;
      $2806 = $23;
      $2807 = ((($2806)) + 12|0);
      HEAPF32[$2807>>2] = $2805;
      break;
     }
     case 145:  {
      $2808 = $6;
      $2809 = ((($2808)) + 12|0);
      $2810 = HEAP32[$2809>>2]|0;
      $2811 = ((($2810)) + 16|0);
      HEAP32[$2809>>2] = $2811;
      $2812 = $6;
      $2813 = HEAP32[$2812>>2]|0;
      $2814 = ((($2813)) + 1|0);
      HEAP32[$2812>>2] = $2814;
      $2815 = $23;
      $2816 = +HEAPF32[$2815>>2];
      $2817 = $23;
      $2818 = ((($2817)) + 16|0);
      $2819 = +HEAPF32[$2818>>2];
      $2820 = $2819 + $2816;
      HEAPF32[$2818>>2] = $2820;
      $2821 = $23;
      $2822 = ((($2821)) + 4|0);
      $2823 = +HEAPF32[$2822>>2];
      $2824 = $23;
      $2825 = ((($2824)) + 20|0);
      $2826 = +HEAPF32[$2825>>2];
      $2827 = $2826 + $2823;
      HEAPF32[$2825>>2] = $2827;
      $2828 = $23;
      $2829 = ((($2828)) + 8|0);
      $2830 = +HEAPF32[$2829>>2];
      $2831 = $23;
      $2832 = ((($2831)) + 24|0);
      $2833 = +HEAPF32[$2832>>2];
      $2834 = $2833 + $2830;
      HEAPF32[$2832>>2] = $2834;
      $2835 = $23;
      $2836 = ((($2835)) + 12|0);
      $2837 = +HEAPF32[$2836>>2];
      $2838 = $23;
      $2839 = ((($2838)) + 28|0);
      $2840 = +HEAPF32[$2839>>2];
      $2841 = $2840 + $2837;
      HEAPF32[$2839>>2] = $2841;
      break;
     }
     case 146:  {
      $2842 = $6;
      $2843 = ((($2842)) + 12|0);
      $2844 = HEAP32[$2843>>2]|0;
      $2845 = ((($2844)) + 16|0);
      HEAP32[$2843>>2] = $2845;
      $2846 = $6;
      $2847 = HEAP32[$2846>>2]|0;
      $2848 = ((($2847)) + 1|0);
      HEAP32[$2846>>2] = $2848;
      $2849 = $23;
      $2850 = +HEAPF32[$2849>>2];
      $2851 = $23;
      $2852 = ((($2851)) + 16|0);
      $2853 = +HEAPF32[$2852>>2];
      $2854 = $2853 - $2850;
      HEAPF32[$2852>>2] = $2854;
      $2855 = $23;
      $2856 = ((($2855)) + 4|0);
      $2857 = +HEAPF32[$2856>>2];
      $2858 = $23;
      $2859 = ((($2858)) + 20|0);
      $2860 = +HEAPF32[$2859>>2];
      $2861 = $2860 - $2857;
      HEAPF32[$2859>>2] = $2861;
      $2862 = $23;
      $2863 = ((($2862)) + 8|0);
      $2864 = +HEAPF32[$2863>>2];
      $2865 = $23;
      $2866 = ((($2865)) + 24|0);
      $2867 = +HEAPF32[$2866>>2];
      $2868 = $2867 - $2864;
      HEAPF32[$2866>>2] = $2868;
      $2869 = $23;
      $2870 = ((($2869)) + 12|0);
      $2871 = +HEAPF32[$2870>>2];
      $2872 = $23;
      $2873 = ((($2872)) + 28|0);
      $2874 = +HEAPF32[$2873>>2];
      $2875 = $2874 - $2871;
      HEAPF32[$2873>>2] = $2875;
      break;
     }
     case 147:  {
      $2876 = $6;
      $2877 = ((($2876)) + 12|0);
      $2878 = HEAP32[$2877>>2]|0;
      $2879 = ((($2878)) + 16|0);
      HEAP32[$2877>>2] = $2879;
      $2880 = $6;
      $2881 = HEAP32[$2880>>2]|0;
      $2882 = ((($2881)) + 1|0);
      HEAP32[$2880>>2] = $2882;
      $2883 = $23;
      $2884 = +HEAPF32[$2883>>2];
      $2885 = $23;
      $2886 = ((($2885)) + 16|0);
      $2887 = +HEAPF32[$2886>>2];
      $2888 = $2887 * $2884;
      HEAPF32[$2886>>2] = $2888;
      $2889 = $23;
      $2890 = ((($2889)) + 4|0);
      $2891 = +HEAPF32[$2890>>2];
      $2892 = $23;
      $2893 = ((($2892)) + 20|0);
      $2894 = +HEAPF32[$2893>>2];
      $2895 = $2894 * $2891;
      HEAPF32[$2893>>2] = $2895;
      $2896 = $23;
      $2897 = ((($2896)) + 8|0);
      $2898 = +HEAPF32[$2897>>2];
      $2899 = $23;
      $2900 = ((($2899)) + 24|0);
      $2901 = +HEAPF32[$2900>>2];
      $2902 = $2901 * $2898;
      HEAPF32[$2900>>2] = $2902;
      $2903 = $23;
      $2904 = ((($2903)) + 12|0);
      $2905 = +HEAPF32[$2904>>2];
      $2906 = $23;
      $2907 = ((($2906)) + 28|0);
      $2908 = +HEAPF32[$2907>>2];
      $2909 = $2908 * $2905;
      HEAPF32[$2907>>2] = $2909;
      break;
     }
     case 148:  {
      $2910 = $6;
      $2911 = ((($2910)) + 12|0);
      $2912 = HEAP32[$2911>>2]|0;
      $2913 = ((($2912)) + 16|0);
      HEAP32[$2911>>2] = $2913;
      $2914 = $6;
      $2915 = HEAP32[$2914>>2]|0;
      $2916 = ((($2915)) + 1|0);
      HEAP32[$2914>>2] = $2916;
      $2917 = $23;
      $2918 = +HEAPF32[$2917>>2];
      $2919 = $23;
      $2920 = ((($2919)) + 16|0);
      $2921 = +HEAPF32[$2920>>2];
      $2922 = $2921 / $2918;
      HEAPF32[$2920>>2] = $2922;
      $2923 = $23;
      $2924 = ((($2923)) + 4|0);
      $2925 = +HEAPF32[$2924>>2];
      $2926 = $23;
      $2927 = ((($2926)) + 20|0);
      $2928 = +HEAPF32[$2927>>2];
      $2929 = $2928 / $2925;
      HEAPF32[$2927>>2] = $2929;
      $2930 = $23;
      $2931 = ((($2930)) + 8|0);
      $2932 = +HEAPF32[$2931>>2];
      $2933 = $23;
      $2934 = ((($2933)) + 24|0);
      $2935 = +HEAPF32[$2934>>2];
      $2936 = $2935 / $2932;
      HEAPF32[$2934>>2] = $2936;
      $2937 = $23;
      $2938 = ((($2937)) + 12|0);
      $2939 = +HEAPF32[$2938>>2];
      $2940 = $23;
      $2941 = ((($2940)) + 28|0);
      $2942 = +HEAPF32[$2941>>2];
      $2943 = $2942 / $2939;
      HEAPF32[$2941>>2] = $2943;
      break;
     }
     case 151:  {
      $2944 = $6;
      $2945 = ((($2944)) + 12|0);
      $2946 = HEAP32[$2945>>2]|0;
      $2947 = ((($2946)) + 28|0);
      HEAP32[$2945>>2] = $2947;
      $2948 = $6;
      $2949 = HEAP32[$2948>>2]|0;
      $2950 = ((($2949)) + 1|0);
      HEAP32[$2948>>2] = $2950;
      $2951 = $23;
      $2952 = ((($2951)) + 16|0);
      $2953 = +HEAPF32[$2952>>2];
      $2954 = $23;
      $2955 = +HEAPF32[$2954>>2];
      $2956 = $2953 == $2955;
      if ($2956) {
       $2957 = $23;
       $2958 = ((($2957)) + 20|0);
       $2959 = +HEAPF32[$2958>>2];
       $2960 = $23;
       $2961 = ((($2960)) + 4|0);
       $2962 = +HEAPF32[$2961>>2];
       $2963 = $2959 == $2962;
       if ($2963) {
        $2964 = $23;
        $2965 = ((($2964)) + 24|0);
        $2966 = +HEAPF32[$2965>>2];
        $2967 = $23;
        $2968 = ((($2967)) + 8|0);
        $2969 = +HEAPF32[$2968>>2];
        $2970 = $2966 == $2969;
        if ($2970) {
         $2971 = $23;
         $2972 = ((($2971)) + 28|0);
         $2973 = +HEAPF32[$2972>>2];
         $2974 = $23;
         $2975 = ((($2974)) + 12|0);
         $2976 = +HEAPF32[$2975>>2];
         $2977 = $2973 == $2976;
         $2979 = $2977;
        } else {
         $2979 = 0;
        }
       } else {
        $2979 = 0;
       }
      } else {
       $2979 = 0;
      }
      $2978 = $2979&1;
      $2980 = $23;
      $2981 = ((($2980)) + 28|0);
      HEAP32[$2981>>2] = $2978;
      break;
     }
     case 152:  {
      $2982 = $6;
      $2983 = ((($2982)) + 12|0);
      $2984 = HEAP32[$2983>>2]|0;
      $2985 = ((($2984)) + 16|0);
      HEAP32[$2983>>2] = $2985;
      $2986 = $6;
      $2987 = HEAP32[$2986>>2]|0;
      $2988 = ((($2987)) + 1|0);
      HEAP32[$2986>>2] = $2988;
      $2989 = $23;
      $2990 = ((($2989)) + 16|0);
      $2991 = +HEAPF32[$2990>>2];
      $2992 = $23;
      $2993 = +HEAPF32[$2992>>2];
      $2994 = $2991 > $2993;
      if ($2994) {
       $2995 = $23;
       $2996 = +HEAPF32[$2995>>2];
       $2997 = $23;
       $2998 = ((($2997)) + 16|0);
       HEAPF32[$2998>>2] = $2996;
      }
      $2999 = $23;
      $3000 = ((($2999)) + 20|0);
      $3001 = +HEAPF32[$3000>>2];
      $3002 = $23;
      $3003 = ((($3002)) + 4|0);
      $3004 = +HEAPF32[$3003>>2];
      $3005 = $3001 > $3004;
      if ($3005) {
       $3006 = $23;
       $3007 = ((($3006)) + 4|0);
       $3008 = +HEAPF32[$3007>>2];
       $3009 = $23;
       $3010 = ((($3009)) + 20|0);
       HEAPF32[$3010>>2] = $3008;
      }
      $3011 = $23;
      $3012 = ((($3011)) + 24|0);
      $3013 = +HEAPF32[$3012>>2];
      $3014 = $23;
      $3015 = ((($3014)) + 8|0);
      $3016 = +HEAPF32[$3015>>2];
      $3017 = $3013 > $3016;
      if ($3017) {
       $3018 = $23;
       $3019 = ((($3018)) + 8|0);
       $3020 = +HEAPF32[$3019>>2];
       $3021 = $23;
       $3022 = ((($3021)) + 24|0);
       HEAPF32[$3022>>2] = $3020;
      }
      $3023 = $23;
      $3024 = ((($3023)) + 28|0);
      $3025 = +HEAPF32[$3024>>2];
      $3026 = $23;
      $3027 = ((($3026)) + 12|0);
      $3028 = +HEAPF32[$3027>>2];
      $3029 = $3025 > $3028;
      if ($3029) {
       $3030 = $23;
       $3031 = ((($3030)) + 12|0);
       $3032 = +HEAPF32[$3031>>2];
       $3033 = $23;
       $3034 = ((($3033)) + 28|0);
       HEAPF32[$3034>>2] = $3032;
      }
      break;
     }
     case 153:  {
      $3035 = $6;
      $3036 = ((($3035)) + 12|0);
      $3037 = HEAP32[$3036>>2]|0;
      $3038 = ((($3037)) + 16|0);
      HEAP32[$3036>>2] = $3038;
      $3039 = $6;
      $3040 = HEAP32[$3039>>2]|0;
      $3041 = ((($3040)) + 1|0);
      HEAP32[$3039>>2] = $3041;
      $3042 = $23;
      $3043 = ((($3042)) + 16|0);
      $3044 = +HEAPF32[$3043>>2];
      $3045 = $23;
      $3046 = +HEAPF32[$3045>>2];
      $3047 = $3044 < $3046;
      if ($3047) {
       $3048 = $23;
       $3049 = +HEAPF32[$3048>>2];
       $3050 = $23;
       $3051 = ((($3050)) + 16|0);
       HEAPF32[$3051>>2] = $3049;
      }
      $3052 = $23;
      $3053 = ((($3052)) + 20|0);
      $3054 = +HEAPF32[$3053>>2];
      $3055 = $23;
      $3056 = ((($3055)) + 4|0);
      $3057 = +HEAPF32[$3056>>2];
      $3058 = $3054 < $3057;
      if ($3058) {
       $3059 = $23;
       $3060 = ((($3059)) + 4|0);
       $3061 = +HEAPF32[$3060>>2];
       $3062 = $23;
       $3063 = ((($3062)) + 20|0);
       HEAPF32[$3063>>2] = $3061;
      }
      $3064 = $23;
      $3065 = ((($3064)) + 24|0);
      $3066 = +HEAPF32[$3065>>2];
      $3067 = $23;
      $3068 = ((($3067)) + 8|0);
      $3069 = +HEAPF32[$3068>>2];
      $3070 = $3066 < $3069;
      if ($3070) {
       $3071 = $23;
       $3072 = ((($3071)) + 8|0);
       $3073 = +HEAPF32[$3072>>2];
       $3074 = $23;
       $3075 = ((($3074)) + 24|0);
       HEAPF32[$3075>>2] = $3073;
      }
      $3076 = $23;
      $3077 = ((($3076)) + 28|0);
      $3078 = +HEAPF32[$3077>>2];
      $3079 = $23;
      $3080 = ((($3079)) + 12|0);
      $3081 = +HEAPF32[$3080>>2];
      $3082 = $3078 < $3081;
      if ($3082) {
       $3083 = $23;
       $3084 = ((($3083)) + 12|0);
       $3085 = +HEAPF32[$3084>>2];
       $3086 = $23;
       $3087 = ((($3086)) + 28|0);
       HEAPF32[$3087>>2] = $3085;
      }
      break;
     }
     case 154:  {
      $3088 = $6;
      $3089 = ((($3088)) + 12|0);
      $3090 = HEAP32[$3089>>2]|0;
      $3091 = ((($3090)) + 28|0);
      HEAP32[$3089>>2] = $3091;
      $3092 = $6;
      $3093 = HEAP32[$3092>>2]|0;
      $3094 = ((($3093)) + 1|0);
      HEAP32[$3092>>2] = $3094;
      $3095 = $23;
      $3096 = ((($3095)) + 16|0);
      $3097 = +HEAPF32[$3096>>2];
      $3098 = $23;
      $3099 = +HEAPF32[$3098>>2];
      $3100 = $3097 * $3099;
      $3101 = $23;
      $3102 = ((($3101)) + 20|0);
      $3103 = +HEAPF32[$3102>>2];
      $3104 = $23;
      $3105 = ((($3104)) + 4|0);
      $3106 = +HEAPF32[$3105>>2];
      $3107 = $3103 * $3106;
      $3108 = $3100 + $3107;
      $3109 = $23;
      $3110 = ((($3109)) + 24|0);
      $3111 = +HEAPF32[$3110>>2];
      $3112 = $23;
      $3113 = ((($3112)) + 8|0);
      $3114 = +HEAPF32[$3113>>2];
      $3115 = $3111 * $3114;
      $3116 = $3108 + $3115;
      $3117 = $23;
      $3118 = ((($3117)) + 28|0);
      HEAPF32[$3118>>2] = $3116;
      break;
     }
     case 156:  {
      $3119 = $6;
      $3120 = ((($3119)) + 12|0);
      $3121 = HEAP32[$3120>>2]|0;
      $3122 = ((($3121)) + 28|0);
      HEAP32[$3120>>2] = $3122;
      $3123 = $6;
      $3124 = HEAP32[$3123>>2]|0;
      $3125 = ((($3124)) + 1|0);
      HEAP32[$3123>>2] = $3125;
      $3126 = $23;
      $3127 = ((($3126)) + 16|0);
      $3128 = +HEAPF32[$3127>>2];
      $3129 = $23;
      $3130 = +HEAPF32[$3129>>2];
      $3131 = $3128 * $3130;
      $3132 = $23;
      $3133 = ((($3132)) + 20|0);
      $3134 = +HEAPF32[$3133>>2];
      $3135 = $23;
      $3136 = ((($3135)) + 4|0);
      $3137 = +HEAPF32[$3136>>2];
      $3138 = $3134 * $3137;
      $3139 = $3131 + $3138;
      $3140 = $23;
      $3141 = ((($3140)) + 24|0);
      $3142 = +HEAPF32[$3141>>2];
      $3143 = $23;
      $3144 = ((($3143)) + 8|0);
      $3145 = +HEAPF32[$3144>>2];
      $3146 = $3142 * $3145;
      $3147 = $3139 + $3146;
      $3148 = $23;
      $3149 = ((($3148)) + 28|0);
      $3150 = +HEAPF32[$3149>>2];
      $3151 = $3150 + $3147;
      HEAPF32[$3149>>2] = $3151;
      break;
     }
     case 155:  {
      $3152 = $6;
      $3153 = ((($3152)) + 12|0);
      $3154 = HEAP32[$3153>>2]|0;
      $3155 = ((($3154)) + 28|0);
      HEAP32[$3153>>2] = $3155;
      $3156 = $6;
      $3157 = HEAP32[$3156>>2]|0;
      $3158 = ((($3157)) + 1|0);
      HEAP32[$3156>>2] = $3158;
      $3159 = $23;
      $3160 = ((($3159)) + 16|0);
      $3161 = +HEAPF32[$3160>>2];
      $3162 = $23;
      $3163 = +HEAPF32[$3162>>2];
      $3164 = $3161 * $3163;
      $3165 = $23;
      $3166 = ((($3165)) + 20|0);
      $3167 = +HEAPF32[$3166>>2];
      $3168 = $23;
      $3169 = ((($3168)) + 4|0);
      $3170 = +HEAPF32[$3169>>2];
      $3171 = $3167 * $3170;
      $3172 = $3164 + $3171;
      $3173 = $23;
      $3174 = ((($3173)) + 24|0);
      $3175 = +HEAPF32[$3174>>2];
      $3176 = $23;
      $3177 = ((($3176)) + 8|0);
      $3178 = +HEAPF32[$3177>>2];
      $3179 = $3175 * $3178;
      $3180 = $3172 + $3179;
      $3181 = $23;
      $3182 = ((($3181)) + 28|0);
      $3183 = +HEAPF32[$3182>>2];
      $3184 = $23;
      $3185 = ((($3184)) + 12|0);
      $3186 = +HEAPF32[$3185>>2];
      $3187 = $3183 * $3186;
      $3188 = $3180 + $3187;
      $3189 = $23;
      $3190 = ((($3189)) + 28|0);
      HEAPF32[$3190>>2] = $3188;
      break;
     }
     case 160:  {
      $3191 = $6;
      $3192 = ((($3191)) + 12|0);
      $3193 = HEAP32[$3192>>2]|0;
      HEAP32[$3192>>2] = $3193;
      $3194 = $6;
      $3195 = HEAP32[$3194>>2]|0;
      $3196 = ((($3195)) + 1|0);
      HEAP32[$3194>>2] = $3196;
      $3197 = $23;
      $3198 = +HEAPF64[$3197>>3];
      $3199 = - $3198;
      $3200 = $23;
      HEAPF64[$3200>>3] = $3199;
      $3201 = $23;
      $3202 = ((($3201)) + 8|0);
      $3203 = +HEAPF64[$3202>>3];
      $3204 = - $3203;
      $3205 = $23;
      $3206 = ((($3205)) + 8|0);
      HEAPF64[$3206>>3] = $3204;
      break;
     }
     case 161:  {
      $3207 = $6;
      $3208 = ((($3207)) + 12|0);
      $3209 = HEAP32[$3208>>2]|0;
      $3210 = ((($3209)) + 16|0);
      HEAP32[$3208>>2] = $3210;
      $3211 = $6;
      $3212 = HEAP32[$3211>>2]|0;
      $3213 = ((($3212)) + 1|0);
      HEAP32[$3211>>2] = $3213;
      $3214 = $23;
      $3215 = +HEAPF64[$3214>>3];
      $3216 = $23;
      $3217 = ((($3216)) + 16|0);
      $3218 = +HEAPF64[$3217>>3];
      $3219 = $3218 + $3215;
      HEAPF64[$3217>>3] = $3219;
      $3220 = $23;
      $3221 = ((($3220)) + 8|0);
      $3222 = +HEAPF64[$3221>>3];
      $3223 = $23;
      $3224 = ((($3223)) + 24|0);
      $3225 = +HEAPF64[$3224>>3];
      $3226 = $3225 + $3222;
      HEAPF64[$3224>>3] = $3226;
      break;
     }
     case 162:  {
      $3227 = $6;
      $3228 = ((($3227)) + 12|0);
      $3229 = HEAP32[$3228>>2]|0;
      $3230 = ((($3229)) + 16|0);
      HEAP32[$3228>>2] = $3230;
      $3231 = $6;
      $3232 = HEAP32[$3231>>2]|0;
      $3233 = ((($3232)) + 1|0);
      HEAP32[$3231>>2] = $3233;
      $3234 = $23;
      $3235 = +HEAPF64[$3234>>3];
      $3236 = $23;
      $3237 = ((($3236)) + 16|0);
      $3238 = +HEAPF64[$3237>>3];
      $3239 = $3238 - $3235;
      HEAPF64[$3237>>3] = $3239;
      $3240 = $23;
      $3241 = ((($3240)) + 8|0);
      $3242 = +HEAPF64[$3241>>3];
      $3243 = $23;
      $3244 = ((($3243)) + 24|0);
      $3245 = +HEAPF64[$3244>>3];
      $3246 = $3245 - $3242;
      HEAPF64[$3244>>3] = $3246;
      break;
     }
     case 163:  {
      $3247 = $6;
      $3248 = ((($3247)) + 12|0);
      $3249 = HEAP32[$3248>>2]|0;
      $3250 = ((($3249)) + 16|0);
      HEAP32[$3248>>2] = $3250;
      $3251 = $6;
      $3252 = HEAP32[$3251>>2]|0;
      $3253 = ((($3252)) + 1|0);
      HEAP32[$3251>>2] = $3253;
      $3254 = $23;
      $3255 = +HEAPF64[$3254>>3];
      $3256 = $23;
      $3257 = ((($3256)) + 16|0);
      $3258 = +HEAPF64[$3257>>3];
      $3259 = $3258 * $3255;
      HEAPF64[$3257>>3] = $3259;
      $3260 = $23;
      $3261 = ((($3260)) + 8|0);
      $3262 = +HEAPF64[$3261>>3];
      $3263 = $23;
      $3264 = ((($3263)) + 24|0);
      $3265 = +HEAPF64[$3264>>3];
      $3266 = $3265 * $3262;
      HEAPF64[$3264>>3] = $3266;
      break;
     }
     case 164:  {
      $3267 = $6;
      $3268 = ((($3267)) + 12|0);
      $3269 = HEAP32[$3268>>2]|0;
      $3270 = ((($3269)) + 16|0);
      HEAP32[$3268>>2] = $3270;
      $3271 = $6;
      $3272 = HEAP32[$3271>>2]|0;
      $3273 = ((($3272)) + 1|0);
      HEAP32[$3271>>2] = $3273;
      $3274 = $23;
      $3275 = +HEAPF64[$3274>>3];
      $3276 = $23;
      $3277 = ((($3276)) + 16|0);
      $3278 = +HEAPF64[$3277>>3];
      $3279 = $3278 / $3275;
      HEAPF64[$3277>>3] = $3279;
      $3280 = $23;
      $3281 = ((($3280)) + 8|0);
      $3282 = +HEAPF64[$3281>>3];
      $3283 = $23;
      $3284 = ((($3283)) + 24|0);
      $3285 = +HEAPF64[$3284>>3];
      $3286 = $3285 / $3282;
      HEAPF64[$3284>>3] = $3286;
      break;
     }
     case 170:  {
      $3287 = $6;
      $3288 = ((($3287)) + 12|0);
      $3289 = HEAP32[$3288>>2]|0;
      HEAP32[$3288>>2] = $3289;
      $3290 = $6;
      $3291 = HEAP32[$3290>>2]|0;
      $3292 = ((($3291)) + 2|0);
      HEAP32[$3290>>2] = $3292;
      $3293 = $22;
      $3294 = ((($3293)) + 1|0);
      $3295 = HEAP8[$3294>>0]|0;
      $3296 = $3295&255;
      $51 = $3296;
      $3297 = $23;
      $3298 = $51;
      $3299 = $3298 >>> 0;
      $3300 = $3299 & 3;
      $3301 = (($3297) + ($3300<<2)|0);
      $3302 = HEAP32[$3301>>2]|0;
      $52 = $3302;
      $3303 = $23;
      $3304 = $51;
      $3305 = $3304 >>> 2;
      $3306 = $3305 & 3;
      $3307 = (($3303) + ($3306<<2)|0);
      $3308 = HEAP32[$3307>>2]|0;
      $53 = $3308;
      $3309 = $23;
      $3310 = $51;
      $3311 = $3310 >>> 4;
      $3312 = $3311 & 3;
      $3313 = (($3309) + ($3312<<2)|0);
      $3314 = HEAP32[$3313>>2]|0;
      $54 = $3314;
      $3315 = $23;
      $3316 = $51;
      $3317 = $3316 >>> 6;
      $3318 = $3317 & 3;
      $3319 = (($3315) + ($3318<<2)|0);
      $3320 = HEAP32[$3319>>2]|0;
      $55 = $3320;
      $3321 = $52;
      $3322 = $23;
      HEAP32[$3322>>2] = $3321;
      $3323 = $53;
      $3324 = $23;
      $3325 = ((($3324)) + 4|0);
      HEAP32[$3325>>2] = $3323;
      $3326 = $54;
      $3327 = $23;
      $3328 = ((($3327)) + 8|0);
      HEAP32[$3328>>2] = $3326;
      $3329 = $55;
      $3330 = $23;
      $3331 = ((($3330)) + 12|0);
      HEAP32[$3331>>2] = $3329;
      break;
     }
     case 167:  {
      $3332 = $6;
      $3333 = ((($3332)) + 12|0);
      $3334 = HEAP32[$3333>>2]|0;
      $3335 = ((($3334)) + 28|0);
      HEAP32[$3333>>2] = $3335;
      $3336 = $6;
      $3337 = HEAP32[$3336>>2]|0;
      $3338 = ((($3337)) + 1|0);
      HEAP32[$3336>>2] = $3338;
      $3339 = $23;
      $3340 = ((($3339)) + 16|0);
      $3341 = +HEAPF64[$3340>>3];
      $3342 = $23;
      $3343 = +HEAPF64[$3342>>3];
      $3344 = $3341 == $3343;
      if ($3344) {
       $3345 = $23;
       $3346 = ((($3345)) + 24|0);
       $3347 = +HEAPF64[$3346>>3];
       $3348 = $23;
       $3349 = ((($3348)) + 8|0);
       $3350 = +HEAPF64[$3349>>3];
       $3351 = $3347 == $3350;
       $3353 = $3351;
      } else {
       $3353 = 0;
      }
      $3352 = $3353&1;
      $3354 = $23;
      $3355 = ((($3354)) + 28|0);
      HEAP32[$3355>>2] = $3352;
      break;
     }
     case 168:  {
      $3356 = $6;
      $3357 = ((($3356)) + 12|0);
      $3358 = HEAP32[$3357>>2]|0;
      $3359 = ((($3358)) + 16|0);
      HEAP32[$3357>>2] = $3359;
      $3360 = $6;
      $3361 = HEAP32[$3360>>2]|0;
      $3362 = ((($3361)) + 1|0);
      HEAP32[$3360>>2] = $3362;
      $3363 = $23;
      $3364 = ((($3363)) + 16|0);
      $3365 = +HEAPF64[$3364>>3];
      $3366 = $23;
      $3367 = +HEAPF64[$3366>>3];
      $3368 = $3365 > $3367;
      if ($3368) {
       $3369 = $23;
       $3370 = +HEAPF64[$3369>>3];
       $3371 = $23;
       $3372 = ((($3371)) + 16|0);
       HEAPF64[$3372>>3] = $3370;
      }
      $3373 = $23;
      $3374 = ((($3373)) + 24|0);
      $3375 = +HEAPF64[$3374>>3];
      $3376 = $23;
      $3377 = ((($3376)) + 8|0);
      $3378 = +HEAPF64[$3377>>3];
      $3379 = $3375 > $3378;
      if ($3379) {
       $3380 = $23;
       $3381 = ((($3380)) + 8|0);
       $3382 = +HEAPF64[$3381>>3];
       $3383 = $23;
       $3384 = ((($3383)) + 24|0);
       HEAPF64[$3384>>3] = $3382;
      }
      break;
     }
     case 169:  {
      $3385 = $6;
      $3386 = ((($3385)) + 12|0);
      $3387 = HEAP32[$3386>>2]|0;
      $3388 = ((($3387)) + 16|0);
      HEAP32[$3386>>2] = $3388;
      $3389 = $6;
      $3390 = HEAP32[$3389>>2]|0;
      $3391 = ((($3390)) + 1|0);
      HEAP32[$3389>>2] = $3391;
      $3392 = $23;
      $3393 = ((($3392)) + 16|0);
      $3394 = +HEAPF64[$3393>>3];
      $3395 = $23;
      $3396 = +HEAPF64[$3395>>3];
      $3397 = $3394 < $3396;
      if ($3397) {
       $3398 = $23;
       $3399 = +HEAPF64[$3398>>3];
       $3400 = $23;
       $3401 = ((($3400)) + 16|0);
       HEAPF64[$3401>>3] = $3399;
      }
      $3402 = $23;
      $3403 = ((($3402)) + 24|0);
      $3404 = +HEAPF64[$3403>>3];
      $3405 = $23;
      $3406 = ((($3405)) + 8|0);
      $3407 = +HEAPF64[$3406>>3];
      $3408 = $3404 < $3407;
      if ($3408) {
       $3409 = $23;
       $3410 = ((($3409)) + 8|0);
       $3411 = +HEAPF64[$3410>>3];
       $3412 = $23;
       $3413 = ((($3412)) + 24|0);
       HEAPF64[$3413>>3] = $3411;
      }
      break;
     }
     default: {
      label = 28;
      break L285;
     }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     $305 = $21;
     $306 = $5;
     $307 = ((($306)) + 20|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = $15;
     $310 = $23;
     $311 = $309;
     $312 = $310;
     $313 = (($311) - ($312))|0;
     $314 = (($313|0) / 4)&-1;
     $315 = $23;
     $316 = $25;
     (FUNCTION_TABLE_iiiiiii[$305 & 127]($308,3,$314,$315,$316,0)|0);
    }
    $3414 = $26;
    $3415 = ($3414|0)!=(0|0);
    do {
     if ($3415) {
      $3416 = $6;
      $3417 = ((($3416)) + 8|0);
      $3418 = HEAP32[$3417>>2]|0;
      $3419 = ((($3418)) + -20|0);
      $56 = $3419;
      $3420 = $25;
      $3421 = $56;
      $3422 = HEAP32[$3421>>2]|0;
      $3423 = ($3420|0)!=($3422|0);
      if ($3423) {
       $3424 = $5;
       $3425 = $6;
       $3426 = HEAP32[$3425>>2]|0;
       $3427 = (_vmOffset_92($3424,$3426)|0);
       $57 = $3427;
       $3428 = $57;
       $3429 = $26;
       $3430 = ((($3429)) + 16|0);
       $3431 = HEAP32[$3430>>2]|0;
       $3432 = ($3428>>>0)<($3431>>>0);
       if (!($3432)) {
        $3433 = $57;
        $3434 = $26;
        $3435 = ((($3434)) + 20|0);
        $3436 = HEAP32[$3435>>2]|0;
        $3437 = ($3433>>>0)>=($3436>>>0);
        if (!($3437)) {
         break;
        }
       }
       $3438 = (_clock()|0);
       $58 = $3438;
       $3439 = $26;
       $3440 = ((($3439)) + 56|0);
       $3441 = $3440;
       $3442 = $3441;
       $3443 = HEAP32[$3442>>2]|0;
       $3444 = (($3441) + 4)|0;
       $3445 = $3444;
       $3446 = HEAP32[$3445>>2]|0;
       $3447 = (_i64Add(($3443|0),($3446|0),1,0)|0);
       $3448 = (getTempRet0() | 0);
       $3449 = $3440;
       $3450 = $3449;
       HEAP32[$3450>>2] = $3447;
       $3451 = (($3449) + 4)|0;
       $3452 = $3451;
       HEAP32[$3452>>2] = $3448;
       $3453 = $58;
       $3454 = $24;
       $3455 = ((($3454)) + 12|0);
       $3456 = HEAP32[$3455>>2]|0;
       $3457 = (($3453) - ($3456))|0;
       $3458 = ($3457|0)<(0);
       $3459 = $3458 << 31 >> 31;
       $3460 = $26;
       $3461 = ((($3460)) + 32|0);
       $3462 = $3461;
       $3463 = $3462;
       $3464 = HEAP32[$3463>>2]|0;
       $3465 = (($3462) + 4)|0;
       $3466 = $3465;
       $3467 = HEAP32[$3466>>2]|0;
       $3468 = (_i64Add(($3464|0),($3467|0),($3457|0),($3459|0))|0);
       $3469 = (getTempRet0() | 0);
       $3470 = $3461;
       $3471 = $3470;
       HEAP32[$3471>>2] = $3468;
       $3472 = (($3470) + 4)|0;
       $3473 = $3472;
       HEAP32[$3473>>2] = $3469;
      }
     }
    } while(0);
   }
   if ((label|0) == 10) {
    $198 = $21;
    $199 = $5;
    $200 = ((($199)) + 20|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $15;
    $203 = $23;
    $204 = $202;
    $205 = $203;
    $206 = (($204) - ($205))|0;
    $207 = (($206|0) / 4)&-1;
    $208 = $23;
    $209 = $25;
    (FUNCTION_TABLE_iiiiiii[$198 & 127]($201,1,$207,$208,$209,0)|0);
    $210 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer1>>2] = 16871;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 1585;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = 17800;
    _printFmt($210,0,17735,$vararg_buffer1);
    __abort_85();
    $4 = 1;
    $6560 = $4;
    STACKTOP = sp;return ($6560|0);
   }
   else if ((label|0) == 13) {
    $217 = $21;
    $218 = $5;
    $219 = ((($218)) + 20|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = $15;
    $222 = $23;
    $223 = $221;
    $224 = $222;
    $225 = (($223) - ($224))|0;
    $226 = (($225|0) / 4)&-1;
    $227 = $23;
    $228 = $25;
    (FUNCTION_TABLE_iiiiiii[$217 & 127]($220,1,$226,$227,$228,0)|0);
    $229 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer6>>2] = 16871;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = 1590;
    $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
    HEAP32[$vararg_ptr10>>2] = 17800;
    _printFmt($229,0,17805,$vararg_buffer6);
    __abort_85();
    $4 = 1;
    $6560 = $4;
    STACKTOP = sp;return ($6560|0);
   }
   else if ((label|0) == 15) {
    $4 = 6;
    $6560 = $4;
    STACKTOP = sp;return ($6560|0);
   }
   else if ((label|0) == 28) {
    $10 = 4;
   }
   else if ((label|0) == 29) {
    $10 = 2;
   }
   else if ((label|0) == 30) {
    $10 = 5;
   }
   else if ((label|0) == 32) {
    $10 = 3;
   }
   else if ((label|0) == 37) {
    $10 = 6;
   }
   else if ((label|0) == 160) {
    // unreachable;
   }
   $277 = $10;
   $278 = ($277|0)!=(0);
   L580: do {
    if ($278) {
     $279 = $21;
     $280 = $5;
     $281 = ((($280)) + 20|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $10;
     $284 = $15;
     $285 = $23;
     $286 = $284;
     $287 = $285;
     $288 = (($286) - ($287))|0;
     $289 = (($288|0) / 4)&-1;
     $290 = $23;
     $291 = $25;
     (FUNCTION_TABLE_iiiiiii[$279 & 127]($282,$283,$289,$290,$291,0)|0);
     while(1) {
      $292 = $6;
      $293 = ((($292)) + 8|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $16;
      $296 = ($294|0)!=($295|0);
      if (!($296)) {
       break L580;
      }
      $297 = $5;
      (_vmTrace($297,0,0,-2)|0);
     }
    }
   } while(0);
   while(1) {
    $298 = $6;
    $299 = ((($298)) + 8|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $16;
    $302 = ($300|0)!=($301|0);
    if (!($302)) {
     break;
    }
    $303 = $5;
    (_vmTrace($303,0,0,-1)|0);
   }
   $304 = $10;
   $4 = $304;
   $6560 = $4;
   STACKTOP = sp;return ($6560|0);
  }
 }
 $116 = $5;
 $117 = $7;
 HEAP32[$vararg_buffer>>2] = $117;
 _printLog($116,-1,0,0,0,17706,$vararg_buffer);
 $4 = 1;
 $6560 = $4;
 STACKTOP = sp;return ($6560|0);
}
function _dbgDummy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $23 = $8;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $6 = 0;
  $109 = $6;
  STACKTOP = sp;return ($109|0);
 }
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $8;
 $28 = (_vmErrorMessage($27)|0);
 $14 = $28;
 $29 = $13;
 $30 = $11;
 $31 = (_vmPointer($29,$30)|0);
 $15 = $31;
 $32 = $13;
 $33 = $11;
 $34 = (_mapDbgStatement($32,$33)|0);
 $16 = $34;
 $17 = 0;
 $18 = 0;
 $35 = $16;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $16;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $17 = $39;
  $40 = $16;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $18 = $42;
 }
 $43 = $13;
 $44 = $11;
 $45 = (_rtLookup($43,$44,0)|0);
 $19 = $45;
 $46 = $11;
 $20 = $46;
 $47 = $19;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $19;
  $50 = ((($49)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $20;
  $53 = (($52) - ($51))|0;
  $20 = $53;
 }
 $54 = $8;
 $55 = ($54|0)==(6);
 if ($55) {
  $56 = $13;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $21 = $58;
  $59 = $21;
  $60 = $15;
  $61 = ((($60)) + 1|0);
  $62 = HEAPU8[$61>>0]|(HEAPU8[$61+1>>0]<<8)|(HEAPU8[$61+2>>0]<<16)|(HEAPU8[$61+3>>0]<<24);
  $63 = $62 << 8;
  $64 = $63 >> 8;
  $65 = (($59) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $22 = $68;
  $69 = $7;
  $70 = HEAP32[$69>>2]|0;
  $71 = $17;
  $72 = $18;
  $73 = $14;
  $74 = $11;
  $75 = $19;
  $76 = $20;
  $77 = $22;
  HEAP32[$vararg_buffer>>2] = $73;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $74;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $75;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $76;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $77;
  _printLog($70,-1,$71,$72,0,17890,$vararg_buffer);
 } else {
  $78 = $7;
  $79 = HEAP32[$78>>2]|0;
  $80 = $17;
  $81 = $18;
  $82 = $14;
  $83 = $11;
  $84 = $19;
  $85 = $20;
  $86 = $15;
  HEAP32[$vararg_buffer5>>2] = $82;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $83;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $84;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $85;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $86;
  _printLog($79,-1,$80,$81,0,17952,$vararg_buffer5);
 }
 $87 = $13;
 $88 = ((($87)) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = $13;
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >>> 10;
  $94 = $93 & 255;
  $95 = ($94|0)>(0);
  if ($95) {
   $96 = $13;
   $97 = ((($96)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $13;
   $100 = ((($99)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $13;
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 >>> 10;
   $105 = $104 & 255;
   _traceCalls($98,$101,1,$105,0);
  }
 }
 $106 = $7;
 $107 = ((($106)) + 52|0);
 $108 = HEAP32[$107>>2]|0;
 $6 = $108;
 $109 = $6;
 STACKTOP = sp;return ($109|0);
}
function _vmTrace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $5;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $9 = $23;
 $24 = (_clock()|0);
 $10 = $24;
 $25 = $5;
 $26 = ((($25)) + 24|0);
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $11 = $28;
 $29 = $5;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $4 = 0;
  $247 = $4;
  STACKTOP = sp;return ($247|0);
 }
 $33 = $8;
 $34 = ($33|0)==(0);
 do {
  if ($34) {
   $35 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 16871;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 1418;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 17882;
   _printFmt($35,0,28431,$vararg_buffer);
   __abort_85();
  } else {
   $36 = $8;
   $37 = ($36|0)<(0);
   $38 = $11;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   if (!($37)) {
    $17 = $40;
    $184 = $11;
    $185 = ((($184)) + 12|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $17;
    $188 = $186;
    $189 = $187;
    $190 = (($188) - ($189))|0;
    $191 = (($190|0) / 20)&-1;
    $192 = ($191|0)<(1);
    if ($192) {
     $4 = 2;
     $247 = $4;
     STACKTOP = sp;return ($247|0);
    }
    $193 = $7;
    $194 = $17;
    HEAP32[$194>>2] = $193;
    $195 = $8;
    $196 = $17;
    $197 = ((($196)) + 4|0);
    HEAP32[$197>>2] = $195;
    $198 = $10;
    $199 = $17;
    $200 = ((($199)) + 8|0);
    HEAP32[$200>>2] = $198;
    $201 = $6;
    $202 = $17;
    $203 = ((($202)) + 16|0);
    HEAP32[$203>>2] = $201;
    $204 = $5;
    $205 = $17;
    $206 = ((($205)) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (_mapDbgFunction($204,$207)|0);
    $18 = $208;
    $209 = $18;
    $210 = ($209|0)!=(0|0);
    if ($210) {
     $211 = $18;
     $212 = ((($211)) + 48|0);
     $213 = $212;
     $214 = $213;
     $215 = HEAP32[$214>>2]|0;
     $216 = (($213) + 4)|0;
     $217 = $216;
     $218 = HEAP32[$217>>2]|0;
     $219 = (_i64Add(($215|0),($218|0),1,0)|0);
     $220 = (getTempRet0() | 0);
     $221 = $212;
     $222 = $221;
     HEAP32[$222>>2] = $219;
     $223 = (($221) + 4)|0;
     $224 = $223;
     HEAP32[$224>>2] = $220;
    }
    $225 = $9;
    $226 = ($225|0)!=(0|0);
    if ($226) {
     $227 = $9;
     $228 = $5;
     $229 = ((($228)) + 20|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $11;
     $232 = ((($231)) + 8|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $11;
     $235 = ((($234)) + 4|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = $233;
     $238 = $236;
     $239 = (($237) - ($238))|0;
     $240 = (($239|0) / 20)&-1;
     $241 = $7;
     $242 = $8;
     (FUNCTION_TABLE_iiiiiii[$227 & 127]($230,0,$240,0,$241,$242)|0);
    }
    $243 = $11;
    $244 = ((($243)) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ((($245)) + 20|0);
    HEAP32[$244>>2] = $246;
    break;
   }
   $12 = $40;
   $13 = 0;
   $41 = $12;
   $42 = $11;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $41;
   $46 = $44;
   $47 = (($45) - ($46))|0;
   $48 = (($47|0) / 20)&-1;
   $49 = ($48|0)<(1);
   if ($49) {
    $4 = 1;
    $247 = $4;
    STACKTOP = sp;return ($247|0);
   }
   $50 = $11;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + -20|0);
   HEAP32[$51>>2] = $53;
   $54 = $11;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $12 = $56;
   while(1) {
    $57 = $12;
    $58 = $11;
    $59 = ((($58)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($57>>>0)<($60>>>0);
    if (!($61)) {
     break;
    }
    $62 = $12;
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $11;
    $66 = ((($65)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($64|0)==($69|0);
    if ($70) {
     label = 11;
     break;
    }
    $71 = $12;
    $72 = ((($71)) + 20|0);
    $12 = $72;
   }
   if ((label|0) == 11) {
    $13 = 1;
   }
   $73 = $11;
   $74 = ((($73)) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $12 = $75;
   $76 = $10;
   $77 = $12;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($76) - ($79))|0;
   $14 = $80;
   $81 = $5;
   $82 = $12;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_mapDbgFunction($81,$84)|0);
   $15 = $85;
   $86 = $5;
   $87 = $12;
   $88 = HEAP32[$87>>2]|0;
   $89 = (_mapDbgFunction($86,$88)|0);
   $16 = $89;
   $90 = $15;
   $91 = ($90|0)!=(0|0);
   if ($91) {
    $92 = $8;
    $93 = ($92|0)==(-1);
    $94 = $93&1;
    $95 = ($94|0)<(0);
    $96 = $95 << 31 >> 31;
    $97 = $15;
    $98 = ((($97)) + 56|0);
    $99 = $98;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (_i64Add(($101|0),($104|0),($94|0),($96|0))|0);
    $106 = (getTempRet0() | 0);
    $107 = $98;
    $108 = $107;
    HEAP32[$108>>2] = $105;
    $109 = (($107) + 4)|0;
    $110 = $109;
    HEAP32[$110>>2] = $106;
    $111 = $13;
    $112 = ($111|0)!=(0);
    if (!($112)) {
     $113 = $14;
     $114 = ($113|0)<(0);
     $115 = $114 << 31 >> 31;
     $116 = $15;
     $117 = ((($116)) + 32|0);
     $118 = $117;
     $119 = $118;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($118) + 4)|0;
     $122 = $121;
     $123 = HEAP32[$122>>2]|0;
     $124 = (_i64Add(($120|0),($123|0),($113|0),($115|0))|0);
     $125 = (getTempRet0() | 0);
     $126 = $117;
     $127 = $126;
     HEAP32[$127>>2] = $124;
     $128 = (($126) + 4)|0;
     $129 = $128;
     HEAP32[$129>>2] = $125;
    }
    $130 = $14;
    $131 = ($130|0)<(0);
    $132 = $131 << 31 >> 31;
    $133 = $15;
    $134 = ((($133)) + 40|0);
    $135 = $134;
    $136 = $135;
    $137 = HEAP32[$136>>2]|0;
    $138 = (($135) + 4)|0;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (_i64Add(($137|0),($140|0),($130|0),($132|0))|0);
    $142 = (getTempRet0() | 0);
    $143 = $134;
    $144 = $143;
    HEAP32[$144>>2] = $141;
    $145 = (($143) + 4)|0;
    $146 = $145;
    HEAP32[$146>>2] = $142;
   }
   $147 = $16;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    $149 = $14;
    $150 = ($149|0)<(0);
    $151 = $150 << 31 >> 31;
    $152 = $16;
    $153 = ((($152)) + 40|0);
    $154 = $153;
    $155 = $154;
    $156 = HEAP32[$155>>2]|0;
    $157 = (($154) + 4)|0;
    $158 = $157;
    $159 = HEAP32[$158>>2]|0;
    $160 = (_i64Subtract(($156|0),($159|0),($149|0),($151|0))|0);
    $161 = (getTempRet0() | 0);
    $162 = $153;
    $163 = $162;
    HEAP32[$163>>2] = $160;
    $164 = (($162) + 4)|0;
    $165 = $164;
    HEAP32[$165>>2] = $161;
   }
   $166 = $9;
   $167 = ($166|0)!=(0|0);
   if ($167) {
    $168 = $9;
    $169 = $5;
    $170 = ((($169)) + 20|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $11;
    $173 = ((($172)) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $11;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $174;
    $179 = $177;
    $180 = (($178) - ($179))|0;
    $181 = (($180|0) / 20)&-1;
    $182 = $7;
    $183 = $8;
    (FUNCTION_TABLE_iiiiiii[$168 & 127]($171,0,$181,0,$182,$183)|0);
   }
  }
 } while(0);
 $4 = 0;
 $247 = $4;
 STACKTOP = sp;return ($247|0);
}
function _vmOffset_92($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _vmFork($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = (($10) + 1)|0;
 $9 = $11;
 while(1) {
  $12 = $9;
  $13 = $6;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $9;
  $17 = (($15) + (($16*28)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  }
  $20 = $9;
  $21 = (($20) + 1)|0;
  $9 = $21;
 }
 $22 = $9;
 $23 = $6;
 $24 = ($22|0)<($23|0);
 if ($24) {
  $25 = $5;
  $26 = $7;
  $27 = (($25) + (($26*28)|0)|0);
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = $5;
  $32 = $9;
  $33 = (($31) + (($32*28)|0)|0);
  $34 = ((($33)) + 20|0);
  HEAP32[$34>>2] = 0;
  $35 = $7;
  $36 = $5;
  $37 = $9;
  $38 = (($36) + (($37*28)|0)|0);
  $39 = ((($38)) + 24|0);
  HEAP32[$39>>2] = $35;
  $40 = $5;
  $41 = $7;
  $42 = (($40) + (($41*28)|0)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = $9;
  $46 = (($44) + (($45*28)|0)|0);
  HEAP32[$46>>2] = $43;
  $47 = $5;
  $48 = $9;
  $49 = (($47) + (($48*28)|0)|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $5;
  $53 = $9;
  $54 = (($52) + (($53*28)|0)|0);
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($51) + ($56<<2)|0);
  $58 = $8;
  $59 = (0 - ($58))|0;
  $60 = (($57) + ($59<<2)|0);
  $61 = $5;
  $62 = $9;
  $63 = (($61) + (($62*28)|0)|0);
  $64 = ((($63)) + 12|0);
  HEAP32[$64>>2] = $60;
  $65 = $5;
  $66 = $9;
  $67 = (($65) + (($66*28)|0)|0);
  $68 = ((($67)) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $5;
  $71 = $7;
  $72 = (($70) + (($71*28)|0)|0);
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $8;
  $76 = $75<<2;
  _memcpy(($69|0),($74|0),($76|0))|0;
  $77 = $5;
  $78 = $7;
  _tracePpu($77,$78,17869);
  $79 = $5;
  $80 = $9;
  _tracePpu($79,$80,17876);
  $81 = $9;
  $4 = $81;
  $82 = $4;
  STACKTOP = sp;return ($82|0);
 } else {
  $4 = 0;
  $82 = $4;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _vmJoin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $5;
 $10 = (($8) + (($9*28)|0)|0);
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $4;
 $14 = $5;
 _tracePpu($13,$14,17864);
 $15 = $7;
 $16 = $5;
 $17 = ($15|0)!=($16|0);
 $18 = $4;
 $19 = $5;
 $20 = (($18) + (($19*28)|0)|0);
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 if ($17) {
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = $4;
   $25 = $5;
   $26 = (($24) + (($25*28)|0)|0);
   HEAP32[$26>>2] = 0;
   $27 = $4;
   $28 = $7;
   $29 = (($27) + (($28*28)|0)|0);
   $30 = ((($29)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[$30>>2] = $32;
   $3 = 1;
   $38 = $3;
   STACKTOP = sp;return ($38|0);
  } else {
   $3 = 0;
   $38 = $3;
   STACKTOP = sp;return ($38|0);
  }
 } else {
  $33 = ($22>>>0)>(0);
  if ($33) {
   $34 = $6;
   $35 = ($34|0)!=(0);
   $36 = $35 ^ 1;
   $37 = $36&1;
   $3 = $37;
   $38 = $3;
   STACKTOP = sp;return ($38|0);
  } else {
   $3 = 1;
   $38 = $3;
   STACKTOP = sp;return ($38|0);
  }
 }
 return (0)|0;
}
function _ovf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _tracePpu($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function _traceCalls($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $10 = $23;
 $24 = $10;
 $25 = ((($24)) + 24|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $11 = $27;
 $28 = $11;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $12 = $30;
 $31 = $11;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $11;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $33;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 20)&-1;
 $13 = $40;
 $15 = 0;
 $41 = $6;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = $10;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $6 = $45;
 }
 $46 = $9;
 $47 = $8;
 $48 = (($47) + ($46))|0;
 $8 = $48;
 $49 = $8;
 $50 = $13;
 $51 = ($49>>>0)>($50>>>0);
 if ($51) {
  $52 = $13;
  $8 = $52;
 }
 $53 = $9;
 $14 = $53;
 while(1) {
  $54 = $14;
  $55 = $8;
  $56 = ($54>>>0)<($55>>>0);
  if (!($56)) {
   break;
  }
  $57 = $12;
  $58 = $13;
  $59 = $14;
  $60 = (($58) - ($59))|0;
  $61 = (($60) - 1)|0;
  $62 = (($57) + (($61*20)|0)|0);
  $16 = $62;
  $63 = $10;
  $64 = $16;
  $65 = HEAP32[$64>>2]|0;
  $66 = (_mapDbgStatement($63,$65)|0);
  $17 = $66;
  $67 = $10;
  $68 = $16;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_rtLookup($67,$70,0)|0);
  $18 = $71;
  $72 = $16;
  $73 = ((($72)) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $19 = $74;
  $20 = 0;
  $21 = 0;
  $75 = $18;
  $76 = ($75|0)==(0|0);
  if ($76) {
   $77 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 16871;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2168;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 18057;
   _printFmt($77,0,18015,$vararg_buffer);
   __abort_85();
  }
  $78 = $17;
  $79 = ($78|0)!=(0|0);
  if ($79) {
   $80 = $17;
   $81 = ((($80)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $20 = $82;
   $83 = $17;
   $84 = ((($83)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $21 = $85;
  }
  $86 = $15;
  $87 = ($86>>>0)>(0);
  if ($87) {
   $88 = $6;
   _printFmt($88,0,25916,$vararg_buffer3);
  }
  $89 = $10;
  $90 = $6;
  $91 = $18;
  $92 = $20;
  $93 = $21;
  $94 = $19;
  $95 = $7;
  _traceArgs($89,$90,$91,$92,$93,$94,$95);
  $96 = $15;
  $97 = (($96) + 1)|0;
  $15 = $97;
  $98 = $14;
  $99 = (($98) + 1)|0;
  $14 = $99;
 }
 $100 = $14;
 $101 = $13;
 $102 = ($100>>>0)<($101>>>0);
 if ($102) {
  $103 = $15;
  $104 = ($103>>>0)>(0);
  if ($104) {
   $105 = $6;
   _printFmt($105,0,25916,$vararg_buffer5);
  }
  $106 = $6;
  $107 = $7;
  $108 = $13;
  $109 = $14;
  $110 = (($108) - ($109))|0;
  HEAP32[$vararg_buffer7>>2] = $107;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $110;
  _printFmt($106,0,18068,$vararg_buffer7);
  $111 = $15;
  $112 = (($111) + 1)|0;
  $15 = $112;
 }
 $113 = $15;
 $114 = ($113>>>0)>(0);
 if (!($114)) {
  STACKTOP = sp;return;
 }
 $115 = $6;
 _printFmt($115,0,25916,$vararg_buffer11);
 STACKTOP = sp;return;
}
function _traceArgs($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = 0;
 $19 = $8;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $7;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $8 = $23;
 }
 $24 = $10;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $10 = 18082;
 }
 $26 = $8;
 $27 = $13;
 $28 = $10;
 $29 = $11;
 $30 = $9;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $28;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $29;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $30;
 _printFmt($26,0,18094,$vararg_buffer);
 $31 = $13;
 $32 = ($31|0)<(0);
 if ($32) {
  $15 = 1;
  $33 = $13;
  $34 = (0 - ($33))|0;
  $13 = $34;
 }
 $35 = $12;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer4>>2] = 16871;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 2094;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 18151;
  _printFmt($37,0,18110,$vararg_buffer4);
  __abort_85();
 }
 $38 = $9;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer9>>2] = 16871;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 2095;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = 18151;
  _printFmt($40,0,18015,$vararg_buffer9);
  __abort_85();
 }
 $41 = $9;
 $42 = ((($41)) + 40|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $16 = 1;
 $45 = $13;
 $46 = ($45|0)>(0);
 $47 = $8;
 if ($46) {
  _printFmt($47,0,21959,$vararg_buffer14);
 } else {
  _printFmt($47,0,25916,$vararg_buffer16);
 }
 $17 = 0;
 $48 = $9;
 $49 = ((($48)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $14 = $52;
 while(1) {
  $53 = $14;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   break;
  }
  $55 = $17;
  $56 = $14;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($55>>>0)<($58>>>0);
  if ($59) {
   $60 = $14;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $17 = $62;
  }
  $63 = $14;
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $14 = $65;
 }
 $66 = $9;
 $67 = ((($66)) + 40|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $14 = $70;
 while(1) {
  $71 = $14;
  $72 = ($71|0)!=(0|0);
  if (!($72)) {
   break;
  }
  $73 = $17;
  $74 = $14;
  $75 = ((($74)) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($73) - ($76))|0;
  $18 = $77;
  $78 = $16;
  $79 = ($78|0)==(0);
  if ($79) {
   $80 = $8;
   _printFmt($80,0,27944,$vararg_buffer18);
  } else {
   $16 = 0;
  }
  $81 = $15;
  $82 = ($81|0)!=(0);
  do {
   if ($82) {
    $83 = $14;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)!=(0|0);
    if ($86) {
     $87 = $14;
     $88 = ((($87)) + 8|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)!=(0);
     if ($90) {
      $91 = $8;
      $92 = $13;
      $93 = $14;
      $94 = ((($93)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $14;
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      HEAP32[$vararg_buffer20>>2] = $92;
      $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
      HEAP32[$vararg_ptr23>>2] = $95;
      $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
      HEAP32[$vararg_ptr24>>2] = $98;
      _printFmt($91,0,18161,$vararg_buffer20);
      break;
     }
    }
    $99 = $8;
    $100 = $13;
    HEAP32[$vararg_buffer25>>2] = $100;
    _printFmt($99,0,27972,$vararg_buffer25);
   }
  } while(0);
  $101 = $14;
  $102 = (_isStatic_91($101)|0);
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer28>>2] = 16871;
   $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
   HEAP32[$vararg_ptr31>>2] = 2129;
   $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
   HEAP32[$vararg_ptr32>>2] = 18151;
   _printFmt($104,0,18171,$vararg_buffer28);
   __abort_85();
  }
  $105 = $9;
  $106 = (_isFunction_93($105)|0);
  $107 = ($106|0)!=(0);
  if ($107) {
   $108 = $18;
   $109 = (($108) + 4)|0;
   $18 = $109;
  }
  $110 = $8;
  $111 = $7;
  $112 = $14;
  $113 = $12;
  $114 = $18;
  $115 = (($113) + ($114)|0);
  $116 = $13;
  $117 = (0 - ($116))|0;
  _printVal($110,0,$111,$112,$115,384,$117);
  $118 = $14;
  $119 = ((($118)) + 24|0);
  $120 = HEAP32[$119>>2]|0;
  $14 = $120;
 }
 $121 = $13;
 $122 = ($121|0)>(0);
 $123 = $8;
 if ($122) {
  _printFmt($123,0,28011,$vararg_buffer33);
  STACKTOP = sp;return;
 } else {
  _printFmt($123,0,25916,$vararg_buffer35);
  STACKTOP = sp;return;
 }
}
function _isFunction_93($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _printVal($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer105 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer111 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0, $vararg_buffer12 = 0, $vararg_buffer120 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0;
 var $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer86 = 0, $vararg_buffer88 = 0;
 var $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer120 = sp + 336|0;
 $vararg_buffer117 = sp + 328|0;
 $vararg_buffer115 = sp + 320|0;
 $vararg_buffer113 = sp + 312|0;
 $vararg_buffer111 = sp + 304|0;
 $vararg_buffer109 = sp + 296|0;
 $vararg_buffer107 = sp + 288|0;
 $vararg_buffer105 = sp + 280|0;
 $vararg_buffer102 = sp + 272|0;
 $vararg_buffer99 = sp + 264|0;
 $vararg_buffer96 = sp + 256|0;
 $vararg_buffer93 = sp + 248|0;
 $vararg_buffer91 = sp + 240|0;
 $vararg_buffer88 = sp + 232|0;
 $vararg_buffer86 = sp + 224|0;
 $vararg_buffer84 = sp + 216|0;
 $vararg_buffer82 = sp + 208|0;
 $vararg_buffer79 = sp + 200|0;
 $vararg_buffer76 = sp + 192|0;
 $vararg_buffer74 = sp + 184|0;
 $vararg_buffer71 = sp + 176|0;
 $vararg_buffer68 = sp + 168|0;
 $vararg_buffer65 = sp + 160|0;
 $vararg_buffer62 = sp + 152|0;
 $vararg_buffer59 = sp + 144|0;
 $vararg_buffer56 = sp + 136|0;
 $vararg_buffer53 = sp + 128|0;
 $vararg_buffer50 = sp + 120|0;
 $vararg_buffer45 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer36 = sp + 80|0;
 $vararg_buffer33 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer27 = sp + 56|0;
 $vararg_buffer24 = sp + 48|0;
 $vararg_buffer22 = sp + 40|0;
 $vararg_buffer19 = sp + 32|0;
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer12 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $30 = $10;
 $31 = (_castOf_94($30)|0);
 $14 = $31;
 $32 = $10;
 $33 = ((($32)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $15 = $34;
 $35 = $11;
 $16 = $35;
 $36 = $10;
 $17 = $36;
 $37 = $13;
 $38 = ($37|0)>(0);
 if ($38) {
  $39 = $7;
  $40 = $8;
  $41 = $13;
  HEAP32[$vararg_buffer>>2] = $41;
  _printFmt($39,$40,27972,$vararg_buffer);
 } else {
  $42 = $13;
  $43 = (0 - ($42))|0;
  $13 = $43;
 }
 $44 = $10;
 $45 = (_isTypename_95($44)|0);
 $46 = ($45|0)!=(0);
 if ($46) {
  $61 = $11;
  $62 = $9;
  $63 = $10;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_vmPointer($62,$65)|0);
  $67 = ($61|0)==($66|0);
  if ($67) {
   $68 = $12;
   $69 = $68 & 1024;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $7;
    $72 = $8;
    $73 = $12;
    $74 = $73 & -1025;
    $75 = $10;
    HEAP32[$vararg_buffer8>>2] = $74;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $75;
    _printFmt($71,$72,18215,$vararg_buffer8);
   }
   $76 = $9;
   $77 = ((($76)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $80;
   $17 = $80;
   $81 = HEAP32[3306]|0;
   $15 = $81;
  }
 } else {
  $47 = $10;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $17 = $49;
  $50 = $15;
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = $17;
   $53 = ((($52)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $15 = $54;
  }
  $55 = $14;
  $56 = ($55|0)==(10);
  if ($56) {
   $57 = $9;
   $58 = $11;
   $59 = HEAP32[$58>>2]|0;
   $60 = (_vmPointer($57,$59)|0);
   $16 = $60;
  }
 }
 $82 = $17;
 $83 = (_castOf_94($82)|0);
 $18 = $83;
 $84 = $10;
 $85 = $17;
 $86 = ($84|0)!=($85|0);
 if ($86) {
  $87 = $7;
  $88 = $8;
  $89 = $12;
  $90 = $89 & -1025;
  $91 = $10;
  HEAP32[$vararg_buffer12>>2] = $90;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $91;
  _printFmt($87,$88,18215,$vararg_buffer12);
 }
 $92 = $12;
 $93 = $92 & 1024;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = $7;
  $96 = $8;
  $97 = $17;
  HEAP32[$vararg_buffer16>>2] = $97;
  _printFmt($95,$96,18222,$vararg_buffer16);
 }
 $98 = $16;
 $99 = ($98|0)==(0|0);
 L23: do {
  if ($99) {
   $100 = $7;
   $101 = $8;
   HEAP32[$vararg_buffer19>>2] = 19730;
   _printFmt($100,$101,18696,$vararg_buffer19);
  } else {
   $102 = $9;
   $103 = $16;
   $104 = (_isValidOffset($102,$103)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $106 = $7;
    $107 = $8;
    _printFmt($106,$107,18227,$vararg_buffer22);
    break;
   }
   $108 = $15;
   $109 = ($108|0)!=(0|0);
   if ($109) {
    $110 = $16;
    $19 = $110;
    $111 = $15;
    $112 = HEAP32[3306]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $7;
     $115 = $8;
     $116 = HEAP32[3306]|0;
     $117 = $19;
     HEAP32[$vararg_buffer24>>2] = $117;
     _printFmt($114,$115,$116,$vararg_buffer24);
     break;
    }
    $118 = $15;
    $119 = HEAP32[3305]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $121 = $7;
     $122 = $8;
     $123 = HEAP8[18704]|0;
     $124 = $123 << 24 >> 24;
     HEAP32[$vararg_buffer27>>2] = $124;
     _printFmt($121,$122,23887,$vararg_buffer27);
     $125 = $7;
     $126 = $8;
     $127 = ($126|0)!=(0|0);
     if ($127) {
      $128 = $8;
      $132 = $128;
     } else {
      $129 = (_escapeStr()|0);
      $132 = $129;
     }
     $130 = HEAP32[3305]|0;
     $131 = $19;
     HEAP32[$vararg_buffer30>>2] = $131;
     _printFmt($125,$132,$130,$vararg_buffer30);
     $133 = $7;
     $134 = $8;
     $135 = HEAP8[18704]|0;
     $136 = $135 << 24 >> 24;
     HEAP32[$vararg_buffer33>>2] = $136;
     _printFmt($133,$134,23887,$vararg_buffer33);
     break;
    }
    $137 = $15;
    $138 = HEAP32[3304]|0;
    $139 = ($137|0)==($138|0);
    if ($139) {
     $140 = $7;
     $141 = $8;
     $142 = HEAP8[18705]|0;
     $143 = $142 << 24 >> 24;
     HEAP32[$vararg_buffer36>>2] = $143;
     _printFmt($140,$141,23887,$vararg_buffer36);
     $144 = $7;
     $145 = $8;
     $146 = ($145|0)!=(0|0);
     if ($146) {
      $147 = $8;
      $153 = $147;
     } else {
      $148 = (_escapeStr()|0);
      $153 = $148;
     }
     $149 = HEAP32[3304]|0;
     $150 = $19;
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     HEAP32[$vararg_buffer39>>2] = $152;
     _printFmt($144,$153,$149,$vararg_buffer39);
     $154 = $7;
     $155 = $8;
     $156 = HEAP8[18705]|0;
     $157 = $156 << 24 >> 24;
     HEAP32[$vararg_buffer42>>2] = $157;
     _printFmt($154,$155,23887,$vararg_buffer42);
     break;
    }
    $158 = $17;
    $159 = ((($158)) + 16|0);
    $160 = HEAP32[$159>>2]|0;
    switch ($160|0) {
    case 1:  {
     $170 = $18;
     $171 = ($170|0)==(4);
     $172 = $7;
     $173 = $8;
     $174 = $15;
     $175 = $19;
     $176 = HEAP8[$175>>0]|0;
     if ($171) {
      $177 = $176&255;
      HEAP32[$vararg_buffer50>>2] = $177;
      _printFmt($172,$173,$174,$vararg_buffer50);
      break L23;
     } else {
      $178 = $176 << 24 >> 24;
      HEAP32[$vararg_buffer53>>2] = $178;
      _printFmt($172,$173,$174,$vararg_buffer53);
      break L23;
     }
     break;
    }
    case 2:  {
     $179 = $18;
     $180 = ($179|0)==(4);
     $181 = $7;
     $182 = $8;
     $183 = $15;
     $184 = $19;
     $185 = HEAP16[$184>>1]|0;
     if ($180) {
      $186 = $185&65535;
      HEAP32[$vararg_buffer56>>2] = $186;
      _printFmt($181,$182,$183,$vararg_buffer56);
      break L23;
     } else {
      $187 = $185 << 16 >> 16;
      HEAP32[$vararg_buffer59>>2] = $187;
      _printFmt($181,$182,$183,$vararg_buffer59);
      break L23;
     }
     break;
    }
    case 4:  {
     $188 = $18;
     $189 = ($188|0)==(7);
     $190 = $7;
     $191 = $8;
     $192 = $15;
     $193 = $19;
     if ($189) {
      $194 = +HEAPF32[$193>>2];
      $195 = $194;
      HEAPF64[$vararg_buffer62>>3] = $195;
      _printFmt($190,$191,$192,$vararg_buffer62);
      break L23;
     } else {
      $196 = HEAP32[$193>>2]|0;
      HEAP32[$vararg_buffer65>>2] = $196;
      _printFmt($190,$191,$192,$vararg_buffer65);
      break L23;
     }
     break;
    }
    case 8:  {
     $197 = $18;
     $198 = ($197|0)==(8);
     $199 = $7;
     $200 = $8;
     $201 = $15;
     $202 = $19;
     if ($198) {
      $203 = +HEAPF64[$202>>3];
      HEAPF64[$vararg_buffer68>>3] = $203;
      _printFmt($199,$200,$201,$vararg_buffer68);
      break L23;
     } else {
      $204 = $202;
      $205 = $204;
      $206 = HEAP32[$205>>2]|0;
      $207 = (($204) + 4)|0;
      $208 = $207;
      $209 = HEAP32[$208>>2]|0;
      $210 = $vararg_buffer71;
      $211 = $210;
      HEAP32[$211>>2] = $206;
      $212 = (($210) + 4)|0;
      $213 = $212;
      HEAP32[$213>>2] = $209;
      _printFmt($199,$200,$201,$vararg_buffer71);
      break L23;
     }
     break;
    }
    default: {
     $161 = $7;
     $162 = $8;
     $163 = $15;
     $164 = $9;
     $165 = $19;
     $166 = (_vmOffset_92($164,$165)|0);
     $167 = $10;
     $168 = ((($167)) + 16|0);
     $169 = HEAP32[$168>>2]|0;
     HEAP32[$vararg_buffer45>>2] = $163;
     $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
     HEAP32[$vararg_ptr48>>2] = $166;
     $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
     HEAP32[$vararg_ptr49>>2] = $169;
     _printFmt($161,$162,18234,$vararg_buffer45);
     break L23;
    }
    }
   }
   $214 = $13;
   $215 = ($214|0)>(25);
   if ($215) {
    $216 = $7;
    $217 = $8;
    _printFmt($216,$217,18253,$vararg_buffer74);
    break;
   }
   $218 = $18;
   $219 = ($218|0)==(11);
   if ($219) {
    $220 = $9;
    $221 = $11;
    $222 = HEAP32[$221>>2]|0;
    $223 = (_vmPointer($220,$222)|0);
    $20 = $223;
    $224 = $9;
    $225 = $11;
    $226 = ((($225)) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (_vmPointer($224,$227)|0);
    $21 = $228;
    $229 = $21;
    $230 = ($229|0)==(0|0);
    $231 = $20;
    $232 = ($231|0)==(0|0);
    $or$cond = $230 | $232;
    $233 = $7;
    $234 = $8;
    if ($or$cond) {
     HEAP32[$vararg_buffer76>>2] = 19730;
     _printFmt($233,$234,18696,$vararg_buffer76);
     break;
    } else {
     $235 = $21;
     HEAP32[$vararg_buffer79>>2] = $235;
     _printFmt($233,$234,18257,$vararg_buffer79);
     $236 = $7;
     $237 = $8;
     $238 = $9;
     $239 = $21;
     $240 = $20;
     $241 = $12;
     $242 = $241 & -1281;
     $243 = $13;
     $244 = (0 - ($243))|0;
     _printVal($236,$237,$238,$239,$240,$242,$244);
     $245 = $7;
     $246 = $8;
     _printFmt($245,$246,39249,$vararg_buffer82);
     break;
    }
   }
   $247 = $18;
   $248 = ($247|0)==(12);
   if (!($248)) {
    $26 = 0;
    $362 = $17;
    $363 = ((($362)) + 36|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = ($364|0)!=(0|0);
    if ($365) {
     $366 = $17;
     $367 = ((($366)) + 36|0);
     $368 = HEAP32[$367>>2]|0;
     $27 = $368;
     while(1) {
      $369 = $27;
      $370 = ($369|0)!=(0|0);
      if (!($370)) {
       break;
      }
      $371 = $27;
      $372 = (_isStatic_91($371)|0);
      $373 = ($372|0)!=(0);
      if (!($373)) {
       $374 = $27;
       $375 = (_isVariable_96($374)|0);
       $376 = ($375|0)!=(0);
       if ($376) {
        $377 = $26;
        $378 = ($377|0)>(0);
        $379 = $7;
        $380 = $8;
        if ($378) {
         _printFmt($379,$380,28123,$vararg_buffer111);
        } else {
         _printFmt($379,$380,23792,$vararg_buffer113);
        }
        $381 = $7;
        $382 = $8;
        _printFmt($381,$382,25916,$vararg_buffer115);
        $383 = $7;
        $384 = $8;
        $385 = $9;
        $386 = $27;
        $387 = $16;
        $388 = $27;
        $389 = ((($388)) + 20|0);
        $390 = HEAP32[$389>>2]|0;
        $391 = (($387) + ($390)|0);
        $392 = $13;
        $393 = (($392) + 1)|0;
        _printVal($383,$384,$385,$386,$391,128,$393);
        $394 = $26;
        $395 = (($394) + 1)|0;
        $26 = $395;
       }
      }
      $396 = $27;
      $397 = ((($396)) + 24|0);
      $398 = HEAP32[$397>>2]|0;
      $27 = $398;
     }
     $399 = $26;
     $400 = ($399|0)>(0);
     if ($400) {
      $401 = $7;
      $402 = $8;
      $403 = $13;
      HEAP32[$vararg_buffer117>>2] = $403;
      _printFmt($401,$402,18280,$vararg_buffer117);
     }
    }
    $404 = $26;
    $405 = ($404|0)==(0);
    if (!($405)) {
     break;
    }
    $406 = $9;
    $407 = $16;
    $408 = (_vmOffset_92($406,$407)|0);
    $28 = $408;
    $409 = $9;
    $410 = $28;
    $411 = (_rtLookup($409,$410,0)|0);
    $29 = $411;
    $412 = $7;
    $413 = $8;
    $414 = $29;
    $415 = $28;
    $416 = $12;
    $417 = $416 | 256;
    $418 = $417 & -1025;
    $419 = $9;
    _printRef($412,$413,$414,$415,$418,$419);
    break;
   }
   $249 = $17;
   $250 = ((($249)) + 36|0);
   $251 = HEAP32[$250>>2]|0;
   $22 = $251;
   $252 = $17;
   $253 = $10;
   $254 = ($252|0)==($253|0);
   $255 = $14;
   $256 = ($255|0)==(9);
   $or$cond3 = $254 | $256;
   do {
    if ($or$cond3) {
     $257 = $11;
     $16 = $257;
    } else {
     $258 = $14;
     $259 = ($258|0)==(12);
     $260 = $14;
     $261 = ($260|0)==(10);
     $or$cond5 = $259 | $261;
     if ($or$cond5) {
      $262 = $9;
      $263 = $11;
      $264 = HEAP32[$263>>2]|0;
      $265 = (_vmPointer($262,$264)|0);
      $16 = $265;
      break;
     }
     $266 = $7;
     $267 = $8;
     _printFmt($266,$267,18263,$vararg_buffer84);
     $268 = $12;
     $269 = $268 & 1024;
     $270 = ($269|0)!=(0);
     if (!($270)) {
      STACKTOP = sp;return;
     }
     $271 = $7;
     $272 = $8;
     _printFmt($271,$272,28011,$vararg_buffer86);
     STACKTOP = sp;return;
    }
   } while(0);
   $273 = $16;
   $274 = ($273|0)==(0|0);
   if ($274) {
    $275 = $7;
    $276 = $8;
    HEAP32[$vararg_buffer88>>2] = 19730;
    _printFmt($275,$276,18696,$vararg_buffer88);
    break;
   }
   $277 = $9;
   $278 = $16;
   $279 = (_isValidOffset($277,$278)|0);
   $280 = ($279|0)!=(0);
   if (!($280)) {
    $281 = $7;
    $282 = $8;
    _printFmt($281,$282,18227,$vararg_buffer91);
    break;
   }
   $283 = $17;
   $284 = ((($283)) + 28|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($285)) + 68|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = HEAP32[3304]|0;
   $289 = ($287|0)==($288|0);
   $290 = $22;
   $291 = ($290|0)==(0|0);
   $or$cond7 = $289 & $291;
   if ($or$cond7) {
    $292 = $7;
    $293 = $8;
    $294 = HEAP8[18704]|0;
    $295 = $294 << 24 >> 24;
    HEAP32[$vararg_buffer93>>2] = $295;
    _printFmt($292,$293,23887,$vararg_buffer93);
    $296 = $7;
    $297 = $8;
    $298 = ($297|0)!=(0|0);
    if ($298) {
     $299 = $8;
     $303 = $299;
    } else {
     $300 = (_escapeStr()|0);
     $303 = $300;
    }
    $301 = HEAP32[3305]|0;
    $302 = $16;
    HEAP32[$vararg_buffer96>>2] = $302;
    _printFmt($296,$303,$301,$vararg_buffer96);
    $304 = $7;
    $305 = $8;
    $306 = HEAP8[18704]|0;
    $307 = $306 << 24 >> 24;
    HEAP32[$vararg_buffer99>>2] = $307;
    _printFmt($304,$305,23887,$vararg_buffer99);
    break;
   }
   $23 = 0;
   $308 = $17;
   $309 = ((($308)) + 28|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ((($310)) + 16|0);
   $312 = HEAP32[$311>>2]|0;
   $24 = $312;
   $313 = $22;
   $314 = ($313|0)!=(0|0);
   if ($314) {
    $315 = $22;
    $316 = (_isStatic_91($315)|0);
    $317 = ($316|0)!=(0);
    if ($317) {
     $318 = $17;
     $319 = ((($318)) + 16|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $24;
     $322 = (($320>>>0) / ($321>>>0))&-1;
     $23 = $322;
    } else {
     label = 73;
    }
   } else {
    label = 73;
   }
   if ((label|0) == 73) {
    $323 = $22;
    $324 = ($323|0)!=(0|0);
    if ($324) {
     $325 = $16;
     $326 = $11;
     $327 = ($325|0)!=($326|0);
     if ($327) {
      $328 = $11;
      $329 = ((($328)) + 4|0);
      $330 = HEAP32[$329>>2]|0;
      $23 = $330;
     }
    }
   }
   $331 = $7;
   $332 = $8;
   $333 = $23;
   HEAP32[$vararg_buffer102>>2] = $333;
   _printFmt($331,$332,18273,$vararg_buffer102);
   $25 = 0;
   while(1) {
    $334 = $25;
    $335 = $23;
    $336 = ($334>>>0)<($335>>>0);
    if (!($336)) {
     break;
    }
    $337 = $25;
    $338 = ($337>>>0)>(0);
    if ($338) {
     $339 = $7;
     $340 = $8;
     _printFmt($339,$340,27944,$vararg_buffer105);
    }
    $341 = $25;
    $342 = ($341>>>0)>=(25);
    $343 = $7;
    $344 = $8;
    if ($342) {
     label = 81;
     break;
    }
    $345 = $9;
    $346 = $17;
    $347 = ((($346)) + 28|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = $16;
    $350 = $25;
    $351 = $24;
    $352 = Math_imul($350, $351)|0;
    $353 = (($349) + ($352)|0);
    $354 = $12;
    $355 = $354 & -1281;
    $356 = $13;
    $357 = (0 - ($356))|0;
    _printVal($343,$344,$345,$348,$353,$355,$357);
    $358 = $25;
    $359 = (($358) + 1)|0;
    $25 = $359;
   }
   if ((label|0) == 81) {
    _printFmt($343,$344,18253,$vararg_buffer107);
   }
   $360 = $7;
   $361 = $8;
   _printFmt($360,$361,23838,$vararg_buffer109);
  }
 } while(0);
 $420 = $12;
 $421 = $420 & 1024;
 $422 = ($421|0)!=(0);
 if (!($422)) {
  STACKTOP = sp;return;
 }
 $423 = $7;
 $424 = $8;
 _printFmt($423,$424,28011,$vararg_buffer120);
 STACKTOP = sp;return;
}
function _castOf_94($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _isTypename_95($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isValidOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = $3;
 $7 = ((($6)) + 144|0);
 $8 = $3;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ($5>>>0)>($11>>>0);
 do {
  if ($12) {
   $2 = 0;
  } else {
   $13 = $4;
   $14 = $3;
   $15 = ((($14)) + 144|0);
   $16 = ($13>>>0)<($15>>>0);
   if ($16) {
    $2 = 0;
    break;
   } else {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _isVariable_96($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(48);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _printRef($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $11;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $9;
  $16 = $11;
  $17 = ((($16)) + 140|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15>>>0)>=($18>>>0);
  if ($19) {
   $20 = $6;
   $21 = $7;
   $22 = $9;
   HEAP32[$vararg_buffer>>2] = $22;
   _printFmt($20,$21,18285,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 $23 = $8;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $60 = $10;
  $61 = $60 & 96;
  $62 = ($61|0)!=(0);
  $63 = $6;
  $64 = $7;
  $65 = $9;
  if ($62) {
   HEAP32[$vararg_buffer19>>2] = $65;
   _printFmt($63,$64,18335,$vararg_buffer19);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer22>>2] = $65;
   _printFmt($63,$64,18343,$vararg_buffer22);
   STACKTOP = sp;return;
  }
 }
 $25 = $9;
 $26 = $8;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($25) - ($28))|0;
 $12 = $29;
 $30 = $6;
 $31 = $7;
 $32 = $10;
 $33 = $8;
 HEAP32[$vararg_buffer1>>2] = $32;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $33;
 _printFmt($30,$31,18299,$vararg_buffer1);
 $34 = $10;
 $35 = $34 & 32;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $10;
  $38 = $37 & 64;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $6;
   $41 = $7;
   $42 = $12;
   $43 = $9;
   HEAP32[$vararg_buffer5>>2] = $42;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $43;
   _printFmt($40,$41,18306,$vararg_buffer5);
   STACKTOP = sp;return;
  }
 }
 $44 = $10;
 $45 = $44 & 32;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $6;
  $48 = $7;
  $49 = $12;
  HEAP32[$vararg_buffer9>>2] = $49;
  _printFmt($47,$48,18318,$vararg_buffer9);
  STACKTOP = sp;return;
 }
 $50 = $10;
 $51 = $50 & 64;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $6;
  $54 = $7;
  $55 = $9;
  HEAP32[$vararg_buffer12>>2] = $55;
  _printFmt($53,$54,18324,$vararg_buffer12);
  STACKTOP = sp;return;
 }
 $56 = $12;
 $57 = ($56|0)!=(0);
 $58 = $6;
 $59 = $7;
 if ($57) {
  _printFmt($58,$59,18331,$vararg_buffer15);
  STACKTOP = sp;return;
 } else {
  _printFmt($58,$59,21815,$vararg_buffer17);
  STACKTOP = sp;return;
 }
}
function _execute($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = $5;
 $13 = ((($12)) + 24|0);
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $5;
 $16 = ((($15)) + 144|0);
 $17 = $5;
 $18 = ((($17)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + ($19)|0);
 $21 = $5;
 $22 = ((($21)) + 136|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 136|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + -28|0);
 HEAP32[$24>>2] = $26;
 $27 = $5;
 $28 = ((($27)) + 136|0);
 $29 = HEAP32[$28>>2]|0;
 $9 = $29;
 $30 = $5;
 $31 = ((($30)) + 24|0);
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $29;
 $33 = $5;
 $34 = ((($33)) + 24|0);
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $5;
  $39 = ((($38)) + 140|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40>>>0) / 4)&-1;
  $42 = $5;
  $43 = ((($42)) + 24|0);
  $44 = ((($43)) + 32|0);
  HEAP32[$44>>2] = $41;
 }
 $45 = $5;
 $46 = ((($45)) + 24|0);
 $47 = ((($46)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $5;
 $50 = ((($49)) + 136|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (0 - ($48))|0;
 $53 = (($51) + ($52)|0);
 HEAP32[$50>>2] = $53;
 $54 = $9;
 $55 = ((($54)) + 20|0);
 HEAP32[$55>>2] = 0;
 $56 = $9;
 $57 = ((($56)) + 24|0);
 HEAP32[$57>>2] = 0;
 $58 = $5;
 $59 = ((($58)) + 24|0);
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $9;
 $63 = ((($62)) + 16|0);
 HEAP32[$63>>2] = $61;
 $64 = $5;
 $65 = ((($64)) + 136|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $9;
 $68 = ((($67)) + 4|0);
 HEAP32[$68>>2] = $66;
 $69 = $5;
 $70 = ((($69)) + 136|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $9;
 $73 = ((($72)) + 8|0);
 HEAP32[$73>>2] = $71;
 $74 = $5;
 $75 = ((($74)) + 136|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = ((($77)) + 24|0);
 $79 = ((($78)) + 32|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($76) + ($80)|0);
 $82 = $9;
 $83 = ((($82)) + 12|0);
 HEAP32[$83>>2] = $81;
 $84 = $5;
 $85 = ((($84)) + 144|0);
 $86 = $5;
 $87 = ((($86)) + 24|0);
 $88 = ((($87)) + 12|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($85) + ($89)|0);
 $91 = $9;
 HEAP32[$91>>2] = $90;
 $92 = $5;
 $93 = ((($92)) + 132|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $5;
 $96 = ((($95)) + 136|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($94>>>0)>($97>>>0);
 if ($98) {
  $99 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 16871;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1789;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 18399;
  _printFmt($99,0,18347,$vararg_buffer);
  __abort_85();
  $4 = 1;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $100 = $9;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $9;
 $104 = ((($103)) + 12|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ($102>>>0)>($105>>>0);
 if ($106) {
  $107 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer3>>2] = 16871;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 1793;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 18399;
  _printFmt($107,0,18407,$vararg_buffer3);
  __abort_85();
  $4 = 1;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 } else {
  $108 = $5;
  $109 = $9;
  $110 = $5;
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $8;
  $114 = (_exec($108,$109,$112,$113)|0);
  $4 = $114;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 return (0)|0;
}
function _isChecked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 24|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $4 = $15;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $4;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 20)&-1;
 $6 = $28;
 $7 = 0;
 while(1) {
  $29 = $7;
  $30 = $6;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   label = 6;
   break;
  }
  $32 = $5;
  $33 = $6;
  $34 = $7;
  $35 = (($33) - ($34))|0;
  $36 = (($35) - 1)|0;
  $37 = (($32) + (($36*20)|0)|0);
  $8 = $37;
  $38 = $3;
  $39 = $8;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_rtLookup($38,$41,0)|0);
  $9 = $42;
  $43 = $9;
  $44 = $2;
  $45 = ((($44)) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)==($46|0);
  if ($47) {
   label = 4;
   break;
  }
  $48 = $7;
  $49 = (($48) + 1)|0;
  $7 = $49;
 }
 if ((label|0) == 4) {
  $1 = 1;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 6) {
  $1 = 0;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _printOpc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $9 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $10 = $8;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $4;
 $14 = $7;
 $15 = $14&255;
 HEAP8[$9>>0] = $15;
 $16 = $8;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($9)) + 1|0);
 $23 = $22;
 $24 = $23;
 HEAP8[$24>>0]=$18&255;HEAP8[$24+1>>0]=($18>>8)&255;HEAP8[$24+2>>0]=($18>>16)&255;HEAP8[$24+3>>0]=$18>>24;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP8[$26>>0]=$21&255;HEAP8[$26+1>>0]=($21>>8)&255;HEAP8[$26+2>>0]=($21>>16)&255;HEAP8[$26+3>>0]=$21>>24;
 $27 = $5;
 $28 = $6;
 _printAsm($27,$28,0,$9,0);
 STACKTOP = sp;return;
}
function _printAsm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer60 = 0, $vararg_buffer64 = 0, $vararg_buffer68 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_ptr1 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr71 = 0;
 var $vararg_ptr77 = 0, $vararg_ptr96 = 0, $vararg_ptr97 = 0, $vararg_ptr98 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer93 = sp + 248|0;
 $vararg_buffer90 = sp + 240|0;
 $vararg_buffer87 = sp + 232|0;
 $vararg_buffer84 = sp + 224|0;
 $vararg_buffer81 = sp + 216|0;
 $vararg_buffer78 = sp + 208|0;
 $vararg_buffer74 = sp + 200|0;
 $vararg_buffer72 = sp + 192|0;
 $vararg_buffer68 = sp + 184|0;
 $vararg_buffer64 = sp + 176|0;
 $vararg_buffer60 = sp + 168|0;
 $vararg_buffer56 = sp + 160|0;
 $vararg_buffer53 = sp + 152|0;
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer42 = sp + 120|0;
 $vararg_buffer39 = sp + 112|0;
 $vararg_buffer36 = sp + 104|0;
 $vararg_buffer33 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $25 = $8;
 $10 = $25;
 $26 = $9;
 $27 = $26 & 15;
 $12 = $27;
 $28 = $8;
 $29 = $28;
 $13 = $29;
 $14 = 0;
 $30 = $7;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $7;
  $33 = $8;
  $34 = (_vmOffset_92($32,$33)|0);
  $13 = $34;
  $35 = $7;
  $36 = $13;
  $37 = (_rtLookup($35,$36,0)|0);
  $14 = $37;
 }
 $38 = $9;
 $39 = $38 & 16;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $5;
  $42 = $6;
  $43 = $14;
  $44 = $13;
  $45 = $9;
  $46 = $7;
  _printRef($41,$42,$43,$44,$45,$46);
  $47 = $14;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $54 = 0;
  } else {
   $49 = $13;
   $50 = $14;
   $51 = ((($50)) + 20|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($49) - ($52))|0;
   $54 = $53;
  }
  $15 = $54;
  $16 = 1;
  $17 = 0;
  $55 = $14;
  $56 = ($55|0)!=(0|0);
  do {
   if ($56) {
    $57 = $9;
    $58 = $57 & 96;
    $59 = ($58|0)!=(0);
    if (!($59)) {
     $60 = $15;
     $61 = ($60|0)!=(0);
     $62 = $61 ^ 1;
     $63 = $62&1;
     $64 = $63<<1;
     $17 = $64;
     $15 = 0;
     break;
    }
    $65 = $9;
    $66 = $65 & 32;
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = $15;
     $69 = ($68|0)!=(0);
     $70 = $69 ^ 1;
     $71 = $70&1;
     $72 = (5 + ($71))|0;
     $17 = $72;
     break;
    } else {
     $17 = 0;
     $15 = 0;
     break;
    }
   }
  } while(0);
  while(1) {
   $73 = $15;
   $74 = ($73>>>0)>(0);
   if (!($74)) {
    break;
   }
   $75 = $15;
   $76 = (($75>>>0) / 10)&-1;
   $15 = $76;
   $77 = $17;
   $78 = (($77) - 1)|0;
   $17 = $78;
  }
  $79 = $17;
  $80 = ($79|0)<(0);
  if ($80) {
   $17 = 0;
  }
  $81 = $5;
  $82 = $6;
  $83 = $17;
  $84 = $16;
  HEAP32[$vararg_buffer>>2] = $83;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $84;
  _printFmt($81,$82,18463,$vararg_buffer);
 }
 $85 = $10;
 $86 = ($85|0)==(0|0);
 if ($86) {
  $87 = $5;
  $88 = $6;
  HEAP32[$vararg_buffer2>>2] = 19730;
  _printFmt($87,$88,18696,$vararg_buffer2);
  STACKTOP = sp;return;
 }
 $89 = $12;
 $90 = ($89>>>0)>(1);
 if ($90) {
  $91 = $12;
  $92 = $10;
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (16 + (($94*20)|0)|0);
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($91>>>0)<($97>>>0);
  if ($98) {
   $11 = 0;
   while(1) {
    $99 = $11;
    $100 = $12;
    $101 = (($100) - 2)|0;
    $102 = ($99>>>0)<($101>>>0);
    $103 = $11;
    $104 = $10;
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = (16 + (($106*20)|0)|0);
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($103>>>0)<($109>>>0);
    if (!($102)) {
     break;
    }
    $111 = $5;
    $112 = $6;
    if ($110) {
     $113 = $8;
     $114 = $11;
     $115 = (($113) + ($114)|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     HEAP32[$vararg_buffer5>>2] = $117;
     _printFmt($111,$112,18471,$vararg_buffer5);
    } else {
     _printFmt($111,$112,18477,$vararg_buffer8);
    }
    $118 = $11;
    $119 = (($118) + 1)|0;
    $11 = $119;
   }
   if ($110) {
    $120 = $5;
    $121 = $6;
    $122 = $8;
    $123 = $11;
    $124 = (($122) + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    HEAP32[$vararg_buffer10>>2] = $126;
    _printFmt($120,$121,18481,$vararg_buffer10);
   }
  } else {
   label = 30;
  }
 } else {
  label = 30;
 }
 L42: do {
  if ((label|0) == 30) {
   $11 = 0;
   while(1) {
    $127 = $11;
    $128 = $12;
    $129 = ($127>>>0)<($128>>>0);
    if (!($129)) {
     break L42;
    }
    $130 = $11;
    $131 = $10;
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = (16 + (($133*20)|0)|0);
    $135 = ((($134)) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($130>>>0)<($136>>>0);
    $138 = $5;
    $139 = $6;
    if ($137) {
     $140 = $8;
     $141 = $11;
     $142 = (($140) + ($141)|0);
     $143 = HEAP8[$142>>0]|0;
     $144 = $143&255;
     HEAP32[$vararg_buffer13>>2] = $144;
     _printFmt($138,$139,18471,$vararg_buffer13);
    } else {
     _printFmt($138,$139,18477,$vararg_buffer16);
    }
    $145 = $11;
    $146 = (($145) + 1)|0;
    $11 = $146;
   }
  }
 } while(0);
 $147 = $10;
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = (16 + (($149*20)|0)|0);
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)!=(0|0);
 $154 = $5;
 $155 = $6;
 $156 = $10;
 $157 = HEAP8[$156>>0]|0;
 $158 = $157&255;
 if ($153) {
  $159 = (16 + (($158*20)|0)|0);
  $160 = ((($159)) + 16|0);
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$vararg_buffer18>>2] = $161;
  _printFmt($154,$155,18696,$vararg_buffer18);
 } else {
  HEAP32[$vararg_buffer21>>2] = $158;
  _printFmt($154,$155,18490,$vararg_buffer21);
 }
 $162 = $10;
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 do {
  switch ($164|0) {
  case 23: case 22: case 21: case 20: case 19: case 18:  {
   $165 = $5;
   $166 = $6;
   $167 = $10;
   $168 = ((($167)) + 1|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   HEAP32[$vararg_buffer24>>2] = $170;
   _printFmt($165,$166,18500,$vararg_buffer24);
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   $171 = $5;
   $172 = $6;
   $173 = $10;
   $174 = ((($173)) + 1|0);
   $175 = HEAPU8[$174>>0]|(HEAPU8[$174+1>>0]<<8)|(HEAPU8[$174+2>>0]<<16)|(HEAPU8[$174+3>>0]<<24);
   HEAP32[$vararg_buffer27>>2] = $175;
   _printFmt($171,$172,18508,$vararg_buffer27);
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $176 = $5;
   $177 = $6;
   $178 = $10;
   $179 = ((($178)) + 1|0);
   $180 = $179;
   $181 = $180;
   $182 = HEAPU8[$181>>0]|(HEAPU8[$181+1>>0]<<8)|(HEAPU8[$181+2>>0]<<16)|(HEAPU8[$181+3>>0]<<24);
   $183 = (($180) + 4)|0;
   $184 = $183;
   $185 = HEAPU8[$184>>0]|(HEAPU8[$184+1>>0]<<8)|(HEAPU8[$184+2>>0]<<16)|(HEAPU8[$184+3>>0]<<24);
   $186 = $vararg_buffer30;
   $187 = $186;
   HEAP32[$187>>2] = $182;
   $188 = (($186) + 4)|0;
   $189 = $188;
   HEAP32[$189>>2] = $185;
   _printFmt($176,$177,18512,$vararg_buffer30);
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $190 = $5;
   $191 = $6;
   $192 = $10;
   $193 = ((($192)) + 1|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$193>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$193+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$193+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$193+3>>0];$194 = +HEAPF32[tempDoublePtr>>2];
   $195 = $194;
   HEAPF64[$vararg_buffer33>>3] = $195;
   _printFmt($190,$191,18516,$vararg_buffer33);
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $196 = $5;
   $197 = $6;
   $198 = $10;
   $199 = ((($198)) + 1|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$199>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$199+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$199+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$199+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$199+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$199+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$199+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$199+7>>0];$200 = +HEAPF64[tempDoublePtr>>3];
   HEAPF64[$vararg_buffer36>>3] = $200;
   _printFmt($196,$197,18520,$vararg_buffer36);
   STACKTOP = sp;return;
   break;
  }
  case 17: case 16: case 11:  {
   $201 = $5;
   $202 = $6;
   $203 = $10;
   $204 = ((($203)) + 1|0);
   $205 = HEAPU8[$204>>0]|(HEAPU8[$204+1>>0]<<8)|(HEAPU8[$204+2>>0]<<16)|(HEAPU8[$204+3>>0]<<24);
   $206 = $205 << 8;
   $207 = $206 >> 8;
   HEAP32[$vararg_buffer39>>2] = $207;
   _printFmt($201,$202,18524,$vararg_buffer39);
   STACKTOP = sp;return;
   break;
  }
  case 12: case 47:  {
   $208 = $5;
   $209 = $6;
   $210 = $10;
   $211 = ((($210)) + 1|0);
   $212 = HEAPU8[$211>>0]|(HEAPU8[$211+1>>0]<<8)|(HEAPU8[$211+2>>0]<<16)|(HEAPU8[$211+3>>0]<<24);
   $213 = $212 << 8;
   $214 = $213 >> 8;
   HEAP32[$vararg_buffer42>>2] = $214;
   _printFmt($208,$209,18508,$vararg_buffer42);
   STACKTOP = sp;return;
   break;
  }
  case 7: case 6: case 5: case 4:  {
   $215 = $5;
   $216 = $6;
   _printFmt($215,$216,23843,$vararg_buffer45);
   $217 = $10;
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = ($219|0)==(7);
   if ($220) {
    $221 = $5;
    $222 = $6;
    $223 = $10;
    $224 = ((($223)) + 1|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    HEAP32[$vararg_buffer47>>2] = $226;
    _printFmt($221,$222,18530,$vararg_buffer47);
    $227 = $10;
    $228 = ((($227)) + 1|0);
    $229 = ((($228)) + 1|0);
    $230 = HEAPU8[$229>>0]|(HEAPU8[$229+1>>0]<<8);
    $231 = $230&65535;
    $11 = $231;
   } else {
    $232 = $10;
    $233 = ((($232)) + 1|0);
    $234 = HEAPU8[$233>>0]|(HEAPU8[$233+1>>0]<<8)|(HEAPU8[$233+2>>0]<<16)|(HEAPU8[$233+3>>0]<<24);
    $235 = $234 << 8;
    $236 = $235 >> 8;
    $11 = $236;
   }
   $237 = $9;
   $238 = $237 & 96;
   $239 = ($238|0)!=(0);
   $240 = $5;
   $241 = $6;
   if ($239) {
    $242 = $14;
    $243 = $13;
    $244 = $11;
    $245 = (($243) + ($244))|0;
    $246 = $9;
    $247 = $7;
    _printRef($240,$241,$242,$245,$246,$247);
    STACKTOP = sp;return;
   } else {
    $248 = $11;
    HEAP32[$vararg_buffer50>>2] = $248;
    _printFmt($240,$241,18534,$vararg_buffer50);
    STACKTOP = sp;return;
   }
   break;
  }
  case 8:  {
   $249 = $5;
   $250 = $6;
   $251 = $10;
   $252 = ((($251)) + 1|0);
   $253 = HEAP8[$252>>0]|0;
   $254 = $253&255;
   HEAP32[$vararg_buffer53>>2] = $254;
   _printFmt($249,$250,18508,$vararg_buffer53);
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   $255 = $10;
   $256 = ((($255)) + 1|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&255;
   $259 = $258 & 192;
   $260 = (($259) - 0)|0;
   $261 = $260 >>> 6;
   $262 = $260 << 26;
   $263 = $261 | $262;
   switch ($263|0) {
   case 0:  {
    $264 = $5;
    $265 = $6;
    $266 = $10;
    $267 = ((($266)) + 1|0);
    $268 = HEAP8[$267>>0]|0;
    $269 = $268&255;
    $270 = $269 & 63;
    $271 = 1 << $270;
    $272 = (($271) - 1)|0;
    HEAP32[$vararg_buffer56>>2] = 19535;
    $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
    HEAP32[$vararg_ptr59>>2] = $272;
    _printFmt($264,$265,18538,$vararg_buffer56);
    STACKTOP = sp;return;
    break;
   }
   case 1:  {
    $273 = $5;
    $274 = $6;
    $275 = $10;
    $276 = ((($275)) + 1|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $277&255;
    $279 = $278 & 63;
    HEAP32[$vararg_buffer60>>2] = 19546;
    $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
    HEAP32[$vararg_ptr63>>2] = $279;
    _printFmt($273,$274,18538,$vararg_buffer60);
    STACKTOP = sp;return;
    break;
   }
   case 2:  {
    $280 = $5;
    $281 = $6;
    $282 = $10;
    $283 = ((($282)) + 1|0);
    $284 = HEAP8[$283>>0]|0;
    $285 = $284&255;
    $286 = $285 & 63;
    HEAP32[$vararg_buffer64>>2] = 19550;
    $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
    HEAP32[$vararg_ptr67>>2] = $286;
    _printFmt($280,$281,18538,$vararg_buffer64);
    STACKTOP = sp;return;
    break;
   }
   case 3:  {
    $287 = $5;
    $288 = $6;
    $289 = $10;
    $290 = ((($289)) + 1|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $291&255;
    $293 = $292 & 63;
    HEAP32[$vararg_buffer68>>2] = 18548;
    $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
    HEAP32[$vararg_ptr71>>2] = $293;
    _printFmt($287,$288,18538,$vararg_buffer68);
    STACKTOP = sp;return;
    break;
   }
   default: {
    // unreachable;
   }
   }
   break;
  }
  case 31: case 46: case 43: case 45: case 42:  {
   $294 = $5;
   $295 = $6;
   _printFmt($294,$295,23843,$vararg_buffer72);
   $296 = $10;
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&255;
   $299 = ($298|0)==(31);
   $300 = $10;
   $301 = ((($300)) + 1|0);
   if ($299) {
    $302 = HEAPU8[$301>>0]|(HEAPU8[$301+1>>0]<<8)|(HEAPU8[$301+2>>0]<<16)|(HEAPU8[$301+3>>0]<<24);
    $13 = $302;
   } else {
    $303 = HEAPU8[$301>>0]|(HEAPU8[$301+1>>0]<<8)|(HEAPU8[$301+2>>0]<<16)|(HEAPU8[$301+3>>0]<<24);
    $304 = $303 << 8;
    $305 = $304 >> 8;
    $13 = $305;
   }
   $306 = $5;
   $307 = $6;
   $308 = $13;
   $309 = $9;
   $310 = $7;
   _printRef($306,$307,0,$308,$309,$310);
   $311 = $7;
   $312 = ($311|0)!=(0|0);
   if (!($312)) {
    STACKTOP = sp;return;
   }
   $313 = $7;
   $314 = $13;
   $315 = (_rtLookup($313,$314,0)|0);
   $14 = $315;
   $316 = $14;
   $317 = ($316|0)!=(0|0);
   if ($317) {
    $318 = $5;
    $319 = $6;
    $320 = $14;
    $321 = $13;
    $322 = $14;
    $323 = ((($322)) + 20|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (($321) - ($324))|0;
    HEAP32[$vararg_buffer74>>2] = $320;
    $vararg_ptr77 = ((($vararg_buffer74)) + 4|0);
    HEAP32[$vararg_ptr77>>2] = $325;
    _printFmt($318,$319,18552,$vararg_buffer74);
    STACKTOP = sp;return;
   }
   $326 = $7;
   $327 = ((($326)) + 16|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = ($328|0)!=(0|0);
   if (!($329)) {
    STACKTOP = sp;return;
   }
   $330 = $7;
   $331 = $13;
   $332 = (_vmPointer($330,$331)|0);
   $18 = $332;
   $11 = 0;
   while(1) {
    $333 = $11;
    $334 = ($333>>>0)<(512);
    if (!($334)) {
     break;
    }
    $335 = $7;
    $336 = ((($335)) + 16|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ((($337)) + 28|0);
    $339 = $11;
    $340 = (($338) + ($339<<2)|0);
    $341 = HEAP32[$340>>2]|0;
    $19 = $341;
    while(1) {
     $342 = $19;
     $343 = ($342|0)!=(0|0);
     if (!($343)) {
      break;
     }
     $344 = $19;
     $345 = ((($344)) + 4|0);
     $346 = HEAP32[$345>>2]|0;
     $20 = $346;
     $347 = $18;
     $348 = $20;
     $349 = ($347>>>0)>=($348>>>0);
     if ($349) {
      $350 = $18;
      $351 = $20;
      $352 = $20;
      $353 = (_strlen($352)|0);
      $354 = (($351) + ($353)|0);
      $355 = ($350>>>0)<($354>>>0);
      if ($355) {
       label = 73;
       break;
      }
     }
     $371 = $19;
     $372 = HEAP32[$371>>2]|0;
     $19 = $372;
    }
    if ((label|0) == 73) {
     label = 0;
     $356 = $5;
     $357 = $6;
     $358 = HEAP8[18704]|0;
     $359 = $358 << 24 >> 24;
     HEAP32[$vararg_buffer78>>2] = $359;
     _printFmt($356,$357,18562,$vararg_buffer78);
     $360 = $5;
     $361 = $6;
     $362 = ($361|0)!=(0|0);
     if ($362) {
      $363 = $6;
      $366 = $363;
     } else {
      $364 = (_escapeStr()|0);
      $366 = $364;
     }
     $365 = $18;
     HEAP32[$vararg_buffer81>>2] = $365;
     _printFmt($360,$366,18696,$vararg_buffer81);
     $367 = $5;
     $368 = $6;
     $369 = HEAP8[18704]|0;
     $370 = $369 << 24 >> 24;
     HEAP32[$vararg_buffer84>>2] = $370;
     _printFmt($367,$368,23887,$vararg_buffer84);
     $11 = 512;
    }
    $373 = $11;
    $374 = (($373) + 1)|0;
    $11 = $374;
   }
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $375 = $10;
   $376 = ((($375)) + 1|0);
   $377 = HEAPU8[$376>>0]|(HEAPU8[$376+1>>0]<<8)|(HEAPU8[$376+2>>0]<<16)|(HEAPU8[$376+3>>0]<<24);
   $378 = $377 << 8;
   $379 = $378 >> 8;
   $13 = $379;
   $380 = $5;
   $381 = $6;
   $382 = $13;
   HEAP32[$vararg_buffer87>>2] = $382;
   _printFmt($380,$381,18567,$vararg_buffer87);
   $383 = $7;
   $384 = ($383|0)!=(0|0);
   if (!($384)) {
    STACKTOP = sp;return;
   }
   $14 = 0;
   $385 = $7;
   $386 = ((($385)) + 24|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = ($387|0)!=(0|0);
   if ($388) {
    $389 = $7;
    $390 = ((($389)) + 24|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = $13;
    $393 = (($391) + ($392<<2)|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ((($394)) + 8|0);
    $396 = HEAP32[$395>>2]|0;
    $14 = $396;
   }
   $397 = $14;
   $398 = ($397|0)!=(0|0);
   if (!($398)) {
    STACKTOP = sp;return;
   }
   $399 = $5;
   $400 = $6;
   $401 = $14;
   HEAP32[$vararg_buffer90>>2] = $401;
   _printFmt($399,$400,18572,$vararg_buffer90);
   STACKTOP = sp;return;
   break;
  }
  case 170:  {
   $402 = $10;
   $403 = ((($402)) + 1|0);
   $404 = HEAP8[$403>>0]|0;
   $405 = $404&255;
   $406 = $405 >> 0;
   $407 = $406 & 3;
   $408 = (19631 + ($407)|0);
   $409 = HEAP8[$408>>0]|0;
   $21 = $409;
   $410 = $10;
   $411 = ((($410)) + 1|0);
   $412 = HEAP8[$411>>0]|0;
   $413 = $412&255;
   $414 = $413 >> 2;
   $415 = $414 & 3;
   $416 = (19631 + ($415)|0);
   $417 = HEAP8[$416>>0]|0;
   $22 = $417;
   $418 = $10;
   $419 = ((($418)) + 1|0);
   $420 = HEAP8[$419>>0]|0;
   $421 = $420&255;
   $422 = $421 >> 4;
   $423 = $422 & 3;
   $424 = (19631 + ($423)|0);
   $425 = HEAP8[$424>>0]|0;
   $23 = $425;
   $426 = $10;
   $427 = ((($426)) + 1|0);
   $428 = HEAP8[$427>>0]|0;
   $429 = $428&255;
   $430 = $429 >> 6;
   $431 = $430 & 3;
   $432 = (19631 + ($431)|0);
   $433 = HEAP8[$432>>0]|0;
   $24 = $433;
   $434 = $5;
   $435 = $6;
   $436 = $21;
   $437 = $436 << 24 >> 24;
   $438 = $22;
   $439 = $438 << 24 >> 24;
   $440 = $23;
   $441 = $440 << 24 >> 24;
   $442 = $24;
   $443 = $442 << 24 >> 24;
   $444 = $10;
   $445 = ((($444)) + 1|0);
   $446 = HEAP8[$445>>0]|0;
   $447 = $446&255;
   HEAP32[$vararg_buffer93>>2] = $437;
   $vararg_ptr96 = ((($vararg_buffer93)) + 4|0);
   HEAP32[$vararg_ptr96>>2] = $439;
   $vararg_ptr97 = ((($vararg_buffer93)) + 8|0);
   HEAP32[$vararg_ptr97>>2] = $441;
   $vararg_ptr98 = ((($vararg_buffer93)) + 12|0);
   HEAP32[$vararg_ptr98>>2] = $443;
   $vararg_ptr99 = ((($vararg_buffer93)) + 16|0);
   HEAP32[$vararg_ptr99>>2] = $447;
   _printFmt($434,$435,18577,$vararg_buffer93);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _vmSelfTest($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0;
 var $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0;
 var $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0;
 var $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0;
 var $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0;
 var $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0;
 var $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0;
 var $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0;
 var $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0;
 var $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0;
 var $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0;
 var $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0;
 var $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0;
 var $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0;
 var $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0;
 var $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0;
 var $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0;
 var $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0;
 var $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0;
 var $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0;
 var $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0;
 var $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0;
 var $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0;
 var $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0;
 var $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0;
 var $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0;
 var $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0;
 var $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0;
 var $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0;
 var $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0;
 var $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0;
 var $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0;
 var $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0;
 var $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0;
 var $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0;
 var $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0;
 var $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0;
 var $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0;
 var $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0;
 var $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0;
 var $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0;
 var $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0;
 var $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0;
 var $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0;
 var $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0;
 var $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0;
 var $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0;
 var $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0;
 var $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0;
 var $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0;
 var $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0;
 var $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0;
 var $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0;
 var $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0;
 var $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0;
 var $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 68|0;
 $4 = sp + 56|0;
 $5 = sp;
 $1 = $0;
 $2 = 0;
 HEAP32[$4>>2] = $5;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 $6 = 0;
 while(1) {
  $14 = $6;
  $15 = ($14|0)<(176);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = (16 + (($16*20)|0)|0);
  $7 = $17;
  $11 = 0;
  $18 = $7;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = $7;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = $7;
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $7;
     $31 = ((($30)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0);
     if (!($33)) {
      label = 7;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   dest=$3; stop=dest+9|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $34 = $6;
   switch ($34|0) {
   case 21:  {
    $35 = ((($3)) + 1|0);
    HEAP8[$35>>0] = 1;
    break;
   }
   case 22:  {
    $36 = ((($3)) + 1|0);
    HEAP8[$36>>0] = 2;
    break;
   }
   case 23:  {
    $37 = ((($3)) + 1|0);
    HEAP8[$37>>0] = 4;
    break;
   }
   default: {
   }
   }
   $38 = $6;
   $39 = $38&255;
   HEAP8[$3>>0] = $39;
   $40 = $39&255;
   L15: do {
    switch ($40|0) {
    case 0:  {
     $8 = 1;
     $9 = 0;
     $10 = 0;
     $49 = $8;
     $50 = ($49|0)!=(0);
     if ($50) {
      $51 = $8;
      $52 = $7;
      $53 = ((($52)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($51|0)!=($54|0);
      if ($55) {
       label = 13;
       break L15;
      }
     }
     $56 = $9;
     $57 = $7;
     $58 = ((($57)) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($56|0)!=($59|0);
     if ($60) {
      label = 14;
     } else {
      $61 = $10;
      $62 = $7;
      $63 = ((($62)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $7;
      $66 = ((($65)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($64) - ($67))|0;
      $69 = ($61|0)!=($68|0);
      if ($69) {
       label = 15;
      }
     }
     break;
    }
    case 1:  {
     $8 = 4;
     $9 = 0;
     $10 = 0;
     $70 = $8;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $8;
      $73 = $7;
      $74 = ((($73)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($72|0)!=($75|0);
      if ($76) {
       label = 13;
       break L15;
      }
     }
     $77 = $9;
     $78 = $7;
     $79 = ((($78)) + 8|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($77|0)!=($80|0);
     if ($81) {
      label = 14;
     } else {
      $82 = $10;
      $83 = $7;
      $84 = ((($83)) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $7;
      $87 = ((($86)) + 8|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($85) - ($88))|0;
      $90 = ($82|0)!=($89|0);
      if ($90) {
       label = 15;
      } else {
       $91 = ((($3)) + 1|0);
       $92 = HEAPU8[$91>>0]|(HEAPU8[$91+1>>0]<<8)|(HEAPU8[$91+2>>0]<<16)|(HEAPU8[$91+3>>0]<<24);
       $93 = $92 << 8;
       $94 = $93 >> 8;
       $95 = (($4) + ($94<<2)|0);
       $96 = HEAP32[$95>>2]|0;
       $12 = $96;
       $8 = 0;
       $97 = $12;
       $98 = ((($97)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $9 = $99;
       $100 = $12;
       $101 = ((($100)) + 20|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $12;
       $104 = ((($103)) + 16|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($102) - ($105))|0;
       $10 = $106;
       $107 = $8;
       $108 = ($107|0)!=(0);
       if ($108) {
        $109 = $8;
        $110 = $7;
        $111 = ((($110)) + 4|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = ($109|0)!=($112|0);
        if ($113) {
         label = 13;
         break L15;
        }
       }
       $114 = $9;
       $115 = $7;
       $116 = ((($115)) + 8|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($114|0)!=($117|0);
       if ($118) {
        label = 14;
       } else {
        $119 = $10;
        $120 = $7;
        $121 = ((($120)) + 12|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = $7;
        $124 = ((($123)) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($122) - ($125))|0;
        $127 = ($119|0)!=($126|0);
        if ($127) {
         label = 15;
        }
       }
      }
     }
     break;
    }
    case 2:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $128 = $8;
     $129 = ($128|0)!=(0);
     if ($129) {
      $130 = $8;
      $131 = $7;
      $132 = ((($131)) + 4|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ($130|0)!=($133|0);
      if ($134) {
       label = 13;
       break L15;
      }
     }
     $135 = $9;
     $136 = $7;
     $137 = ((($136)) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($135|0)!=($138|0);
     if ($139) {
      label = 14;
     } else {
      $140 = $10;
      $141 = $7;
      $142 = ((($141)) + 12|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = $7;
      $145 = ((($144)) + 8|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($143) - ($146))|0;
      $148 = ($140|0)!=($147|0);
      if ($148) {
       label = 15;
      }
     }
     break;
    }
    case 3:  {
     $8 = 1;
     $9 = 1;
     $10 = -1;
     $149 = $8;
     $150 = ($149|0)!=(0);
     if ($150) {
      $151 = $8;
      $152 = $7;
      $153 = ((($152)) + 4|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($151|0)!=($154|0);
      if ($155) {
       label = 13;
       break L15;
      }
     }
     $156 = $9;
     $157 = $7;
     $158 = ((($157)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($156|0)!=($159|0);
     if ($160) {
      label = 14;
     } else {
      $161 = $10;
      $162 = $7;
      $163 = ((($162)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $7;
      $166 = ((($165)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($164) - ($167))|0;
      $169 = ($161|0)!=($168|0);
      if ($169) {
       label = 15;
      }
     }
     break;
    }
    case 4:  {
     $8 = 4;
     $9 = 0;
     $10 = 0;
     $170 = $8;
     $171 = ($170|0)!=(0);
     if ($171) {
      $172 = $8;
      $173 = $7;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($172|0)!=($175|0);
      if ($176) {
       label = 13;
       break L15;
      }
     }
     $177 = $9;
     $178 = $7;
     $179 = ((($178)) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($177|0)!=($180|0);
     if ($181) {
      label = 14;
     } else {
      $182 = $10;
      $183 = $7;
      $184 = ((($183)) + 12|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = $7;
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($185) - ($188))|0;
      $190 = ($182|0)!=($189|0);
      if ($190) {
       label = 15;
      }
     }
     break;
    }
    case 5:  {
     $8 = 4;
     $9 = 1;
     $10 = -1;
     $191 = $8;
     $192 = ($191|0)!=(0);
     if ($192) {
      $193 = $8;
      $194 = $7;
      $195 = ((($194)) + 4|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($193|0)!=($196|0);
      if ($197) {
       label = 13;
       break L15;
      }
     }
     $198 = $9;
     $199 = $7;
     $200 = ((($199)) + 8|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($198|0)!=($201|0);
     if ($202) {
      label = 14;
     } else {
      $203 = $10;
      $204 = $7;
      $205 = ((($204)) + 12|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $7;
      $208 = ((($207)) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (($206) - ($209))|0;
      $211 = ($203|0)!=($210|0);
      if ($211) {
       label = 15;
      }
     }
     break;
    }
    case 6:  {
     $8 = 4;
     $9 = 1;
     $10 = -1;
     $212 = $8;
     $213 = ($212|0)!=(0);
     if ($213) {
      $214 = $8;
      $215 = $7;
      $216 = ((($215)) + 4|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($214|0)!=($217|0);
      if ($218) {
       label = 13;
       break L15;
      }
     }
     $219 = $9;
     $220 = $7;
     $221 = ((($220)) + 8|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($219|0)!=($222|0);
     if ($223) {
      label = 14;
     } else {
      $224 = $10;
      $225 = $7;
      $226 = ((($225)) + 12|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = $7;
      $229 = ((($228)) + 8|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($227) - ($230))|0;
      $232 = ($224|0)!=($231|0);
      if ($232) {
       label = 15;
      }
     }
     break;
    }
    case 7:  {
     $8 = 4;
     $9 = 0;
     $10 = 0;
     $233 = $8;
     $234 = ($233|0)!=(0);
     if ($234) {
      $235 = $8;
      $236 = $7;
      $237 = ((($236)) + 4|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)!=($238|0);
      if ($239) {
       label = 13;
       break L15;
      }
     }
     $240 = $9;
     $241 = $7;
     $242 = ((($241)) + 8|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($240|0)!=($243|0);
     if ($244) {
      label = 14;
     } else {
      $245 = $10;
      $246 = $7;
      $247 = ((($246)) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $7;
      $250 = ((($249)) + 8|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (($248) - ($251))|0;
      $253 = ($245|0)!=($252|0);
      if ($253) {
       label = 15;
      }
     }
     break;
    }
    case 8:  {
     $8 = 2;
     $9 = 0;
     $10 = 0;
     $254 = $8;
     $255 = ($254|0)!=(0);
     if ($255) {
      $256 = $8;
      $257 = $7;
      $258 = ((($257)) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = ($256|0)!=($259|0);
      if ($260) {
       label = 13;
       break L15;
      }
     }
     $261 = $9;
     $262 = $7;
     $263 = ((($262)) + 8|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = ($261|0)!=($264|0);
     if ($265) {
      label = 14;
     } else {
      $266 = $10;
      $267 = $7;
      $268 = ((($267)) + 12|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = $7;
      $271 = ((($270)) + 8|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = (($269) - ($272))|0;
      $274 = ($266|0)!=($273|0);
      if ($274) {
       label = 15;
      }
     }
     break;
    }
    case 10:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $275 = $8;
     $276 = ($275|0)!=(0);
     if ($276) {
      $277 = $8;
      $278 = $7;
      $279 = ((($278)) + 4|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = ($277|0)!=($280|0);
      if ($281) {
       label = 13;
       break L15;
      }
     }
     $282 = $9;
     $283 = $7;
     $284 = ((($283)) + 8|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($282|0)!=($285|0);
     if ($286) {
      label = 14;
     } else {
      $287 = $10;
      $288 = $7;
      $289 = ((($288)) + 12|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = $7;
      $292 = ((($291)) + 8|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($290) - ($293))|0;
      $295 = ($287|0)!=($294|0);
      if ($295) {
       label = 15;
      }
     }
     break;
    }
    case 11:  {
     $8 = 4;
     $9 = 1;
     $10 = 0;
     $296 = $8;
     $297 = ($296|0)!=(0);
     if ($297) {
      $298 = $8;
      $299 = $7;
      $300 = ((($299)) + 4|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = ($298|0)!=($301|0);
      if ($302) {
       label = 13;
       break L15;
      }
     }
     $303 = $9;
     $304 = $7;
     $305 = ((($304)) + 8|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($303|0)!=($306|0);
     if ($307) {
      label = 14;
     } else {
      $308 = $10;
      $309 = $7;
      $310 = ((($309)) + 12|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $7;
      $313 = ((($312)) + 8|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = (($311) - ($314))|0;
      $316 = ($308|0)!=($315|0);
      if ($316) {
       label = 15;
      }
     }
     break;
    }
    case 12:  {
     $8 = 4;
     $9 = 2;
     $10 = -1;
     $317 = $8;
     $318 = ($317|0)!=(0);
     if ($318) {
      $319 = $8;
      $320 = $7;
      $321 = ((($320)) + 4|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ($319|0)!=($322|0);
      if ($323) {
       label = 13;
       break L15;
      }
     }
     $324 = $9;
     $325 = $7;
     $326 = ((($325)) + 8|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = ($324|0)!=($327|0);
     if ($328) {
      label = 14;
     } else {
      $329 = $10;
      $330 = $7;
      $331 = ((($330)) + 12|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = $7;
      $334 = ((($333)) + 8|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = (($332) - ($335))|0;
      $337 = ($329|0)!=($336|0);
      if ($337) {
       label = 15;
      }
     }
     break;
    }
    case 16:  {
     $8 = 4;
     $9 = 0;
     $10 = 0;
     $338 = $8;
     $339 = ($338|0)!=(0);
     if ($339) {
      $340 = $8;
      $341 = $7;
      $342 = ((($341)) + 4|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ($340|0)!=($343|0);
      if ($344) {
       label = 13;
       break L15;
      }
     }
     $345 = $9;
     $346 = $7;
     $347 = ((($346)) + 8|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ($345|0)!=($348|0);
     if ($349) {
      label = 14;
     } else {
      $350 = $10;
      $351 = $7;
      $352 = ((($351)) + 12|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = $7;
      $355 = ((($354)) + 8|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = (($353) - ($356))|0;
      $358 = ($350|0)!=($357|0);
      if ($358) {
       label = 15;
      } else {
       $359 = ((($3)) + 1|0);
       $360 = HEAPU8[$359>>0]|(HEAPU8[$359+1>>0]<<8)|(HEAPU8[$359+2>>0]<<16)|(HEAPU8[$359+3>>0]<<24);
       $361 = $360 << 8;
       $362 = $361 >> 8;
       $363 = (($362|0) / 4)&-1;
       $13 = $363;
       $364 = ((($3)) + 1|0);
       $365 = HEAPU8[$364>>0]|(HEAPU8[$364+1>>0]<<8)|(HEAPU8[$364+2>>0]<<16)|(HEAPU8[$364+3>>0]<<24);
       $366 = $365 << 8;
       $367 = $366 >> 8;
       $368 = $367 & 3;
       $369 = ($368|0)!=(0);
       if ($369) {
        label = 12;
       } else {
        $370 = $13;
        $371 = ($370|0)>(0);
        $8 = 0;
        if ($371) {
         $9 = 0;
         $372 = $13;
         $10 = $372;
         $373 = $8;
         $374 = ($373|0)!=(0);
         if ($374) {
          $375 = $8;
          $376 = $7;
          $377 = ((($376)) + 4|0);
          $378 = HEAP32[$377>>2]|0;
          $379 = ($375|0)!=($378|0);
          if ($379) {
           label = 13;
           break L15;
          }
         }
         $380 = $9;
         $381 = $7;
         $382 = ((($381)) + 8|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($380|0)!=($383|0);
         if ($384) {
          label = 14;
          break L15;
         }
         $385 = $10;
         $386 = $7;
         $387 = ((($386)) + 12|0);
         $388 = HEAP32[$387>>2]|0;
         $389 = $7;
         $390 = ((($389)) + 8|0);
         $391 = HEAP32[$390>>2]|0;
         $392 = (($388) - ($391))|0;
         $393 = ($385|0)!=($392|0);
         if ($393) {
          label = 15;
          break L15;
         } else {
          break L15;
         }
        } else {
         $394 = $13;
         $395 = (0 - ($394))|0;
         $9 = $395;
         $396 = $13;
         $10 = $396;
         $397 = $8;
         $398 = ($397|0)!=(0);
         if ($398) {
          $399 = $8;
          $400 = $7;
          $401 = ((($400)) + 4|0);
          $402 = HEAP32[$401>>2]|0;
          $403 = ($399|0)!=($402|0);
          if ($403) {
           label = 13;
           break L15;
          }
         }
         $404 = $9;
         $405 = $7;
         $406 = ((($405)) + 8|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($404|0)!=($407|0);
         if ($408) {
          label = 14;
          break L15;
         }
         $409 = $10;
         $410 = $7;
         $411 = ((($410)) + 12|0);
         $412 = HEAP32[$411>>2]|0;
         $413 = $7;
         $414 = ((($413)) + 8|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = (($412) - ($415))|0;
         $417 = ($409|0)!=($416|0);
         if ($417) {
          label = 15;
          break L15;
         } else {
          break L15;
         }
        }
       }
      }
     }
     break;
    }
    case 17:  {
     $8 = 4;
     $9 = 0;
     $10 = 1;
     $418 = $8;
     $419 = ($418|0)!=(0);
     if ($419) {
      $420 = $8;
      $421 = $7;
      $422 = ((($421)) + 4|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ($420|0)!=($423|0);
      if ($424) {
       label = 13;
       break L15;
      }
     }
     $425 = $9;
     $426 = $7;
     $427 = ((($426)) + 8|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = ($425|0)!=($428|0);
     if ($429) {
      label = 14;
     } else {
      $430 = $10;
      $431 = $7;
      $432 = ((($431)) + 12|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $7;
      $435 = ((($434)) + 8|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = (($433) - ($436))|0;
      $438 = ($430|0)!=($437|0);
      if ($438) {
       label = 15;
      }
     }
     break;
    }
    case 18:  {
     $8 = 2;
     $439 = ((($3)) + 1|0);
     $440 = HEAP8[$439>>0]|0;
     $441 = $440&255;
     $9 = $441;
     $10 = 1;
     $442 = $8;
     $443 = ($442|0)!=(0);
     if ($443) {
      $444 = $8;
      $445 = $7;
      $446 = ((($445)) + 4|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ($444|0)!=($447|0);
      if ($448) {
       label = 13;
       break L15;
      }
     }
     $449 = $9;
     $450 = $7;
     $451 = ((($450)) + 8|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = ($449|0)!=($452|0);
     if ($453) {
      label = 14;
     } else {
      $454 = $10;
      $455 = $7;
      $456 = ((($455)) + 12|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = $7;
      $459 = ((($458)) + 8|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = (($457) - ($460))|0;
      $462 = ($454|0)!=($461|0);
      if ($462) {
       label = 15;
      }
     }
     break;
    }
    case 19:  {
     $8 = 2;
     $463 = ((($3)) + 1|0);
     $464 = HEAP8[$463>>0]|0;
     $465 = $464&255;
     $9 = $465;
     $10 = 2;
     $466 = $8;
     $467 = ($466|0)!=(0);
     if ($467) {
      $468 = $8;
      $469 = $7;
      $470 = ((($469)) + 4|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ($468|0)!=($471|0);
      if ($472) {
       label = 13;
       break L15;
      }
     }
     $473 = $9;
     $474 = $7;
     $475 = ((($474)) + 8|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = ($473|0)!=($476|0);
     if ($477) {
      label = 14;
     } else {
      $478 = $10;
      $479 = $7;
      $480 = ((($479)) + 12|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = $7;
      $483 = ((($482)) + 8|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = (($481) - ($484))|0;
      $486 = ($478|0)!=($485|0);
      if ($486) {
       label = 15;
      }
     }
     break;
    }
    case 20:  {
     $8 = 2;
     $487 = ((($3)) + 1|0);
     $488 = HEAP8[$487>>0]|0;
     $489 = $488&255;
     $9 = $489;
     $10 = 4;
     $490 = $8;
     $491 = ($490|0)!=(0);
     if ($491) {
      $492 = $8;
      $493 = $7;
      $494 = ((($493)) + 4|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = ($492|0)!=($495|0);
      if ($496) {
       label = 13;
       break L15;
      }
     }
     $497 = $9;
     $498 = $7;
     $499 = ((($498)) + 8|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = ($497|0)!=($500|0);
     if ($501) {
      label = 14;
     } else {
      $502 = $10;
      $503 = $7;
      $504 = ((($503)) + 12|0);
      $505 = HEAP32[$504>>2]|0;
      $506 = $7;
      $507 = ((($506)) + 8|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = (($505) - ($508))|0;
      $510 = ($502|0)!=($509|0);
      if ($510) {
       label = 15;
      }
     }
     break;
    }
    case 21:  {
     $8 = 2;
     $511 = ((($3)) + 1|0);
     $512 = HEAP8[$511>>0]|0;
     $513 = $512&255;
     $9 = $513;
     $514 = ((($3)) + 1|0);
     $515 = HEAP8[$514>>0]|0;
     $516 = $515&255;
     $517 = ($516|0)<=(1);
     if ($517) {
      $518 = ((($3)) + 1|0);
      $519 = HEAP8[$518>>0]|0;
      $520 = $519&255;
      $521 = (0 - ($520))|0;
      $522 = $521;
     } else {
      $522 = -1;
     }
     $10 = $522;
     $523 = $8;
     $524 = ($523|0)!=(0);
     if ($524) {
      $525 = $8;
      $526 = $7;
      $527 = ((($526)) + 4|0);
      $528 = HEAP32[$527>>2]|0;
      $529 = ($525|0)!=($528|0);
      if ($529) {
       label = 13;
       break L15;
      }
     }
     $530 = $9;
     $531 = $7;
     $532 = ((($531)) + 8|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = ($530|0)!=($533|0);
     if ($534) {
      label = 14;
     } else {
      $535 = $10;
      $536 = $7;
      $537 = ((($536)) + 12|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = $7;
      $540 = ((($539)) + 8|0);
      $541 = HEAP32[$540>>2]|0;
      $542 = (($538) - ($541))|0;
      $543 = ($535|0)!=($542|0);
      if ($543) {
       label = 15;
      }
     }
     break;
    }
    case 22:  {
     $8 = 2;
     $544 = ((($3)) + 1|0);
     $545 = HEAP8[$544>>0]|0;
     $546 = $545&255;
     $9 = $546;
     $547 = ((($3)) + 1|0);
     $548 = HEAP8[$547>>0]|0;
     $549 = $548&255;
     $550 = ($549|0)<=(2);
     if ($550) {
      $551 = ((($3)) + 1|0);
      $552 = HEAP8[$551>>0]|0;
      $553 = $552&255;
      $554 = (0 - ($553))|0;
      $555 = $554;
     } else {
      $555 = -2;
     }
     $10 = $555;
     $556 = $8;
     $557 = ($556|0)!=(0);
     if ($557) {
      $558 = $8;
      $559 = $7;
      $560 = ((($559)) + 4|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = ($558|0)!=($561|0);
      if ($562) {
       label = 13;
       break L15;
      }
     }
     $563 = $9;
     $564 = $7;
     $565 = ((($564)) + 8|0);
     $566 = HEAP32[$565>>2]|0;
     $567 = ($563|0)!=($566|0);
     if ($567) {
      label = 14;
     } else {
      $568 = $10;
      $569 = $7;
      $570 = ((($569)) + 12|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = $7;
      $573 = ((($572)) + 8|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = (($571) - ($574))|0;
      $576 = ($568|0)!=($575|0);
      if ($576) {
       label = 15;
      }
     }
     break;
    }
    case 23:  {
     $8 = 2;
     $577 = ((($3)) + 1|0);
     $578 = HEAP8[$577>>0]|0;
     $579 = $578&255;
     $9 = $579;
     $580 = ((($3)) + 1|0);
     $581 = HEAP8[$580>>0]|0;
     $582 = $581&255;
     $583 = ($582|0)<=(4);
     if ($583) {
      $584 = ((($3)) + 1|0);
      $585 = HEAP8[$584>>0]|0;
      $586 = $585&255;
      $587 = (0 - ($586))|0;
      $588 = $587;
     } else {
      $588 = -4;
     }
     $10 = $588;
     $589 = $8;
     $590 = ($589|0)!=(0);
     if ($590) {
      $591 = $8;
      $592 = $7;
      $593 = ((($592)) + 4|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = ($591|0)!=($594|0);
      if ($595) {
       label = 13;
       break L15;
      }
     }
     $596 = $9;
     $597 = $7;
     $598 = ((($597)) + 8|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = ($596|0)!=($599|0);
     if ($600) {
      label = 14;
     } else {
      $601 = $10;
      $602 = $7;
      $603 = ((($602)) + 12|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = $7;
      $606 = ((($605)) + 8|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = (($604) - ($607))|0;
      $609 = ($601|0)!=($608|0);
      if ($609) {
       label = 15;
      }
     }
     break;
    }
    case 24:  {
     $8 = 1;
     $9 = 0;
     $10 = 1;
     $610 = $8;
     $611 = ($610|0)!=(0);
     if ($611) {
      $612 = $8;
      $613 = $7;
      $614 = ((($613)) + 4|0);
      $615 = HEAP32[$614>>2]|0;
      $616 = ($612|0)!=($615|0);
      if ($616) {
       label = 13;
       break L15;
      }
     }
     $617 = $9;
     $618 = $7;
     $619 = ((($618)) + 8|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = ($617|0)!=($620|0);
     if ($621) {
      label = 14;
     } else {
      $622 = $10;
      $623 = $7;
      $624 = ((($623)) + 12|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = $7;
      $627 = ((($626)) + 8|0);
      $628 = HEAP32[$627>>2]|0;
      $629 = (($625) - ($628))|0;
      $630 = ($622|0)!=($629|0);
      if ($630) {
       label = 15;
      }
     }
     break;
    }
    case 25:  {
     $8 = 1;
     $9 = 0;
     $10 = 2;
     $631 = $8;
     $632 = ($631|0)!=(0);
     if ($632) {
      $633 = $8;
      $634 = $7;
      $635 = ((($634)) + 4|0);
      $636 = HEAP32[$635>>2]|0;
      $637 = ($633|0)!=($636|0);
      if ($637) {
       label = 13;
       break L15;
      }
     }
     $638 = $9;
     $639 = $7;
     $640 = ((($639)) + 8|0);
     $641 = HEAP32[$640>>2]|0;
     $642 = ($638|0)!=($641|0);
     if ($642) {
      label = 14;
     } else {
      $643 = $10;
      $644 = $7;
      $645 = ((($644)) + 12|0);
      $646 = HEAP32[$645>>2]|0;
      $647 = $7;
      $648 = ((($647)) + 8|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = (($646) - ($649))|0;
      $651 = ($643|0)!=($650|0);
      if ($651) {
       label = 15;
      }
     }
     break;
    }
    case 26:  {
     $8 = 1;
     $9 = 0;
     $10 = 4;
     $652 = $8;
     $653 = ($652|0)!=(0);
     if ($653) {
      $654 = $8;
      $655 = $7;
      $656 = ((($655)) + 4|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = ($654|0)!=($657|0);
      if ($658) {
       label = 13;
       break L15;
      }
     }
     $659 = $9;
     $660 = $7;
     $661 = ((($660)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($659|0)!=($662|0);
     if ($663) {
      label = 14;
     } else {
      $664 = $10;
      $665 = $7;
      $666 = ((($665)) + 12|0);
      $667 = HEAP32[$666>>2]|0;
      $668 = $7;
      $669 = ((($668)) + 8|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = (($667) - ($670))|0;
      $672 = ($664|0)!=($671|0);
      if ($672) {
       label = 15;
      }
     }
     break;
    }
    case 27: case 31: case 29:  {
     $8 = 5;
     $9 = 0;
     $10 = 1;
     $673 = $8;
     $674 = ($673|0)!=(0);
     if ($674) {
      $675 = $8;
      $676 = $7;
      $677 = ((($676)) + 4|0);
      $678 = HEAP32[$677>>2]|0;
      $679 = ($675|0)!=($678|0);
      if ($679) {
       label = 13;
       break L15;
      }
     }
     $680 = $9;
     $681 = $7;
     $682 = ((($681)) + 8|0);
     $683 = HEAP32[$682>>2]|0;
     $684 = ($680|0)!=($683|0);
     if ($684) {
      label = 14;
     } else {
      $685 = $10;
      $686 = $7;
      $687 = ((($686)) + 12|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = $7;
      $690 = ((($689)) + 8|0);
      $691 = HEAP32[$690>>2]|0;
      $692 = (($688) - ($691))|0;
      $693 = ($685|0)!=($692|0);
      if ($693) {
       label = 15;
      }
     }
     break;
    }
    case 28: case 30:  {
     $8 = 9;
     $9 = 0;
     $10 = 2;
     $694 = $8;
     $695 = ($694|0)!=(0);
     if ($695) {
      $696 = $8;
      $697 = $7;
      $698 = ((($697)) + 4|0);
      $699 = HEAP32[$698>>2]|0;
      $700 = ($696|0)!=($699|0);
      if ($700) {
       label = 13;
       break L15;
      }
     }
     $701 = $9;
     $702 = $7;
     $703 = ((($702)) + 8|0);
     $704 = HEAP32[$703>>2]|0;
     $705 = ($701|0)!=($704|0);
     if ($705) {
      label = 14;
     } else {
      $706 = $10;
      $707 = $7;
      $708 = ((($707)) + 12|0);
      $709 = HEAP32[$708>>2]|0;
      $710 = $7;
      $711 = ((($710)) + 8|0);
      $712 = HEAP32[$711>>2]|0;
      $713 = (($709) - ($712))|0;
      $714 = ($706|0)!=($713|0);
      if ($714) {
       label = 15;
      }
     }
     break;
    }
    case 32:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $715 = $8;
     $716 = ($715|0)!=(0);
     if ($716) {
      $717 = $8;
      $718 = $7;
      $719 = ((($718)) + 4|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = ($717|0)!=($720|0);
      if ($721) {
       label = 13;
       break L15;
      }
     }
     $722 = $9;
     $723 = $7;
     $724 = ((($723)) + 8|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = ($722|0)!=($725|0);
     if ($726) {
      label = 14;
     } else {
      $727 = $10;
      $728 = $7;
      $729 = ((($728)) + 12|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = $7;
      $732 = ((($731)) + 8|0);
      $733 = HEAP32[$732>>2]|0;
      $734 = (($730) - ($733))|0;
      $735 = ($727|0)!=($734|0);
      if ($735) {
       label = 15;
      }
     }
     break;
    }
    case 33:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $736 = $8;
     $737 = ($736|0)!=(0);
     if ($737) {
      $738 = $8;
      $739 = $7;
      $740 = ((($739)) + 4|0);
      $741 = HEAP32[$740>>2]|0;
      $742 = ($738|0)!=($741|0);
      if ($742) {
       label = 13;
       break L15;
      }
     }
     $743 = $9;
     $744 = $7;
     $745 = ((($744)) + 8|0);
     $746 = HEAP32[$745>>2]|0;
     $747 = ($743|0)!=($746|0);
     if ($747) {
      label = 14;
     } else {
      $748 = $10;
      $749 = $7;
      $750 = ((($749)) + 12|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = $7;
      $753 = ((($752)) + 8|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = (($751) - ($754))|0;
      $756 = ($748|0)!=($755|0);
      if ($756) {
       label = 15;
      }
     }
     break;
    }
    case 34:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $757 = $8;
     $758 = ($757|0)!=(0);
     if ($758) {
      $759 = $8;
      $760 = $7;
      $761 = ((($760)) + 4|0);
      $762 = HEAP32[$761>>2]|0;
      $763 = ($759|0)!=($762|0);
      if ($763) {
       label = 13;
       break L15;
      }
     }
     $764 = $9;
     $765 = $7;
     $766 = ((($765)) + 8|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = ($764|0)!=($767|0);
     if ($768) {
      label = 14;
     } else {
      $769 = $10;
      $770 = $7;
      $771 = ((($770)) + 12|0);
      $772 = HEAP32[$771>>2]|0;
      $773 = $7;
      $774 = ((($773)) + 8|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = (($772) - ($775))|0;
      $777 = ($769|0)!=($776|0);
      if ($777) {
       label = 15;
      }
     }
     break;
    }
    case 35:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $778 = $8;
     $779 = ($778|0)!=(0);
     if ($779) {
      $780 = $8;
      $781 = $7;
      $782 = ((($781)) + 4|0);
      $783 = HEAP32[$782>>2]|0;
      $784 = ($780|0)!=($783|0);
      if ($784) {
       label = 13;
       break L15;
      }
     }
     $785 = $9;
     $786 = $7;
     $787 = ((($786)) + 8|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = ($785|0)!=($788|0);
     if ($789) {
      label = 14;
     } else {
      $790 = $10;
      $791 = $7;
      $792 = ((($791)) + 12|0);
      $793 = HEAP32[$792>>2]|0;
      $794 = $7;
      $795 = ((($794)) + 8|0);
      $796 = HEAP32[$795>>2]|0;
      $797 = (($793) - ($796))|0;
      $798 = ($790|0)!=($797|0);
      if ($798) {
       label = 15;
      }
     }
     break;
    }
    case 36:  {
     $8 = 1;
     $9 = 1;
     $10 = 3;
     $799 = $8;
     $800 = ($799|0)!=(0);
     if ($800) {
      $801 = $8;
      $802 = $7;
      $803 = ((($802)) + 4|0);
      $804 = HEAP32[$803>>2]|0;
      $805 = ($801|0)!=($804|0);
      if ($805) {
       label = 13;
       break L15;
      }
     }
     $806 = $9;
     $807 = $7;
     $808 = ((($807)) + 8|0);
     $809 = HEAP32[$808>>2]|0;
     $810 = ($806|0)!=($809|0);
     if ($810) {
      label = 14;
     } else {
      $811 = $10;
      $812 = $7;
      $813 = ((($812)) + 12|0);
      $814 = HEAP32[$813>>2]|0;
      $815 = $7;
      $816 = ((($815)) + 8|0);
      $817 = HEAP32[$816>>2]|0;
      $818 = (($814) - ($817))|0;
      $819 = ($811|0)!=($818|0);
      if ($819) {
       label = 15;
      }
     }
     break;
    }
    case 37:  {
     $8 = 1;
     $9 = 2;
     $10 = -2;
     $820 = $8;
     $821 = ($820|0)!=(0);
     if ($821) {
      $822 = $8;
      $823 = $7;
      $824 = ((($823)) + 4|0);
      $825 = HEAP32[$824>>2]|0;
      $826 = ($822|0)!=($825|0);
      if ($826) {
       label = 13;
       break L15;
      }
     }
     $827 = $9;
     $828 = $7;
     $829 = ((($828)) + 8|0);
     $830 = HEAP32[$829>>2]|0;
     $831 = ($827|0)!=($830|0);
     if ($831) {
      label = 14;
     } else {
      $832 = $10;
      $833 = $7;
      $834 = ((($833)) + 12|0);
      $835 = HEAP32[$834>>2]|0;
      $836 = $7;
      $837 = ((($836)) + 8|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) - ($838))|0;
      $840 = ($832|0)!=($839|0);
      if ($840) {
       label = 15;
      }
     }
     break;
    }
    case 38:  {
     $8 = 1;
     $9 = 2;
     $10 = -2;
     $841 = $8;
     $842 = ($841|0)!=(0);
     if ($842) {
      $843 = $8;
      $844 = $7;
      $845 = ((($844)) + 4|0);
      $846 = HEAP32[$845>>2]|0;
      $847 = ($843|0)!=($846|0);
      if ($847) {
       label = 13;
       break L15;
      }
     }
     $848 = $9;
     $849 = $7;
     $850 = ((($849)) + 8|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = ($848|0)!=($851|0);
     if ($852) {
      label = 14;
     } else {
      $853 = $10;
      $854 = $7;
      $855 = ((($854)) + 12|0);
      $856 = HEAP32[$855>>2]|0;
      $857 = $7;
      $858 = ((($857)) + 8|0);
      $859 = HEAP32[$858>>2]|0;
      $860 = (($856) - ($859))|0;
      $861 = ($853|0)!=($860|0);
      if ($861) {
       label = 15;
      }
     }
     break;
    }
    case 39:  {
     $8 = 1;
     $9 = 2;
     $10 = -2;
     $862 = $8;
     $863 = ($862|0)!=(0);
     if ($863) {
      $864 = $8;
      $865 = $7;
      $866 = ((($865)) + 4|0);
      $867 = HEAP32[$866>>2]|0;
      $868 = ($864|0)!=($867|0);
      if ($868) {
       label = 13;
       break L15;
      }
     }
     $869 = $9;
     $870 = $7;
     $871 = ((($870)) + 8|0);
     $872 = HEAP32[$871>>2]|0;
     $873 = ($869|0)!=($872|0);
     if ($873) {
      label = 14;
     } else {
      $874 = $10;
      $875 = $7;
      $876 = ((($875)) + 12|0);
      $877 = HEAP32[$876>>2]|0;
      $878 = $7;
      $879 = ((($878)) + 8|0);
      $880 = HEAP32[$879>>2]|0;
      $881 = (($877) - ($880))|0;
      $882 = ($874|0)!=($881|0);
      if ($882) {
       label = 15;
      }
     }
     break;
    }
    case 40:  {
     $8 = 1;
     $9 = 3;
     $10 = -3;
     $883 = $8;
     $884 = ($883|0)!=(0);
     if ($884) {
      $885 = $8;
      $886 = $7;
      $887 = ((($886)) + 4|0);
      $888 = HEAP32[$887>>2]|0;
      $889 = ($885|0)!=($888|0);
      if ($889) {
       label = 13;
       break L15;
      }
     }
     $890 = $9;
     $891 = $7;
     $892 = ((($891)) + 8|0);
     $893 = HEAP32[$892>>2]|0;
     $894 = ($890|0)!=($893|0);
     if ($894) {
      label = 14;
     } else {
      $895 = $10;
      $896 = $7;
      $897 = ((($896)) + 12|0);
      $898 = HEAP32[$897>>2]|0;
      $899 = $7;
      $900 = ((($899)) + 8|0);
      $901 = HEAP32[$900>>2]|0;
      $902 = (($898) - ($901))|0;
      $903 = ($895|0)!=($902|0);
      if ($903) {
       label = 15;
      }
     }
     break;
    }
    case 41:  {
     $8 = 1;
     $9 = 5;
     $10 = -5;
     $904 = $8;
     $905 = ($904|0)!=(0);
     if ($905) {
      $906 = $8;
      $907 = $7;
      $908 = ((($907)) + 4|0);
      $909 = HEAP32[$908>>2]|0;
      $910 = ($906|0)!=($909|0);
      if ($910) {
       label = 13;
       break L15;
      }
     }
     $911 = $9;
     $912 = $7;
     $913 = ((($912)) + 8|0);
     $914 = HEAP32[$913>>2]|0;
     $915 = ($911|0)!=($914|0);
     if ($915) {
      label = 14;
     } else {
      $916 = $10;
      $917 = $7;
      $918 = ((($917)) + 12|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = $7;
      $921 = ((($920)) + 8|0);
      $922 = HEAP32[$921>>2]|0;
      $923 = (($919) - ($922))|0;
      $924 = ($916|0)!=($923|0);
      if ($924) {
       label = 15;
      }
     }
     break;
    }
    case 42:  {
     $8 = 4;
     $9 = 0;
     $10 = 1;
     $925 = $8;
     $926 = ($925|0)!=(0);
     if ($926) {
      $927 = $8;
      $928 = $7;
      $929 = ((($928)) + 4|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = ($927|0)!=($930|0);
      if ($931) {
       label = 13;
       break L15;
      }
     }
     $932 = $9;
     $933 = $7;
     $934 = ((($933)) + 8|0);
     $935 = HEAP32[$934>>2]|0;
     $936 = ($932|0)!=($935|0);
     if ($936) {
      label = 14;
     } else {
      $937 = $10;
      $938 = $7;
      $939 = ((($938)) + 12|0);
      $940 = HEAP32[$939>>2]|0;
      $941 = $7;
      $942 = ((($941)) + 8|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = (($940) - ($943))|0;
      $945 = ($937|0)!=($944|0);
      if ($945) {
       label = 15;
      }
     }
     break;
    }
    case 43:  {
     $8 = 4;
     $9 = 0;
     $10 = 2;
     $946 = $8;
     $947 = ($946|0)!=(0);
     if ($947) {
      $948 = $8;
      $949 = $7;
      $950 = ((($949)) + 4|0);
      $951 = HEAP32[$950>>2]|0;
      $952 = ($948|0)!=($951|0);
      if ($952) {
       label = 13;
       break L15;
      }
     }
     $953 = $9;
     $954 = $7;
     $955 = ((($954)) + 8|0);
     $956 = HEAP32[$955>>2]|0;
     $957 = ($953|0)!=($956|0);
     if ($957) {
      label = 14;
     } else {
      $958 = $10;
      $959 = $7;
      $960 = ((($959)) + 12|0);
      $961 = HEAP32[$960>>2]|0;
      $962 = $7;
      $963 = ((($962)) + 8|0);
      $964 = HEAP32[$963>>2]|0;
      $965 = (($961) - ($964))|0;
      $966 = ($958|0)!=($965|0);
      if ($966) {
       label = 15;
      }
     }
     break;
    }
    case 45:  {
     $8 = 4;
     $9 = 1;
     $10 = -1;
     $967 = $8;
     $968 = ($967|0)!=(0);
     if ($968) {
      $969 = $8;
      $970 = $7;
      $971 = ((($970)) + 4|0);
      $972 = HEAP32[$971>>2]|0;
      $973 = ($969|0)!=($972|0);
      if ($973) {
       label = 13;
       break L15;
      }
     }
     $974 = $9;
     $975 = $7;
     $976 = ((($975)) + 8|0);
     $977 = HEAP32[$976>>2]|0;
     $978 = ($974|0)!=($977|0);
     if ($978) {
      label = 14;
     } else {
      $979 = $10;
      $980 = $7;
      $981 = ((($980)) + 12|0);
      $982 = HEAP32[$981>>2]|0;
      $983 = $7;
      $984 = ((($983)) + 8|0);
      $985 = HEAP32[$984>>2]|0;
      $986 = (($982) - ($985))|0;
      $987 = ($979|0)!=($986|0);
      if ($987) {
       label = 15;
      }
     }
     break;
    }
    case 46:  {
     $8 = 4;
     $9 = 2;
     $10 = -2;
     $988 = $8;
     $989 = ($988|0)!=(0);
     if ($989) {
      $990 = $8;
      $991 = $7;
      $992 = ((($991)) + 4|0);
      $993 = HEAP32[$992>>2]|0;
      $994 = ($990|0)!=($993|0);
      if ($994) {
       label = 13;
       break L15;
      }
     }
     $995 = $9;
     $996 = $7;
     $997 = ((($996)) + 8|0);
     $998 = HEAP32[$997>>2]|0;
     $999 = ($995|0)!=($998|0);
     if ($999) {
      label = 14;
     } else {
      $1000 = $10;
      $1001 = $7;
      $1002 = ((($1001)) + 12|0);
      $1003 = HEAP32[$1002>>2]|0;
      $1004 = $7;
      $1005 = ((($1004)) + 8|0);
      $1006 = HEAP32[$1005>>2]|0;
      $1007 = (($1003) - ($1006))|0;
      $1008 = ($1000|0)!=($1007|0);
      if ($1008) {
       label = 15;
      }
     }
     break;
    }
    case 47:  {
     $8 = 4;
     $9 = 2;
     $10 = -2;
     $1009 = $8;
     $1010 = ($1009|0)!=(0);
     if ($1010) {
      $1011 = $8;
      $1012 = $7;
      $1013 = ((($1012)) + 4|0);
      $1014 = HEAP32[$1013>>2]|0;
      $1015 = ($1011|0)!=($1014|0);
      if ($1015) {
       label = 13;
       break L15;
      }
     }
     $1016 = $9;
     $1017 = $7;
     $1018 = ((($1017)) + 8|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = ($1016|0)!=($1019|0);
     if ($1020) {
      label = 14;
     } else {
      $1021 = $10;
      $1022 = $7;
      $1023 = ((($1022)) + 12|0);
      $1024 = HEAP32[$1023>>2]|0;
      $1025 = $7;
      $1026 = ((($1025)) + 8|0);
      $1027 = HEAP32[$1026>>2]|0;
      $1028 = (($1024) - ($1027))|0;
      $1029 = ($1021|0)!=($1028|0);
      if ($1029) {
       label = 15;
      }
     }
     break;
    }
    case 48:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $1030 = $8;
     $1031 = ($1030|0)!=(0);
     if ($1031) {
      $1032 = $8;
      $1033 = $7;
      $1034 = ((($1033)) + 4|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = ($1032|0)!=($1035|0);
      if ($1036) {
       label = 13;
       break L15;
      }
     }
     $1037 = $9;
     $1038 = $7;
     $1039 = ((($1038)) + 8|0);
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = ($1037|0)!=($1040|0);
     if ($1041) {
      label = 14;
     } else {
      $1042 = $10;
      $1043 = $7;
      $1044 = ((($1043)) + 12|0);
      $1045 = HEAP32[$1044>>2]|0;
      $1046 = $7;
      $1047 = ((($1046)) + 8|0);
      $1048 = HEAP32[$1047>>2]|0;
      $1049 = (($1045) - ($1048))|0;
      $1050 = ($1042|0)!=($1049|0);
      if ($1050) {
       label = 15;
      }
     }
     break;
    }
    case 49:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1051 = $8;
     $1052 = ($1051|0)!=(0);
     if ($1052) {
      $1053 = $8;
      $1054 = $7;
      $1055 = ((($1054)) + 4|0);
      $1056 = HEAP32[$1055>>2]|0;
      $1057 = ($1053|0)!=($1056|0);
      if ($1057) {
       label = 13;
       break L15;
      }
     }
     $1058 = $9;
     $1059 = $7;
     $1060 = ((($1059)) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = ($1058|0)!=($1061|0);
     if ($1062) {
      label = 14;
     } else {
      $1063 = $10;
      $1064 = $7;
      $1065 = ((($1064)) + 12|0);
      $1066 = HEAP32[$1065>>2]|0;
      $1067 = $7;
      $1068 = ((($1067)) + 8|0);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = (($1066) - ($1069))|0;
      $1071 = ($1063|0)!=($1070|0);
      if ($1071) {
       label = 15;
      }
     }
     break;
    }
    case 50:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1072 = $8;
     $1073 = ($1072|0)!=(0);
     if ($1073) {
      $1074 = $8;
      $1075 = $7;
      $1076 = ((($1075)) + 4|0);
      $1077 = HEAP32[$1076>>2]|0;
      $1078 = ($1074|0)!=($1077|0);
      if ($1078) {
       label = 13;
       break L15;
      }
     }
     $1079 = $9;
     $1080 = $7;
     $1081 = ((($1080)) + 8|0);
     $1082 = HEAP32[$1081>>2]|0;
     $1083 = ($1079|0)!=($1082|0);
     if ($1083) {
      label = 14;
     } else {
      $1084 = $10;
      $1085 = $7;
      $1086 = ((($1085)) + 12|0);
      $1087 = HEAP32[$1086>>2]|0;
      $1088 = $7;
      $1089 = ((($1088)) + 8|0);
      $1090 = HEAP32[$1089>>2]|0;
      $1091 = (($1087) - ($1090))|0;
      $1092 = ($1084|0)!=($1091|0);
      if ($1092) {
       label = 15;
      }
     }
     break;
    }
    case 51:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1093 = $8;
     $1094 = ($1093|0)!=(0);
     if ($1094) {
      $1095 = $8;
      $1096 = $7;
      $1097 = ((($1096)) + 4|0);
      $1098 = HEAP32[$1097>>2]|0;
      $1099 = ($1095|0)!=($1098|0);
      if ($1099) {
       label = 13;
       break L15;
      }
     }
     $1100 = $9;
     $1101 = $7;
     $1102 = ((($1101)) + 8|0);
     $1103 = HEAP32[$1102>>2]|0;
     $1104 = ($1100|0)!=($1103|0);
     if ($1104) {
      label = 14;
     } else {
      $1105 = $10;
      $1106 = $7;
      $1107 = ((($1106)) + 12|0);
      $1108 = HEAP32[$1107>>2]|0;
      $1109 = $7;
      $1110 = ((($1109)) + 8|0);
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = (($1108) - ($1111))|0;
      $1113 = ($1105|0)!=($1112|0);
      if ($1113) {
       label = 15;
      }
     }
     break;
    }
    case 52:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1114 = $8;
     $1115 = ($1114|0)!=(0);
     if ($1115) {
      $1116 = $8;
      $1117 = $7;
      $1118 = ((($1117)) + 4|0);
      $1119 = HEAP32[$1118>>2]|0;
      $1120 = ($1116|0)!=($1119|0);
      if ($1120) {
       label = 13;
       break L15;
      }
     }
     $1121 = $9;
     $1122 = $7;
     $1123 = ((($1122)) + 8|0);
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = ($1121|0)!=($1124|0);
     if ($1125) {
      label = 14;
     } else {
      $1126 = $10;
      $1127 = $7;
      $1128 = ((($1127)) + 12|0);
      $1129 = HEAP32[$1128>>2]|0;
      $1130 = $7;
      $1131 = ((($1130)) + 8|0);
      $1132 = HEAP32[$1131>>2]|0;
      $1133 = (($1129) - ($1132))|0;
      $1134 = ($1126|0)!=($1133|0);
      if ($1134) {
       label = 15;
      }
     }
     break;
    }
    case 53:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1135 = $8;
     $1136 = ($1135|0)!=(0);
     if ($1136) {
      $1137 = $8;
      $1138 = $7;
      $1139 = ((($1138)) + 4|0);
      $1140 = HEAP32[$1139>>2]|0;
      $1141 = ($1137|0)!=($1140|0);
      if ($1141) {
       label = 13;
       break L15;
      }
     }
     $1142 = $9;
     $1143 = $7;
     $1144 = ((($1143)) + 8|0);
     $1145 = HEAP32[$1144>>2]|0;
     $1146 = ($1142|0)!=($1145|0);
     if ($1146) {
      label = 14;
     } else {
      $1147 = $10;
      $1148 = $7;
      $1149 = ((($1148)) + 12|0);
      $1150 = HEAP32[$1149>>2]|0;
      $1151 = $7;
      $1152 = ((($1151)) + 8|0);
      $1153 = HEAP32[$1152>>2]|0;
      $1154 = (($1150) - ($1153))|0;
      $1155 = ($1147|0)!=($1154|0);
      if ($1155) {
       label = 15;
      }
     }
     break;
    }
    case 54:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1156 = $8;
     $1157 = ($1156|0)!=(0);
     if ($1157) {
      $1158 = $8;
      $1159 = $7;
      $1160 = ((($1159)) + 4|0);
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = ($1158|0)!=($1161|0);
      if ($1162) {
       label = 13;
       break L15;
      }
     }
     $1163 = $9;
     $1164 = $7;
     $1165 = ((($1164)) + 8|0);
     $1166 = HEAP32[$1165>>2]|0;
     $1167 = ($1163|0)!=($1166|0);
     if ($1167) {
      label = 14;
     } else {
      $1168 = $10;
      $1169 = $7;
      $1170 = ((($1169)) + 12|0);
      $1171 = HEAP32[$1170>>2]|0;
      $1172 = $7;
      $1173 = ((($1172)) + 8|0);
      $1174 = HEAP32[$1173>>2]|0;
      $1175 = (($1171) - ($1174))|0;
      $1176 = ($1168|0)!=($1175|0);
      if ($1176) {
       label = 15;
      }
     }
     break;
    }
    case 56:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1177 = $8;
     $1178 = ($1177|0)!=(0);
     if ($1178) {
      $1179 = $8;
      $1180 = $7;
      $1181 = ((($1180)) + 4|0);
      $1182 = HEAP32[$1181>>2]|0;
      $1183 = ($1179|0)!=($1182|0);
      if ($1183) {
       label = 13;
       break L15;
      }
     }
     $1184 = $9;
     $1185 = $7;
     $1186 = ((($1185)) + 8|0);
     $1187 = HEAP32[$1186>>2]|0;
     $1188 = ($1184|0)!=($1187|0);
     if ($1188) {
      label = 14;
     } else {
      $1189 = $10;
      $1190 = $7;
      $1191 = ((($1190)) + 12|0);
      $1192 = HEAP32[$1191>>2]|0;
      $1193 = $7;
      $1194 = ((($1193)) + 8|0);
      $1195 = HEAP32[$1194>>2]|0;
      $1196 = (($1192) - ($1195))|0;
      $1197 = ($1189|0)!=($1196|0);
      if ($1197) {
       label = 15;
      }
     }
     break;
    }
    case 57:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1198 = $8;
     $1199 = ($1198|0)!=(0);
     if ($1199) {
      $1200 = $8;
      $1201 = $7;
      $1202 = ((($1201)) + 4|0);
      $1203 = HEAP32[$1202>>2]|0;
      $1204 = ($1200|0)!=($1203|0);
      if ($1204) {
       label = 13;
       break L15;
      }
     }
     $1205 = $9;
     $1206 = $7;
     $1207 = ((($1206)) + 8|0);
     $1208 = HEAP32[$1207>>2]|0;
     $1209 = ($1205|0)!=($1208|0);
     if ($1209) {
      label = 14;
     } else {
      $1210 = $10;
      $1211 = $7;
      $1212 = ((($1211)) + 12|0);
      $1213 = HEAP32[$1212>>2]|0;
      $1214 = $7;
      $1215 = ((($1214)) + 8|0);
      $1216 = HEAP32[$1215>>2]|0;
      $1217 = (($1213) - ($1216))|0;
      $1218 = ($1210|0)!=($1217|0);
      if ($1218) {
       label = 15;
      }
     }
     break;
    }
    case 58:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1219 = $8;
     $1220 = ($1219|0)!=(0);
     if ($1220) {
      $1221 = $8;
      $1222 = $7;
      $1223 = ((($1222)) + 4|0);
      $1224 = HEAP32[$1223>>2]|0;
      $1225 = ($1221|0)!=($1224|0);
      if ($1225) {
       label = 13;
       break L15;
      }
     }
     $1226 = $9;
     $1227 = $7;
     $1228 = ((($1227)) + 8|0);
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = ($1226|0)!=($1229|0);
     if ($1230) {
      label = 14;
     } else {
      $1231 = $10;
      $1232 = $7;
      $1233 = ((($1232)) + 12|0);
      $1234 = HEAP32[$1233>>2]|0;
      $1235 = $7;
      $1236 = ((($1235)) + 8|0);
      $1237 = HEAP32[$1236>>2]|0;
      $1238 = (($1234) - ($1237))|0;
      $1239 = ($1231|0)!=($1238|0);
      if ($1239) {
       label = 15;
      }
     }
     break;
    }
    case 59:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1240 = $8;
     $1241 = ($1240|0)!=(0);
     if ($1241) {
      $1242 = $8;
      $1243 = $7;
      $1244 = ((($1243)) + 4|0);
      $1245 = HEAP32[$1244>>2]|0;
      $1246 = ($1242|0)!=($1245|0);
      if ($1246) {
       label = 13;
       break L15;
      }
     }
     $1247 = $9;
     $1248 = $7;
     $1249 = ((($1248)) + 8|0);
     $1250 = HEAP32[$1249>>2]|0;
     $1251 = ($1247|0)!=($1250|0);
     if ($1251) {
      label = 14;
     } else {
      $1252 = $10;
      $1253 = $7;
      $1254 = ((($1253)) + 12|0);
      $1255 = HEAP32[$1254>>2]|0;
      $1256 = $7;
      $1257 = ((($1256)) + 8|0);
      $1258 = HEAP32[$1257>>2]|0;
      $1259 = (($1255) - ($1258))|0;
      $1260 = ($1252|0)!=($1259|0);
      if ($1260) {
       label = 15;
      }
     }
     break;
    }
    case 60:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1261 = $8;
     $1262 = ($1261|0)!=(0);
     if ($1262) {
      $1263 = $8;
      $1264 = $7;
      $1265 = ((($1264)) + 4|0);
      $1266 = HEAP32[$1265>>2]|0;
      $1267 = ($1263|0)!=($1266|0);
      if ($1267) {
       label = 13;
       break L15;
      }
     }
     $1268 = $9;
     $1269 = $7;
     $1270 = ((($1269)) + 8|0);
     $1271 = HEAP32[$1270>>2]|0;
     $1272 = ($1268|0)!=($1271|0);
     if ($1272) {
      label = 14;
     } else {
      $1273 = $10;
      $1274 = $7;
      $1275 = ((($1274)) + 12|0);
      $1276 = HEAP32[$1275>>2]|0;
      $1277 = $7;
      $1278 = ((($1277)) + 8|0);
      $1279 = HEAP32[$1278>>2]|0;
      $1280 = (($1276) - ($1279))|0;
      $1281 = ($1273|0)!=($1280|0);
      if ($1281) {
       label = 15;
      }
     }
     break;
    }
    case 62:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $1282 = $8;
     $1283 = ($1282|0)!=(0);
     if ($1283) {
      $1284 = $8;
      $1285 = $7;
      $1286 = ((($1285)) + 4|0);
      $1287 = HEAP32[$1286>>2]|0;
      $1288 = ($1284|0)!=($1287|0);
      if ($1288) {
       label = 13;
       break L15;
      }
     }
     $1289 = $9;
     $1290 = $7;
     $1291 = ((($1290)) + 8|0);
     $1292 = HEAP32[$1291>>2]|0;
     $1293 = ($1289|0)!=($1292|0);
     if ($1293) {
      label = 14;
     } else {
      $1294 = $10;
      $1295 = $7;
      $1296 = ((($1295)) + 12|0);
      $1297 = HEAP32[$1296>>2]|0;
      $1298 = $7;
      $1299 = ((($1298)) + 8|0);
      $1300 = HEAP32[$1299>>2]|0;
      $1301 = (($1297) - ($1300))|0;
      $1302 = ($1294|0)!=($1301|0);
      if ($1302) {
       label = 15;
      }
     }
     break;
    }
    case 63:  {
     $8 = 2;
     $9 = 1;
     $10 = 0;
     $1303 = $8;
     $1304 = ($1303|0)!=(0);
     if ($1304) {
      $1305 = $8;
      $1306 = $7;
      $1307 = ((($1306)) + 4|0);
      $1308 = HEAP32[$1307>>2]|0;
      $1309 = ($1305|0)!=($1308|0);
      if ($1309) {
       label = 13;
       break L15;
      }
     }
     $1310 = $9;
     $1311 = $7;
     $1312 = ((($1311)) + 8|0);
     $1313 = HEAP32[$1312>>2]|0;
     $1314 = ($1310|0)!=($1313|0);
     if ($1314) {
      label = 14;
     } else {
      $1315 = $10;
      $1316 = $7;
      $1317 = ((($1316)) + 12|0);
      $1318 = HEAP32[$1317>>2]|0;
      $1319 = $7;
      $1320 = ((($1319)) + 8|0);
      $1321 = HEAP32[$1320>>2]|0;
      $1322 = (($1318) - ($1321))|0;
      $1323 = ($1315|0)!=($1322|0);
      if ($1323) {
       label = 15;
      }
     }
     break;
    }
    case 64:  {
     $8 = 1;
     $9 = 2;
     $10 = 0;
     $1324 = $8;
     $1325 = ($1324|0)!=(0);
     if ($1325) {
      $1326 = $8;
      $1327 = $7;
      $1328 = ((($1327)) + 4|0);
      $1329 = HEAP32[$1328>>2]|0;
      $1330 = ($1326|0)!=($1329|0);
      if ($1330) {
       label = 13;
       break L15;
      }
     }
     $1331 = $9;
     $1332 = $7;
     $1333 = ((($1332)) + 8|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = ($1331|0)!=($1334|0);
     if ($1335) {
      label = 14;
     } else {
      $1336 = $10;
      $1337 = $7;
      $1338 = ((($1337)) + 12|0);
      $1339 = HEAP32[$1338>>2]|0;
      $1340 = $7;
      $1341 = ((($1340)) + 8|0);
      $1342 = HEAP32[$1341>>2]|0;
      $1343 = (($1339) - ($1342))|0;
      $1344 = ($1336|0)!=($1343|0);
      if ($1344) {
       label = 15;
      }
     }
     break;
    }
    case 65:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1345 = $8;
     $1346 = ($1345|0)!=(0);
     if ($1346) {
      $1347 = $8;
      $1348 = $7;
      $1349 = ((($1348)) + 4|0);
      $1350 = HEAP32[$1349>>2]|0;
      $1351 = ($1347|0)!=($1350|0);
      if ($1351) {
       label = 13;
       break L15;
      }
     }
     $1352 = $9;
     $1353 = $7;
     $1354 = ((($1353)) + 8|0);
     $1355 = HEAP32[$1354>>2]|0;
     $1356 = ($1352|0)!=($1355|0);
     if ($1356) {
      label = 14;
     } else {
      $1357 = $10;
      $1358 = $7;
      $1359 = ((($1358)) + 12|0);
      $1360 = HEAP32[$1359>>2]|0;
      $1361 = $7;
      $1362 = ((($1361)) + 8|0);
      $1363 = HEAP32[$1362>>2]|0;
      $1364 = (($1360) - ($1363))|0;
      $1365 = ($1357|0)!=($1364|0);
      if ($1365) {
       label = 15;
      }
     }
     break;
    }
    case 66:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1366 = $8;
     $1367 = ($1366|0)!=(0);
     if ($1367) {
      $1368 = $8;
      $1369 = $7;
      $1370 = ((($1369)) + 4|0);
      $1371 = HEAP32[$1370>>2]|0;
      $1372 = ($1368|0)!=($1371|0);
      if ($1372) {
       label = 13;
       break L15;
      }
     }
     $1373 = $9;
     $1374 = $7;
     $1375 = ((($1374)) + 8|0);
     $1376 = HEAP32[$1375>>2]|0;
     $1377 = ($1373|0)!=($1376|0);
     if ($1377) {
      label = 14;
     } else {
      $1378 = $10;
      $1379 = $7;
      $1380 = ((($1379)) + 12|0);
      $1381 = HEAP32[$1380>>2]|0;
      $1382 = $7;
      $1383 = ((($1382)) + 8|0);
      $1384 = HEAP32[$1383>>2]|0;
      $1385 = (($1381) - ($1384))|0;
      $1386 = ($1378|0)!=($1385|0);
      if ($1386) {
       label = 15;
      }
     }
     break;
    }
    case 67:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1387 = $8;
     $1388 = ($1387|0)!=(0);
     if ($1388) {
      $1389 = $8;
      $1390 = $7;
      $1391 = ((($1390)) + 4|0);
      $1392 = HEAP32[$1391>>2]|0;
      $1393 = ($1389|0)!=($1392|0);
      if ($1393) {
       label = 13;
       break L15;
      }
     }
     $1394 = $9;
     $1395 = $7;
     $1396 = ((($1395)) + 8|0);
     $1397 = HEAP32[$1396>>2]|0;
     $1398 = ($1394|0)!=($1397|0);
     if ($1398) {
      label = 14;
     } else {
      $1399 = $10;
      $1400 = $7;
      $1401 = ((($1400)) + 12|0);
      $1402 = HEAP32[$1401>>2]|0;
      $1403 = $7;
      $1404 = ((($1403)) + 8|0);
      $1405 = HEAP32[$1404>>2]|0;
      $1406 = (($1402) - ($1405))|0;
      $1407 = ($1399|0)!=($1406|0);
      if ($1407) {
       label = 15;
      }
     }
     break;
    }
    case 68:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1408 = $8;
     $1409 = ($1408|0)!=(0);
     if ($1409) {
      $1410 = $8;
      $1411 = $7;
      $1412 = ((($1411)) + 4|0);
      $1413 = HEAP32[$1412>>2]|0;
      $1414 = ($1410|0)!=($1413|0);
      if ($1414) {
       label = 13;
       break L15;
      }
     }
     $1415 = $9;
     $1416 = $7;
     $1417 = ((($1416)) + 8|0);
     $1418 = HEAP32[$1417>>2]|0;
     $1419 = ($1415|0)!=($1418|0);
     if ($1419) {
      label = 14;
     } else {
      $1420 = $10;
      $1421 = $7;
      $1422 = ((($1421)) + 12|0);
      $1423 = HEAP32[$1422>>2]|0;
      $1424 = $7;
      $1425 = ((($1424)) + 8|0);
      $1426 = HEAP32[$1425>>2]|0;
      $1427 = (($1423) - ($1426))|0;
      $1428 = ($1420|0)!=($1427|0);
      if ($1428) {
       label = 15;
      }
     }
     break;
    }
    case 69:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1429 = $8;
     $1430 = ($1429|0)!=(0);
     if ($1430) {
      $1431 = $8;
      $1432 = $7;
      $1433 = ((($1432)) + 4|0);
      $1434 = HEAP32[$1433>>2]|0;
      $1435 = ($1431|0)!=($1434|0);
      if ($1435) {
       label = 13;
       break L15;
      }
     }
     $1436 = $9;
     $1437 = $7;
     $1438 = ((($1437)) + 8|0);
     $1439 = HEAP32[$1438>>2]|0;
     $1440 = ($1436|0)!=($1439|0);
     if ($1440) {
      label = 14;
     } else {
      $1441 = $10;
      $1442 = $7;
      $1443 = ((($1442)) + 12|0);
      $1444 = HEAP32[$1443>>2]|0;
      $1445 = $7;
      $1446 = ((($1445)) + 8|0);
      $1447 = HEAP32[$1446>>2]|0;
      $1448 = (($1444) - ($1447))|0;
      $1449 = ($1441|0)!=($1448|0);
      if ($1449) {
       label = 15;
      }
     }
     break;
    }
    case 70:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1450 = $8;
     $1451 = ($1450|0)!=(0);
     if ($1451) {
      $1452 = $8;
      $1453 = $7;
      $1454 = ((($1453)) + 4|0);
      $1455 = HEAP32[$1454>>2]|0;
      $1456 = ($1452|0)!=($1455|0);
      if ($1456) {
       label = 13;
       break L15;
      }
     }
     $1457 = $9;
     $1458 = $7;
     $1459 = ((($1458)) + 8|0);
     $1460 = HEAP32[$1459>>2]|0;
     $1461 = ($1457|0)!=($1460|0);
     if ($1461) {
      label = 14;
     } else {
      $1462 = $10;
      $1463 = $7;
      $1464 = ((($1463)) + 12|0);
      $1465 = HEAP32[$1464>>2]|0;
      $1466 = $7;
      $1467 = ((($1466)) + 8|0);
      $1468 = HEAP32[$1467>>2]|0;
      $1469 = (($1465) - ($1468))|0;
      $1470 = ($1462|0)!=($1469|0);
      if ($1470) {
       label = 15;
      }
     }
     break;
    }
    case 72:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $1471 = $8;
     $1472 = ($1471|0)!=(0);
     if ($1472) {
      $1473 = $8;
      $1474 = $7;
      $1475 = ((($1474)) + 4|0);
      $1476 = HEAP32[$1475>>2]|0;
      $1477 = ($1473|0)!=($1476|0);
      if ($1477) {
       label = 13;
       break L15;
      }
     }
     $1478 = $9;
     $1479 = $7;
     $1480 = ((($1479)) + 8|0);
     $1481 = HEAP32[$1480>>2]|0;
     $1482 = ($1478|0)!=($1481|0);
     if ($1482) {
      label = 14;
     } else {
      $1483 = $10;
      $1484 = $7;
      $1485 = ((($1484)) + 12|0);
      $1486 = HEAP32[$1485>>2]|0;
      $1487 = $7;
      $1488 = ((($1487)) + 8|0);
      $1489 = HEAP32[$1488>>2]|0;
      $1490 = (($1486) - ($1489))|0;
      $1491 = ($1483|0)!=($1490|0);
      if ($1491) {
       label = 15;
      }
     }
     break;
    }
    case 73:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $1492 = $8;
     $1493 = ($1492|0)!=(0);
     if ($1493) {
      $1494 = $8;
      $1495 = $7;
      $1496 = ((($1495)) + 4|0);
      $1497 = HEAP32[$1496>>2]|0;
      $1498 = ($1494|0)!=($1497|0);
      if ($1498) {
       label = 13;
       break L15;
      }
     }
     $1499 = $9;
     $1500 = $7;
     $1501 = ((($1500)) + 8|0);
     $1502 = HEAP32[$1501>>2]|0;
     $1503 = ($1499|0)!=($1502|0);
     if ($1503) {
      label = 14;
     } else {
      $1504 = $10;
      $1505 = $7;
      $1506 = ((($1505)) + 12|0);
      $1507 = HEAP32[$1506>>2]|0;
      $1508 = $7;
      $1509 = ((($1508)) + 8|0);
      $1510 = HEAP32[$1509>>2]|0;
      $1511 = (($1507) - ($1510))|0;
      $1512 = ($1504|0)!=($1511|0);
      if ($1512) {
       label = 15;
      }
     }
     break;
    }
    case 74:  {
     $8 = 1;
     $9 = 3;
     $10 = -1;
     $1513 = $8;
     $1514 = ($1513|0)!=(0);
     if ($1514) {
      $1515 = $8;
      $1516 = $7;
      $1517 = ((($1516)) + 4|0);
      $1518 = HEAP32[$1517>>2]|0;
      $1519 = ($1515|0)!=($1518|0);
      if ($1519) {
       label = 13;
       break L15;
      }
     }
     $1520 = $9;
     $1521 = $7;
     $1522 = ((($1521)) + 8|0);
     $1523 = HEAP32[$1522>>2]|0;
     $1524 = ($1520|0)!=($1523|0);
     if ($1524) {
      label = 14;
     } else {
      $1525 = $10;
      $1526 = $7;
      $1527 = ((($1526)) + 12|0);
      $1528 = HEAP32[$1527>>2]|0;
      $1529 = $7;
      $1530 = ((($1529)) + 8|0);
      $1531 = HEAP32[$1530>>2]|0;
      $1532 = (($1528) - ($1531))|0;
      $1533 = ($1525|0)!=($1532|0);
      if ($1533) {
       label = 15;
      }
     }
     break;
    }
    case 75:  {
     $8 = 1;
     $9 = 3;
     $10 = -1;
     $1534 = $8;
     $1535 = ($1534|0)!=(0);
     if ($1535) {
      $1536 = $8;
      $1537 = $7;
      $1538 = ((($1537)) + 4|0);
      $1539 = HEAP32[$1538>>2]|0;
      $1540 = ($1536|0)!=($1539|0);
      if ($1540) {
       label = 13;
       break L15;
      }
     }
     $1541 = $9;
     $1542 = $7;
     $1543 = ((($1542)) + 8|0);
     $1544 = HEAP32[$1543>>2]|0;
     $1545 = ($1541|0)!=($1544|0);
     if ($1545) {
      label = 14;
     } else {
      $1546 = $10;
      $1547 = $7;
      $1548 = ((($1547)) + 12|0);
      $1549 = HEAP32[$1548>>2]|0;
      $1550 = $7;
      $1551 = ((($1550)) + 8|0);
      $1552 = HEAP32[$1551>>2]|0;
      $1553 = (($1549) - ($1552))|0;
      $1554 = ($1546|0)!=($1553|0);
      if ($1554) {
       label = 15;
      }
     }
     break;
    }
    case 76:  {
     $8 = 1;
     $9 = 3;
     $10 = -1;
     $1555 = $8;
     $1556 = ($1555|0)!=(0);
     if ($1556) {
      $1557 = $8;
      $1558 = $7;
      $1559 = ((($1558)) + 4|0);
      $1560 = HEAP32[$1559>>2]|0;
      $1561 = ($1557|0)!=($1560|0);
      if ($1561) {
       label = 13;
       break L15;
      }
     }
     $1562 = $9;
     $1563 = $7;
     $1564 = ((($1563)) + 8|0);
     $1565 = HEAP32[$1564>>2]|0;
     $1566 = ($1562|0)!=($1565|0);
     if ($1566) {
      label = 14;
     } else {
      $1567 = $10;
      $1568 = $7;
      $1569 = ((($1568)) + 12|0);
      $1570 = HEAP32[$1569>>2]|0;
      $1571 = $7;
      $1572 = ((($1571)) + 8|0);
      $1573 = HEAP32[$1572>>2]|0;
      $1574 = (($1570) - ($1573))|0;
      $1575 = ($1567|0)!=($1574|0);
      if ($1575) {
       label = 15;
      }
     }
     break;
    }
    case 80:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $1576 = $8;
     $1577 = ($1576|0)!=(0);
     if ($1577) {
      $1578 = $8;
      $1579 = $7;
      $1580 = ((($1579)) + 4|0);
      $1581 = HEAP32[$1580>>2]|0;
      $1582 = ($1578|0)!=($1581|0);
      if ($1582) {
       label = 13;
       break L15;
      }
     }
     $1583 = $9;
     $1584 = $7;
     $1585 = ((($1584)) + 8|0);
     $1586 = HEAP32[$1585>>2]|0;
     $1587 = ($1583|0)!=($1586|0);
     if ($1587) {
      label = 14;
     } else {
      $1588 = $10;
      $1589 = $7;
      $1590 = ((($1589)) + 12|0);
      $1591 = HEAP32[$1590>>2]|0;
      $1592 = $7;
      $1593 = ((($1592)) + 8|0);
      $1594 = HEAP32[$1593>>2]|0;
      $1595 = (($1591) - ($1594))|0;
      $1596 = ($1588|0)!=($1595|0);
      if ($1596) {
       label = 15;
      }
     }
     break;
    }
    case 81:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1597 = $8;
     $1598 = ($1597|0)!=(0);
     if ($1598) {
      $1599 = $8;
      $1600 = $7;
      $1601 = ((($1600)) + 4|0);
      $1602 = HEAP32[$1601>>2]|0;
      $1603 = ($1599|0)!=($1602|0);
      if ($1603) {
       label = 13;
       break L15;
      }
     }
     $1604 = $9;
     $1605 = $7;
     $1606 = ((($1605)) + 8|0);
     $1607 = HEAP32[$1606>>2]|0;
     $1608 = ($1604|0)!=($1607|0);
     if ($1608) {
      label = 14;
     } else {
      $1609 = $10;
      $1610 = $7;
      $1611 = ((($1610)) + 12|0);
      $1612 = HEAP32[$1611>>2]|0;
      $1613 = $7;
      $1614 = ((($1613)) + 8|0);
      $1615 = HEAP32[$1614>>2]|0;
      $1616 = (($1612) - ($1615))|0;
      $1617 = ($1609|0)!=($1616|0);
      if ($1617) {
       label = 15;
      }
     }
     break;
    }
    case 82:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1618 = $8;
     $1619 = ($1618|0)!=(0);
     if ($1619) {
      $1620 = $8;
      $1621 = $7;
      $1622 = ((($1621)) + 4|0);
      $1623 = HEAP32[$1622>>2]|0;
      $1624 = ($1620|0)!=($1623|0);
      if ($1624) {
       label = 13;
       break L15;
      }
     }
     $1625 = $9;
     $1626 = $7;
     $1627 = ((($1626)) + 8|0);
     $1628 = HEAP32[$1627>>2]|0;
     $1629 = ($1625|0)!=($1628|0);
     if ($1629) {
      label = 14;
     } else {
      $1630 = $10;
      $1631 = $7;
      $1632 = ((($1631)) + 12|0);
      $1633 = HEAP32[$1632>>2]|0;
      $1634 = $7;
      $1635 = ((($1634)) + 8|0);
      $1636 = HEAP32[$1635>>2]|0;
      $1637 = (($1633) - ($1636))|0;
      $1638 = ($1630|0)!=($1637|0);
      if ($1638) {
       label = 15;
      }
     }
     break;
    }
    case 83:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1639 = $8;
     $1640 = ($1639|0)!=(0);
     if ($1640) {
      $1641 = $8;
      $1642 = $7;
      $1643 = ((($1642)) + 4|0);
      $1644 = HEAP32[$1643>>2]|0;
      $1645 = ($1641|0)!=($1644|0);
      if ($1645) {
       label = 13;
       break L15;
      }
     }
     $1646 = $9;
     $1647 = $7;
     $1648 = ((($1647)) + 8|0);
     $1649 = HEAP32[$1648>>2]|0;
     $1650 = ($1646|0)!=($1649|0);
     if ($1650) {
      label = 14;
     } else {
      $1651 = $10;
      $1652 = $7;
      $1653 = ((($1652)) + 12|0);
      $1654 = HEAP32[$1653>>2]|0;
      $1655 = $7;
      $1656 = ((($1655)) + 8|0);
      $1657 = HEAP32[$1656>>2]|0;
      $1658 = (($1654) - ($1657))|0;
      $1659 = ($1651|0)!=($1658|0);
      if ($1659) {
       label = 15;
      }
     }
     break;
    }
    case 84:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1660 = $8;
     $1661 = ($1660|0)!=(0);
     if ($1661) {
      $1662 = $8;
      $1663 = $7;
      $1664 = ((($1663)) + 4|0);
      $1665 = HEAP32[$1664>>2]|0;
      $1666 = ($1662|0)!=($1665|0);
      if ($1666) {
       label = 13;
       break L15;
      }
     }
     $1667 = $9;
     $1668 = $7;
     $1669 = ((($1668)) + 8|0);
     $1670 = HEAP32[$1669>>2]|0;
     $1671 = ($1667|0)!=($1670|0);
     if ($1671) {
      label = 14;
     } else {
      $1672 = $10;
      $1673 = $7;
      $1674 = ((($1673)) + 12|0);
      $1675 = HEAP32[$1674>>2]|0;
      $1676 = $7;
      $1677 = ((($1676)) + 8|0);
      $1678 = HEAP32[$1677>>2]|0;
      $1679 = (($1675) - ($1678))|0;
      $1680 = ($1672|0)!=($1679|0);
      if ($1680) {
       label = 15;
      }
     }
     break;
    }
    case 85:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1681 = $8;
     $1682 = ($1681|0)!=(0);
     if ($1682) {
      $1683 = $8;
      $1684 = $7;
      $1685 = ((($1684)) + 4|0);
      $1686 = HEAP32[$1685>>2]|0;
      $1687 = ($1683|0)!=($1686|0);
      if ($1687) {
       label = 13;
       break L15;
      }
     }
     $1688 = $9;
     $1689 = $7;
     $1690 = ((($1689)) + 8|0);
     $1691 = HEAP32[$1690>>2]|0;
     $1692 = ($1688|0)!=($1691|0);
     if ($1692) {
      label = 14;
     } else {
      $1693 = $10;
      $1694 = $7;
      $1695 = ((($1694)) + 12|0);
      $1696 = HEAP32[$1695>>2]|0;
      $1697 = $7;
      $1698 = ((($1697)) + 8|0);
      $1699 = HEAP32[$1698>>2]|0;
      $1700 = (($1696) - ($1699))|0;
      $1701 = ($1693|0)!=($1700|0);
      if ($1701) {
       label = 15;
      }
     }
     break;
    }
    case 87:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1702 = $8;
     $1703 = ($1702|0)!=(0);
     if ($1703) {
      $1704 = $8;
      $1705 = $7;
      $1706 = ((($1705)) + 4|0);
      $1707 = HEAP32[$1706>>2]|0;
      $1708 = ($1704|0)!=($1707|0);
      if ($1708) {
       label = 13;
       break L15;
      }
     }
     $1709 = $9;
     $1710 = $7;
     $1711 = ((($1710)) + 8|0);
     $1712 = HEAP32[$1711>>2]|0;
     $1713 = ($1709|0)!=($1712|0);
     if ($1713) {
      label = 14;
     } else {
      $1714 = $10;
      $1715 = $7;
      $1716 = ((($1715)) + 12|0);
      $1717 = HEAP32[$1716>>2]|0;
      $1718 = $7;
      $1719 = ((($1718)) + 8|0);
      $1720 = HEAP32[$1719>>2]|0;
      $1721 = (($1717) - ($1720))|0;
      $1722 = ($1714|0)!=($1721|0);
      if ($1722) {
       label = 15;
      }
     }
     break;
    }
    case 88:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1723 = $8;
     $1724 = ($1723|0)!=(0);
     if ($1724) {
      $1725 = $8;
      $1726 = $7;
      $1727 = ((($1726)) + 4|0);
      $1728 = HEAP32[$1727>>2]|0;
      $1729 = ($1725|0)!=($1728|0);
      if ($1729) {
       label = 13;
       break L15;
      }
     }
     $1730 = $9;
     $1731 = $7;
     $1732 = ((($1731)) + 8|0);
     $1733 = HEAP32[$1732>>2]|0;
     $1734 = ($1730|0)!=($1733|0);
     if ($1734) {
      label = 14;
     } else {
      $1735 = $10;
      $1736 = $7;
      $1737 = ((($1736)) + 12|0);
      $1738 = HEAP32[$1737>>2]|0;
      $1739 = $7;
      $1740 = ((($1739)) + 8|0);
      $1741 = HEAP32[$1740>>2]|0;
      $1742 = (($1738) - ($1741))|0;
      $1743 = ($1735|0)!=($1742|0);
      if ($1743) {
       label = 15;
      }
     }
     break;
    }
    case 89:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $1744 = $8;
     $1745 = ($1744|0)!=(0);
     if ($1745) {
      $1746 = $8;
      $1747 = $7;
      $1748 = ((($1747)) + 4|0);
      $1749 = HEAP32[$1748>>2]|0;
      $1750 = ($1746|0)!=($1749|0);
      if ($1750) {
       label = 13;
       break L15;
      }
     }
     $1751 = $9;
     $1752 = $7;
     $1753 = ((($1752)) + 8|0);
     $1754 = HEAP32[$1753>>2]|0;
     $1755 = ($1751|0)!=($1754|0);
     if ($1755) {
      label = 14;
     } else {
      $1756 = $10;
      $1757 = $7;
      $1758 = ((($1757)) + 12|0);
      $1759 = HEAP32[$1758>>2]|0;
      $1760 = $7;
      $1761 = ((($1760)) + 8|0);
      $1762 = HEAP32[$1761>>2]|0;
      $1763 = (($1759) - ($1762))|0;
      $1764 = ($1756|0)!=($1763|0);
      if ($1764) {
       label = 15;
      }
     }
     break;
    }
    case 90:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $1765 = $8;
     $1766 = ($1765|0)!=(0);
     if ($1766) {
      $1767 = $8;
      $1768 = $7;
      $1769 = ((($1768)) + 4|0);
      $1770 = HEAP32[$1769>>2]|0;
      $1771 = ($1767|0)!=($1770|0);
      if ($1771) {
       label = 13;
       break L15;
      }
     }
     $1772 = $9;
     $1773 = $7;
     $1774 = ((($1773)) + 8|0);
     $1775 = HEAP32[$1774>>2]|0;
     $1776 = ($1772|0)!=($1775|0);
     if ($1776) {
      label = 14;
     } else {
      $1777 = $10;
      $1778 = $7;
      $1779 = ((($1778)) + 12|0);
      $1780 = HEAP32[$1779>>2]|0;
      $1781 = $7;
      $1782 = ((($1781)) + 8|0);
      $1783 = HEAP32[$1782>>2]|0;
      $1784 = (($1780) - ($1783))|0;
      $1785 = ($1777|0)!=($1784|0);
      if ($1785) {
       label = 15;
      }
     }
     break;
    }
    case 91:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $1786 = $8;
     $1787 = ($1786|0)!=(0);
     if ($1787) {
      $1788 = $8;
      $1789 = $7;
      $1790 = ((($1789)) + 4|0);
      $1791 = HEAP32[$1790>>2]|0;
      $1792 = ($1788|0)!=($1791|0);
      if ($1792) {
       label = 13;
       break L15;
      }
     }
     $1793 = $9;
     $1794 = $7;
     $1795 = ((($1794)) + 8|0);
     $1796 = HEAP32[$1795>>2]|0;
     $1797 = ($1793|0)!=($1796|0);
     if ($1797) {
      label = 14;
     } else {
      $1798 = $10;
      $1799 = $7;
      $1800 = ((($1799)) + 12|0);
      $1801 = HEAP32[$1800>>2]|0;
      $1802 = $7;
      $1803 = ((($1802)) + 8|0);
      $1804 = HEAP32[$1803>>2]|0;
      $1805 = (($1801) - ($1804))|0;
      $1806 = ($1798|0)!=($1805|0);
      if ($1806) {
       label = 15;
      }
     }
     break;
    }
    case 92:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $1807 = $8;
     $1808 = ($1807|0)!=(0);
     if ($1808) {
      $1809 = $8;
      $1810 = $7;
      $1811 = ((($1810)) + 4|0);
      $1812 = HEAP32[$1811>>2]|0;
      $1813 = ($1809|0)!=($1812|0);
      if ($1813) {
       label = 13;
       break L15;
      }
     }
     $1814 = $9;
     $1815 = $7;
     $1816 = ((($1815)) + 8|0);
     $1817 = HEAP32[$1816>>2]|0;
     $1818 = ($1814|0)!=($1817|0);
     if ($1818) {
      label = 14;
     } else {
      $1819 = $10;
      $1820 = $7;
      $1821 = ((($1820)) + 12|0);
      $1822 = HEAP32[$1821>>2]|0;
      $1823 = $7;
      $1824 = ((($1823)) + 8|0);
      $1825 = HEAP32[$1824>>2]|0;
      $1826 = (($1822) - ($1825))|0;
      $1827 = ($1819|0)!=($1826|0);
      if ($1827) {
       label = 15;
      }
     }
     break;
    }
    case 93:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $1828 = $8;
     $1829 = ($1828|0)!=(0);
     if ($1829) {
      $1830 = $8;
      $1831 = $7;
      $1832 = ((($1831)) + 4|0);
      $1833 = HEAP32[$1832>>2]|0;
      $1834 = ($1830|0)!=($1833|0);
      if ($1834) {
       label = 13;
       break L15;
      }
     }
     $1835 = $9;
     $1836 = $7;
     $1837 = ((($1836)) + 8|0);
     $1838 = HEAP32[$1837>>2]|0;
     $1839 = ($1835|0)!=($1838|0);
     if ($1839) {
      label = 14;
     } else {
      $1840 = $10;
      $1841 = $7;
      $1842 = ((($1841)) + 12|0);
      $1843 = HEAP32[$1842>>2]|0;
      $1844 = $7;
      $1845 = ((($1844)) + 8|0);
      $1846 = HEAP32[$1845>>2]|0;
      $1847 = (($1843) - ($1846))|0;
      $1848 = ($1840|0)!=($1847|0);
      if ($1848) {
       label = 15;
      }
     }
     break;
    }
    case 96:  {
     $8 = 1;
     $9 = 2;
     $10 = 0;
     $1849 = $8;
     $1850 = ($1849|0)!=(0);
     if ($1850) {
      $1851 = $8;
      $1852 = $7;
      $1853 = ((($1852)) + 4|0);
      $1854 = HEAP32[$1853>>2]|0;
      $1855 = ($1851|0)!=($1854|0);
      if ($1855) {
       label = 13;
       break L15;
      }
     }
     $1856 = $9;
     $1857 = $7;
     $1858 = ((($1857)) + 8|0);
     $1859 = HEAP32[$1858>>2]|0;
     $1860 = ($1856|0)!=($1859|0);
     if ($1860) {
      label = 14;
     } else {
      $1861 = $10;
      $1862 = $7;
      $1863 = ((($1862)) + 12|0);
      $1864 = HEAP32[$1863>>2]|0;
      $1865 = $7;
      $1866 = ((($1865)) + 8|0);
      $1867 = HEAP32[$1866>>2]|0;
      $1868 = (($1864) - ($1867))|0;
      $1869 = ($1861|0)!=($1868|0);
      if ($1869) {
       label = 15;
      }
     }
     break;
    }
    case 97:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1870 = $8;
     $1871 = ($1870|0)!=(0);
     if ($1871) {
      $1872 = $8;
      $1873 = $7;
      $1874 = ((($1873)) + 4|0);
      $1875 = HEAP32[$1874>>2]|0;
      $1876 = ($1872|0)!=($1875|0);
      if ($1876) {
       label = 13;
       break L15;
      }
     }
     $1877 = $9;
     $1878 = $7;
     $1879 = ((($1878)) + 8|0);
     $1880 = HEAP32[$1879>>2]|0;
     $1881 = ($1877|0)!=($1880|0);
     if ($1881) {
      label = 14;
     } else {
      $1882 = $10;
      $1883 = $7;
      $1884 = ((($1883)) + 12|0);
      $1885 = HEAP32[$1884>>2]|0;
      $1886 = $7;
      $1887 = ((($1886)) + 8|0);
      $1888 = HEAP32[$1887>>2]|0;
      $1889 = (($1885) - ($1888))|0;
      $1890 = ($1882|0)!=($1889|0);
      if ($1890) {
       label = 15;
      }
     }
     break;
    }
    case 98:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1891 = $8;
     $1892 = ($1891|0)!=(0);
     if ($1892) {
      $1893 = $8;
      $1894 = $7;
      $1895 = ((($1894)) + 4|0);
      $1896 = HEAP32[$1895>>2]|0;
      $1897 = ($1893|0)!=($1896|0);
      if ($1897) {
       label = 13;
       break L15;
      }
     }
     $1898 = $9;
     $1899 = $7;
     $1900 = ((($1899)) + 8|0);
     $1901 = HEAP32[$1900>>2]|0;
     $1902 = ($1898|0)!=($1901|0);
     if ($1902) {
      label = 14;
     } else {
      $1903 = $10;
      $1904 = $7;
      $1905 = ((($1904)) + 12|0);
      $1906 = HEAP32[$1905>>2]|0;
      $1907 = $7;
      $1908 = ((($1907)) + 8|0);
      $1909 = HEAP32[$1908>>2]|0;
      $1910 = (($1906) - ($1909))|0;
      $1911 = ($1903|0)!=($1910|0);
      if ($1911) {
       label = 15;
      }
     }
     break;
    }
    case 99:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1912 = $8;
     $1913 = ($1912|0)!=(0);
     if ($1913) {
      $1914 = $8;
      $1915 = $7;
      $1916 = ((($1915)) + 4|0);
      $1917 = HEAP32[$1916>>2]|0;
      $1918 = ($1914|0)!=($1917|0);
      if ($1918) {
       label = 13;
       break L15;
      }
     }
     $1919 = $9;
     $1920 = $7;
     $1921 = ((($1920)) + 8|0);
     $1922 = HEAP32[$1921>>2]|0;
     $1923 = ($1919|0)!=($1922|0);
     if ($1923) {
      label = 14;
     } else {
      $1924 = $10;
      $1925 = $7;
      $1926 = ((($1925)) + 12|0);
      $1927 = HEAP32[$1926>>2]|0;
      $1928 = $7;
      $1929 = ((($1928)) + 8|0);
      $1930 = HEAP32[$1929>>2]|0;
      $1931 = (($1927) - ($1930))|0;
      $1932 = ($1924|0)!=($1931|0);
      if ($1932) {
       label = 15;
      }
     }
     break;
    }
    case 100:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1933 = $8;
     $1934 = ($1933|0)!=(0);
     if ($1934) {
      $1935 = $8;
      $1936 = $7;
      $1937 = ((($1936)) + 4|0);
      $1938 = HEAP32[$1937>>2]|0;
      $1939 = ($1935|0)!=($1938|0);
      if ($1939) {
       label = 13;
       break L15;
      }
     }
     $1940 = $9;
     $1941 = $7;
     $1942 = ((($1941)) + 8|0);
     $1943 = HEAP32[$1942>>2]|0;
     $1944 = ($1940|0)!=($1943|0);
     if ($1944) {
      label = 14;
     } else {
      $1945 = $10;
      $1946 = $7;
      $1947 = ((($1946)) + 12|0);
      $1948 = HEAP32[$1947>>2]|0;
      $1949 = $7;
      $1950 = ((($1949)) + 8|0);
      $1951 = HEAP32[$1950>>2]|0;
      $1952 = (($1948) - ($1951))|0;
      $1953 = ($1945|0)!=($1952|0);
      if ($1953) {
       label = 15;
      }
     }
     break;
    }
    case 101:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $1954 = $8;
     $1955 = ($1954|0)!=(0);
     if ($1955) {
      $1956 = $8;
      $1957 = $7;
      $1958 = ((($1957)) + 4|0);
      $1959 = HEAP32[$1958>>2]|0;
      $1960 = ($1956|0)!=($1959|0);
      if ($1960) {
       label = 13;
       break L15;
      }
     }
     $1961 = $9;
     $1962 = $7;
     $1963 = ((($1962)) + 8|0);
     $1964 = HEAP32[$1963>>2]|0;
     $1965 = ($1961|0)!=($1964|0);
     if ($1965) {
      label = 14;
     } else {
      $1966 = $10;
      $1967 = $7;
      $1968 = ((($1967)) + 12|0);
      $1969 = HEAP32[$1968>>2]|0;
      $1970 = $7;
      $1971 = ((($1970)) + 8|0);
      $1972 = HEAP32[$1971>>2]|0;
      $1973 = (($1969) - ($1972))|0;
      $1974 = ($1966|0)!=($1973|0);
      if ($1974) {
       label = 15;
      }
     }
     break;
    }
    case 103:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $1975 = $8;
     $1976 = ($1975|0)!=(0);
     if ($1976) {
      $1977 = $8;
      $1978 = $7;
      $1979 = ((($1978)) + 4|0);
      $1980 = HEAP32[$1979>>2]|0;
      $1981 = ($1977|0)!=($1980|0);
      if ($1981) {
       label = 13;
       break L15;
      }
     }
     $1982 = $9;
     $1983 = $7;
     $1984 = ((($1983)) + 8|0);
     $1985 = HEAP32[$1984>>2]|0;
     $1986 = ($1982|0)!=($1985|0);
     if ($1986) {
      label = 14;
     } else {
      $1987 = $10;
      $1988 = $7;
      $1989 = ((($1988)) + 12|0);
      $1990 = HEAP32[$1989>>2]|0;
      $1991 = $7;
      $1992 = ((($1991)) + 8|0);
      $1993 = HEAP32[$1992>>2]|0;
      $1994 = (($1990) - ($1993))|0;
      $1995 = ($1987|0)!=($1994|0);
      if ($1995) {
       label = 15;
      }
     }
     break;
    }
    case 104:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $1996 = $8;
     $1997 = ($1996|0)!=(0);
     if ($1997) {
      $1998 = $8;
      $1999 = $7;
      $2000 = ((($1999)) + 4|0);
      $2001 = HEAP32[$2000>>2]|0;
      $2002 = ($1998|0)!=($2001|0);
      if ($2002) {
       label = 13;
       break L15;
      }
     }
     $2003 = $9;
     $2004 = $7;
     $2005 = ((($2004)) + 8|0);
     $2006 = HEAP32[$2005>>2]|0;
     $2007 = ($2003|0)!=($2006|0);
     if ($2007) {
      label = 14;
     } else {
      $2008 = $10;
      $2009 = $7;
      $2010 = ((($2009)) + 12|0);
      $2011 = HEAP32[$2010>>2]|0;
      $2012 = $7;
      $2013 = ((($2012)) + 8|0);
      $2014 = HEAP32[$2013>>2]|0;
      $2015 = (($2011) - ($2014))|0;
      $2016 = ($2008|0)!=($2015|0);
      if ($2016) {
       label = 15;
      }
     }
     break;
    }
    case 105:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $2017 = $8;
     $2018 = ($2017|0)!=(0);
     if ($2018) {
      $2019 = $8;
      $2020 = $7;
      $2021 = ((($2020)) + 4|0);
      $2022 = HEAP32[$2021>>2]|0;
      $2023 = ($2019|0)!=($2022|0);
      if ($2023) {
       label = 13;
       break L15;
      }
     }
     $2024 = $9;
     $2025 = $7;
     $2026 = ((($2025)) + 8|0);
     $2027 = HEAP32[$2026>>2]|0;
     $2028 = ($2024|0)!=($2027|0);
     if ($2028) {
      label = 14;
     } else {
      $2029 = $10;
      $2030 = $7;
      $2031 = ((($2030)) + 12|0);
      $2032 = HEAP32[$2031>>2]|0;
      $2033 = $7;
      $2034 = ((($2033)) + 8|0);
      $2035 = HEAP32[$2034>>2]|0;
      $2036 = (($2032) - ($2035))|0;
      $2037 = ($2029|0)!=($2036|0);
      if ($2037) {
       label = 15;
      }
     }
     break;
    }
    case 106:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2038 = $8;
     $2039 = ($2038|0)!=(0);
     if ($2039) {
      $2040 = $8;
      $2041 = $7;
      $2042 = ((($2041)) + 4|0);
      $2043 = HEAP32[$2042>>2]|0;
      $2044 = ($2040|0)!=($2043|0);
      if ($2044) {
       label = 13;
       break L15;
      }
     }
     $2045 = $9;
     $2046 = $7;
     $2047 = ((($2046)) + 8|0);
     $2048 = HEAP32[$2047>>2]|0;
     $2049 = ($2045|0)!=($2048|0);
     if ($2049) {
      label = 14;
     } else {
      $2050 = $10;
      $2051 = $7;
      $2052 = ((($2051)) + 12|0);
      $2053 = HEAP32[$2052>>2]|0;
      $2054 = $7;
      $2055 = ((($2054)) + 8|0);
      $2056 = HEAP32[$2055>>2]|0;
      $2057 = (($2053) - ($2056))|0;
      $2058 = ($2050|0)!=($2057|0);
      if ($2058) {
       label = 15;
      }
     }
     break;
    }
    case 107:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2059 = $8;
     $2060 = ($2059|0)!=(0);
     if ($2060) {
      $2061 = $8;
      $2062 = $7;
      $2063 = ((($2062)) + 4|0);
      $2064 = HEAP32[$2063>>2]|0;
      $2065 = ($2061|0)!=($2064|0);
      if ($2065) {
       label = 13;
       break L15;
      }
     }
     $2066 = $9;
     $2067 = $7;
     $2068 = ((($2067)) + 8|0);
     $2069 = HEAP32[$2068>>2]|0;
     $2070 = ($2066|0)!=($2069|0);
     if ($2070) {
      label = 14;
     } else {
      $2071 = $10;
      $2072 = $7;
      $2073 = ((($2072)) + 12|0);
      $2074 = HEAP32[$2073>>2]|0;
      $2075 = $7;
      $2076 = ((($2075)) + 8|0);
      $2077 = HEAP32[$2076>>2]|0;
      $2078 = (($2074) - ($2077))|0;
      $2079 = ($2071|0)!=($2078|0);
      if ($2079) {
       label = 15;
      }
     }
     break;
    }
    case 108:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2080 = $8;
     $2081 = ($2080|0)!=(0);
     if ($2081) {
      $2082 = $8;
      $2083 = $7;
      $2084 = ((($2083)) + 4|0);
      $2085 = HEAP32[$2084>>2]|0;
      $2086 = ($2082|0)!=($2085|0);
      if ($2086) {
       label = 13;
       break L15;
      }
     }
     $2087 = $9;
     $2088 = $7;
     $2089 = ((($2088)) + 8|0);
     $2090 = HEAP32[$2089>>2]|0;
     $2091 = ($2087|0)!=($2090|0);
     if ($2091) {
      label = 14;
     } else {
      $2092 = $10;
      $2093 = $7;
      $2094 = ((($2093)) + 12|0);
      $2095 = HEAP32[$2094>>2]|0;
      $2096 = $7;
      $2097 = ((($2096)) + 8|0);
      $2098 = HEAP32[$2097>>2]|0;
      $2099 = (($2095) - ($2098))|0;
      $2100 = ($2092|0)!=($2099|0);
      if ($2100) {
       label = 15;
      }
     }
     break;
    }
    case 109:  {
     $8 = 1;
     $9 = 2;
     $10 = 0;
     $2101 = $8;
     $2102 = ($2101|0)!=(0);
     if ($2102) {
      $2103 = $8;
      $2104 = $7;
      $2105 = ((($2104)) + 4|0);
      $2106 = HEAP32[$2105>>2]|0;
      $2107 = ($2103|0)!=($2106|0);
      if ($2107) {
       label = 13;
       break L15;
      }
     }
     $2108 = $9;
     $2109 = $7;
     $2110 = ((($2109)) + 8|0);
     $2111 = HEAP32[$2110>>2]|0;
     $2112 = ($2108|0)!=($2111|0);
     if ($2112) {
      label = 14;
     } else {
      $2113 = $10;
      $2114 = $7;
      $2115 = ((($2114)) + 12|0);
      $2116 = HEAP32[$2115>>2]|0;
      $2117 = $7;
      $2118 = ((($2117)) + 8|0);
      $2119 = HEAP32[$2118>>2]|0;
      $2120 = (($2116) - ($2119))|0;
      $2121 = ($2113|0)!=($2120|0);
      if ($2121) {
       label = 15;
      }
     }
     break;
    }
    case 112:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $2122 = $8;
     $2123 = ($2122|0)!=(0);
     if ($2123) {
      $2124 = $8;
      $2125 = $7;
      $2126 = ((($2125)) + 4|0);
      $2127 = HEAP32[$2126>>2]|0;
      $2128 = ($2124|0)!=($2127|0);
      if ($2128) {
       label = 13;
       break L15;
      }
     }
     $2129 = $9;
     $2130 = $7;
     $2131 = ((($2130)) + 8|0);
     $2132 = HEAP32[$2131>>2]|0;
     $2133 = ($2129|0)!=($2132|0);
     if ($2133) {
      label = 14;
     } else {
      $2134 = $10;
      $2135 = $7;
      $2136 = ((($2135)) + 12|0);
      $2137 = HEAP32[$2136>>2]|0;
      $2138 = $7;
      $2139 = ((($2138)) + 8|0);
      $2140 = HEAP32[$2139>>2]|0;
      $2141 = (($2137) - ($2140))|0;
      $2142 = ($2134|0)!=($2141|0);
      if ($2142) {
       label = 15;
      }
     }
     break;
    }
    case 113:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2143 = $8;
     $2144 = ($2143|0)!=(0);
     if ($2144) {
      $2145 = $8;
      $2146 = $7;
      $2147 = ((($2146)) + 4|0);
      $2148 = HEAP32[$2147>>2]|0;
      $2149 = ($2145|0)!=($2148|0);
      if ($2149) {
       label = 13;
       break L15;
      }
     }
     $2150 = $9;
     $2151 = $7;
     $2152 = ((($2151)) + 8|0);
     $2153 = HEAP32[$2152>>2]|0;
     $2154 = ($2150|0)!=($2153|0);
     if ($2154) {
      label = 14;
     } else {
      $2155 = $10;
      $2156 = $7;
      $2157 = ((($2156)) + 12|0);
      $2158 = HEAP32[$2157>>2]|0;
      $2159 = $7;
      $2160 = ((($2159)) + 8|0);
      $2161 = HEAP32[$2160>>2]|0;
      $2162 = (($2158) - ($2161))|0;
      $2163 = ($2155|0)!=($2162|0);
      if ($2163) {
       label = 15;
      }
     }
     break;
    }
    case 114:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2164 = $8;
     $2165 = ($2164|0)!=(0);
     if ($2165) {
      $2166 = $8;
      $2167 = $7;
      $2168 = ((($2167)) + 4|0);
      $2169 = HEAP32[$2168>>2]|0;
      $2170 = ($2166|0)!=($2169|0);
      if ($2170) {
       label = 13;
       break L15;
      }
     }
     $2171 = $9;
     $2172 = $7;
     $2173 = ((($2172)) + 8|0);
     $2174 = HEAP32[$2173>>2]|0;
     $2175 = ($2171|0)!=($2174|0);
     if ($2175) {
      label = 14;
     } else {
      $2176 = $10;
      $2177 = $7;
      $2178 = ((($2177)) + 12|0);
      $2179 = HEAP32[$2178>>2]|0;
      $2180 = $7;
      $2181 = ((($2180)) + 8|0);
      $2182 = HEAP32[$2181>>2]|0;
      $2183 = (($2179) - ($2182))|0;
      $2184 = ($2176|0)!=($2183|0);
      if ($2184) {
       label = 15;
      }
     }
     break;
    }
    case 115:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2185 = $8;
     $2186 = ($2185|0)!=(0);
     if ($2186) {
      $2187 = $8;
      $2188 = $7;
      $2189 = ((($2188)) + 4|0);
      $2190 = HEAP32[$2189>>2]|0;
      $2191 = ($2187|0)!=($2190|0);
      if ($2191) {
       label = 13;
       break L15;
      }
     }
     $2192 = $9;
     $2193 = $7;
     $2194 = ((($2193)) + 8|0);
     $2195 = HEAP32[$2194>>2]|0;
     $2196 = ($2192|0)!=($2195|0);
     if ($2196) {
      label = 14;
     } else {
      $2197 = $10;
      $2198 = $7;
      $2199 = ((($2198)) + 12|0);
      $2200 = HEAP32[$2199>>2]|0;
      $2201 = $7;
      $2202 = ((($2201)) + 8|0);
      $2203 = HEAP32[$2202>>2]|0;
      $2204 = (($2200) - ($2203))|0;
      $2205 = ($2197|0)!=($2204|0);
      if ($2205) {
       label = 15;
      }
     }
     break;
    }
    case 116:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2206 = $8;
     $2207 = ($2206|0)!=(0);
     if ($2207) {
      $2208 = $8;
      $2209 = $7;
      $2210 = ((($2209)) + 4|0);
      $2211 = HEAP32[$2210>>2]|0;
      $2212 = ($2208|0)!=($2211|0);
      if ($2212) {
       label = 13;
       break L15;
      }
     }
     $2213 = $9;
     $2214 = $7;
     $2215 = ((($2214)) + 8|0);
     $2216 = HEAP32[$2215>>2]|0;
     $2217 = ($2213|0)!=($2216|0);
     if ($2217) {
      label = 14;
     } else {
      $2218 = $10;
      $2219 = $7;
      $2220 = ((($2219)) + 12|0);
      $2221 = HEAP32[$2220>>2]|0;
      $2222 = $7;
      $2223 = ((($2222)) + 8|0);
      $2224 = HEAP32[$2223>>2]|0;
      $2225 = (($2221) - ($2224))|0;
      $2226 = ($2218|0)!=($2225|0);
      if ($2226) {
       label = 15;
      }
     }
     break;
    }
    case 117:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2227 = $8;
     $2228 = ($2227|0)!=(0);
     if ($2228) {
      $2229 = $8;
      $2230 = $7;
      $2231 = ((($2230)) + 4|0);
      $2232 = HEAP32[$2231>>2]|0;
      $2233 = ($2229|0)!=($2232|0);
      if ($2233) {
       label = 13;
       break L15;
      }
     }
     $2234 = $9;
     $2235 = $7;
     $2236 = ((($2235)) + 8|0);
     $2237 = HEAP32[$2236>>2]|0;
     $2238 = ($2234|0)!=($2237|0);
     if ($2238) {
      label = 14;
     } else {
      $2239 = $10;
      $2240 = $7;
      $2241 = ((($2240)) + 12|0);
      $2242 = HEAP32[$2241>>2]|0;
      $2243 = $7;
      $2244 = ((($2243)) + 8|0);
      $2245 = HEAP32[$2244>>2]|0;
      $2246 = (($2242) - ($2245))|0;
      $2247 = ($2239|0)!=($2246|0);
      if ($2247) {
       label = 15;
      }
     }
     break;
    }
    case 119:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2248 = $8;
     $2249 = ($2248|0)!=(0);
     if ($2249) {
      $2250 = $8;
      $2251 = $7;
      $2252 = ((($2251)) + 4|0);
      $2253 = HEAP32[$2252>>2]|0;
      $2254 = ($2250|0)!=($2253|0);
      if ($2254) {
       label = 13;
       break L15;
      }
     }
     $2255 = $9;
     $2256 = $7;
     $2257 = ((($2256)) + 8|0);
     $2258 = HEAP32[$2257>>2]|0;
     $2259 = ($2255|0)!=($2258|0);
     if ($2259) {
      label = 14;
     } else {
      $2260 = $10;
      $2261 = $7;
      $2262 = ((($2261)) + 12|0);
      $2263 = HEAP32[$2262>>2]|0;
      $2264 = $7;
      $2265 = ((($2264)) + 8|0);
      $2266 = HEAP32[$2265>>2]|0;
      $2267 = (($2263) - ($2266))|0;
      $2268 = ($2260|0)!=($2267|0);
      if ($2268) {
       label = 15;
      }
     }
     break;
    }
    case 120:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2269 = $8;
     $2270 = ($2269|0)!=(0);
     if ($2270) {
      $2271 = $8;
      $2272 = $7;
      $2273 = ((($2272)) + 4|0);
      $2274 = HEAP32[$2273>>2]|0;
      $2275 = ($2271|0)!=($2274|0);
      if ($2275) {
       label = 13;
       break L15;
      }
     }
     $2276 = $9;
     $2277 = $7;
     $2278 = ((($2277)) + 8|0);
     $2279 = HEAP32[$2278>>2]|0;
     $2280 = ($2276|0)!=($2279|0);
     if ($2280) {
      label = 14;
     } else {
      $2281 = $10;
      $2282 = $7;
      $2283 = ((($2282)) + 12|0);
      $2284 = HEAP32[$2283>>2]|0;
      $2285 = $7;
      $2286 = ((($2285)) + 8|0);
      $2287 = HEAP32[$2286>>2]|0;
      $2288 = (($2284) - ($2287))|0;
      $2289 = ($2281|0)!=($2288|0);
      if ($2289) {
       label = 15;
      }
     }
     break;
    }
    case 121:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2290 = $8;
     $2291 = ($2290|0)!=(0);
     if ($2291) {
      $2292 = $8;
      $2293 = $7;
      $2294 = ((($2293)) + 4|0);
      $2295 = HEAP32[$2294>>2]|0;
      $2296 = ($2292|0)!=($2295|0);
      if ($2296) {
       label = 13;
       break L15;
      }
     }
     $2297 = $9;
     $2298 = $7;
     $2299 = ((($2298)) + 8|0);
     $2300 = HEAP32[$2299>>2]|0;
     $2301 = ($2297|0)!=($2300|0);
     if ($2301) {
      label = 14;
     } else {
      $2302 = $10;
      $2303 = $7;
      $2304 = ((($2303)) + 12|0);
      $2305 = HEAP32[$2304>>2]|0;
      $2306 = $7;
      $2307 = ((($2306)) + 8|0);
      $2308 = HEAP32[$2307>>2]|0;
      $2309 = (($2305) - ($2308))|0;
      $2310 = ($2302|0)!=($2309|0);
      if ($2310) {
       label = 15;
      }
     }
     break;
    }
    case 122:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $2311 = $8;
     $2312 = ($2311|0)!=(0);
     if ($2312) {
      $2313 = $8;
      $2314 = $7;
      $2315 = ((($2314)) + 4|0);
      $2316 = HEAP32[$2315>>2]|0;
      $2317 = ($2313|0)!=($2316|0);
      if ($2317) {
       label = 13;
       break L15;
      }
     }
     $2318 = $9;
     $2319 = $7;
     $2320 = ((($2319)) + 8|0);
     $2321 = HEAP32[$2320>>2]|0;
     $2322 = ($2318|0)!=($2321|0);
     if ($2322) {
      label = 14;
     } else {
      $2323 = $10;
      $2324 = $7;
      $2325 = ((($2324)) + 12|0);
      $2326 = HEAP32[$2325>>2]|0;
      $2327 = $7;
      $2328 = ((($2327)) + 8|0);
      $2329 = HEAP32[$2328>>2]|0;
      $2330 = (($2326) - ($2329))|0;
      $2331 = ($2323|0)!=($2330|0);
      if ($2331) {
       label = 15;
      }
     }
     break;
    }
    case 123:  {
     $8 = 1;
     $9 = 1;
     $10 = 0;
     $2332 = $8;
     $2333 = ($2332|0)!=(0);
     if ($2333) {
      $2334 = $8;
      $2335 = $7;
      $2336 = ((($2335)) + 4|0);
      $2337 = HEAP32[$2336>>2]|0;
      $2338 = ($2334|0)!=($2337|0);
      if ($2338) {
       label = 13;
       break L15;
      }
     }
     $2339 = $9;
     $2340 = $7;
     $2341 = ((($2340)) + 8|0);
     $2342 = HEAP32[$2341>>2]|0;
     $2343 = ($2339|0)!=($2342|0);
     if ($2343) {
      label = 14;
     } else {
      $2344 = $10;
      $2345 = $7;
      $2346 = ((($2345)) + 12|0);
      $2347 = HEAP32[$2346>>2]|0;
      $2348 = $7;
      $2349 = ((($2348)) + 8|0);
      $2350 = HEAP32[$2349>>2]|0;
      $2351 = (($2347) - ($2350))|0;
      $2352 = ($2344|0)!=($2351|0);
      if ($2352) {
       label = 15;
      }
     }
     break;
    }
    case 124:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $2353 = $8;
     $2354 = ($2353|0)!=(0);
     if ($2354) {
      $2355 = $8;
      $2356 = $7;
      $2357 = ((($2356)) + 4|0);
      $2358 = HEAP32[$2357>>2]|0;
      $2359 = ($2355|0)!=($2358|0);
      if ($2359) {
       label = 13;
       break L15;
      }
     }
     $2360 = $9;
     $2361 = $7;
     $2362 = ((($2361)) + 8|0);
     $2363 = HEAP32[$2362>>2]|0;
     $2364 = ($2360|0)!=($2363|0);
     if ($2364) {
      label = 14;
     } else {
      $2365 = $10;
      $2366 = $7;
      $2367 = ((($2366)) + 12|0);
      $2368 = HEAP32[$2367>>2]|0;
      $2369 = $7;
      $2370 = ((($2369)) + 8|0);
      $2371 = HEAP32[$2370>>2]|0;
      $2372 = (($2368) - ($2371))|0;
      $2373 = ($2365|0)!=($2372|0);
      if ($2373) {
       label = 15;
      }
     }
     break;
    }
    case 125:  {
     $8 = 1;
     $9 = 1;
     $10 = 1;
     $2374 = $8;
     $2375 = ($2374|0)!=(0);
     if ($2375) {
      $2376 = $8;
      $2377 = $7;
      $2378 = ((($2377)) + 4|0);
      $2379 = HEAP32[$2378>>2]|0;
      $2380 = ($2376|0)!=($2379|0);
      if ($2380) {
       label = 13;
       break L15;
      }
     }
     $2381 = $9;
     $2382 = $7;
     $2383 = ((($2382)) + 8|0);
     $2384 = HEAP32[$2383>>2]|0;
     $2385 = ($2381|0)!=($2384|0);
     if ($2385) {
      label = 14;
     } else {
      $2386 = $10;
      $2387 = $7;
      $2388 = ((($2387)) + 12|0);
      $2389 = HEAP32[$2388>>2]|0;
      $2390 = $7;
      $2391 = ((($2390)) + 8|0);
      $2392 = HEAP32[$2391>>2]|0;
      $2393 = (($2389) - ($2392))|0;
      $2394 = ($2386|0)!=($2393|0);
      if ($2394) {
       label = 15;
      }
     }
     break;
    }
    case 128:  {
     $8 = 1;
     $9 = 2;
     $10 = 0;
     $2395 = $8;
     $2396 = ($2395|0)!=(0);
     if ($2396) {
      $2397 = $8;
      $2398 = $7;
      $2399 = ((($2398)) + 4|0);
      $2400 = HEAP32[$2399>>2]|0;
      $2401 = ($2397|0)!=($2400|0);
      if ($2401) {
       label = 13;
       break L15;
      }
     }
     $2402 = $9;
     $2403 = $7;
     $2404 = ((($2403)) + 8|0);
     $2405 = HEAP32[$2404>>2]|0;
     $2406 = ($2402|0)!=($2405|0);
     if ($2406) {
      label = 14;
     } else {
      $2407 = $10;
      $2408 = $7;
      $2409 = ((($2408)) + 12|0);
      $2410 = HEAP32[$2409>>2]|0;
      $2411 = $7;
      $2412 = ((($2411)) + 8|0);
      $2413 = HEAP32[$2412>>2]|0;
      $2414 = (($2410) - ($2413))|0;
      $2415 = ($2407|0)!=($2414|0);
      if ($2415) {
       label = 15;
      }
     }
     break;
    }
    case 129:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $2416 = $8;
     $2417 = ($2416|0)!=(0);
     if ($2417) {
      $2418 = $8;
      $2419 = $7;
      $2420 = ((($2419)) + 4|0);
      $2421 = HEAP32[$2420>>2]|0;
      $2422 = ($2418|0)!=($2421|0);
      if ($2422) {
       label = 13;
       break L15;
      }
     }
     $2423 = $9;
     $2424 = $7;
     $2425 = ((($2424)) + 8|0);
     $2426 = HEAP32[$2425>>2]|0;
     $2427 = ($2423|0)!=($2426|0);
     if ($2427) {
      label = 14;
     } else {
      $2428 = $10;
      $2429 = $7;
      $2430 = ((($2429)) + 12|0);
      $2431 = HEAP32[$2430>>2]|0;
      $2432 = $7;
      $2433 = ((($2432)) + 8|0);
      $2434 = HEAP32[$2433>>2]|0;
      $2435 = (($2431) - ($2434))|0;
      $2436 = ($2428|0)!=($2435|0);
      if ($2436) {
       label = 15;
      }
     }
     break;
    }
    case 130:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $2437 = $8;
     $2438 = ($2437|0)!=(0);
     if ($2438) {
      $2439 = $8;
      $2440 = $7;
      $2441 = ((($2440)) + 4|0);
      $2442 = HEAP32[$2441>>2]|0;
      $2443 = ($2439|0)!=($2442|0);
      if ($2443) {
       label = 13;
       break L15;
      }
     }
     $2444 = $9;
     $2445 = $7;
     $2446 = ((($2445)) + 8|0);
     $2447 = HEAP32[$2446>>2]|0;
     $2448 = ($2444|0)!=($2447|0);
     if ($2448) {
      label = 14;
     } else {
      $2449 = $10;
      $2450 = $7;
      $2451 = ((($2450)) + 12|0);
      $2452 = HEAP32[$2451>>2]|0;
      $2453 = $7;
      $2454 = ((($2453)) + 8|0);
      $2455 = HEAP32[$2454>>2]|0;
      $2456 = (($2452) - ($2455))|0;
      $2457 = ($2449|0)!=($2456|0);
      if ($2457) {
       label = 15;
      }
     }
     break;
    }
    case 131:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $2458 = $8;
     $2459 = ($2458|0)!=(0);
     if ($2459) {
      $2460 = $8;
      $2461 = $7;
      $2462 = ((($2461)) + 4|0);
      $2463 = HEAP32[$2462>>2]|0;
      $2464 = ($2460|0)!=($2463|0);
      if ($2464) {
       label = 13;
       break L15;
      }
     }
     $2465 = $9;
     $2466 = $7;
     $2467 = ((($2466)) + 8|0);
     $2468 = HEAP32[$2467>>2]|0;
     $2469 = ($2465|0)!=($2468|0);
     if ($2469) {
      label = 14;
     } else {
      $2470 = $10;
      $2471 = $7;
      $2472 = ((($2471)) + 12|0);
      $2473 = HEAP32[$2472>>2]|0;
      $2474 = $7;
      $2475 = ((($2474)) + 8|0);
      $2476 = HEAP32[$2475>>2]|0;
      $2477 = (($2473) - ($2476))|0;
      $2478 = ($2470|0)!=($2477|0);
      if ($2478) {
       label = 15;
      }
     }
     break;
    }
    case 132:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $2479 = $8;
     $2480 = ($2479|0)!=(0);
     if ($2480) {
      $2481 = $8;
      $2482 = $7;
      $2483 = ((($2482)) + 4|0);
      $2484 = HEAP32[$2483>>2]|0;
      $2485 = ($2481|0)!=($2484|0);
      if ($2485) {
       label = 13;
       break L15;
      }
     }
     $2486 = $9;
     $2487 = $7;
     $2488 = ((($2487)) + 8|0);
     $2489 = HEAP32[$2488>>2]|0;
     $2490 = ($2486|0)!=($2489|0);
     if ($2490) {
      label = 14;
     } else {
      $2491 = $10;
      $2492 = $7;
      $2493 = ((($2492)) + 12|0);
      $2494 = HEAP32[$2493>>2]|0;
      $2495 = $7;
      $2496 = ((($2495)) + 8|0);
      $2497 = HEAP32[$2496>>2]|0;
      $2498 = (($2494) - ($2497))|0;
      $2499 = ($2491|0)!=($2498|0);
      if ($2499) {
       label = 15;
      }
     }
     break;
    }
    case 133:  {
     $8 = 1;
     $9 = 4;
     $10 = -2;
     $2500 = $8;
     $2501 = ($2500|0)!=(0);
     if ($2501) {
      $2502 = $8;
      $2503 = $7;
      $2504 = ((($2503)) + 4|0);
      $2505 = HEAP32[$2504>>2]|0;
      $2506 = ($2502|0)!=($2505|0);
      if ($2506) {
       label = 13;
       break L15;
      }
     }
     $2507 = $9;
     $2508 = $7;
     $2509 = ((($2508)) + 8|0);
     $2510 = HEAP32[$2509>>2]|0;
     $2511 = ($2507|0)!=($2510|0);
     if ($2511) {
      label = 14;
     } else {
      $2512 = $10;
      $2513 = $7;
      $2514 = ((($2513)) + 12|0);
      $2515 = HEAP32[$2514>>2]|0;
      $2516 = $7;
      $2517 = ((($2516)) + 8|0);
      $2518 = HEAP32[$2517>>2]|0;
      $2519 = (($2515) - ($2518))|0;
      $2520 = ($2512|0)!=($2519|0);
      if ($2520) {
       label = 15;
      }
     }
     break;
    }
    case 135:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $2521 = $8;
     $2522 = ($2521|0)!=(0);
     if ($2522) {
      $2523 = $8;
      $2524 = $7;
      $2525 = ((($2524)) + 4|0);
      $2526 = HEAP32[$2525>>2]|0;
      $2527 = ($2523|0)!=($2526|0);
      if ($2527) {
       label = 13;
       break L15;
      }
     }
     $2528 = $9;
     $2529 = $7;
     $2530 = ((($2529)) + 8|0);
     $2531 = HEAP32[$2530>>2]|0;
     $2532 = ($2528|0)!=($2531|0);
     if ($2532) {
      label = 14;
     } else {
      $2533 = $10;
      $2534 = $7;
      $2535 = ((($2534)) + 12|0);
      $2536 = HEAP32[$2535>>2]|0;
      $2537 = $7;
      $2538 = ((($2537)) + 8|0);
      $2539 = HEAP32[$2538>>2]|0;
      $2540 = (($2536) - ($2539))|0;
      $2541 = ($2533|0)!=($2540|0);
      if ($2541) {
       label = 15;
      }
     }
     break;
    }
    case 136:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $2542 = $8;
     $2543 = ($2542|0)!=(0);
     if ($2543) {
      $2544 = $8;
      $2545 = $7;
      $2546 = ((($2545)) + 4|0);
      $2547 = HEAP32[$2546>>2]|0;
      $2548 = ($2544|0)!=($2547|0);
      if ($2548) {
       label = 13;
       break L15;
      }
     }
     $2549 = $9;
     $2550 = $7;
     $2551 = ((($2550)) + 8|0);
     $2552 = HEAP32[$2551>>2]|0;
     $2553 = ($2549|0)!=($2552|0);
     if ($2553) {
      label = 14;
     } else {
      $2554 = $10;
      $2555 = $7;
      $2556 = ((($2555)) + 12|0);
      $2557 = HEAP32[$2556>>2]|0;
      $2558 = $7;
      $2559 = ((($2558)) + 8|0);
      $2560 = HEAP32[$2559>>2]|0;
      $2561 = (($2557) - ($2560))|0;
      $2562 = ($2554|0)!=($2561|0);
      if ($2562) {
       label = 15;
      }
     }
     break;
    }
    case 137:  {
     $8 = 1;
     $9 = 4;
     $10 = -3;
     $2563 = $8;
     $2564 = ($2563|0)!=(0);
     if ($2564) {
      $2565 = $8;
      $2566 = $7;
      $2567 = ((($2566)) + 4|0);
      $2568 = HEAP32[$2567>>2]|0;
      $2569 = ($2565|0)!=($2568|0);
      if ($2569) {
       label = 13;
       break L15;
      }
     }
     $2570 = $9;
     $2571 = $7;
     $2572 = ((($2571)) + 8|0);
     $2573 = HEAP32[$2572>>2]|0;
     $2574 = ($2570|0)!=($2573|0);
     if ($2574) {
      label = 14;
     } else {
      $2575 = $10;
      $2576 = $7;
      $2577 = ((($2576)) + 12|0);
      $2578 = HEAP32[$2577>>2]|0;
      $2579 = $7;
      $2580 = ((($2579)) + 8|0);
      $2581 = HEAP32[$2580>>2]|0;
      $2582 = (($2578) - ($2581))|0;
      $2583 = ($2575|0)!=($2582|0);
      if ($2583) {
       label = 15;
      }
     }
     break;
    }
    case 138:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2584 = $8;
     $2585 = ($2584|0)!=(0);
     if ($2585) {
      $2586 = $8;
      $2587 = $7;
      $2588 = ((($2587)) + 4|0);
      $2589 = HEAP32[$2588>>2]|0;
      $2590 = ($2586|0)!=($2589|0);
      if ($2590) {
       label = 13;
       break L15;
      }
     }
     $2591 = $9;
     $2592 = $7;
     $2593 = ((($2592)) + 8|0);
     $2594 = HEAP32[$2593>>2]|0;
     $2595 = ($2591|0)!=($2594|0);
     if ($2595) {
      label = 14;
     } else {
      $2596 = $10;
      $2597 = $7;
      $2598 = ((($2597)) + 12|0);
      $2599 = HEAP32[$2598>>2]|0;
      $2600 = $7;
      $2601 = ((($2600)) + 8|0);
      $2602 = HEAP32[$2601>>2]|0;
      $2603 = (($2599) - ($2602))|0;
      $2604 = ($2596|0)!=($2603|0);
      if ($2604) {
       label = 15;
      }
     }
     break;
    }
    case 139:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2605 = $8;
     $2606 = ($2605|0)!=(0);
     if ($2606) {
      $2607 = $8;
      $2608 = $7;
      $2609 = ((($2608)) + 4|0);
      $2610 = HEAP32[$2609>>2]|0;
      $2611 = ($2607|0)!=($2610|0);
      if ($2611) {
       label = 13;
       break L15;
      }
     }
     $2612 = $9;
     $2613 = $7;
     $2614 = ((($2613)) + 8|0);
     $2615 = HEAP32[$2614>>2]|0;
     $2616 = ($2612|0)!=($2615|0);
     if ($2616) {
      label = 14;
     } else {
      $2617 = $10;
      $2618 = $7;
      $2619 = ((($2618)) + 12|0);
      $2620 = HEAP32[$2619>>2]|0;
      $2621 = $7;
      $2622 = ((($2621)) + 8|0);
      $2623 = HEAP32[$2622>>2]|0;
      $2624 = (($2620) - ($2623))|0;
      $2625 = ($2617|0)!=($2624|0);
      if ($2625) {
       label = 15;
      }
     }
     break;
    }
    case 140:  {
     $8 = 1;
     $9 = 2;
     $10 = 0;
     $2626 = $8;
     $2627 = ($2626|0)!=(0);
     if ($2627) {
      $2628 = $8;
      $2629 = $7;
      $2630 = ((($2629)) + 4|0);
      $2631 = HEAP32[$2630>>2]|0;
      $2632 = ($2628|0)!=($2631|0);
      if ($2632) {
       label = 13;
       break L15;
      }
     }
     $2633 = $9;
     $2634 = $7;
     $2635 = ((($2634)) + 8|0);
     $2636 = HEAP32[$2635>>2]|0;
     $2637 = ($2633|0)!=($2636|0);
     if ($2637) {
      label = 14;
     } else {
      $2638 = $10;
      $2639 = $7;
      $2640 = ((($2639)) + 12|0);
      $2641 = HEAP32[$2640>>2]|0;
      $2642 = $7;
      $2643 = ((($2642)) + 8|0);
      $2644 = HEAP32[$2643>>2]|0;
      $2645 = (($2641) - ($2644))|0;
      $2646 = ($2638|0)!=($2645|0);
      if ($2646) {
       label = 15;
      }
     }
     break;
    }
    case 141:  {
     $8 = 1;
     $9 = 2;
     $10 = -1;
     $2647 = $8;
     $2648 = ($2647|0)!=(0);
     if ($2648) {
      $2649 = $8;
      $2650 = $7;
      $2651 = ((($2650)) + 4|0);
      $2652 = HEAP32[$2651>>2]|0;
      $2653 = ($2649|0)!=($2652|0);
      if ($2653) {
       label = 13;
       break L15;
      }
     }
     $2654 = $9;
     $2655 = $7;
     $2656 = ((($2655)) + 8|0);
     $2657 = HEAP32[$2656>>2]|0;
     $2658 = ($2654|0)!=($2657|0);
     if ($2658) {
      label = 14;
     } else {
      $2659 = $10;
      $2660 = $7;
      $2661 = ((($2660)) + 12|0);
      $2662 = HEAP32[$2661>>2]|0;
      $2663 = $7;
      $2664 = ((($2663)) + 8|0);
      $2665 = HEAP32[$2664>>2]|0;
      $2666 = (($2662) - ($2665))|0;
      $2667 = ($2659|0)!=($2666|0);
      if ($2667) {
       label = 15;
      }
     }
     break;
    }
    case 144:  {
     $8 = 1;
     $9 = 4;
     $10 = 0;
     $2668 = $8;
     $2669 = ($2668|0)!=(0);
     if ($2669) {
      $2670 = $8;
      $2671 = $7;
      $2672 = ((($2671)) + 4|0);
      $2673 = HEAP32[$2672>>2]|0;
      $2674 = ($2670|0)!=($2673|0);
      if ($2674) {
       label = 13;
       break L15;
      }
     }
     $2675 = $9;
     $2676 = $7;
     $2677 = ((($2676)) + 8|0);
     $2678 = HEAP32[$2677>>2]|0;
     $2679 = ($2675|0)!=($2678|0);
     if ($2679) {
      label = 14;
     } else {
      $2680 = $10;
      $2681 = $7;
      $2682 = ((($2681)) + 12|0);
      $2683 = HEAP32[$2682>>2]|0;
      $2684 = $7;
      $2685 = ((($2684)) + 8|0);
      $2686 = HEAP32[$2685>>2]|0;
      $2687 = (($2683) - ($2686))|0;
      $2688 = ($2680|0)!=($2687|0);
      if ($2688) {
       label = 15;
      }
     }
     break;
    }
    case 145:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2689 = $8;
     $2690 = ($2689|0)!=(0);
     if ($2690) {
      $2691 = $8;
      $2692 = $7;
      $2693 = ((($2692)) + 4|0);
      $2694 = HEAP32[$2693>>2]|0;
      $2695 = ($2691|0)!=($2694|0);
      if ($2695) {
       label = 13;
       break L15;
      }
     }
     $2696 = $9;
     $2697 = $7;
     $2698 = ((($2697)) + 8|0);
     $2699 = HEAP32[$2698>>2]|0;
     $2700 = ($2696|0)!=($2699|0);
     if ($2700) {
      label = 14;
     } else {
      $2701 = $10;
      $2702 = $7;
      $2703 = ((($2702)) + 12|0);
      $2704 = HEAP32[$2703>>2]|0;
      $2705 = $7;
      $2706 = ((($2705)) + 8|0);
      $2707 = HEAP32[$2706>>2]|0;
      $2708 = (($2704) - ($2707))|0;
      $2709 = ($2701|0)!=($2708|0);
      if ($2709) {
       label = 15;
      }
     }
     break;
    }
    case 146:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2710 = $8;
     $2711 = ($2710|0)!=(0);
     if ($2711) {
      $2712 = $8;
      $2713 = $7;
      $2714 = ((($2713)) + 4|0);
      $2715 = HEAP32[$2714>>2]|0;
      $2716 = ($2712|0)!=($2715|0);
      if ($2716) {
       label = 13;
       break L15;
      }
     }
     $2717 = $9;
     $2718 = $7;
     $2719 = ((($2718)) + 8|0);
     $2720 = HEAP32[$2719>>2]|0;
     $2721 = ($2717|0)!=($2720|0);
     if ($2721) {
      label = 14;
     } else {
      $2722 = $10;
      $2723 = $7;
      $2724 = ((($2723)) + 12|0);
      $2725 = HEAP32[$2724>>2]|0;
      $2726 = $7;
      $2727 = ((($2726)) + 8|0);
      $2728 = HEAP32[$2727>>2]|0;
      $2729 = (($2725) - ($2728))|0;
      $2730 = ($2722|0)!=($2729|0);
      if ($2730) {
       label = 15;
      }
     }
     break;
    }
    case 147:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2731 = $8;
     $2732 = ($2731|0)!=(0);
     if ($2732) {
      $2733 = $8;
      $2734 = $7;
      $2735 = ((($2734)) + 4|0);
      $2736 = HEAP32[$2735>>2]|0;
      $2737 = ($2733|0)!=($2736|0);
      if ($2737) {
       label = 13;
       break L15;
      }
     }
     $2738 = $9;
     $2739 = $7;
     $2740 = ((($2739)) + 8|0);
     $2741 = HEAP32[$2740>>2]|0;
     $2742 = ($2738|0)!=($2741|0);
     if ($2742) {
      label = 14;
     } else {
      $2743 = $10;
      $2744 = $7;
      $2745 = ((($2744)) + 12|0);
      $2746 = HEAP32[$2745>>2]|0;
      $2747 = $7;
      $2748 = ((($2747)) + 8|0);
      $2749 = HEAP32[$2748>>2]|0;
      $2750 = (($2746) - ($2749))|0;
      $2751 = ($2743|0)!=($2750|0);
      if ($2751) {
       label = 15;
      }
     }
     break;
    }
    case 148:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2752 = $8;
     $2753 = ($2752|0)!=(0);
     if ($2753) {
      $2754 = $8;
      $2755 = $7;
      $2756 = ((($2755)) + 4|0);
      $2757 = HEAP32[$2756>>2]|0;
      $2758 = ($2754|0)!=($2757|0);
      if ($2758) {
       label = 13;
       break L15;
      }
     }
     $2759 = $9;
     $2760 = $7;
     $2761 = ((($2760)) + 8|0);
     $2762 = HEAP32[$2761>>2]|0;
     $2763 = ($2759|0)!=($2762|0);
     if ($2763) {
      label = 14;
     } else {
      $2764 = $10;
      $2765 = $7;
      $2766 = ((($2765)) + 12|0);
      $2767 = HEAP32[$2766>>2]|0;
      $2768 = $7;
      $2769 = ((($2768)) + 8|0);
      $2770 = HEAP32[$2769>>2]|0;
      $2771 = (($2767) - ($2770))|0;
      $2772 = ($2764|0)!=($2771|0);
      if ($2772) {
       label = 15;
      }
     }
     break;
    }
    case 151:  {
     $8 = 1;
     $9 = 8;
     $10 = -7;
     $2773 = $8;
     $2774 = ($2773|0)!=(0);
     if ($2774) {
      $2775 = $8;
      $2776 = $7;
      $2777 = ((($2776)) + 4|0);
      $2778 = HEAP32[$2777>>2]|0;
      $2779 = ($2775|0)!=($2778|0);
      if ($2779) {
       label = 13;
       break L15;
      }
     }
     $2780 = $9;
     $2781 = $7;
     $2782 = ((($2781)) + 8|0);
     $2783 = HEAP32[$2782>>2]|0;
     $2784 = ($2780|0)!=($2783|0);
     if ($2784) {
      label = 14;
     } else {
      $2785 = $10;
      $2786 = $7;
      $2787 = ((($2786)) + 12|0);
      $2788 = HEAP32[$2787>>2]|0;
      $2789 = $7;
      $2790 = ((($2789)) + 8|0);
      $2791 = HEAP32[$2790>>2]|0;
      $2792 = (($2788) - ($2791))|0;
      $2793 = ($2785|0)!=($2792|0);
      if ($2793) {
       label = 15;
      }
     }
     break;
    }
    case 152:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2794 = $8;
     $2795 = ($2794|0)!=(0);
     if ($2795) {
      $2796 = $8;
      $2797 = $7;
      $2798 = ((($2797)) + 4|0);
      $2799 = HEAP32[$2798>>2]|0;
      $2800 = ($2796|0)!=($2799|0);
      if ($2800) {
       label = 13;
       break L15;
      }
     }
     $2801 = $9;
     $2802 = $7;
     $2803 = ((($2802)) + 8|0);
     $2804 = HEAP32[$2803>>2]|0;
     $2805 = ($2801|0)!=($2804|0);
     if ($2805) {
      label = 14;
     } else {
      $2806 = $10;
      $2807 = $7;
      $2808 = ((($2807)) + 12|0);
      $2809 = HEAP32[$2808>>2]|0;
      $2810 = $7;
      $2811 = ((($2810)) + 8|0);
      $2812 = HEAP32[$2811>>2]|0;
      $2813 = (($2809) - ($2812))|0;
      $2814 = ($2806|0)!=($2813|0);
      if ($2814) {
       label = 15;
      }
     }
     break;
    }
    case 153:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2815 = $8;
     $2816 = ($2815|0)!=(0);
     if ($2816) {
      $2817 = $8;
      $2818 = $7;
      $2819 = ((($2818)) + 4|0);
      $2820 = HEAP32[$2819>>2]|0;
      $2821 = ($2817|0)!=($2820|0);
      if ($2821) {
       label = 13;
       break L15;
      }
     }
     $2822 = $9;
     $2823 = $7;
     $2824 = ((($2823)) + 8|0);
     $2825 = HEAP32[$2824>>2]|0;
     $2826 = ($2822|0)!=($2825|0);
     if ($2826) {
      label = 14;
     } else {
      $2827 = $10;
      $2828 = $7;
      $2829 = ((($2828)) + 12|0);
      $2830 = HEAP32[$2829>>2]|0;
      $2831 = $7;
      $2832 = ((($2831)) + 8|0);
      $2833 = HEAP32[$2832>>2]|0;
      $2834 = (($2830) - ($2833))|0;
      $2835 = ($2827|0)!=($2834|0);
      if ($2835) {
       label = 15;
      }
     }
     break;
    }
    case 154:  {
     $8 = 1;
     $9 = 8;
     $10 = -7;
     $2836 = $8;
     $2837 = ($2836|0)!=(0);
     if ($2837) {
      $2838 = $8;
      $2839 = $7;
      $2840 = ((($2839)) + 4|0);
      $2841 = HEAP32[$2840>>2]|0;
      $2842 = ($2838|0)!=($2841|0);
      if ($2842) {
       label = 13;
       break L15;
      }
     }
     $2843 = $9;
     $2844 = $7;
     $2845 = ((($2844)) + 8|0);
     $2846 = HEAP32[$2845>>2]|0;
     $2847 = ($2843|0)!=($2846|0);
     if ($2847) {
      label = 14;
     } else {
      $2848 = $10;
      $2849 = $7;
      $2850 = ((($2849)) + 12|0);
      $2851 = HEAP32[$2850>>2]|0;
      $2852 = $7;
      $2853 = ((($2852)) + 8|0);
      $2854 = HEAP32[$2853>>2]|0;
      $2855 = (($2851) - ($2854))|0;
      $2856 = ($2848|0)!=($2855|0);
      if ($2856) {
       label = 15;
      }
     }
     break;
    }
    case 156:  {
     $8 = 1;
     $9 = 8;
     $10 = -7;
     $2857 = $8;
     $2858 = ($2857|0)!=(0);
     if ($2858) {
      $2859 = $8;
      $2860 = $7;
      $2861 = ((($2860)) + 4|0);
      $2862 = HEAP32[$2861>>2]|0;
      $2863 = ($2859|0)!=($2862|0);
      if ($2863) {
       label = 13;
       break L15;
      }
     }
     $2864 = $9;
     $2865 = $7;
     $2866 = ((($2865)) + 8|0);
     $2867 = HEAP32[$2866>>2]|0;
     $2868 = ($2864|0)!=($2867|0);
     if ($2868) {
      label = 14;
     } else {
      $2869 = $10;
      $2870 = $7;
      $2871 = ((($2870)) + 12|0);
      $2872 = HEAP32[$2871>>2]|0;
      $2873 = $7;
      $2874 = ((($2873)) + 8|0);
      $2875 = HEAP32[$2874>>2]|0;
      $2876 = (($2872) - ($2875))|0;
      $2877 = ($2869|0)!=($2876|0);
      if ($2877) {
       label = 15;
      }
     }
     break;
    }
    case 155:  {
     $8 = 1;
     $9 = 8;
     $10 = -7;
     $2878 = $8;
     $2879 = ($2878|0)!=(0);
     if ($2879) {
      $2880 = $8;
      $2881 = $7;
      $2882 = ((($2881)) + 4|0);
      $2883 = HEAP32[$2882>>2]|0;
      $2884 = ($2880|0)!=($2883|0);
      if ($2884) {
       label = 13;
       break L15;
      }
     }
     $2885 = $9;
     $2886 = $7;
     $2887 = ((($2886)) + 8|0);
     $2888 = HEAP32[$2887>>2]|0;
     $2889 = ($2885|0)!=($2888|0);
     if ($2889) {
      label = 14;
     } else {
      $2890 = $10;
      $2891 = $7;
      $2892 = ((($2891)) + 12|0);
      $2893 = HEAP32[$2892>>2]|0;
      $2894 = $7;
      $2895 = ((($2894)) + 8|0);
      $2896 = HEAP32[$2895>>2]|0;
      $2897 = (($2893) - ($2896))|0;
      $2898 = ($2890|0)!=($2897|0);
      if ($2898) {
       label = 15;
      }
     }
     break;
    }
    case 160:  {
     $8 = 1;
     $9 = 4;
     $10 = 0;
     $2899 = $8;
     $2900 = ($2899|0)!=(0);
     if ($2900) {
      $2901 = $8;
      $2902 = $7;
      $2903 = ((($2902)) + 4|0);
      $2904 = HEAP32[$2903>>2]|0;
      $2905 = ($2901|0)!=($2904|0);
      if ($2905) {
       label = 13;
       break L15;
      }
     }
     $2906 = $9;
     $2907 = $7;
     $2908 = ((($2907)) + 8|0);
     $2909 = HEAP32[$2908>>2]|0;
     $2910 = ($2906|0)!=($2909|0);
     if ($2910) {
      label = 14;
     } else {
      $2911 = $10;
      $2912 = $7;
      $2913 = ((($2912)) + 12|0);
      $2914 = HEAP32[$2913>>2]|0;
      $2915 = $7;
      $2916 = ((($2915)) + 8|0);
      $2917 = HEAP32[$2916>>2]|0;
      $2918 = (($2914) - ($2917))|0;
      $2919 = ($2911|0)!=($2918|0);
      if ($2919) {
       label = 15;
      }
     }
     break;
    }
    case 161:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2920 = $8;
     $2921 = ($2920|0)!=(0);
     if ($2921) {
      $2922 = $8;
      $2923 = $7;
      $2924 = ((($2923)) + 4|0);
      $2925 = HEAP32[$2924>>2]|0;
      $2926 = ($2922|0)!=($2925|0);
      if ($2926) {
       label = 13;
       break L15;
      }
     }
     $2927 = $9;
     $2928 = $7;
     $2929 = ((($2928)) + 8|0);
     $2930 = HEAP32[$2929>>2]|0;
     $2931 = ($2927|0)!=($2930|0);
     if ($2931) {
      label = 14;
     } else {
      $2932 = $10;
      $2933 = $7;
      $2934 = ((($2933)) + 12|0);
      $2935 = HEAP32[$2934>>2]|0;
      $2936 = $7;
      $2937 = ((($2936)) + 8|0);
      $2938 = HEAP32[$2937>>2]|0;
      $2939 = (($2935) - ($2938))|0;
      $2940 = ($2932|0)!=($2939|0);
      if ($2940) {
       label = 15;
      }
     }
     break;
    }
    case 162:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2941 = $8;
     $2942 = ($2941|0)!=(0);
     if ($2942) {
      $2943 = $8;
      $2944 = $7;
      $2945 = ((($2944)) + 4|0);
      $2946 = HEAP32[$2945>>2]|0;
      $2947 = ($2943|0)!=($2946|0);
      if ($2947) {
       label = 13;
       break L15;
      }
     }
     $2948 = $9;
     $2949 = $7;
     $2950 = ((($2949)) + 8|0);
     $2951 = HEAP32[$2950>>2]|0;
     $2952 = ($2948|0)!=($2951|0);
     if ($2952) {
      label = 14;
     } else {
      $2953 = $10;
      $2954 = $7;
      $2955 = ((($2954)) + 12|0);
      $2956 = HEAP32[$2955>>2]|0;
      $2957 = $7;
      $2958 = ((($2957)) + 8|0);
      $2959 = HEAP32[$2958>>2]|0;
      $2960 = (($2956) - ($2959))|0;
      $2961 = ($2953|0)!=($2960|0);
      if ($2961) {
       label = 15;
      }
     }
     break;
    }
    case 163:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2962 = $8;
     $2963 = ($2962|0)!=(0);
     if ($2963) {
      $2964 = $8;
      $2965 = $7;
      $2966 = ((($2965)) + 4|0);
      $2967 = HEAP32[$2966>>2]|0;
      $2968 = ($2964|0)!=($2967|0);
      if ($2968) {
       label = 13;
       break L15;
      }
     }
     $2969 = $9;
     $2970 = $7;
     $2971 = ((($2970)) + 8|0);
     $2972 = HEAP32[$2971>>2]|0;
     $2973 = ($2969|0)!=($2972|0);
     if ($2973) {
      label = 14;
     } else {
      $2974 = $10;
      $2975 = $7;
      $2976 = ((($2975)) + 12|0);
      $2977 = HEAP32[$2976>>2]|0;
      $2978 = $7;
      $2979 = ((($2978)) + 8|0);
      $2980 = HEAP32[$2979>>2]|0;
      $2981 = (($2977) - ($2980))|0;
      $2982 = ($2974|0)!=($2981|0);
      if ($2982) {
       label = 15;
      }
     }
     break;
    }
    case 164:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $2983 = $8;
     $2984 = ($2983|0)!=(0);
     if ($2984) {
      $2985 = $8;
      $2986 = $7;
      $2987 = ((($2986)) + 4|0);
      $2988 = HEAP32[$2987>>2]|0;
      $2989 = ($2985|0)!=($2988|0);
      if ($2989) {
       label = 13;
       break L15;
      }
     }
     $2990 = $9;
     $2991 = $7;
     $2992 = ((($2991)) + 8|0);
     $2993 = HEAP32[$2992>>2]|0;
     $2994 = ($2990|0)!=($2993|0);
     if ($2994) {
      label = 14;
     } else {
      $2995 = $10;
      $2996 = $7;
      $2997 = ((($2996)) + 12|0);
      $2998 = HEAP32[$2997>>2]|0;
      $2999 = $7;
      $3000 = ((($2999)) + 8|0);
      $3001 = HEAP32[$3000>>2]|0;
      $3002 = (($2998) - ($3001))|0;
      $3003 = ($2995|0)!=($3002|0);
      if ($3003) {
       label = 15;
      }
     }
     break;
    }
    case 170:  {
     $8 = 2;
     $9 = 4;
     $10 = 0;
     $3004 = $8;
     $3005 = ($3004|0)!=(0);
     if ($3005) {
      $3006 = $8;
      $3007 = $7;
      $3008 = ((($3007)) + 4|0);
      $3009 = HEAP32[$3008>>2]|0;
      $3010 = ($3006|0)!=($3009|0);
      if ($3010) {
       label = 13;
       break L15;
      }
     }
     $3011 = $9;
     $3012 = $7;
     $3013 = ((($3012)) + 8|0);
     $3014 = HEAP32[$3013>>2]|0;
     $3015 = ($3011|0)!=($3014|0);
     if ($3015) {
      label = 14;
     } else {
      $3016 = $10;
      $3017 = $7;
      $3018 = ((($3017)) + 12|0);
      $3019 = HEAP32[$3018>>2]|0;
      $3020 = $7;
      $3021 = ((($3020)) + 8|0);
      $3022 = HEAP32[$3021>>2]|0;
      $3023 = (($3019) - ($3022))|0;
      $3024 = ($3016|0)!=($3023|0);
      if ($3024) {
       label = 15;
      }
     }
     break;
    }
    case 167:  {
     $8 = 1;
     $9 = 8;
     $10 = -7;
     $3025 = $8;
     $3026 = ($3025|0)!=(0);
     if ($3026) {
      $3027 = $8;
      $3028 = $7;
      $3029 = ((($3028)) + 4|0);
      $3030 = HEAP32[$3029>>2]|0;
      $3031 = ($3027|0)!=($3030|0);
      if ($3031) {
       label = 13;
       break L15;
      }
     }
     $3032 = $9;
     $3033 = $7;
     $3034 = ((($3033)) + 8|0);
     $3035 = HEAP32[$3034>>2]|0;
     $3036 = ($3032|0)!=($3035|0);
     if ($3036) {
      label = 14;
     } else {
      $3037 = $10;
      $3038 = $7;
      $3039 = ((($3038)) + 12|0);
      $3040 = HEAP32[$3039>>2]|0;
      $3041 = $7;
      $3042 = ((($3041)) + 8|0);
      $3043 = HEAP32[$3042>>2]|0;
      $3044 = (($3040) - ($3043))|0;
      $3045 = ($3037|0)!=($3044|0);
      if ($3045) {
       label = 15;
      }
     }
     break;
    }
    case 168:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $3046 = $8;
     $3047 = ($3046|0)!=(0);
     if ($3047) {
      $3048 = $8;
      $3049 = $7;
      $3050 = ((($3049)) + 4|0);
      $3051 = HEAP32[$3050>>2]|0;
      $3052 = ($3048|0)!=($3051|0);
      if ($3052) {
       label = 13;
       break L15;
      }
     }
     $3053 = $9;
     $3054 = $7;
     $3055 = ((($3054)) + 8|0);
     $3056 = HEAP32[$3055>>2]|0;
     $3057 = ($3053|0)!=($3056|0);
     if ($3057) {
      label = 14;
     } else {
      $3058 = $10;
      $3059 = $7;
      $3060 = ((($3059)) + 12|0);
      $3061 = HEAP32[$3060>>2]|0;
      $3062 = $7;
      $3063 = ((($3062)) + 8|0);
      $3064 = HEAP32[$3063>>2]|0;
      $3065 = (($3061) - ($3064))|0;
      $3066 = ($3058|0)!=($3065|0);
      if ($3066) {
       label = 15;
      }
     }
     break;
    }
    case 169:  {
     $8 = 1;
     $9 = 8;
     $10 = -4;
     $3067 = $8;
     $3068 = ($3067|0)!=(0);
     if ($3068) {
      $3069 = $8;
      $3070 = $7;
      $3071 = ((($3070)) + 4|0);
      $3072 = HEAP32[$3071>>2]|0;
      $3073 = ($3069|0)!=($3072|0);
      if ($3073) {
       label = 13;
       break L15;
      }
     }
     $3074 = $9;
     $3075 = $7;
     $3076 = ((($3075)) + 8|0);
     $3077 = HEAP32[$3076>>2]|0;
     $3078 = ($3074|0)!=($3077|0);
     if ($3078) {
      label = 14;
     } else {
      $3079 = $10;
      $3080 = $7;
      $3081 = ((($3080)) + 12|0);
      $3082 = HEAP32[$3081>>2]|0;
      $3083 = $7;
      $3084 = ((($3083)) + 8|0);
      $3085 = HEAP32[$3084>>2]|0;
      $3086 = (($3082) - ($3085))|0;
      $3087 = ($3079|0)!=($3086|0);
      if ($3087) {
       label = 15;
      }
     }
     break;
    }
    default: {
     label = 12;
    }
    }
   } while(0);
   if ((label|0) == 12) {
    label = 0;
    $11 = 19799;
    $41 = $2;
    $42 = (($41) + 1)|0;
    $2 = $42;
   }
   else if ((label|0) == 13) {
    label = 0;
    $11 = 18593;
    $43 = $2;
    $44 = (($43) + 1)|0;
    $2 = $44;
   }
   else if ((label|0) == 14) {
    label = 0;
    $11 = 18620;
    $45 = $2;
    $46 = (($45) + 1)|0;
    $2 = $46;
   }
   else if ((label|0) == 15) {
    label = 0;
    $11 = 18644;
    $47 = $2;
    $48 = (($47) + 1)|0;
    $2 = $48;
   }
   $3088 = $1;
   $3089 = ($3088|0)!=(0|0);
   if ($3089) {
    $3090 = $1;
    $3091 = $11;
    $3092 = $7;
    FUNCTION_TABLE_vii[$3090 & 127]($3091,$3092);
   }
  }
  $3093 = $6;
  $3094 = (($3093) + 1)|0;
  $6 = $3094;
 }
 $3095 = $2;
 STACKTOP = sp;return ($3095|0);
}
function _nfcFirstArg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = (-1);
 $4 = $1;
 $5 = (_nfcNextArg($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _nfcNextArg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==((-1)|0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $3 = $13;
  $14 = $3;
  $15 = $2;
  $16 = ((($15)) + 24|0);
  HEAP32[$16>>2] = $14;
 }
 $17 = $3;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = $3;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $24 = $3;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
   $27 = $2;
   $28 = ((($27)) + 24|0);
   HEAP32[$28>>2] = $26;
   $29 = $2;
   $30 = ((($29)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($31) - ($34))|0;
   $1 = $35;
   $36 = $1;
   STACKTOP = sp;return ($36|0);
  }
 }
 $23 = HEAP32[3314]|0;
 HEAP32[$vararg_buffer>>2] = 18706;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 109;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 18717;
 _printFmt($23,0,28431,$vararg_buffer);
 __abort_257();
 $1 = 0;
 $36 = $1;
 STACKTOP = sp;return ($36|0);
}
function __abort_257() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _nfcReadArg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (_nfcPeekArg($7,$8)|0);
 $5 = $9;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
 $10 = $3;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_castOf_258($12)|0);
 L1: do {
  switch ($13|0) {
  case 7: case 4: case 3: case 2:  {
   $15 = $5;
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$6>>2] = $16;
   break;
  }
  case 8: case 6: case 5:  {
   $17 = $5;
   $18 = $17;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = $6;
   $25 = $24;
   HEAP32[$25>>2] = $20;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = $23;
   break;
  }
  case 10:  {
   $28 = $3;
   $29 = HEAP32[$28>>2]|0;
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $32 = (_vmPointer_259($29,$31)|0);
   HEAP32[$6>>2] = $32;
   break;
  }
  case 12:  {
   $33 = $3;
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = HEAP32[$35>>2]|0;
   $37 = (_vmPointer_259($34,$36)|0);
   HEAP32[$6>>2] = $37;
   $38 = $5;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($6)) + 4|0);
   HEAP32[$41>>2] = $40;
   break;
  }
  case 11:  {
   $42 = $3;
   $43 = HEAP32[$42>>2]|0;
   $44 = $5;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_vmPointer_259($43,$45)|0);
   HEAP32[$6>>2] = $46;
   $47 = $3;
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_vmPointer_259($48,$51)|0);
   $53 = ((($6)) + 4|0);
   HEAP32[$53>>2] = $52;
   break;
  }
  case 9:  {
   $54 = $3;
   $55 = ((($54)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58>>>0)>(8);
   if (!($59)) {
    $61 = $5;
    $62 = $3;
    $63 = ((($62)) + 24|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    _memcpy(($6|0),($61|0),($66|0))|0;
    break L1;
   }
   $60 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer3>>2] = 18706;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 169;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = 18728;
   _printFmt($60,0,23560,$vararg_buffer3);
   __abort_257();
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $14 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 18706;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 135;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 18728;
   _printFmt($14,0,28431,$vararg_buffer);
   __abort_257();
  }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return;
}
function _nfcPeekArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _castOf_258($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _vmPointer_259($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $3;
  $8 = ((($7)) + 144|0);
  $9 = $4;
  $10 = (($8) + ($9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _nfcCheckArg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)==((-1)|0);
 if ($11) {
  $12 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 18706;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 181;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 18739;
  _printFmt($12,0,28431,$vararg_buffer);
  __abort_257();
 }
 $13 = $6;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer3>>2] = 18706;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 184;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 18739;
  _printFmt($15,0,28431,$vararg_buffer3);
  __abort_257();
 }
 $16 = $4;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $4;
  $19 = $6;
  $20 = (_refCast_261($19)|0);
  $21 = ($18|0)!=($20|0);
  if ($21) {
   $22 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer8>>2] = 18706;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 187;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = 18739;
   _printFmt($22,0,28431,$vararg_buffer8);
   __abort_257();
  }
 }
 $23 = $5;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $5;
 $26 = $6;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_strcmp($25,$27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[3314]|0;
 HEAP32[$vararg_buffer13>>2] = 18706;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = 190;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = 18739;
 _printFmt($30,0,28431,$vararg_buffer13);
 __abort_257();
 STACKTOP = sp;return;
}
function _refCast_261($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_castOf_258($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(12);
 do {
  if ($7) {
   $8 = $1;
   $9 = (_isArrayType_262($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = ((($11)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $3 = $13;
    $14 = $3;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $3;
     $17 = (_isStatic_263($16)|0);
     $18 = ($17|0)!=(0);
     if (!($18)) {
      break;
     }
    }
    $2 = 10;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _isArrayType_262($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isStatic_263($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _rtInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_padPointer_264($6,4)|0);
 $4 = $7;
 $8 = $4;
 $9 = $2;
 $10 = ($8|0)!=($9|0);
 if ($10) {
  $11 = $4;
  $12 = $2;
  $13 = $11;
  $14 = $12;
  $15 = (($13) - ($14))|0;
  $5 = $15;
  $16 = $5;
  $17 = $3;
  $18 = (($17) - ($16))|0;
  $3 = $18;
 }
 $19 = $4;
 $20 = ($19|0)==(0|0);
 $21 = $3;
 $22 = ($21>>>0)>(144);
 $or$cond = $20 & $22;
 if ($or$cond) {
  $23 = $3;
  $24 = (_malloc($23)|0);
  $4 = $24;
 }
 $25 = $4;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $141 = $4;
  STACKTOP = sp;return ($141|0);
 }
 $27 = $4;
 _memset(($27|0),0,144)|0;
 $28 = $4;
 $29 = ((($28)) + 60|0);
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = 41;
 $31 = $4;
 $32 = ((($31)) + 60|0);
 HEAP32[$32>>2] = 42;
 $33 = $4;
 $34 = ((($33)) + 60|0);
 $35 = ((($34)) + 8|0);
 HEAP32[$35>>2] = 43;
 $36 = $4;
 $37 = ((($36)) + 60|0);
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = 44;
 $39 = $4;
 $40 = ((($39)) + 60|0);
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = 45;
 $42 = $4;
 $43 = ((($42)) + 60|0);
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = 46;
 $45 = $4;
 $46 = ((($45)) + 60|0);
 $47 = ((($46)) + 24|0);
 HEAP32[$47>>2] = 47;
 $48 = $4;
 $49 = ((($48)) + 60|0);
 $50 = ((($49)) + 28|0);
 HEAP32[$50>>2] = 48;
 $51 = $4;
 $52 = ((($51)) + 60|0);
 $53 = ((($52)) + 32|0);
 HEAP32[$53>>2] = 49;
 $54 = $4;
 $55 = ((($54)) + 60|0);
 $56 = ((($55)) + 36|0);
 HEAP32[$56>>2] = 50;
 $57 = $4;
 $58 = ((($57)) + 60|0);
 $59 = ((($58)) + 40|0);
 HEAP32[$59>>2] = 51;
 $60 = $4;
 $61 = ((($60)) + 60|0);
 $62 = ((($61)) + 44|0);
 HEAP32[$62>>2] = 52;
 $63 = $4;
 $64 = ((($63)) + 60|0);
 $65 = ((($64)) + 52|0);
 HEAP32[$65>>2] = 53;
 $66 = $4;
 $67 = ((($66)) + 60|0);
 $68 = ((($67)) + 56|0);
 HEAP32[$68>>2] = 54;
 $69 = $4;
 $70 = ((($69)) + 60|0);
 $71 = ((($70)) + 48|0);
 HEAP32[$71>>2] = 55;
 $72 = $4;
 $73 = ((($72)) + 60|0);
 $74 = ((($73)) + 60|0);
 HEAP32[$74>>2] = 56;
 $75 = $4;
 $76 = ((($75)) + 60|0);
 $77 = ((($76)) + 64|0);
 HEAP32[$77>>2] = 57;
 $78 = $4;
 $79 = ((($78)) + 60|0);
 $80 = ((($79)) + 68|0);
 HEAP32[$80>>2] = 58;
 $81 = $4;
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 & -961;
 $84 = $83 | 320;
 HEAP32[$81>>2] = $84;
 $85 = $4;
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & -261121;
 $88 = $87 | 15360;
 HEAP32[$85>>2] = $88;
 $89 = $4;
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & -3;
 $92 = $91 | 2;
 HEAP32[$89>>2] = $92;
 $93 = $4;
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & -2;
 $96 = $95 | 1;
 HEAP32[$93>>2] = $96;
 $97 = $4;
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & -5;
 $100 = $99 | 4;
 HEAP32[$97>>2] = $100;
 $101 = $4;
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 & -9;
 $104 = $103 | 8;
 HEAP32[$101>>2] = $104;
 $105 = $4;
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 & -17;
 $108 = $107 | 16;
 HEAP32[$105>>2] = $108;
 $109 = $4;
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & -33;
 $112 = $111 | 32;
 HEAP32[$109>>2] = $112;
 $113 = $2;
 $114 = ($113|0)==(0|0);
 $115 = $114&1;
 $116 = $4;
 $117 = HEAP32[$116>>2]|0;
 $118 = $115 & 1;
 $119 = $118 << 19;
 $120 = $117 & -524289;
 $121 = $120 | $119;
 HEAP32[$116>>2] = $121;
 $122 = $3;
 $123 = (($122) - 144)|0;
 $124 = $4;
 $125 = ((($124)) + 140|0);
 HEAP32[$125>>2] = $123;
 $126 = $4;
 $127 = ((($126)) + 144|0);
 $128 = $4;
 $129 = ((($128)) + 140|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($127) + ($130)|0);
 $132 = $4;
 $133 = ((($132)) + 136|0);
 HEAP32[$133>>2] = $131;
 $134 = $4;
 $135 = ((($134)) + 144|0);
 $136 = ((($135)) + 1|0);
 $137 = $4;
 $138 = ((($137)) + 132|0);
 HEAP32[$138>>2] = $136;
 $139 = $4;
 $140 = HEAP32[3314]|0;
 _logFILE($139,$140);
 $141 = $4;
 STACKTOP = sp;return ($141|0);
}
function _padPointer_264($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = (_padOffset_269($5,$6)|0);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _ccExtend($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $2 = 0;
  } else {
   $7 = $4;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $2 = 0;
    break;
   }
   $9 = $4;
   $10 = ((($9)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    $2 = 0;
    break;
   } else {
    $13 = $3;
    $14 = $4;
    _enter($13,$14);
    $15 = $4;
    $2 = $15;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function _ccBegin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $2 = 0;
  } else {
   $5 = 0;
   $8 = $4;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $3;
    $11 = $4;
    $12 = $3;
    $13 = ((($12)) + 5200|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_install($10,$11,209,0,$14,0)|0);
    $5 = $15;
    $16 = $5;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $2 = 0;
     break;
    }
   }
   $18 = $3;
   $19 = $5;
   _enter($18,$19);
   $20 = $5;
   $2 = $20;
  }
 } while(0);
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _ccEnd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $13 = $3;
 $14 = $4;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 240;
 $18 = (_leave($13,$17,0,0,0)|0);
 $5 = $18;
 $19 = $4;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $5;
  $22 = $4;
  $23 = ((($22)) + 36|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $5;
 $2 = $24;
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _ccDefInt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $5 = $0;
 $6 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 if ($or$cond) {
  $16 = $5;
  $17 = $6;
  $18 = (_ccUniqueStr($16,$17,-1,-1)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = $5;
  $22 = ((($21)) + 5224|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $5;
  $25 = $7;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_intNode($24,$27,$30)|0);
  $32 = (_install($19,$20,197,0,$23,$31)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $4 = 0;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _ccDefFlt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $4;
  $12 = $5;
  $13 = (_ccUniqueStr($11,$12,-1,-1)|0);
  $5 = $13;
  $14 = $4;
  $15 = $5;
  $16 = $4;
  $17 = ((($16)) + 5248|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = $6;
  $21 = (_fltNode($19,$20)|0);
  $22 = (_install($14,$15,200,0,$18,$21)|0);
  $3 = $22;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 } else {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _ccDefStr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $11 = $4;
 $12 = $5;
 $13 = (_ccUniqueStr($11,$12,-1,-1)|0);
 $5 = $13;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  $17 = $6;
  $18 = (_ccUniqueStr($16,$17,-1,-1)|0);
  $6 = $18;
 }
 $19 = $4;
 $20 = $5;
 $21 = $4;
 $22 = ((($21)) + 5272|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = $6;
 $26 = (_strNode($24,$25)|0);
 $27 = (_install($19,$20,202,0,$23,$26)|0);
 $3 = $27;
 $28 = $3;
 STACKTOP = sp;return ($28|0);
}
function _ccDefVar($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $4;
  $12 = $5;
  $13 = (_ccUniqueStr($11,$12,-1,-1)|0);
  $5 = $13;
  $14 = $4;
  $15 = $5;
  $16 = $6;
  $17 = (_refCast_261($16)|0);
  $18 = 48 | $17;
  $19 = $6;
  $20 = (_install($14,$15,$18,0,$19,0)|0);
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _ccAddType($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = $5;
  $14 = $6;
  $15 = $8;
  $16 = ($15|0)!=(0);
  $17 = $16 ? 10 : 9;
  $18 = 208 | $17;
  $19 = $7;
  $20 = $5;
  $21 = ((($20)) + 5260|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_install($13,$14,$18,$19,$22,0)|0);
  $4 = $23;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 } else {
  $4 = 0;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _ccLookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 2;
 $7 = $5;
 $8 = ((($6)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = $5;
 $10 = (_rehash($9,-1)|0);
 $11 = (($10>>>0) % 512)&-1;
 $12 = ((($6)) + 24|0);
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $4;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0|0);
   $20 = $3;
   if ($19) {
    $21 = ((($20)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $4 = $24;
    break;
   }
   $25 = ((($20)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $3;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 2076|0);
    $32 = ((($6)) + 24|0);
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $4 = $36;
   }
  }
 } while(0);
 $37 = $3;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = (_lookup($39,$40,$6,0,0,1)|0);
 STACKTOP = sp;return ($41|0);
}
function _raiseApi($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 HEAP32[$7>>2] = $varargs;
 $10 = $6;
 $11 = $4;
 $12 = $5;
 _print_log($10,$11,0,0,0,$12,$7);
 $13 = $6;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $6;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 10;
 $20 = $19 & 255;
 $21 = ($20|0)>(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $6;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $6;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $6;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 255;
 _traceCalls($24,$27,1,$31,0);
 STACKTOP = sp;return;
}
function _rtAllocApi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_rtAlloc($6,$7,$8,0)|0);
 STACKTOP = sp;return ($9|0);
}
function _rtLookupApi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_rtLookup($6,$7,0)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $5;
  $12 = (_isFunction_267($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $5;
   $2 = $14;
   $15 = $2;
   STACKTOP = sp;return ($15|0);
  }
 }
 $2 = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _rtLookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $13 = $4;
 $14 = ((($13)) + 140|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>($15>>>0);
 if ($16) {
  $17 = HEAP32[3314]|0;
  $18 = $5;
  HEAP32[$vararg_buffer>>2] = 18706;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1158;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 18807;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $18;
  _printFmt($17,0,18751,$vararg_buffer);
  __abort_257();
 }
 $19 = $5;
 $20 = $4;
 $21 = ((($20)) + 24|0);
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 4)|0;
 $25 = ($19>>>0)>($24>>>0);
 if ($25) {
  $3 = 0;
  $113 = $3;
  STACKTOP = sp;return ($113|0);
 }
 $26 = $4;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $7 = $28;
 $29 = $5;
 $30 = $7;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29>>>0)>=($32>>>0);
 if ($33) {
  $34 = $5;
  $35 = $7;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $7;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($37) + ($40))|0;
  $42 = ($34>>>0)<($41>>>0);
  if ($42) {
   $43 = $7;
   $3 = $43;
   $113 = $3;
   STACKTOP = sp;return ($113|0);
  }
 }
 $44 = $6;
 $45 = $44 & 64;
 $8 = $45;
 $46 = $6;
 $47 = $46 & 128;
 $9 = $47;
 $48 = $6;
 $49 = $48 & 48;
 $10 = $49;
 $50 = $6;
 $51 = $50 & 15;
 $11 = $51;
 $52 = $7;
 $53 = ((($52)) + 36|0);
 $54 = HEAP32[$53>>2]|0;
 $7 = $54;
 L13: while(1) {
  $55 = $7;
  $56 = ($55|0)!=(0|0);
  if (!($56)) {
   label = 24;
   break;
  }
  $57 = $8;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $7;
   $60 = ((($59)) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 64;
   $63 = $8;
   $64 = ($62|0)!=($63|0);
   if (!($64)) {
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $65 = $9;
    $66 = ($65|0)!=(0);
    if ($66) {
     $67 = $7;
     $68 = ((($67)) + 44|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $69 & 128;
     $71 = $9;
     $72 = ($70|0)!=($71|0);
     if ($72) {
      break;
     }
    }
    $73 = $10;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $7;
     $76 = ((($75)) + 44|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 & 48;
     $79 = $10;
     $80 = ($78|0)!=($79|0);
     if ($80) {
      break;
     }
    }
    $81 = $11;
    $82 = ($81|0)!=(0);
    if ($82) {
     $83 = $7;
     $84 = ((($83)) + 44|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $85 & 15;
     $87 = $11;
     $88 = ($86|0)!=($87|0);
     if ($88) {
      break;
     }
    }
    $89 = $5;
    $90 = $7;
    $91 = ((($90)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($89|0)==($92|0);
    if ($93) {
     label = 19;
     break L13;
    }
    $95 = $5;
    $96 = $7;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($95>>>0)>($98>>>0);
    if ($99) {
     $100 = $5;
     $101 = $7;
     $102 = ((($101)) + 20|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $7;
     $105 = ((($104)) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($103) + ($106))|0;
     $108 = ($100>>>0)<($107>>>0);
     if ($108) {
      label = 22;
      break L13;
     }
    }
   }
  } while(0);
  $110 = $7;
  $111 = ((($110)) + 52|0);
  $112 = HEAP32[$111>>2]|0;
  $7 = $112;
 }
 if ((label|0) == 19) {
  $94 = $7;
  $3 = $94;
  $113 = $3;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 22) {
  $109 = $7;
  $3 = $109;
  $113 = $3;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 24) {
  $3 = 0;
  $113 = $3;
  STACKTOP = sp;return ($113|0);
 }
 return (0)|0;
}
function _isFunction_267($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _rtAlloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 8;
 $30 = $7;
 $31 = (($30) + 8)|0;
 $32 = (_padOffset_269($31,8)|0);
 $10 = $32;
 $33 = $6;
 $34 = (($33) + (((0 - ((((0) + 8|0))))|0))|0);
 $11 = $34;
 $35 = $5;
 $36 = ((($35)) + 24|0);
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = $5;
  $41 = ((($40)) + 132|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_padPointer_264($42,8)|0);
  $12 = $43;
  $44 = $5;
  $45 = ((($44)) + 136|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -16|0);
  $48 = (_padPointer_264($47,8)|0);
  $13 = $48;
  $49 = $13;
  $50 = $12;
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $12;
  HEAP32[$52>>2] = 0;
  $53 = $13;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = 0;
  $55 = $13;
  HEAP32[$55>>2] = 0;
  $56 = $12;
  $57 = $5;
  $58 = ((($57)) + 24|0);
  $59 = ((($58)) + 8|0);
  HEAP32[$59>>2] = $56;
 }
 $60 = $6;
 $61 = ($60|0)!=(0|0);
 L4: do {
  if ($61) {
   $62 = $11;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0|0);
   if ($65) {
    $66 = $11;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $11;
    $70 = $68;
    $71 = $69;
    $72 = (($70) - ($71))|0;
    $73 = $72;
   } else {
    $73 = 0;
   }
   $14 = $73;
   $74 = $6;
   $75 = $5;
   $76 = ((($75)) + 132|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74>>>0)<($77>>>0);
   if (!($78)) {
    $79 = $6;
    $80 = $5;
    $81 = ((($80)) + 136|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($79>>>0)>($82>>>0);
    if (!($83)) {
     $102 = $8;
     $103 = ($102|0)!=(0|0);
     do {
      if ($103) {
       $104 = $5;
       $105 = ((($104)) + 20|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($106|0)!=(0|0);
       if ($107) {
        $108 = $5;
        $109 = ((($108)) + 24|0);
        $110 = ((($109)) + 8|0);
        $111 = HEAP32[$110>>2]|0;
        $15 = $111;
        $112 = $15;
        $16 = $112;
        while(1) {
         $113 = $15;
         $114 = ($113|0)!=(0|0);
         if ($114) {
          $115 = $15;
          $116 = $11;
          $117 = ($115|0)!=($116|0);
          $328 = $117;
         } else {
          $328 = 0;
         }
         $118 = $15;
         if (!($328)) {
          break;
         }
         $16 = $118;
         $119 = $15;
         $120 = ((($119)) + 4|0);
         $121 = HEAP32[$120>>2]|0;
         $15 = $121;
        }
        $122 = $11;
        $123 = ($118|0)!=($122|0);
        if (!($123)) {
         $124 = $11;
         $125 = HEAP32[$124>>2]|0;
         $126 = $16;
         $127 = ($125|0)!=($126|0);
         if (!($127)) {
          break;
         }
        }
        $128 = $8;
        $129 = $5;
        $130 = ((($129)) + 20|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = $6;
        FUNCTION_TABLE_viiii[$128 & 127]($131,$132,-1,18964);
        $4 = 0;
        $327 = $4;
        STACKTOP = sp;return ($327|0);
       }
      }
     } while(0);
     $133 = $7;
     $134 = ($133|0)==(0);
     if (!($134)) {
      $175 = $10;
      $176 = $14;
      $177 = ($175>>>0)<($176>>>0);
      if (!($177)) {
       $215 = $5;
       _printLog($215,-1,0,0,0,18994,$vararg_buffer11);
       $11 = 0;
       break;
      }
      $178 = $11;
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $19 = $180;
      $181 = $11;
      $182 = $10;
      $183 = (($181) + ($182)|0);
      $20 = $183;
      $184 = $19;
      $185 = $20;
      $186 = $184;
      $187 = $185;
      $188 = (($186) - ($187))|0;
      $189 = ($188|0)>(8);
      if (!($189)) {
       break;
      }
      $190 = $20;
      $191 = $11;
      $192 = ((($191)) + 4|0);
      HEAP32[$192>>2] = $190;
      $193 = $19;
      $194 = $20;
      $195 = ((($194)) + 4|0);
      HEAP32[$195>>2] = $193;
      $196 = $20;
      HEAP32[$196>>2] = 0;
      $197 = $19;
      $198 = HEAP32[$197>>2]|0;
      $199 = ($198|0)==(0|0);
      if (!($199)) {
       $213 = $20;
       $214 = $19;
       HEAP32[$214>>2] = $213;
       break;
      }
      $200 = $19;
      $201 = ((($200)) + 4|0);
      $202 = HEAP32[$201>>2]|0;
      $19 = $202;
      $203 = $19;
      $204 = $20;
      $205 = ((($204)) + 4|0);
      HEAP32[$205>>2] = $203;
      $206 = $19;
      $207 = ($206|0)!=(0|0);
      if (!($207)) {
       break;
      }
      $208 = $19;
      $209 = HEAP32[$208>>2]|0;
      $210 = ($209|0)!=(0|0);
      if (!($210)) {
       break;
      }
      $211 = $20;
      $212 = $19;
      HEAP32[$212>>2] = $211;
      break;
     }
     $135 = $11;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $17 = $137;
     $138 = $11;
     $139 = HEAP32[$138>>2]|0;
     $18 = $139;
     $140 = $17;
     $141 = ($140|0)!=(0|0);
     if ($141) {
      $142 = $17;
      $143 = HEAP32[$142>>2]|0;
      $144 = ($143|0)==(0|0);
      if ($144) {
       $145 = $17;
       $146 = ((($145)) + 4|0);
       $147 = HEAP32[$146>>2]|0;
       $17 = $147;
       $148 = $17;
       $149 = $11;
       $150 = ((($149)) + 4|0);
       HEAP32[$150>>2] = $148;
       $151 = $17;
       $152 = ($151|0)!=(0|0);
       if ($152) {
        $153 = $17;
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)!=(0|0);
        if ($155) {
         $156 = $11;
         $157 = $17;
         HEAP32[$157>>2] = $156;
        }
       }
      }
     }
     $158 = $18;
     $159 = ($158|0)!=(0|0);
     if ($159) {
      $160 = $18;
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161|0)==(0|0);
      if ($162) {
       $163 = $18;
       $11 = $163;
       $164 = $17;
       $165 = $11;
       $166 = ((($165)) + 4|0);
       HEAP32[$166>>2] = $164;
       $167 = $17;
       $168 = ($167|0)!=(0|0);
       if ($168) {
        $169 = $17;
        $170 = HEAP32[$169>>2]|0;
        $171 = ($170|0)!=(0|0);
        if ($171) {
         $172 = $11;
         $173 = $17;
         HEAP32[$173>>2] = $172;
        }
       }
      }
     }
     $174 = $11;
     HEAP32[$174>>2] = 0;
     $11 = 0;
     break;
    }
   }
   $84 = $6;
   $85 = $5;
   $86 = ((($85)) + 132|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($84>>>0)<($87>>>0);
   if ($88) {
    $89 = HEAP32[3314]|0;
    $90 = $5;
    $91 = $6;
    $92 = (_vmOffset_270($90,$91)|0);
    HEAP32[$vararg_buffer>>2] = 18706;
    $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr2>>2] = 811;
    $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr3>>2] = 18886;
    $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr4>>2] = $92;
    _printFmt($89,0,18816,$vararg_buffer);
    __abort_257();
   }
   $93 = $6;
   $94 = $5;
   $95 = ((($94)) + 136|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($93>>>0)>($96>>>0);
   if ($97) {
    $98 = HEAP32[3314]|0;
    $99 = $5;
    $100 = $6;
    $101 = (_vmOffset_270($99,$100)|0);
    HEAP32[$vararg_buffer5>>2] = 18706;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 812;
    $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
    HEAP32[$vararg_ptr9>>2] = 18886;
    $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
    HEAP32[$vararg_ptr10>>2] = $101;
    _printFmt($98,0,18894,$vararg_buffer5);
    __abort_257();
   }
   $4 = 0;
   $327 = $4;
   STACKTOP = sp;return ($327|0);
  } else {
   $216 = $7;
   $217 = ($216>>>0)>(0);
   if (!($217)) {
    $11 = 0;
    break;
   }
   $218 = $5;
   $219 = ((($218)) + 24|0);
   $220 = ((($219)) + 8|0);
   $221 = HEAP32[$220>>2]|0;
   $11 = $221;
   $21 = $221;
   while(1) {
    $222 = $11;
    $223 = ($222|0)!=(0|0);
    if (!($223)) {
     break L4;
    }
    $224 = $11;
    $225 = ((($224)) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $22 = $226;
    $227 = $11;
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)==(0|0);
    $230 = $22;
    $231 = ($230|0)!=(0|0);
    $or$cond = $229 & $231;
    if ($or$cond) {
     $232 = $22;
     $233 = $11;
     $234 = $232;
     $235 = $233;
     $236 = (($234) - ($235))|0;
     $237 = $10;
     $238 = (($236) - ($237))|0;
     $23 = $238;
     $239 = $10;
     $240 = $23;
     $241 = ($239>>>0)<($240>>>0);
     if ($241) {
      break;
     }
    }
    $259 = $11;
    $21 = $259;
    $260 = $22;
    $11 = $260;
   }
   $242 = $23;
   $243 = $10;
   $244 = (($242) - ($243))|0;
   $24 = $244;
   $245 = $24;
   $246 = ($245|0)>(8);
   if ($246) {
    $247 = $11;
    $248 = $10;
    $249 = (($247) + ($248)|0);
    $25 = $249;
    $250 = $25;
    $251 = $11;
    $252 = ((($251)) + 4|0);
    HEAP32[$252>>2] = $250;
    $253 = $25;
    HEAP32[$253>>2] = 0;
    $254 = $22;
    $255 = $25;
    $256 = ((($255)) + 4|0);
    HEAP32[$256>>2] = $254;
   }
   $257 = $21;
   $258 = $11;
   HEAP32[$258>>2] = $257;
  }
 } while(0);
 $261 = $5;
 $262 = ((($261)) + 20|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ($263|0)!=(0|0);
 if ($264) {
  $27 = 0;
  $28 = 0;
  $265 = $5;
  $266 = ((($265)) + 24|0);
  $267 = ((($266)) + 8|0);
  $268 = HEAP32[$267>>2]|0;
  $26 = $268;
  while(1) {
   $269 = $26;
   $270 = ($269|0)!=(0|0);
   if (!($270)) {
    break;
   }
   $271 = $26;
   $272 = ((($271)) + 4|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ($273|0)!=(0|0);
   do {
    if ($274) {
     $275 = $26;
     $276 = ((($275)) + 4|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = $26;
     $279 = $277;
     $280 = $278;
     $281 = (($279) - ($280))|0;
     $282 = (($281) - 8)|0;
     $29 = $282;
     $283 = $26;
     $284 = HEAP32[$283>>2]|0;
     $285 = ($284|0)!=(0|0);
     $286 = $29;
     if ($285) {
      $287 = $28;
      $288 = (($287) + ($286))|0;
      $28 = $288;
      $289 = $8;
      $290 = ($289|0)!=(0|0);
      if (!($290)) {
       break;
      }
      $291 = $8;
      $292 = $5;
      $293 = ((($292)) + 20|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $26;
      $296 = ((($295)) + 8|0);
      $297 = $29;
      FUNCTION_TABLE_viiii[$291 & 127]($294,$296,$297,27195);
      break;
     } else {
      $298 = $27;
      $299 = (($298) + ($286))|0;
      $27 = $299;
      $300 = $8;
      $301 = ($300|0)!=(0|0);
      if (!($301)) {
       break;
      }
      $302 = $8;
      $303 = $5;
      $304 = ((($303)) + 20|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $26;
      $307 = ((($306)) + 8|0);
      $308 = $29;
      FUNCTION_TABLE_viiii[$302 & 127]($305,$307,$308,19009);
      break;
     }
    }
   } while(0);
   $309 = $26;
   $310 = ((($309)) + 4|0);
   $311 = HEAP32[$310>>2]|0;
   $26 = $311;
  }
  $312 = $27;
  $313 = $5;
  $314 = ((($313)) + 20|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ((($315)) + 44|0);
  HEAP32[$316>>2] = $312;
  $317 = $28;
  $318 = $5;
  $319 = ((($318)) + 20|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ((($320)) + 48|0);
  HEAP32[$321>>2] = $317;
 }
 $322 = $11;
 $323 = ($322|0)!=(0|0);
 $324 = $11;
 $325 = ((($324)) + 8|0);
 $326 = $323 ? $325 : 0;
 $4 = $326;
 $327 = $4;
 STACKTOP = sp;return ($327|0);
}
function _padOffset_269($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6))|0;
 $8 = $3;
 $9 = (0 - ($8))|0;
 $10 = $7 & $9;
 STACKTOP = sp;return ($10|0);
}
function _vmOffset_270($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _ccUniqueStr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = HEAP32[$14>>2]|0;
 $9 = $15;
 $12 = 0;
 $16 = $7;
 $17 = ($16|0)==(-1);
 $18 = $6;
 if ($17) {
  $19 = (_strlen($18)|0);
  $20 = (($19) + 1)|0;
  $7 = $20;
 } else {
  $21 = $7;
  $22 = (($21) - 1)|0;
  $23 = (($18) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 18706;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 1086;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 19014;
   _printFmt($27,0,28431,$vararg_buffer);
   __abort_257();
   $4 = 0;
   $112 = $4;
   STACKTOP = sp;return ($112|0);
  }
 }
 $28 = $8;
 $29 = ($28|0)==(-1);
 if ($29) {
  $30 = $6;
  $31 = $7;
  $32 = (_rehash($30,$31)|0);
  $33 = (($32>>>0) % 512)&-1;
  $8 = $33;
 } else {
  $34 = $8;
  $35 = ($34>>>0)>=(512);
  if ($35) {
   $36 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer3>>2] = 18706;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 1094;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = 19014;
   _printFmt($36,0,28431,$vararg_buffer3);
   __abort_257();
   $4 = 0;
   $112 = $4;
   STACKTOP = sp;return ($112|0);
  }
 }
 $37 = $5;
 $38 = ((($37)) + 28|0);
 $39 = $8;
 $40 = (($38) + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $11 = $41;
 while(1) {
  $42 = $11;
  $43 = ($42|0)!=(0|0);
  if (!($43)) {
   break;
  }
  $44 = $11;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = $7;
  $49 = (_memcmp($46,$47,$48)|0);
  $13 = $49;
  $50 = $13;
  $51 = ($50|0)==(0);
  if ($51) {
   label = 12;
   break;
  }
  $55 = $13;
  $56 = ($55|0)>(0);
  if ($56) {
   break;
  }
  $57 = $11;
  $12 = $57;
  $58 = $11;
  $59 = HEAP32[$58>>2]|0;
  $11 = $59;
 }
 if ((label|0) == 12) {
  $52 = $11;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $4 = $54;
  $112 = $4;
  STACKTOP = sp;return ($112|0);
 }
 $60 = $9;
 $61 = ((($60)) + 132|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $9;
 $64 = ((($63)) + 136|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $7;
 $67 = (8 + ($66))|0;
 $68 = (0 - ($67))|0;
 $69 = (($65) + ($68)|0);
 $70 = ($62>>>0)>=($69>>>0);
 if ($70) {
  $71 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer8>>2] = 18706;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = 1110;
  $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
  HEAP32[$vararg_ptr12>>2] = 19014;
  _printFmt($71,0,25109,$vararg_buffer8);
  __abort_257();
  $4 = 0;
  $112 = $4;
  STACKTOP = sp;return ($112|0);
 }
 $72 = $6;
 $73 = $9;
 $74 = ((($73)) + 132|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($72|0)!=($75|0);
 if ($76) {
  $77 = $9;
  $78 = ((($77)) + 132|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $6;
  $81 = $7;
  $82 = (($81) + 1)|0;
  _memcpy(($79|0),($80|0),($82|0))|0;
  $83 = $9;
  $84 = ((($83)) + 132|0);
  $85 = HEAP32[$84>>2]|0;
  $6 = $85;
 }
 $86 = $9;
 $87 = ((($86)) + 136|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($88)) + -8|0);
 HEAP32[$87>>2] = $89;
 $90 = $9;
 $91 = ((($90)) + 136|0);
 $92 = HEAP32[$91>>2]|0;
 $10 = $92;
 $93 = $7;
 $94 = $9;
 $95 = ((($94)) + 132|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + ($93)|0);
 HEAP32[$95>>2] = $97;
 $98 = $12;
 $99 = ($98|0)!=(0|0);
 $100 = $10;
 if ($99) {
  $105 = $12;
  HEAP32[$105>>2] = $100;
 } else {
  $101 = $5;
  $102 = ((($101)) + 28|0);
  $103 = $8;
  $104 = (($102) + ($103<<2)|0);
  HEAP32[$104>>2] = $100;
 }
 $106 = $11;
 $107 = $10;
 HEAP32[$107>>2] = $106;
 $108 = $6;
 $109 = $10;
 $110 = ((($109)) + 4|0);
 HEAP32[$110>>2] = $108;
 $111 = $6;
 $4 = $111;
 $112 = $4;
 STACKTOP = sp;return ($112|0);
}
function _rtClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 (_logFile($3,0,0)|0);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  _freeBuff($14);
  $15 = $1;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  _freeBuff($18);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 19;
 $22 = $21 & 1;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $24 = $1;
 _free($24);
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _vmInit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $16 = $4;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 $19 = $5;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $4;
  $22 = ((($21)) + 132|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_padPointer_264($23,4)|0);
  $25 = $4;
  $26 = ((($25)) + 132|0);
  HEAP32[$26>>2] = $24;
  $27 = $4;
  $28 = ((($27)) + 20|0);
  HEAP32[$28>>2] = $24;
  $29 = $4;
  $30 = ((($29)) + 132|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 60|0);
  HEAP32[$30>>2] = $32;
  $33 = $4;
  $34 = ((($33)) + 132|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $4;
  $37 = ((($36)) + 136|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35>>>0)>=($38>>>0);
  if ($39) {
   $40 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 18706;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 676;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 19077;
   _printFmt($40,0,19026,$vararg_buffer);
   __abort_257();
  }
  $41 = $4;
  $42 = ((($41)) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  dest=$43; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $44 = $4;
  $45 = $4;
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$47>>2] = $44;
  $48 = $4;
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 52|0);
  HEAP32[$51>>2] = (-1);
  $52 = $7;
  $53 = ((($52)) + 5312|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $4;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 56|0);
  HEAP32[$58>>2] = $54;
  $59 = $4;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 12|0);
  (_initBuff($62,128,64)|0);
  $63 = $4;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 28|0);
  (_initBuff($66,128,64)|0);
 }
 $67 = $7;
 $68 = ($67|0)!=(0|0);
 L7: do {
  if ($68) {
   $69 = $7;
   $70 = ((($69)) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)!=(0|0);
   if ($72) {
    $73 = $7;
    $74 = ((($73)) + 20|0);
    $75 = HEAP32[$74>>2]|0;
    $8 = $75;
    $76 = $8;
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $9 = $78;
    $79 = $4;
    $80 = ((($79)) + 132|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_padPointer_264($81,4)|0);
    $83 = $4;
    $84 = ((($83)) + 132|0);
    HEAP32[$84>>2] = $82;
    $10 = $82;
    $85 = $9;
    $86 = ((($85)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 1)|0;
    $89 = $88<<2;
    $90 = $4;
    $91 = ((($90)) + 132|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($89)|0);
    HEAP32[$91>>2] = $93;
    $94 = $4;
    $95 = ((($94)) + 132|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $4;
    $98 = ((($97)) + 136|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($96>>>0)>=($99>>>0);
    if ($100) {
     $101 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer3>>2] = 18706;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = 694;
     $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
     HEAP32[$vararg_ptr7>>2] = 19077;
     _printFmt($101,0,25109,$vararg_buffer3);
     __abort_257();
     $3 = 0;
     $228 = $3;
     STACKTOP = sp;return ($228|0);
    }
    $102 = $10;
    $103 = $4;
    $104 = ((($103)) + 24|0);
    HEAP32[$104>>2] = $102;
    while(1) {
     $105 = $8;
     $106 = ($105|0)!=(0|0);
     if (!($106)) {
      break L7;
     }
     $107 = $8;
     $108 = ((($107)) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $11 = $109;
     $110 = $11;
     $111 = $10;
     $112 = $11;
     $113 = ((($112)) + 12|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($111) + ($114<<2)|0);
     HEAP32[$115>>2] = $110;
     $116 = $4;
     $117 = $11;
     $118 = (_vmOffset_270($116,$117)|0);
     $119 = $11;
     $120 = ((($119)) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ((($121)) + 20|0);
     HEAP32[$122>>2] = $118;
     $123 = $11;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($125)) + 16|0);
     HEAP32[$126>>2] = 0;
     $127 = $4;
     $128 = $11;
     $129 = ((($128)) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     (_addDbgFunction($127,$130)|0);
     $131 = $8;
     $132 = HEAP32[$131>>2]|0;
     $8 = $132;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $133 = $4;
   $134 = ((($133)) + 132|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (_padPointer_264($135,4)|0);
   $137 = $4;
   $138 = ((($137)) + 132|0);
   HEAP32[$138>>2] = $136;
   $12 = $136;
   $139 = $4;
   $140 = ((($139)) + 132|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 24|0);
   HEAP32[$140>>2] = $142;
   $143 = $4;
   $144 = ((($143)) + 132|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $4;
   $147 = ((($146)) + 136|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($145>>>0)>=($148>>>0);
   if ($149) {
    $150 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer8>>2] = 18706;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 713;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = 19077;
    _printFmt($150,0,25109,$vararg_buffer8);
    __abort_257();
    $3 = 0;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   }
   $151 = $4;
   $152 = ((($151)) + 132|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (_padPointer_264($153,4)|0);
   $155 = $4;
   $156 = ((($155)) + 132|0);
   HEAP32[$156>>2] = $154;
   $13 = $154;
   $157 = $4;
   $158 = ((($157)) + 132|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ((($159)) + 4|0);
   HEAP32[$158>>2] = $160;
   $161 = $4;
   $162 = ((($161)) + 132|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $4;
   $165 = ((($164)) + 136|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ($163>>>0)>=($166>>>0);
   if ($167) {
    $168 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer13>>2] = 18706;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = 720;
    $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
    HEAP32[$vararg_ptr17>>2] = 19077;
    _printFmt($168,0,25109,$vararg_buffer13);
    __abort_257();
    $3 = 0;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   }
   $169 = $12;
   ;HEAP32[$169>>2]=0|0;HEAP32[$169+4>>2]=0|0;HEAP32[$169+8>>2]=0|0;HEAP32[$169+12>>2]=0|0;HEAP32[$169+16>>2]=0|0;HEAP32[$169+20>>2]=0|0;
   $170 = $12;
   HEAP32[$170>>2] = 59;
   $171 = $12;
   $172 = $13;
   HEAP32[$172>>2] = $171;
   $173 = $13;
   $174 = $4;
   $175 = ((($174)) + 24|0);
   HEAP32[$175>>2] = $173;
   $176 = $4;
   $177 = ((($176)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(0|0);
   if ($179) {
    $180 = $4;
    $181 = ((($180)) + 132|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (_padPointer_264($182,4)|0);
    $184 = $4;
    $185 = ((($184)) + 132|0);
    HEAP32[$185>>2] = $183;
    $14 = $183;
    $186 = $4;
    $187 = ((($186)) + 132|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ((($188)) + 72|0);
    HEAP32[$187>>2] = $189;
    $190 = $4;
    $191 = ((($190)) + 132|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $4;
    $194 = ((($193)) + 136|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($192>>>0)>=($195>>>0);
    if (!($196)) {
     $198 = $14;
     dest=$198; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $199 = $14;
     $200 = ((($199)) + 44|0);
     HEAP32[$200>>2] = 234;
     $201 = $4;
     $202 = $4;
     $203 = ((($202)) + 132|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (_vmOffset_270($201,$204)|0);
     $206 = $14;
     $207 = ((($206)) + 20|0);
     HEAP32[$207>>2] = $205;
     $208 = $14;
     HEAP32[$208>>2] = 19084;
     $209 = $14;
     $210 = $4;
     $211 = ((($210)) + 12|0);
     HEAP32[$211>>2] = $209;
     break;
    }
    $197 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer18>>2] = 18706;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = 735;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = 19077;
    _printFmt($197,0,25109,$vararg_buffer18);
    __abort_257();
    $3 = 0;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   }
  }
 } while(0);
 $212 = $6;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $214 = $4;
  $215 = ((($214)) + 24|0);
  $216 = HEAP32[$215>>2]|0;
  $15 = $216;
  $217 = $6;
  $218 = $15;
  $219 = HEAP32[$218>>2]|0;
  HEAP32[$219>>2] = $217;
 }
 $220 = $4;
 $221 = ((($220)) + 132|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = $4;
 $224 = ((($223)) + 144|0);
 $225 = $222;
 $226 = $224;
 $227 = (($225) - ($226))|0;
 $3 = $227;
 $228 = $3;
 STACKTOP = sp;return ($228|0);
}
function _addDbgFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $5 = 0;
 while(1) {
  $12 = $5;
  $13 = $2;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($12>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $2;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 12|0);
  $24 = $5;
  $25 = (_getBuff_284($23,$24)|0);
  $4 = $25;
  $26 = $3;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $4;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)<=($31>>>0);
  if ($32) {
   break;
  }
  $33 = $5;
  $34 = (($33) + 1)|0;
  $5 = $34;
 }
 $35 = $4;
 $36 = ($35|0)==(0|0);
 if ($36) {
  label = 8;
 } else {
  $37 = $3;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $4;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)!=($42|0);
  if ($43) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $44 = $2;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = $5;
  $49 = (_insBuff($47,$48,0)|0);
  $4 = $49;
 }
 $50 = $4;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $52 = $4;
 $53 = $2;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 _memset(($52|0),0,($58|0))|0;
 $59 = $3;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = $59;
 $62 = $3;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $4;
 $66 = ((($65)) + 8|0);
 HEAP32[$66>>2] = $64;
 $67 = $3;
 $68 = ((($67)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $4;
 $71 = ((($70)) + 12|0);
 HEAP32[$71>>2] = $69;
 $72 = $3;
 $73 = ((($72)) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $4;
 $76 = ((($75)) + 16|0);
 HEAP32[$76>>2] = $74;
 $77 = $3;
 $78 = ((($77)) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $3;
 $81 = ((($80)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($79) + ($82))|0;
 $84 = $4;
 $85 = ((($84)) + 20|0);
 HEAP32[$85>>2] = $83;
 $86 = $4;
 STACKTOP = sp;return ($86|0);
}
function _haltDummy($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _getBuff_284($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $5 = $10;
 $11 = $5;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if (!($15)) {
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = $3;
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21)|0);
   $2 = $22;
   $23 = $2;
   STACKTOP = sp;return ($23|0);
  }
 }
 $2 = 0;
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _ccInit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 18706;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 945;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 19135;
  _printFmt($12,0,19090,$vararg_buffer);
  __abort_257();
 }
 $13 = $4;
 $14 = ((($13)) + 132|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 144|0);
 $18 = ((($17)) + 1|0);
 $19 = ($15|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer3>>2] = 18706;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 946;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 19135;
  _printFmt($20,0,19142,$vararg_buffer3);
  __abort_257();
 }
 $21 = $4;
 $22 = ((($21)) + 136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = ((($24)) + 144|0);
 $26 = $4;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($25) + ($28)|0);
 $30 = ($23|0)!=($29|0);
 if ($30) {
  $31 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer8>>2] = 18706;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = 947;
  $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
  HEAP32[$vararg_ptr12>>2] = 19135;
  _printFmt($31,0,19197,$vararg_buffer8);
  __abort_257();
 }
 $32 = $4;
 $33 = ((($32)) + 136|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + -5316|0);
 $7 = $35;
 $36 = $4;
 $37 = ((($36)) + 136|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + -5316|0);
 HEAP32[$37>>2] = $39;
 $40 = $4;
 $41 = ((($40)) + 136|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $4;
 $44 = ((($43)) + 132|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($42>>>0)<($45>>>0);
 if ($46) {
  $47 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer13>>2] = 18706;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 953;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = 19135;
  _printFmt($47,0,25109,$vararg_buffer13);
  __abort_257();
  $3 = 0;
  $95 = $3;
  STACKTOP = sp;return ($95|0);
 } else {
  $48 = $4;
  $49 = ((($48)) + 136|0);
  $50 = HEAP32[$49>>2]|0;
  _memset(($50|0),0,5316)|0;
  $51 = $4;
  $52 = $7;
  HEAP32[$52>>2] = $51;
  $53 = $7;
  $54 = $4;
  $55 = ((($54)) + 16|0);
  HEAP32[$55>>2] = $53;
  $56 = $7;
  $57 = ((($56)) + 8|0);
  HEAP32[$57>>2] = 0;
  $58 = $7;
  $59 = ((($58)) + 12|0);
  HEAP32[$59>>2] = 0;
  $60 = $7;
  $61 = ((($60)) + 16|0);
  HEAP32[$61>>2] = 0;
  $62 = $7;
  $63 = ((($62)) + 4148|0);
  $64 = ((($63)) + 8|0);
  HEAP32[$64>>2] = -1;
  $65 = $7;
  $66 = ((($65)) + 4148|0);
  $67 = ((($66)) + 12|0);
  $68 = ((($67)) + 12|0);
  HEAP32[$68>>2] = 0;
  $69 = $7;
  $70 = ((($69)) + 4148|0);
  $71 = ((($70)) + 12|0);
  $72 = ((($71)) + 8|0);
  HEAP32[$72>>2] = 0;
  $73 = $7;
  $74 = ((($73)) + 4148|0);
  $75 = ((($74)) + 12|0);
  $76 = ((($75)) + 4|0);
  HEAP32[$76>>2] = -1;
  $77 = $7;
  $78 = $5;
  _install_type($77,$78);
  $79 = $7;
  $80 = $5;
  _install_emit($79,$80);
  $81 = $4;
  $82 = $6;
  (_install_base($81,$82)|0);
  $83 = $7;
  $84 = (_newNode($83,42)|0);
  $85 = $7;
  $86 = ((($85)) + 4|0);
  HEAP32[$86>>2] = $84;
  $87 = $7;
  $88 = ((($87)) + 5200|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $7;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 4|0);
  HEAP32[$93>>2] = $89;
  $94 = $7;
  $3 = $94;
  $95 = $3;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function _install_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $23 = $2;
 $24 = (_intNode($23,0,0)|0);
 $7 = $24;
 $25 = $2;
 $26 = (_install($25,24021,218,4,0,0)|0);
 $8 = $26;
 $27 = $8;
 $28 = $8;
 $29 = ((($28)) + 28|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = ((($30)) + 5260|0);
 HEAP32[$31>>2] = $27;
 $32 = $8;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = 72;
 $34 = $8;
 $35 = $7;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = $34;
 $37 = $2;
 $38 = $8;
 $39 = (_install($37,23968,209,0,$38,0)|0);
 $9 = $39;
 $40 = $2;
 $41 = $8;
 $42 = $7;
 $43 = (_install($40,23973,210,1,$41,$42)|0);
 $10 = $43;
 $44 = $2;
 $45 = $8;
 $46 = $7;
 $47 = (_install($44,19636,211,1,$45,$46)|0);
 $11 = $47;
 $48 = $2;
 $49 = $8;
 $50 = $7;
 $51 = (_install($48,19641,211,1,$49,$50)|0);
 $12 = $51;
 $52 = $2;
 $53 = $8;
 $54 = $7;
 $55 = (_install($52,19646,211,2,$53,$54)|0);
 $13 = $55;
 $56 = $2;
 $57 = $8;
 $58 = $7;
 $59 = (_install($56,19652,211,4,$57,$58)|0);
 $14 = $59;
 $60 = $2;
 $61 = $8;
 $62 = $7;
 $63 = (_install($60,19658,213,8,$61,$62)|0);
 $15 = $63;
 $64 = $2;
 $65 = $8;
 $66 = $7;
 $67 = (_install($64,19664,212,1,$65,$66)|0);
 $16 = $67;
 $68 = $2;
 $69 = $8;
 $70 = $7;
 $71 = (_install($68,19670,212,2,$69,$70)|0);
 $17 = $71;
 $72 = $2;
 $73 = $8;
 $74 = $7;
 $75 = (_install($72,19677,212,4,$73,$74)|0);
 $18 = $75;
 $76 = $2;
 $77 = $8;
 $78 = $7;
 $79 = (_install($76,19684,214,8,$77,$78)|0);
 $19 = $79;
 $80 = $2;
 $81 = $8;
 $82 = $7;
 $83 = (_install($80,19691,215,4,$81,$82)|0);
 $20 = $83;
 $84 = $2;
 $85 = $8;
 $86 = $7;
 $87 = (_install($84,19699,216,8,$85,$86)|0);
 $21 = $87;
 $88 = $15;
 $89 = $7;
 $90 = ((($89)) + 4|0);
 HEAP32[$90>>2] = $88;
 $91 = $3;
 $92 = $91 & 1;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $2;
  $95 = $8;
  $96 = (_install($94,19707,218,4,$95,0)|0);
  $4 = $96;
 }
 $97 = $3;
 $98 = $97 & 2;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $2;
  $101 = $8;
  $102 = (_install($100,19715,219,8,$101,0)|0);
  $5 = $102;
 }
 $103 = $2;
 $104 = $8;
 $105 = (_install($103,24030,218,4,$104,0)|0);
 $22 = $105;
 $106 = $3;
 $107 = $106 & 4;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $2;
  $110 = $8;
  $111 = (_install($109,19723,218,4,$110,0)|0);
  $6 = $111;
 }
 $112 = $9;
 $113 = ((($112)) + 68|0);
 HEAP32[$113>>2] = 0;
 $114 = $10;
 $115 = ((($114)) + 68|0);
 HEAP32[$115>>2] = 27958;
 $116 = $11;
 $117 = ((($116)) + 68|0);
 HEAP32[$117>>2] = 23887;
 $118 = $12;
 $119 = ((($118)) + 68|0);
 HEAP32[$119>>2] = 27958;
 $120 = $13;
 $121 = ((($120)) + 68|0);
 HEAP32[$121>>2] = 27958;
 $122 = $14;
 $123 = ((($122)) + 68|0);
 HEAP32[$123>>2] = 27958;
 $124 = $15;
 $125 = ((($124)) + 68|0);
 HEAP32[$125>>2] = 18681;
 $126 = $16;
 $127 = ((($126)) + 68|0);
 HEAP32[$127>>2] = 18684;
 $128 = $17;
 $129 = ((($128)) + 68|0);
 HEAP32[$129>>2] = 18684;
 $130 = $18;
 $131 = ((($130)) + 68|0);
 HEAP32[$131>>2] = 18684;
 $132 = $19;
 $133 = ((($132)) + 68|0);
 HEAP32[$133>>2] = 18687;
 $134 = $20;
 $135 = ((($134)) + 68|0);
 HEAP32[$135>>2] = 18690;
 $136 = $21;
 $137 = ((($136)) + 68|0);
 HEAP32[$137>>2] = 18693;
 $138 = $8;
 $139 = ((($138)) + 68|0);
 HEAP32[$139>>2] = 18699;
 $140 = $9;
 $141 = $2;
 $142 = ((($141)) + 5200|0);
 HEAP32[$142>>2] = $140;
 $143 = $10;
 $144 = $2;
 $145 = ((($144)) + 5204|0);
 HEAP32[$145>>2] = $143;
 $146 = $11;
 $147 = $2;
 $148 = ((($147)) + 5208|0);
 HEAP32[$148>>2] = $146;
 $149 = $12;
 $150 = $2;
 $151 = ((($150)) + 5212|0);
 HEAP32[$151>>2] = $149;
 $152 = $13;
 $153 = $2;
 $154 = ((($153)) + 5216|0);
 HEAP32[$154>>2] = $152;
 $155 = $14;
 $156 = $2;
 $157 = ((($156)) + 5220|0);
 HEAP32[$157>>2] = $155;
 $158 = $15;
 $159 = $2;
 $160 = ((($159)) + 5224|0);
 HEAP32[$160>>2] = $158;
 $161 = $16;
 $162 = $2;
 $163 = ((($162)) + 5228|0);
 HEAP32[$163>>2] = $161;
 $164 = $17;
 $165 = $2;
 $166 = ((($165)) + 5232|0);
 HEAP32[$166>>2] = $164;
 $167 = $18;
 $168 = $2;
 $169 = ((($168)) + 5236|0);
 HEAP32[$169>>2] = $167;
 $170 = $19;
 $171 = $2;
 $172 = ((($171)) + 5240|0);
 HEAP32[$172>>2] = $170;
 $173 = $20;
 $174 = $2;
 $175 = ((($174)) + 5244|0);
 HEAP32[$175>>2] = $173;
 $176 = $21;
 $177 = $2;
 $178 = ((($177)) + 5248|0);
 HEAP32[$178>>2] = $176;
 $179 = $4;
 $180 = $2;
 $181 = ((($180)) + 5252|0);
 HEAP32[$181>>2] = $179;
 $182 = $22;
 $183 = $2;
 $184 = ((($183)) + 5264|0);
 HEAP32[$184>>2] = $182;
 $185 = $5;
 $186 = $2;
 $187 = ((($186)) + 5256|0);
 HEAP32[$187>>2] = $185;
 $188 = $6;
 $189 = $2;
 $190 = ((($189)) + 5268|0);
 HEAP32[$190>>2] = $188;
 $191 = $14;
 $192 = $2;
 $193 = ((($192)) + 5276|0);
 HEAP32[$193>>2] = $191;
 $194 = $18;
 $195 = $2;
 $196 = ((($195)) + 5280|0);
 HEAP32[$196>>2] = $194;
 $197 = $4;
 $198 = ($197|0)!=(0|0);
 if ($198) {
  $199 = $2;
  $200 = $4;
  $201 = $2;
  $202 = (_intNode($201,0,0)|0);
  $203 = (_install($199,19730,192,0,$200,$202)|0);
  $204 = $2;
  $205 = ((($204)) + 5284|0);
  HEAP32[$205>>2] = $203;
  $206 = $4;
  $207 = $2;
  $208 = ((($207)) + 5284|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ((($209)) + 56|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ((($211)) + 4|0);
  HEAP32[$212>>2] = $206;
 }
 $213 = $2;
 $214 = $10;
 $215 = $2;
 $216 = (_intNode($215,1,0)|0);
 $217 = (_install($213,27850,192,0,$214,$216)|0);
 $218 = $2;
 $219 = ((($218)) + 5288|0);
 HEAP32[$219>>2] = $217;
 $220 = $10;
 $221 = $2;
 $222 = ((($221)) + 5288|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($223)) + 56|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ((($225)) + 4|0);
 HEAP32[$226>>2] = $220;
 $227 = $2;
 $228 = $10;
 $229 = $2;
 $230 = (_intNode($229,0,0)|0);
 $231 = (_install($227,27855,192,0,$228,$230)|0);
 $232 = $2;
 $233 = ((($232)) + 5292|0);
 HEAP32[$233>>2] = $231;
 $234 = $10;
 $235 = $2;
 $236 = ((($235)) + 5292|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = ((($237)) + 56|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ((($239)) + 4|0);
 HEAP32[$240>>2] = $234;
 $241 = $2;
 _enter($241,0);
 $242 = $2;
 $243 = $2;
 $244 = ((($243)) + 5280|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = ((($245)) + 16|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $2;
 $249 = ((($248)) + 5280|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (_install($242,22486,176,$247,$250,0)|0);
 $252 = $2;
 $253 = ((($252)) + 5296|0);
 HEAP32[$253>>2] = $251;
 $254 = $2;
 (_leave($254,16,0,0,0)|0);
 $255 = $2;
 $256 = ((($255)) + 5296|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = ((($257)) + 20|0);
 HEAP32[$258>>2] = ((((0) + 4|0)));
 $259 = $2;
 $260 = ((($259)) + 5296|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ((($261)) + 24|0);
 HEAP32[$262>>2] = 0;
 $263 = $2;
 $264 = $8;
 $265 = $2;
 $266 = $2;
 $267 = ((($266)) + 5276|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = (_lnkNode($265,$268)|0);
 (_install($263,19735,192,0,$264,$269)|0);
 $270 = $2;
 $271 = $8;
 $272 = $2;
 $273 = $16;
 $274 = (_lnkNode($272,$273)|0);
 (_install($270,19739,192,0,$271,$274)|0);
 $275 = $2;
 $276 = $8;
 $277 = $2;
 $278 = $20;
 $279 = (_lnkNode($277,$278)|0);
 (_install($275,19744,192,0,$276,$279)|0);
 $280 = $2;
 $281 = $8;
 $282 = $2;
 $283 = $21;
 $284 = (_lnkNode($282,$283)|0);
 (_install($280,19750,192,0,$281,$284)|0);
 $285 = $2;
 $286 = $11;
 $287 = (_install($285,19757,220,4,$286,0)|0);
 $288 = $2;
 $289 = ((($288)) + 5272|0);
 HEAP32[$289>>2] = $287;
 $290 = $2;
 $291 = ((($290)) + 5272|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = ($292|0)!=(0|0);
 if ($293) {
  $294 = $2;
  $295 = ((($294)) + 5272|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ((($296)) + 68|0);
  HEAP32[$297>>2] = 18696;
 }
 $298 = $2;
 $299 = ((($298)) + 5200|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = ($300|0)!=(0|0);
 if (!($301)) {
  STACKTOP = sp;return;
 }
 $302 = $2;
 $303 = $2;
 $304 = ((($303)) + 5200|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = (_lnkNode($302,$305)|0);
 $307 = $2;
 $308 = ((($307)) + 5304|0);
 HEAP32[$308>>2] = $306;
 $309 = $2;
 $310 = ((($309)) + 5304|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = ($311|0)==(0|0);
 if (!($312)) {
  STACKTOP = sp;return;
 }
 $313 = $2;
 $314 = HEAP32[$313>>2]|0;
 _printLog($314,-1,0,0,0,18994,$vararg_buffer);
 STACKTOP = sp;return;
}
function _install_emit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $4 = $18;
 $19 = $2;
 $20 = $2;
 $21 = ((($20)) + 5264|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_install($19,26329,209,0,$22,0)|0);
 $24 = $2;
 $25 = ((($24)) + 5300|0);
 HEAP32[$25>>2] = $23;
 $26 = $3;
 $27 = $26 & 48;
 $28 = ($27|0)==(48);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = $2;
 $31 = ((($30)) + 5300|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_ccExtend($29,$32)|0);
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $2;
 $36 = ((($35)) + 5200|0);
 $37 = HEAP32[$36>>2]|0;
 $7 = $37;
 $38 = $2;
 $39 = ((($38)) + 5204|0);
 $40 = HEAP32[$39>>2]|0;
 $8 = $40;
 $41 = $2;
 $42 = ((($41)) + 5236|0);
 $43 = HEAP32[$42>>2]|0;
 $9 = $43;
 $44 = $2;
 $45 = ((($44)) + 5220|0);
 $46 = HEAP32[$45>>2]|0;
 $10 = $46;
 $47 = $2;
 $48 = ((($47)) + 5224|0);
 $49 = HEAP32[$48>>2]|0;
 $11 = $49;
 $50 = $2;
 $51 = ((($50)) + 5240|0);
 $52 = HEAP32[$51>>2]|0;
 $12 = $52;
 $53 = $2;
 $54 = ((($53)) + 5244|0);
 $55 = HEAP32[$54>>2]|0;
 $13 = $55;
 $56 = $2;
 $57 = ((($56)) + 5248|0);
 $58 = HEAP32[$57>>2]|0;
 $14 = $58;
 $59 = $2;
 $60 = $7;
 (_ccDefOpCode($59,19462,$60,0,0)|0);
 $61 = $2;
 $62 = $8;
 (_ccDefOpCode($61,19466,$62,10,0)|0);
 $63 = $2;
 $64 = $7;
 (_ccDefOpCode($63,19470,$64,21,1)|0);
 $65 = $2;
 $66 = $7;
 (_ccDefOpCode($65,19474,$66,3,0)|0);
 $67 = $2;
 $68 = $7;
 (_ccDefOpCode($67,28575,$68,2,0)|0);
 $69 = $2;
 $70 = $2;
 $71 = ((($70)) + 5260|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (_install($69,19478,217,16,$72,0)|0);
 $6 = $73;
 $74 = $2;
 $75 = (_ccBegin($74,19482)|0);
 $5 = $75;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = $2;
  $78 = $10;
  (_ccDefOpCode($77,19486,$78,18,0)|0);
  $79 = $2;
  $80 = $11;
  (_ccDefOpCode($79,19489,$80,19,0)|0);
  $81 = $2;
  $82 = $6;
  (_ccDefOpCode($81,19492,$82,20,0)|0);
  $83 = $2;
  $84 = $5;
  (_ccEnd($83,$84)|0);
 }
 $85 = $2;
 $86 = (_ccBegin($85,19495)|0);
 $5 = $86;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $2;
  $89 = $10;
  (_ccDefOpCode($88,19500,$89,24,0)|0);
  $90 = $2;
  $91 = $11;
  (_ccDefOpCode($90,19504,$91,25,0)|0);
  $92 = $2;
  $93 = $6;
  (_ccDefOpCode($92,19508,$93,26,0)|0);
  $94 = $2;
  $95 = $10;
  (_ccDefOpCode($94,19513,$95,32,0)|0);
  $96 = $2;
  $97 = $10;
  (_ccDefOpCode($96,19516,$97,33,0)|0);
  $98 = $2;
  $99 = $10;
  (_ccDefOpCode($98,23978,$99,34,0)|0);
  $100 = $2;
  $101 = $11;
  (_ccDefOpCode($100,23986,$101,35,0)|0);
  $102 = $2;
  $103 = $6;
  (_ccDefOpCode($102,19520,$103,36,0)|0);
  $104 = $2;
  $105 = $5;
  (_ccEnd($104,$105)|0);
 }
 $106 = $2;
 $107 = (_ccBegin($106,19525)|0);
 $5 = $107;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = $2;
  $110 = $7;
  (_ccDefOpCode($109,19513,$110,37,0)|0);
  $111 = $2;
  $112 = $7;
  (_ccDefOpCode($111,19516,$112,38,0)|0);
  $113 = $2;
  $114 = $7;
  (_ccDefOpCode($113,23978,$114,39,0)|0);
  $115 = $2;
  $116 = $7;
  (_ccDefOpCode($115,23986,$116,40,0)|0);
  $117 = $2;
  $118 = $7;
  (_ccDefOpCode($117,19520,$118,41,0)|0);
  $119 = $2;
  $120 = $5;
  (_ccEnd($119,$120)|0);
 }
 $121 = $2;
 $122 = (_ccBegin($121,19531)|0);
 $5 = $122;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = $2;
  $125 = $9;
  (_ccDefOpCode($124,23982,$125,48,0)|0);
  $126 = $2;
  $127 = $12;
  (_ccDefOpCode($126,23990,$127,64,0)|0);
  $128 = $2;
  $129 = $5;
  (_ccEnd($128,$129)|0);
 }
 $130 = $2;
 $131 = (_ccBegin($130,19535)|0);
 $5 = $131;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = $2;
  $134 = $9;
  (_ccDefOpCode($133,23982,$134,49,0)|0);
  $135 = $2;
  $136 = $12;
  (_ccDefOpCode($135,23990,$136,65,0)|0);
  $137 = $2;
  $138 = $5;
  (_ccEnd($137,$138)|0);
 }
 $139 = $2;
 $140 = (_ccBegin($139,19539)|0);
 $5 = $140;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = $2;
  $143 = $9;
  (_ccDefOpCode($142,23982,$143,50,0)|0);
  $144 = $2;
  $145 = $12;
  (_ccDefOpCode($144,23990,$145,66,0)|0);
  $146 = $2;
  $147 = $5;
  (_ccEnd($146,$147)|0);
 }
 $148 = $2;
 $149 = (_ccBegin($148,19542)|0);
 $5 = $149;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = $2;
  $152 = $9;
  (_ccDefOpCode($151,23982,$152,54,0)|0);
  $153 = $2;
  $154 = $12;
  (_ccDefOpCode($153,23990,$154,70,0)|0);
  $155 = $2;
  $156 = $5;
  (_ccEnd($155,$156)|0);
 }
 $157 = $2;
 $158 = (_ccBegin($157,19546)|0);
 $5 = $158;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = $2;
  $161 = $9;
  (_ccDefOpCode($160,23982,$161,58,0)|0);
  $162 = $2;
  $163 = $12;
  (_ccDefOpCode($162,23990,$163,74,0)|0);
  $164 = $2;
  $165 = $5;
  (_ccEnd($164,$165)|0);
 }
 $166 = $2;
 $167 = (_ccBegin($166,19550)|0);
 $5 = $167;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = $2;
  $170 = $10;
  (_ccDefOpCode($169,23978,$170,60,0)|0);
  $171 = $2;
  $172 = $11;
  (_ccDefOpCode($171,23986,$172,76,0)|0);
  $173 = $2;
  $174 = $9;
  (_ccDefOpCode($173,23982,$174,59,0)|0);
  $175 = $2;
  $176 = $12;
  (_ccDefOpCode($175,23990,$176,75,0)|0);
  $177 = $2;
  $178 = $5;
  (_ccEnd($177,$178)|0);
 }
 $179 = $2;
 $180 = (_ccBegin($179,19554)|0);
 $5 = $180;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = $2;
  $183 = $10;
  (_ccDefOpCode($182,23978,$183,80,0)|0);
  $184 = $2;
  $185 = $11;
  (_ccDefOpCode($184,23986,$185,96,0)|0);
  $186 = $2;
  $187 = $13;
  (_ccDefOpCode($186,23994,$187,112,0)|0);
  $188 = $2;
  $189 = $14;
  (_ccDefOpCode($188,23998,$189,128,0)|0);
  $190 = $2;
  $191 = $6;
  (_ccDefOpCode($190,19558,$191,144,0)|0);
  $192 = $2;
  $193 = $6;
  (_ccDefOpCode($192,19562,$193,160,0)|0);
  $194 = $2;
  $195 = $5;
  (_ccEnd($194,$195)|0);
 }
 $196 = $2;
 $197 = (_ccBegin($196,19566)|0);
 $5 = $197;
 $198 = ($197|0)!=(0|0);
 if ($198) {
  $199 = $2;
  $200 = $10;
  (_ccDefOpCode($199,23978,$200,81,0)|0);
  $201 = $2;
  $202 = $11;
  (_ccDefOpCode($201,23986,$202,97,0)|0);
  $203 = $2;
  $204 = $13;
  (_ccDefOpCode($203,23994,$204,113,0)|0);
  $205 = $2;
  $206 = $14;
  (_ccDefOpCode($205,23998,$206,129,0)|0);
  $207 = $2;
  $208 = $6;
  (_ccDefOpCode($207,19558,$208,145,0)|0);
  $209 = $2;
  $210 = $6;
  (_ccDefOpCode($209,19562,$210,161,0)|0);
  $211 = $2;
  $212 = $5;
  (_ccEnd($211,$212)|0);
 }
 $213 = $2;
 $214 = (_ccBegin($213,19570)|0);
 $5 = $214;
 $215 = ($214|0)!=(0|0);
 if ($215) {
  $216 = $2;
  $217 = $10;
  (_ccDefOpCode($216,23978,$217,82,0)|0);
  $218 = $2;
  $219 = $11;
  (_ccDefOpCode($218,23986,$219,98,0)|0);
  $220 = $2;
  $221 = $13;
  (_ccDefOpCode($220,23994,$221,114,0)|0);
  $222 = $2;
  $223 = $14;
  (_ccDefOpCode($222,23998,$223,130,0)|0);
  $224 = $2;
  $225 = $6;
  (_ccDefOpCode($224,19558,$225,146,0)|0);
  $226 = $2;
  $227 = $6;
  (_ccDefOpCode($226,19562,$227,162,0)|0);
  $228 = $2;
  $229 = $5;
  (_ccEnd($228,$229)|0);
 }
 $230 = $2;
 $231 = (_ccBegin($230,19574)|0);
 $5 = $231;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $233 = $2;
  $234 = $10;
  (_ccDefOpCode($233,23978,$234,83,0)|0);
  $235 = $2;
  $236 = $11;
  (_ccDefOpCode($235,23986,$236,99,0)|0);
  $237 = $2;
  $238 = $9;
  (_ccDefOpCode($237,23982,$238,51,0)|0);
  $239 = $2;
  $240 = $9;
  (_ccDefOpCode($239,23990,$240,67,0)|0);
  $241 = $2;
  $242 = $13;
  (_ccDefOpCode($241,23994,$242,115,0)|0);
  $243 = $2;
  $244 = $14;
  (_ccDefOpCode($243,23998,$244,131,0)|0);
  $245 = $2;
  $246 = $6;
  (_ccDefOpCode($245,19558,$246,147,0)|0);
  $247 = $2;
  $248 = $6;
  (_ccDefOpCode($247,19562,$248,163,0)|0);
  $249 = $2;
  $250 = $5;
  (_ccEnd($249,$250)|0);
 }
 $251 = $2;
 $252 = (_ccBegin($251,19578)|0);
 $5 = $252;
 $253 = ($252|0)!=(0|0);
 if ($253) {
  $254 = $2;
  $255 = $10;
  (_ccDefOpCode($254,23978,$255,84,0)|0);
  $256 = $2;
  $257 = $11;
  (_ccDefOpCode($256,23986,$257,100,0)|0);
  $258 = $2;
  $259 = $9;
  (_ccDefOpCode($258,23982,$259,52,0)|0);
  $260 = $2;
  $261 = $9;
  (_ccDefOpCode($260,23990,$261,68,0)|0);
  $262 = $2;
  $263 = $13;
  (_ccDefOpCode($262,23994,$263,116,0)|0);
  $264 = $2;
  $265 = $14;
  (_ccDefOpCode($264,23998,$265,132,0)|0);
  $266 = $2;
  $267 = $6;
  (_ccDefOpCode($266,19558,$267,148,0)|0);
  $268 = $2;
  $269 = $6;
  (_ccDefOpCode($268,19562,$269,164,0)|0);
  $270 = $2;
  $271 = $5;
  (_ccEnd($270,$271)|0);
 }
 $272 = $2;
 $273 = (_ccBegin($272,19582)|0);
 $5 = $273;
 $274 = ($273|0)!=(0|0);
 if ($274) {
  $275 = $2;
  $276 = $10;
  (_ccDefOpCode($275,23978,$276,85,0)|0);
  $277 = $2;
  $278 = $11;
  (_ccDefOpCode($277,23986,$278,101,0)|0);
  $279 = $2;
  $280 = $9;
  (_ccDefOpCode($279,23982,$280,53,0)|0);
  $281 = $2;
  $282 = $9;
  (_ccDefOpCode($281,23990,$282,69,0)|0);
  $283 = $2;
  $284 = $13;
  (_ccDefOpCode($283,23994,$284,117,0)|0);
  $285 = $2;
  $286 = $14;
  (_ccDefOpCode($285,23998,$286,133,0)|0);
  $287 = $2;
  $288 = $5;
  (_ccEnd($287,$288)|0);
 }
 $289 = $2;
 $290 = (_ccBegin($289,19586)|0);
 $5 = $290;
 $291 = ($290|0)!=(0|0);
 if ($291) {
  $292 = $2;
  $293 = $8;
  (_ccDefOpCode($292,23978,$293,87,0)|0);
  $294 = $2;
  $295 = $8;
  (_ccDefOpCode($294,23986,$295,103,0)|0);
  $296 = $2;
  $297 = $8;
  (_ccDefOpCode($296,23994,$297,119,0)|0);
  $298 = $2;
  $299 = $8;
  (_ccDefOpCode($298,23998,$299,135,0)|0);
  $300 = $2;
  $301 = $8;
  (_ccDefOpCode($300,19558,$301,151,0)|0);
  $302 = $2;
  $303 = $8;
  (_ccDefOpCode($302,19562,$303,167,0)|0);
  $304 = $2;
  $305 = $5;
  (_ccEnd($304,$305)|0);
 }
 $306 = $2;
 $307 = (_ccBegin($306,19590)|0);
 $5 = $307;
 $308 = ($307|0)!=(0|0);
 if ($308) {
  $309 = $2;
  $310 = $8;
  (_ccDefOpCode($309,23978,$310,88,0)|0);
  $311 = $2;
  $312 = $8;
  (_ccDefOpCode($311,23986,$312,104,0)|0);
  $313 = $2;
  $314 = $8;
  (_ccDefOpCode($313,23982,$314,56,0)|0);
  $315 = $2;
  $316 = $8;
  (_ccDefOpCode($315,23990,$316,72,0)|0);
  $317 = $2;
  $318 = $8;
  (_ccDefOpCode($317,23994,$318,120,0)|0);
  $319 = $2;
  $320 = $8;
  (_ccDefOpCode($319,23998,$320,136,0)|0);
  $321 = $2;
  $322 = $5;
  (_ccEnd($321,$322)|0);
 }
 $323 = $2;
 $324 = (_ccBegin($323,19594)|0);
 $5 = $324;
 $325 = ($324|0)!=(0|0);
 if ($325) {
  $326 = $2;
  $327 = $8;
  (_ccDefOpCode($326,23978,$327,89,0)|0);
  $328 = $2;
  $329 = $8;
  (_ccDefOpCode($328,23986,$329,105,0)|0);
  $330 = $2;
  $331 = $8;
  (_ccDefOpCode($330,23982,$331,57,0)|0);
  $332 = $2;
  $333 = $8;
  (_ccDefOpCode($332,23990,$333,73,0)|0);
  $334 = $2;
  $335 = $8;
  (_ccDefOpCode($334,23994,$335,121,0)|0);
  $336 = $2;
  $337 = $8;
  (_ccDefOpCode($336,23998,$337,137,0)|0);
  $338 = $2;
  $339 = $5;
  (_ccEnd($338,$339)|0);
 }
 $340 = $2;
 $341 = (_ccBegin($340,19598)|0);
 $5 = $341;
 $342 = ($341|0)!=(0|0);
 if ($342) {
  $343 = $2;
  $344 = $6;
  (_ccDefOpCode($343,19558,$344,152,0)|0);
  $345 = $2;
  $346 = $6;
  (_ccDefOpCode($345,19562,$346,168,0)|0);
  $347 = $2;
  $348 = $5;
  (_ccEnd($347,$348)|0);
 }
 $349 = $2;
 $350 = (_ccBegin($349,19602)|0);
 $5 = $350;
 $351 = ($350|0)!=(0|0);
 if ($351) {
  $352 = $2;
  $353 = $6;
  (_ccDefOpCode($352,19558,$353,153,0)|0);
  $354 = $2;
  $355 = $6;
  (_ccDefOpCode($354,19562,$355,169,0)|0);
  $356 = $2;
  $357 = $5;
  (_ccEnd($356,$357)|0);
 }
 $358 = $2;
 $359 = $6;
 $360 = (_ccExtend($358,$359)|0);
 $5 = $360;
 $361 = ($360|0)!=(0|0);
 if ($361) {
  $362 = $2;
  $363 = $13;
  (_ccDefOpCode($362,19606,$363,154,0)|0);
  $364 = $2;
  $365 = $13;
  (_ccDefOpCode($364,19610,$365,155,0)|0);
  $366 = $2;
  $367 = $13;
  (_ccDefOpCode($366,19614,$367,156,0)|0);
  $368 = $3;
  $369 = $368 & 112;
  $370 = ($369|0)==(112);
  L69: do {
   if ($370) {
    $15 = 0;
    while(1) {
     $371 = $15;
     $372 = ($371>>>0)<(256);
     if (!($372)) {
      break L69;
     }
     $373 = $4;
     $374 = ((($373)) + 136|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = $4;
     $377 = ((($376)) + 132|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = $375;
     $380 = $378;
     $381 = (($379) - ($380))|0;
     $382 = ($381|0)<(5);
     if ($382) {
      break;
     }
     $384 = $15;
     $385 = $384 >>> 0;
     $386 = $385 & 3;
     $387 = (19631 + ($386)|0);
     $388 = HEAP8[$387>>0]|0;
     $389 = $4;
     $390 = ((($389)) + 132|0);
     $391 = HEAP32[$390>>2]|0;
     HEAP8[$391>>0] = $388;
     $392 = $15;
     $393 = $392 >>> 2;
     $394 = $393 & 3;
     $395 = (19631 + ($394)|0);
     $396 = HEAP8[$395>>0]|0;
     $397 = $4;
     $398 = ((($397)) + 132|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = ((($399)) + 1|0);
     HEAP8[$400>>0] = $396;
     $401 = $15;
     $402 = $401 >>> 4;
     $403 = $402 & 3;
     $404 = (19631 + ($403)|0);
     $405 = HEAP8[$404>>0]|0;
     $406 = $4;
     $407 = ((($406)) + 132|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = ((($408)) + 2|0);
     HEAP8[$409>>0] = $405;
     $410 = $15;
     $411 = $410 >>> 6;
     $412 = $411 & 3;
     $413 = (19631 + ($412)|0);
     $414 = HEAP8[$413>>0]|0;
     $415 = $4;
     $416 = ((($415)) + 132|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = ((($417)) + 3|0);
     HEAP8[$418>>0] = $414;
     $419 = $4;
     $420 = ((($419)) + 132|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ((($421)) + 4|0);
     HEAP8[$422>>0] = 0;
     $423 = $2;
     $424 = $4;
     $425 = ((($424)) + 132|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (_ccUniqueStr($423,$426,-1,-1)|0);
     $16 = $427;
     $428 = $2;
     $429 = $16;
     $430 = $6;
     $431 = $15;
     (_ccDefOpCode($428,$429,$430,170,$431)|0);
     $432 = $15;
     $433 = (($432) + 1)|0;
     $15 = $433;
    }
    $383 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer>>2] = 18706;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 511;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 19618;
    _printFmt($383,0,25109,$vararg_buffer);
    __abort_257();
    STACKTOP = sp;return;
   }
  } while(0);
  $434 = $2;
  $435 = $5;
  (_ccEnd($434,$435)|0);
 }
 $436 = $2;
 $437 = $2;
 $438 = ((($437)) + 5300|0);
 $439 = HEAP32[$438>>2]|0;
 (_ccEnd($436,$439)|0);
 STACKTOP = sp;return;
}
function _install_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $7 = $2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $4;
 $11 = ($10|0)!=(0);
 if ($11) {
  $21 = 1;
 } else {
  $12 = $5;
  $13 = $3;
  $14 = ($13|0)!=(0|0);
  $15 = $3;
  $16 = $14 ? $15 : 59;
  $17 = (_ccAddCall($12,$16,19260)|0);
  $18 = ($17|0)!=(0|0);
  $19 = $18 ^ 1;
  $21 = $19;
 }
 $20 = $21&1;
 $4 = $20;
 $22 = $5;
 $23 = ((($22)) + 5260|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $26 = $5;
 $27 = ((($26)) + 5256|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $30 = $5;
 $31 = $5;
 $32 = ((($31)) + 5260|0);
 $33 = HEAP32[$32>>2]|0;
 _enter($30,$33);
 $34 = $5;
 $35 = $5;
 $36 = ((($35)) + 5220|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_install($34,27845,176,4,$37,0)|0);
 $6 = $38;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $6;
  $41 = ((($40)) + 20|0);
  HEAP32[$41>>2] = ((((0) + 16|0)));
 } else {
  $4 = 1;
 }
 $42 = $5;
 $43 = $5;
 $44 = ((($43)) + 5220|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_install($42,19272,176,4,$45,0)|0);
 $6 = $46;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $6;
  $49 = ((($48)) + 20|0);
  HEAP32[$49>>2] = ((((0) + 20|0)));
  $50 = $6;
  $51 = ((($50)) + 68|0);
  HEAP32[$51>>2] = 19279;
 } else {
  $4 = 1;
 }
 $52 = $4;
 $53 = ($52|0)!=(0);
 if ($53) {
  $59 = 1;
 } else {
  $54 = $5;
  $55 = (_ccAddCall($54,60,19285)|0);
  $6 = $55;
  $56 = ($55|0)!=(0|0);
  $57 = $56 ^ 1;
  $59 = $57;
 }
 $58 = $59&1;
 $4 = $58;
 $60 = $4;
 $61 = ($60|0)!=(0);
 if ($61) {
  $67 = 1;
 } else {
  $62 = $5;
  $63 = (_ccAddCall($62,60,19314)|0);
  $6 = $63;
  $64 = ($63|0)!=(0|0);
  $65 = $64 ^ 1;
  $67 = $65;
 }
 $66 = $67&1;
 $4 = $66;
 $68 = $6;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $5;
  $71 = ((($70)) + 5272|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $6;
  $74 = ((($73)) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($75)) + 28|0);
  HEAP32[$76>>2] = $72;
 }
 $77 = $4;
 $78 = ($77|0)!=(0);
 if ($78) {
  $84 = 1;
 } else {
  $79 = $5;
  $80 = (_ccAddCall($79,60,19343)|0);
  $6 = $80;
  $81 = ($80|0)!=(0|0);
  $82 = $81 ^ 1;
  $84 = $82;
 }
 $83 = $84&1;
 $4 = $83;
 $85 = $4;
 $86 = ($85|0)!=(0);
 if ($86) {
  $92 = 1;
 } else {
  $87 = $5;
  $88 = (_ccAddCall($87,60,19369)|0);
  $6 = $88;
  $89 = ($88|0)!=(0|0);
  $90 = $89 ^ 1;
  $92 = $90;
 }
 $91 = $92&1;
 $4 = $91;
 $93 = $6;
 $94 = ($93|0)!=(0|0);
 if ($94) {
  $95 = $5;
  $96 = ((($95)) + 5272|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $6;
  $99 = ((($98)) + 40|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 28|0);
  HEAP32[$101>>2] = $97;
 }
 $102 = $5;
 $103 = ((($102)) + 5260|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 36|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $108 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 18706;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 585;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 19449;
  _printFmt($108,0,19398,$vararg_buffer);
  __abort_257();
 }
 $109 = $5;
 $110 = (_leave($109,0,0,0,0)|0);
 $111 = $5;
 $112 = ((($111)) + 5260|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($113)) + 36|0);
 HEAP32[$114>>2] = $110;
 $115 = $4;
 STACKTOP = sp;return ($115|0);
}
function _typenameGetField($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (_argref($5,0)|0);
 $3 = $6;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (_rtLookup($8,$9,0)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = $4;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   $18 = $2;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(19314|0);
   $22 = $2;
   if ($21) {
    $23 = $2;
    $24 = HEAP32[$23>>2]|0;
    $25 = $4;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_vmOffset_270($24,$27)|0);
    _retref($22,$28);
    $1 = 0;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   }
   $29 = ((($22)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(19343|0);
   $32 = $2;
   if ($31) {
    $33 = $4;
    $34 = ((($33)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    _reti32($32,$35);
    $1 = 0;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   }
   $36 = ((($32)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(19369|0);
   $39 = $2;
   if ($38) {
    $40 = $2;
    $41 = HEAP32[$40>>2]|0;
    $42 = $4;
    $43 = HEAP32[$42>>2]|0;
    $44 = (_vmOffset_270($41,$43)|0);
    _retref($39,$44);
    $1 = 0;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   }
   $45 = ((($39)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(19285|0);
   if ($47) {
    $48 = $2;
    $49 = $2;
    $50 = HEAP32[$49>>2]|0;
    $51 = $4;
    $52 = ((($51)) + 28|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_vmOffset_270($50,$53)|0);
    _retref($48,$54);
    $1 = 0;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   } else {
    $1 = 6;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   }
  }
 }
 $1 = 6;
 $55 = $1;
 STACKTOP = sp;return ($55|0);
}
function _argref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _retref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAP32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _reti32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAP32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _ccDefOpCode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $6;
 $13 = (_newNode($12,67)|0);
 $11 = $13;
 $14 = $11;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $8;
  $17 = $11;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = $9;
  $20 = $11;
  $21 = ((($20)) + 24|0);
  HEAP32[$21>>2] = $19;
  $22 = $10;
  $23 = $11;
  $24 = ((($23)) + 24|0);
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $22;
  $26 = $6;
  $27 = $7;
  $28 = $8;
  $29 = $11;
  $30 = (_install($26,$27,192,0,$28,$29)|0);
  $5 = $30;
  $31 = $5;
  STACKTOP = sp;return ($31|0);
 } else {
  $5 = 0;
  $31 = $5;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _vmErrorMessage($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 0:  {
  $1 = 0;
  break;
 }
 case 1:  {
  $1 = 19763;
  break;
 }
 case 5:  {
  $1 = 19777;
  break;
 }
 case 4:  {
  $1 = 19799;
  break;
 }
 case 2:  {
  $1 = 19819;
  break;
 }
 case 3:  {
  $1 = 19834;
  break;
 }
 case 6:  {
  $1 = 19851;
  break;
 }
 default: {
  $1 = 19883;
 }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _mapDbgFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 L1: do {
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $5 = $16;
   $17 = $3;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 12|0);
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $6 = $22;
   $7 = 0;
   while(1) {
    $23 = $7;
    $24 = $6;
    $25 = ($23>>>0)<($24>>>0);
    if (!($25)) {
     break L1;
    }
    $26 = $4;
    $27 = $5;
    $28 = ((($27)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($26|0)==($29|0);
    if ($30) {
     label = 5;
     break;
    }
    $32 = $4;
    $33 = $5;
    $34 = ((($33)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($32>>>0)>=($35>>>0);
    if ($36) {
     $37 = $4;
     $38 = $5;
     $39 = ((($38)) + 20|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($37>>>0)<($40>>>0);
     if ($41) {
      label = 8;
      break;
     }
    }
    $43 = $5;
    $44 = ((($43)) + 64|0);
    $5 = $44;
    $45 = $7;
    $46 = (($45) + 1)|0;
    $7 = $46;
   }
   if ((label|0) == 5) {
    $31 = $5;
    $2 = $31;
    $47 = $2;
    STACKTOP = sp;return ($47|0);
   }
   else if ((label|0) == 8) {
    $42 = $5;
    $2 = $42;
    $47 = $2;
    STACKTOP = sp;return ($47|0);
   }
  }
 } while(0);
 $2 = 0;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _getDbgStatement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 L1: do {
  if ($12) {
   $13 = $4;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $7 = $17;
   $8 = 0;
   while(1) {
    $18 = $8;
    $19 = $4;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 28|0);
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($18>>>0)<($24>>>0);
    if (!($25)) {
     break L1;
    }
    $26 = $7;
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = $5;
     $31 = $7;
     $32 = ((($31)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (_strcmp($30,$33)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = $6;
      $37 = $7;
      $38 = ((($37)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($36|0)==($39|0);
      if ($40) {
       break;
      }
     }
    }
    $42 = $7;
    $43 = ((($42)) + 64|0);
    $7 = $43;
    $44 = $8;
    $45 = (($44) + 1)|0;
    $8 = $45;
   }
   $41 = $7;
   $3 = $41;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
  }
 } while(0);
 $3 = 0;
 $46 = $3;
 STACKTOP = sp;return ($46|0);
}
function _mapDbgStatement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 L1: do {
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $5 = $16;
   $17 = $3;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 28|0);
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $6 = $22;
   $7 = 0;
   while(1) {
    $23 = $7;
    $24 = $6;
    $25 = ($23>>>0)<($24>>>0);
    if (!($25)) {
     break L1;
    }
    $26 = $4;
    $27 = $5;
    $28 = ((($27)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($26>>>0)>=($29>>>0);
    if ($30) {
     $31 = $4;
     $32 = $5;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($31>>>0)<($34>>>0);
     if ($35) {
      break;
     }
    }
    $37 = $5;
    $38 = ((($37)) + 64|0);
    $5 = $38;
    $39 = $7;
    $40 = (($39) + 1)|0;
    $7 = $40;
   }
   $36 = $5;
   $2 = $36;
   $41 = $2;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $2 = 0;
 $41 = $2;
 STACKTOP = sp;return ($41|0);
}
function _addDbgStatement($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $11 = $8;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $8;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(42);
  if ($15) {
   $4 = 0;
   $90 = $4;
   STACKTOP = sp;return ($90|0);
  }
  $16 = $8;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(45);
  if ($18) {
   $4 = 0;
   $90 = $4;
   STACKTOP = sp;return ($90|0);
  }
 }
 $19 = $5;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $6;
  $24 = $7;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   $10 = 0;
   while(1) {
    $26 = $10;
    $27 = $5;
    $28 = ((($27)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 28|0);
    $31 = ((($30)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($26>>>0)<($32>>>0);
    if (!($33)) {
     break;
    }
    $34 = $5;
    $35 = ((($34)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = $10;
    $39 = (_getBuff_284($37,$38)|0);
    $9 = $39;
    $40 = $6;
    $41 = $9;
    $42 = ((($41)) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40>>>0)<=($43>>>0);
    if ($44) {
     break;
    }
    $45 = $10;
    $46 = (($45) + 1)|0;
    $10 = $46;
   }
   $47 = $9;
   $48 = ($47|0)==(0|0);
   if ($48) {
    label = 14;
   } else {
    $49 = $6;
    $50 = $9;
    $51 = ((($50)) + 16|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($49|0)!=($52|0);
    if ($53) {
     label = 14;
    }
   }
   if ((label|0) == 14) {
    $54 = $5;
    $55 = ((($54)) + 20|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 28|0);
    $58 = $10;
    $59 = (_insBuff($57,$58,0)|0);
    $9 = $59;
   }
   $60 = $9;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $9;
    $63 = $5;
    $64 = ((($63)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 28|0);
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    _memset(($62|0),0,($68|0))|0;
    $69 = $8;
    $70 = ($69|0)!=(0|0);
    if ($70) {
     $71 = $8;
     $72 = $9;
     HEAP32[$72>>2] = $71;
     $73 = $8;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $9;
     $77 = ((($76)) + 8|0);
     HEAP32[$77>>2] = $75;
     $78 = $8;
     $79 = ((($78)) + 16|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $9;
     $82 = ((($81)) + 12|0);
     HEAP32[$82>>2] = $80;
    }
    $83 = $6;
    $84 = $9;
    $85 = ((($84)) + 16|0);
    HEAP32[$85>>2] = $83;
    $86 = $7;
    $87 = $9;
    $88 = ((($87)) + 20|0);
    HEAP32[$88>>2] = $86;
   }
  }
 }
 $89 = $9;
 $4 = $89;
 $90 = $4;
 STACKTOP = sp;return ($90|0);
}
function _backTok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 }
 $6 = $2;
 $7 = ((($6)) + 4148|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $2;
 $14 = ((($13)) + 4148|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $12;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function _peekTok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4148|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $3;
  $11 = (_newNode($10,0)|0);
  $12 = $3;
  $13 = ((($12)) + 4148|0);
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $11;
  $15 = $3;
  $16 = $3;
  $17 = ((($16)) + 4148|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_readTok($15,$19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = $3;
   $23 = $3;
   $24 = ((($23)) + 4148|0);
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   _recycle($22,$26);
   $27 = $3;
   $28 = ((($27)) + 4148|0);
   $29 = ((($28)) + 4|0);
   HEAP32[$29>>2] = 0;
   $2 = 0;
   $43 = $2;
   STACKTOP = sp;return ($43|0);
  }
 }
 $30 = $4;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = $4;
  $33 = $3;
  $34 = ((($33)) + 4148|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($32|0)==($37|0);
  if (!($38)) {
   $2 = 0;
   $43 = $2;
   STACKTOP = sp;return ($43|0);
  }
 }
 $39 = $3;
 $40 = ((($39)) + 4148|0);
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $2 = $42;
 $43 = $2;
 STACKTOP = sp;return ($43|0);
}
function _readTok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$not = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0.0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0.0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0, $913 = 0.0;
 var $914 = 0.0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0, $922 = 0.0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0;
 var $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer77 = sp + 192|0;
 $vararg_buffer74 = sp + 184|0;
 $vararg_buffer72 = sp + 176|0;
 $vararg_buffer70 = sp + 168|0;
 $vararg_buffer68 = sp + 160|0;
 $vararg_buffer66 = sp + 152|0;
 $vararg_buffer63 = sp + 144|0;
 $vararg_buffer61 = sp + 136|0;
 $vararg_buffer58 = sp + 128|0;
 $vararg_buffer55 = sp + 120|0;
 $vararg_buffer52 = sp + 112|0;
 $vararg_buffer50 = sp + 104|0;
 $vararg_buffer47 = sp + 96|0;
 $vararg_buffer44 = sp + 88|0;
 $vararg_buffer41 = sp + 80|0;
 $vararg_buffer39 = sp + 72|0;
 $vararg_buffer37 = sp + 64|0;
 $vararg_buffer35 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $26 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 136|0);
 $39 = HEAP32[$38>>2]|0;
 $5 = $39;
 $6 = 0;
 $40 = $3;
 $41 = (_readChr($40)|0);
 $7 = $41;
 while(1) {
  $42 = $7;
  $43 = ($42|0)!=(-1);
  if (!($43)) {
   break;
  }
  $44 = $7;
  $45 = ($44|0)==(47);
  do {
   if ($45) {
    $46 = $3;
    $47 = ((($46)) + 4136|0);
    $48 = HEAP32[$47>>2]|0;
    $8 = $48;
    $49 = $3;
    $50 = (_peekChr($49)|0);
    $9 = $50;
    $51 = $3;
    $52 = (_skipChr($51,47)|0);
    $53 = ($52|0)!=(0);
    if ($53) {
     $54 = $3;
     $55 = (_readChr($54)|0);
     $7 = $55;
     $56 = $3;
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($57)) + 132|0);
     $59 = HEAP32[$58>>2]|0;
     $6 = $59;
     while(1) {
      $60 = $6;
      $61 = $5;
      $62 = ($60>>>0)<($61>>>0);
      $63 = $7;
      $64 = ($63|0)!=(-1);
      $65 = $62 ? $64 : 0;
      $$not = $65 ^ 1;
      $66 = $7;
      $67 = ($66|0)==(10);
      $or$cond34 = $$not | $67;
      $68 = $7;
      if ($or$cond34) {
       break;
      }
      $69 = $68&255;
      $70 = $6;
      $71 = ((($70)) + 1|0);
      $6 = $71;
      HEAP8[$70>>0] = $69;
      $72 = $3;
      $73 = (_readChr($72)|0);
      $7 = $73;
     }
     $74 = ($68|0)==(-1);
     $75 = $3;
     if ($74) {
      $76 = HEAP32[$75>>2]|0;
      $77 = $3;
      $78 = ((($77)) + 4132|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $8;
      _printLog($76,9,$79,$80,0,19897,$vararg_buffer);
      break;
     }
     $81 = ((($75)) + 4136|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $8;
     $84 = (($83) + 1)|0;
     $85 = ($82|0)!=($84|0);
     if (!($85)) {
      break;
     }
     $86 = $3;
     $87 = HEAP32[$86>>2]|0;
     $88 = $3;
     $89 = ((($88)) + 4132|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $8;
     $92 = $6;
     HEAP32[$vararg_buffer35>>2] = $92;
     _printLog($87,9,$90,$91,0,19937,$vararg_buffer35);
     break;
    }
    $93 = $9;
    $94 = ($93|0)==(42);
    $95 = $9;
    $96 = ($95|0)==(43);
    $or$cond = $94 | $96;
    if ($or$cond) {
     $10 = 0;
     while(1) {
      $97 = $7;
      $98 = ($97|0)!=(-1);
      if (!($98)) {
       break;
      }
      $99 = $7;
      $11 = $99;
      $100 = $3;
      $101 = (_readChr($100)|0);
      $7 = $101;
      $102 = $11;
      $103 = ($102|0)==(47);
      if ($103) {
       $104 = $7;
       $105 = $9;
       $106 = ($104|0)==($105|0);
       if ($106) {
        $107 = $10;
        $108 = (($107) + 1)|0;
        $10 = $108;
        $109 = $10;
        $110 = ($109|0)>(1);
        $111 = $9;
        $112 = ($111|0)==(42);
        $or$cond3 = $110 & $112;
        if ($or$cond3) {
         $113 = $3;
         $114 = HEAP32[$113>>2]|0;
         $115 = $3;
         $116 = ((($115)) + 4132|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = $3;
         $119 = ((($118)) + 4136|0);
         $120 = HEAP32[$119>>2]|0;
         _printLog($114,9,$117,$120,0,19962,$vararg_buffer37);
         $10 = 1;
        }
        $7 = 0;
       }
      }
      $121 = $11;
      $122 = $9;
      $123 = ($121|0)==($122|0);
      $124 = $7;
      $125 = ($124|0)==(47);
      $or$cond5 = $123 & $125;
      if ($or$cond5) {
       $126 = $10;
       $127 = (($126) - 1)|0;
       $10 = $127;
       $128 = $10;
       $129 = ($128|0)==(0);
       if ($129) {
        break;
       }
      }
     }
     $130 = $7;
     $131 = ($130|0)==(-1);
     if ($131) {
      $132 = $3;
      $133 = HEAP32[$132>>2]|0;
      $134 = $3;
      $135 = ((($134)) + 4132|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $8;
      _printLog($133,-1,$136,$137,0,19986,$vararg_buffer39);
     }
     $138 = $3;
     $139 = (_readChr($138)|0);
     $7 = $139;
    }
   }
  } while(0);
  $140 = $7;
  $141 = $140 & 255;
  $142 = (5136 + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)==(2048);
  L36: do {
   if ($144) {
    $145 = $3;
    $146 = HEAP32[$145>>2]|0;
    $147 = $3;
    $148 = ((($147)) + 4132|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $3;
    $151 = ((($150)) + 4136|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $7;
    HEAP32[$vararg_buffer41>>2] = $153;
    _printLog($146,1,$149,$152,0,20013,$vararg_buffer41);
    while(1) {
     $154 = $7;
     $155 = ($154|0)==(0);
     if (!($155)) {
      break L36;
     }
     $156 = $3;
     $157 = (_readChr($156)|0);
     $7 = $157;
    }
   }
  } while(0);
  $158 = $7;
  $159 = $158 & 255;
  $160 = (5136 + ($159<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161 & 256;
  $163 = ($162|0)!=(0);
  if (!($163)) {
   break;
  }
  $164 = $3;
  $165 = (_readChr($164)|0);
  $7 = $165;
 }
 $166 = $4;
 $167 = ($166|0)==(0|0);
 if ($167) {
  $2 = 0;
  $1114 = $2;
  STACKTOP = sp;return ($1114|0);
 }
 $168 = $3;
 $169 = HEAP32[$168>>2]|0;
 $170 = ((($169)) + 132|0);
 $171 = HEAP32[$170>>2]|0;
 $6 = $171;
 $12 = $171;
 $172 = $4;
 dest=$172; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $173 = $3;
 $174 = ((($173)) + 4132|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = $4;
 $177 = ((($176)) + 12|0);
 HEAP32[$177>>2] = $175;
 $178 = $3;
 $179 = ((($178)) + 4136|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = $4;
 $182 = ((($181)) + 16|0);
 HEAP32[$182>>2] = $180;
 $183 = $7;
 $184 = ($183|0)!=(-1);
 L48: do {
  if ($184) {
   $185 = $7;
   do {
    switch ($185|0) {
    case 46:  {
     $208 = $3;
     $209 = (_peekChr($208)|0);
     $210 = $209 & 255;
     $211 = (5136 + ($210<<2)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(4096);
     if (!($213)) {
      $214 = $4;
      HEAP32[$214>>2] = 5;
      break L48;
     }
     break;
    }
    case 59:  {
     $215 = $4;
     HEAP32[$215>>2] = 52;
     break L48;
     break;
    }
    case 44:  {
     $216 = $4;
     HEAP32[$216>>2] = 41;
     break L48;
     break;
    }
    case 123:  {
     $217 = $4;
     HEAP32[$217>>2] = 42;
     break L48;
     break;
    }
    case 91:  {
     $218 = $4;
     HEAP32[$218>>2] = 55;
     break L48;
     break;
    }
    case 40:  {
     $219 = $4;
     HEAP32[$219>>2] = 53;
     break L48;
     break;
    }
    case 125:  {
     $220 = $4;
     HEAP32[$220>>2] = 57;
     break L48;
     break;
    }
    case 93:  {
     $221 = $4;
     HEAP32[$221>>2] = 56;
     break L48;
     break;
    }
    case 41:  {
     $222 = $4;
     HEAP32[$222>>2] = 54;
     break L48;
     break;
    }
    case 63:  {
     $223 = $4;
     HEAP32[$223>>2] = 58;
     break L48;
     break;
    }
    case 58:  {
     $224 = $4;
     HEAP32[$224>>2] = 59;
     break L48;
     break;
    }
    case 126:  {
     $225 = $4;
     HEAP32[$225>>2] = 8;
     break L48;
     break;
    }
    case 61:  {
     $226 = $3;
     $227 = (_skipChr($226,61)|0);
     $228 = ($227|0)!=(0);
     $229 = $4;
     if ($228) {
      HEAP32[$229>>2] = 21;
      break L48;
     } else {
      HEAP32[$229>>2] = 30;
      break L48;
     }
     break;
    }
    case 33:  {
     $230 = $3;
     $231 = (_skipChr($230,61)|0);
     $232 = ($231|0)!=(0);
     $233 = $4;
     if ($232) {
      HEAP32[$233>>2] = 22;
      break L48;
     } else {
      HEAP32[$233>>2] = 9;
      break L48;
     }
     break;
    }
    case 62:  {
     $234 = $3;
     $235 = (_peekChr($234)|0);
     $7 = $235;
     $236 = $7;
     $237 = ($236|0)==(62);
     if ($237) {
      $238 = $3;
      (_readChr($238)|0);
      $239 = $3;
      $240 = (_skipChr($239,61)|0);
      $241 = ($240|0)!=(0);
      $242 = $4;
      if ($241) {
       HEAP32[$242>>2] = 37;
       break L48;
      } else {
       HEAP32[$242>>2] = 15;
       break L48;
      }
     } else {
      $243 = $7;
      $244 = ($243|0)==(61);
      if ($244) {
       $245 = $3;
       (_readChr($245)|0);
       $246 = $4;
       HEAP32[$246>>2] = 18;
       break L48;
      } else {
       $247 = $4;
       HEAP32[$247>>2] = 17;
       break L48;
      }
     }
     break;
    }
    case 60:  {
     $248 = $3;
     $249 = (_peekChr($248)|0);
     $7 = $249;
     $250 = $7;
     $251 = ($250|0)==(60);
     if ($251) {
      $252 = $3;
      (_readChr($252)|0);
      $253 = $3;
      $254 = (_skipChr($253,61)|0);
      $255 = ($254|0)!=(0);
      $256 = $4;
      if ($255) {
       HEAP32[$256>>2] = 36;
       break L48;
      } else {
       HEAP32[$256>>2] = 16;
       break L48;
      }
     } else {
      $257 = $7;
      $258 = ($257|0)==(61);
      if ($258) {
       $259 = $3;
       (_readChr($259)|0);
       $260 = $4;
       HEAP32[$260>>2] = 20;
       break L48;
      } else {
       $261 = $4;
       HEAP32[$261>>2] = 19;
       break L48;
      }
     }
     break;
    }
    case 38:  {
     $262 = $3;
     $263 = (_peekChr($262)|0);
     $7 = $263;
     $264 = $7;
     $265 = ($264|0)==(61);
     if ($265) {
      $266 = $3;
      (_readChr($266)|0);
      $267 = $4;
      HEAP32[$267>>2] = 38;
      break L48;
     }
     $268 = $7;
     $269 = ($268|0)==(38);
     if ($269) {
      $270 = $3;
      (_readChr($270)|0);
      $271 = $4;
      HEAP32[$271>>2] = 26;
      break L48;
     } else {
      $272 = $4;
      HEAP32[$272>>2] = 23;
      break L48;
     }
     break;
    }
    case 124:  {
     $273 = $3;
     $274 = (_peekChr($273)|0);
     $7 = $274;
     $275 = $7;
     $276 = ($275|0)==(61);
     if ($276) {
      $277 = $3;
      (_readChr($277)|0);
      $278 = $4;
      HEAP32[$278>>2] = 40;
      break L48;
     }
     $279 = $7;
     $280 = ($279|0)==(124);
     if ($280) {
      $281 = $3;
      (_readChr($281)|0);
      $282 = $4;
      HEAP32[$282>>2] = 27;
      break L48;
     } else {
      $283 = $4;
      HEAP32[$283>>2] = 25;
      break L48;
     }
     break;
    }
    case 94:  {
     $284 = $3;
     $285 = (_skipChr($284,61)|0);
     $286 = ($285|0)!=(0);
     $287 = $4;
     if ($286) {
      HEAP32[$287>>2] = 39;
      break L48;
     } else {
      HEAP32[$287>>2] = 24;
      break L48;
     }
     break;
    }
    case 43:  {
     $288 = $3;
     $289 = (_skipChr($288,61)|0);
     $290 = ($289|0)!=(0);
     $291 = $4;
     if ($290) {
      HEAP32[$291>>2] = 34;
      break L48;
     } else {
      HEAP32[$291>>2] = 13;
      break L48;
     }
     break;
    }
    case 45:  {
     $292 = $3;
     $293 = (_skipChr($292,61)|0);
     $294 = ($293|0)!=(0);
     $295 = $4;
     if ($294) {
      HEAP32[$295>>2] = 35;
      break L48;
     } else {
      HEAP32[$295>>2] = 14;
      break L48;
     }
     break;
    }
    case 42:  {
     $296 = $3;
     $297 = (_skipChr($296,61)|0);
     $298 = ($297|0)!=(0);
     $299 = $4;
     if ($298) {
      HEAP32[$299>>2] = 31;
      break L48;
     } else {
      HEAP32[$299>>2] = 10;
      break L48;
     }
     break;
    }
    case 47:  {
     $300 = $3;
     $301 = (_skipChr($300,61)|0);
     $302 = ($301|0)!=(0);
     $303 = $4;
     if ($302) {
      HEAP32[$303>>2] = 32;
      break L48;
     } else {
      HEAP32[$303>>2] = 11;
      break L48;
     }
     break;
    }
    case 37:  {
     $304 = $3;
     $305 = (_skipChr($304,61)|0);
     $306 = ($305|0)!=(0);
     $307 = $4;
     if ($306) {
      HEAP32[$307>>2] = 33;
      break L48;
     } else {
      HEAP32[$307>>2] = 12;
      break L48;
     }
     break;
    }
    case 34: case 39:  {
     $13 = 0;
     $308 = $7;
     $14 = $308;
     L156: while(1) {
      $309 = $6;
      $310 = $5;
      $311 = ($309>>>0)<($310>>>0);
      if (!($311)) {
       break;
      }
      $312 = $3;
      $313 = (_readChr($312)|0);
      $7 = $313;
      $314 = ($313|0)!=(-1);
      if (!($314)) {
       break;
      }
      $315 = $7;
      $316 = $14;
      $317 = ($315|0)==($316|0);
      if ($317) {
       break;
      }
      $318 = $7;
      $319 = ($318|0)!=(10);
      $320 = $13;
      $321 = ($320|0)!=(0);
      $or$cond7 = $319 | $321;
      if (!($or$cond7)) {
       break;
      }
      $322 = $7;
      $323 = ($322|0)==(92);
      L162: do {
       if ($323) {
        $324 = $3;
        $325 = (_readChr($324)|0);
        $7 = $325;
        do {
         switch ($325|0) {
         case 39:  {
          $7 = 39;
          break L162;
          break;
         }
         case 34:  {
          $7 = 34;
          break L162;
          break;
         }
         case 63:  {
          $7 = 63;
          break L162;
          break;
         }
         case 92:  {
          $7 = 92;
          break L162;
          break;
         }
         case 97:  {
          $7 = 7;
          break L162;
          break;
         }
         case 98:  {
          $7 = 8;
          break L162;
          break;
         }
         case 102:  {
          $7 = 12;
          break L162;
          break;
         }
         case 110:  {
          $7 = 10;
          break L162;
          break;
         }
         case 114:  {
          $7 = 13;
          break L162;
          break;
         }
         case 116:  {
          $7 = 9;
          break L162;
          break;
         }
         case 118:  {
          $7 = 11;
          break L162;
          break;
         }
         case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
          $335 = $7;
          $336 = (($335) - 48)|0;
          $15 = $336;
          $337 = $3;
          $338 = (_peekChr($337)|0);
          $7 = $338;
          $339 = ($338|0)>=(48);
          $340 = $7;
          $341 = ($340|0)<=(55);
          $or$cond9 = $339 & $341;
          if ($or$cond9) {
           $342 = $15;
           $343 = $342 << 3;
           $344 = $7;
           $345 = (($344) - 48)|0;
           $346 = $343 | $345;
           $15 = $346;
           $347 = $3;
           (_readChr($347)|0);
           $348 = $3;
           $349 = (_peekChr($348)|0);
           $7 = $349;
           $350 = ($349|0)>=(48);
           $351 = $7;
           $352 = ($351|0)<=(55);
           $or$cond11 = $350 & $352;
           if ($or$cond11) {
            $353 = $15;
            $354 = $353 << 3;
            $355 = $7;
            $356 = (($355) - 48)|0;
            $357 = $354 | $356;
            $15 = $357;
            $358 = $3;
            (_readChr($358)|0);
           }
          }
          $359 = $15;
          $360 = $359 & -256;
          $361 = ($360|0)!=(0);
          if ($361) {
           $362 = $3;
           $363 = HEAP32[$362>>2]|0;
           $364 = $4;
           $365 = ((($364)) + 12|0);
           $366 = HEAP32[$365>>2]|0;
           $367 = $4;
           $368 = ((($367)) + 16|0);
           $369 = HEAP32[$368>>2]|0;
           _printLog($363,2,$366,$369,0,20067,$vararg_buffer50);
          }
          $370 = $15;
          $371 = $370 & 255;
          $7 = $371;
          break L162;
          break;
         }
         case 120:  {
          $372 = $3;
          $373 = (_readChr($372)|0);
          $16 = $373;
          $374 = $3;
          $375 = (_readChr($374)|0);
          $17 = $375;
          $376 = $16;
          $377 = ($376|0)>=(48);
          $378 = $16;
          $379 = ($378|0)<=(57);
          $or$cond13 = $377 & $379;
          $380 = $16;
          do {
           if ($or$cond13) {
            $381 = (($380) - 48)|0;
            $16 = $381;
           } else {
            $382 = ($380|0)>=(97);
            $383 = $16;
            $384 = ($383|0)<=(102);
            $or$cond15 = $382 & $384;
            $385 = $16;
            if ($or$cond15) {
             $386 = (($385) - 87)|0;
             $16 = $386;
             break;
            }
            $387 = ($385|0)>=(65);
            $388 = $16;
            $389 = ($388|0)<=(70);
            $or$cond17 = $387 & $389;
            if ($or$cond17) {
             $390 = $16;
             $391 = (($390) - 55)|0;
             $16 = $391;
             break;
            } else {
             $392 = $3;
             $393 = HEAP32[$392>>2]|0;
             $394 = $4;
             $395 = ((($394)) + 12|0);
             $396 = HEAP32[$395>>2]|0;
             $397 = $4;
             $398 = ((($397)) + 16|0);
             $399 = HEAP32[$398>>2]|0;
             $400 = $16;
             HEAP32[$vararg_buffer52>>2] = $400;
             _printLog($393,-1,$396,$399,0,20098,$vararg_buffer52);
             break L162;
            }
           }
          } while(0);
          $401 = $17;
          $402 = ($401|0)>=(48);
          $403 = $17;
          $404 = ($403|0)<=(57);
          $or$cond19 = $402 & $404;
          $405 = $17;
          do {
           if ($or$cond19) {
            $406 = (($405) - 48)|0;
            $17 = $406;
           } else {
            $407 = ($405|0)>=(97);
            $408 = $17;
            $409 = ($408|0)<=(102);
            $or$cond21 = $407 & $409;
            $410 = $17;
            if ($or$cond21) {
             $411 = (($410) - 87)|0;
             $17 = $411;
             break;
            }
            $412 = ($410|0)>=(65);
            $413 = $17;
            $414 = ($413|0)<=(70);
            $or$cond23 = $412 & $414;
            if ($or$cond23) {
             $415 = $17;
             $416 = (($415) - 55)|0;
             $17 = $416;
             break;
            } else {
             $417 = $3;
             $418 = HEAP32[$417>>2]|0;
             $419 = $4;
             $420 = ((($419)) + 12|0);
             $421 = HEAP32[$420>>2]|0;
             $422 = $4;
             $423 = ((($422)) + 16|0);
             $424 = HEAP32[$423>>2]|0;
             $425 = $17;
             HEAP32[$vararg_buffer55>>2] = $425;
             _printLog($418,-1,$421,$424,0,20098,$vararg_buffer55);
             break L162;
            }
           }
          } while(0);
          $426 = $16;
          $427 = $426 << 4;
          $428 = $17;
          $429 = $427 | $428;
          $7 = $429;
          break L162;
          break;
         }
         case 10:  {
          $430 = $14;
          $431 = ($430|0)==(34);
          if (!($431)) {
           break L162;
          }
          $432 = $12;
          $433 = $6;
          $434 = ($432|0)==($433|0);
          if ($434) {
           $13 = 1;
          }
          continue L156;
          break;
         }
         default: {
          $326 = $3;
          $327 = HEAP32[$326>>2]|0;
          $328 = $4;
          $329 = ((($328)) + 12|0);
          $330 = HEAP32[$329>>2]|0;
          $331 = $4;
          $332 = ((($331)) + 16|0);
          $333 = HEAP32[$332>>2]|0;
          $334 = $7;
          HEAP32[$vararg_buffer47>>2] = $334;
          _printLog($327,-1,$330,$333,0,20037,$vararg_buffer47);
          $7 = 0;
          break L162;
         }
         }
        } while(0);
       }
      } while(0);
      $435 = $7;
      $436 = $435&255;
      $437 = $6;
      $438 = ((($437)) + 1|0);
      $6 = $438;
      HEAP8[$437>>0] = $436;
     }
     $439 = $6;
     $440 = ((($439)) + 1|0);
     $6 = $440;
     HEAP8[$439>>0] = 0;
     $441 = $7;
     $442 = $14;
     $443 = ($441|0)!=($442|0);
     if ($443) {
      $444 = $3;
      $445 = HEAP32[$444>>2]|0;
      $446 = $4;
      $447 = ((($446)) + 12|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = $4;
      $450 = ((($449)) + 16|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $14;
      HEAP32[$vararg_buffer58>>2] = $452;
      _printLog($445,-1,$448,$451,0,20131,$vararg_buffer58);
      $453 = $4;
      HEAP32[$453>>2] = 0;
      $2 = 0;
      $1114 = $2;
      STACKTOP = sp;return ($1114|0);
     }
     $454 = $14;
     $455 = ($454|0)==(34);
     if ($455) {
      $456 = $4;
      HEAP32[$456>>2] = 1;
      $457 = $3;
      $458 = ((($457)) + 5272|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = $4;
      $461 = ((($460)) + 4|0);
      HEAP32[$461>>2] = $459;
      $462 = $12;
      $463 = $6;
      $464 = $12;
      $465 = $463;
      $466 = $464;
      $467 = (($465) - ($466))|0;
      $468 = (_rehash($462,$467)|0);
      $469 = (($468>>>0) % 512)&-1;
      $470 = $4;
      $471 = ((($470)) + 24|0);
      $472 = ((($471)) + 4|0);
      HEAP32[$472>>2] = $469;
      $473 = $3;
      $474 = $12;
      $475 = $6;
      $476 = $12;
      $477 = $475;
      $478 = $476;
      $479 = (($477) - ($478))|0;
      $480 = $4;
      $481 = ((($480)) + 24|0);
      $482 = ((($481)) + 4|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = (_ccUniqueStr($473,$474,$479,$483)|0);
      $485 = $4;
      $486 = ((($485)) + 24|0);
      HEAP32[$486>>2] = $484;
      break L48;
     }
     $18 = 0;
     $487 = $6;
     $488 = $12;
     $489 = ($487|0)==($488|0);
     if ($489) {
      $490 = $3;
      $491 = HEAP32[$490>>2]|0;
      $492 = $4;
      $493 = ((($492)) + 12|0);
      $494 = HEAP32[$493>>2]|0;
      $495 = $4;
      $496 = ((($495)) + 16|0);
      $497 = HEAP32[$496>>2]|0;
      _printLog($491,-1,$494,$497,0,20153,$vararg_buffer61);
      $498 = $4;
      HEAP32[$498>>2] = 0;
      $2 = 0;
      $1114 = $2;
      STACKTOP = sp;return ($1114|0);
     }
     $499 = $6;
     $500 = $12;
     $501 = ((($500)) + 4|0);
     $502 = ((($501)) + 1|0);
     $503 = ($499>>>0)>($502>>>0);
     if ($503) {
      $504 = $3;
      $505 = HEAP32[$504>>2]|0;
      $506 = $4;
      $507 = ((($506)) + 12|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = $4;
      $510 = ((($509)) + 16|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = $6;
      HEAP32[$vararg_buffer63>>2] = $512;
      _printLog($505,2,$508,$511,0,20178,$vararg_buffer63);
     } else {
      $513 = $6;
      $514 = $12;
      $515 = $3;
      $516 = ((($515)) + 5208|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ((($517)) + 16|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = (($514) + ($519)|0);
      $521 = ((($520)) + 1|0);
      $522 = ($513>>>0)>($521>>>0);
      if ($522) {
       $523 = $3;
       $524 = HEAP32[$523>>2]|0;
       $525 = $4;
       $526 = ((($525)) + 12|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = $4;
       $529 = ((($528)) + 16|0);
       $530 = HEAP32[$529>>2]|0;
       _printLog($524,3,$527,$530,0,20207,$vararg_buffer66);
      }
     }
     $531 = $12;
     $6 = $531;
     while(1) {
      $532 = $6;
      $533 = HEAP8[$532>>0]|0;
      $534 = ($533<<24>>24)!=(0);
      if (!($534)) {
       break;
      }
      $535 = $18;
      $536 = $535 << 8;
      $537 = $6;
      $538 = HEAP8[$537>>0]|0;
      $539 = $538 << 24 >> 24;
      $540 = $536 | $539;
      $18 = $540;
      $541 = $6;
      $542 = ((($541)) + 1|0);
      $6 = $542;
     }
     $543 = $4;
     HEAP32[$543>>2] = 1;
     $544 = $3;
     $545 = ((($544)) + 5208|0);
     $546 = HEAP32[$545>>2]|0;
     $547 = $4;
     $548 = ((($547)) + 4|0);
     HEAP32[$548>>2] = $546;
     $549 = $18;
     $550 = ($549|0)<(0);
     $551 = $550 << 31 >> 31;
     $552 = $4;
     $553 = ((($552)) + 24|0);
     $554 = $553;
     $555 = $554;
     HEAP32[$555>>2] = $549;
     $556 = (($554) + 4)|0;
     $557 = $556;
     HEAP32[$557>>2] = $551;
     break L48;
     break;
    }
    default: {
     $186 = $7;
     $187 = $186 & 255;
     $188 = (5136 + ($187<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $189 & 4096;
     $191 = ($190|0)!=(0);
     if (!($191)) {
      $192 = $7;
      $193 = $192 & 255;
      $194 = (5136 + ($193<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $195 & 29184;
      $197 = ($196|0)!=(0);
      if (!($197)) {
       $198 = $3;
       $199 = HEAP32[$198>>2]|0;
       $200 = $4;
       $201 = ((($200)) + 12|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = $4;
       $204 = ((($203)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $7;
       HEAP32[$vararg_buffer44>>2] = $206;
       _printLog($199,-1,$202,$205,0,20013,$vararg_buffer44);
       $207 = $4;
       HEAP32[$207>>2] = 0;
       break L48;
      }
      $19 = 0;
      $20 = 13;
      $21 = -1;
      while(1) {
       $558 = $6;
       $559 = $5;
       $560 = ($558>>>0)<($559>>>0);
       $561 = $7;
       $562 = ($561|0)!=(-1);
       $563 = $560 ? $562 : 0;
       if (!($563)) {
        break;
       }
       $564 = $7;
       $565 = $564 & 255;
       $566 = (5136 + ($565<<2)|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = $567 & 29184;
       $569 = ($568|0)!=(0);
       if (!($569)) {
        break;
       }
       $570 = $7;
       $571 = $570&255;
       $572 = $6;
       $573 = ((($572)) + 1|0);
       $6 = $573;
       HEAP8[$572>>0] = $571;
       $574 = $3;
       $575 = (_readChr($574)|0);
       $7 = $575;
      }
      $576 = $3;
      $577 = $7;
      (_backChr($576,$577)|0);
      $578 = $6;
      $579 = ((($578)) + 1|0);
      $6 = $579;
      HEAP8[$578>>0] = 0;
      while(1) {
       $580 = $21;
       $581 = ($580|0)!=(0);
       if (!($581)) {
        break;
       }
       $582 = $19;
       $583 = $20;
       $584 = ($582|0)<($583|0);
       if (!($584)) {
        break;
       }
       $585 = $19;
       $586 = $20;
       $587 = $19;
       $588 = (($586) - ($587))|0;
       $589 = (($588|0) / 2)&-1;
       $590 = (($585) + ($589))|0;
       $22 = $590;
       $591 = $22;
       $592 = (6160 + ($591<<3)|0);
       $593 = HEAP32[$592>>2]|0;
       $594 = $12;
       $595 = (_strcmp($593,$594)|0);
       $21 = $595;
       $596 = $21;
       $597 = ($596|0)<(0);
       $598 = $22;
       if ($597) {
        $599 = (($598) + 1)|0;
        $19 = $599;
       } else {
        $20 = $598;
       }
      }
      $600 = $21;
      $601 = ($600|0)==(0);
      if (!($601)) {
       $648 = $4;
       HEAP32[$648>>2] = 2;
       $649 = $4;
       $650 = ((($649)) + 24|0);
       $651 = ((($650)) + 8|0);
       HEAP32[$651>>2] = 0;
       $652 = $4;
       $653 = ((($652)) + 4|0);
       HEAP32[$653>>2] = 0;
       $654 = $12;
       $655 = $6;
       $656 = $12;
       $657 = $655;
       $658 = $656;
       $659 = (($657) - ($658))|0;
       $660 = (_rehash($654,$659)|0);
       $661 = (($660>>>0) % 512)&-1;
       $662 = $4;
       $663 = ((($662)) + 24|0);
       $664 = ((($663)) + 4|0);
       HEAP32[$664>>2] = $661;
       $665 = $3;
       $666 = $12;
       $667 = $6;
       $668 = $12;
       $669 = $667;
       $670 = $668;
       $671 = (($669) - ($670))|0;
       $672 = $4;
       $673 = ((($672)) + 24|0);
       $674 = ((($673)) + 4|0);
       $675 = HEAP32[$674>>2]|0;
       $676 = (_ccUniqueStr($665,$666,$671,$675)|0);
       $677 = $4;
       $678 = ((($677)) + 24|0);
       HEAP32[$678>>2] = $676;
       break L48;
      }
      $602 = $20;
      $603 = (6160 + ($602<<3)|0);
      $604 = ((($603)) + 4|0);
      $605 = HEAP32[$604>>2]|0;
      $cond = ($605|0)==(67);
      if ($cond) {
       $611 = $4;
       HEAP32[$611>>2] = 2;
       $612 = $3;
       $613 = ((($612)) + 5300|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $4;
       $616 = ((($615)) + 4|0);
       HEAP32[$616>>2] = $614;
       $617 = $3;
       $618 = ((($617)) + 5300|0);
       $619 = HEAP32[$618>>2]|0;
       $620 = $4;
       $621 = ((($620)) + 24|0);
       $622 = ((($621)) + 8|0);
       HEAP32[$622>>2] = $619;
       $623 = $12;
       $624 = $6;
       $625 = $12;
       $626 = $624;
       $627 = $625;
       $628 = (($626) - ($627))|0;
       $629 = (_rehash($623,$628)|0);
       $630 = (($629>>>0) % 512)&-1;
       $631 = $4;
       $632 = ((($631)) + 24|0);
       $633 = ((($632)) + 4|0);
       HEAP32[$633>>2] = $630;
       $634 = $3;
       $635 = $12;
       $636 = $6;
       $637 = $12;
       $638 = $636;
       $639 = $637;
       $640 = (($638) - ($639))|0;
       $641 = $4;
       $642 = ((($641)) + 24|0);
       $643 = ((($642)) + 4|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = (_ccUniqueStr($634,$635,$640,$644)|0);
       $646 = $4;
       $647 = ((($646)) + 24|0);
       HEAP32[$647>>2] = $645;
       break L48;
      } else {
       $606 = $20;
       $607 = (6160 + ($606<<3)|0);
       $608 = ((($607)) + 4|0);
       $609 = HEAP32[$608>>2]|0;
       $610 = $4;
       HEAP32[$610>>2] = $609;
       break L48;
      }
     }
    }
    }
   } while(0);
   $23 = 0;
   $25 = 10;
   $679 = $26;
   $680 = $679;
   HEAP32[$680>>2] = 0;
   $681 = (($679) + 4)|0;
   $682 = $681;
   HEAP32[$682>>2] = 0;
   $27 = 0.0;
   $28 = 0;
   $683 = $7;
   $684 = ($683|0)==(48);
   L234: do {
    if ($684) {
     $685 = $7;
     $686 = $685&255;
     $687 = $6;
     $688 = ((($687)) + 1|0);
     $6 = $688;
     HEAP8[$687>>0] = $686;
     $689 = $3;
     $690 = (_readChr($689)|0);
     $7 = $690;
     $691 = $7;
     switch ($691|0) {
     case 46:  {
      break L234;
      break;
     }
     case 66: case 98:  {
      $25 = 2;
      $692 = $7;
      $693 = $692&255;
      $694 = $6;
      $695 = ((($694)) + 1|0);
      $6 = $695;
      HEAP8[$694>>0] = $693;
      $696 = $3;
      $697 = (_readChr($696)|0);
      $7 = $697;
      break L234;
      break;
     }
     case 79: case 111:  {
      $25 = 8;
      $698 = $7;
      $699 = $698&255;
      $700 = $6;
      $701 = ((($700)) + 1|0);
      $6 = $701;
      HEAP8[$700>>0] = $699;
      $702 = $3;
      $703 = (_readChr($702)|0);
      $7 = $703;
      break L234;
      break;
     }
     case 88: case 120:  {
      $25 = 16;
      $704 = $7;
      $705 = $704&255;
      $706 = $6;
      $707 = ((($706)) + 1|0);
      $6 = $707;
      HEAP8[$706>>0] = $705;
      $708 = $3;
      $709 = (_readChr($708)|0);
      $7 = $709;
      break L234;
      break;
     }
     default: {
      $25 = 8;
      break L234;
     }
     }
    }
   } while(0);
   while(1) {
    $710 = $7;
    $711 = ($710|0)!=(-1);
    if (!($711)) {
     break;
    }
    $712 = $25;
    $29 = $712;
    $713 = $7;
    $714 = ($713|0)>=(48);
    $715 = $7;
    $716 = ($715|0)<=(57);
    $or$cond26 = $714 & $716;
    $717 = $7;
    do {
     if ($or$cond26) {
      $718 = (($717) - 48)|0;
      $29 = $718;
     } else {
      $719 = ($717|0)>=(97);
      $720 = $7;
      $721 = ($720|0)<=(102);
      $or$cond28 = $719 & $721;
      $722 = $7;
      if ($or$cond28) {
       $723 = (($722) - 97)|0;
       $724 = (($723) + 10)|0;
       $29 = $724;
       break;
      }
      $725 = ($722|0)>=(65);
      $726 = $7;
      $727 = ($726|0)<=(70);
      $or$cond30 = $725 & $727;
      if ($or$cond30) {
       $728 = $7;
       $729 = (($728) - 65)|0;
       $730 = (($729) + 10)|0;
       $29 = $730;
      }
     }
    } while(0);
    $731 = $29;
    $732 = $25;
    $733 = ($731|0)>=($732|0);
    if ($733) {
     break;
    }
    $734 = $25;
    $735 = ($734|0)==(10);
    if ($735) {
     $736 = $26;
     $737 = $736;
     $738 = HEAP32[$737>>2]|0;
     $739 = (($736) + 4)|0;
     $740 = $739;
     $741 = HEAP32[$740>>2]|0;
     $742 = $29;
     $743 = ($742|0)<(0);
     $744 = $743 << 31 >> 31;
     $745 = (_i64Subtract(-1,2147483647,($742|0),($744|0))|0);
     $746 = (getTempRet0() | 0);
     $747 = $25;
     $748 = ($747|0)<(0);
     $749 = $748 << 31 >> 31;
     $750 = (___divdi3(($745|0),($746|0),($747|0),($749|0))|0);
     $751 = (getTempRet0() | 0);
     $752 = ($741|0)>($751|0);
     $753 = ($738>>>0)>($750>>>0);
     $754 = ($741|0)==($751|0);
     $755 = $754 & $753;
     $756 = $752 | $755;
     if ($756) {
      $23 = 1;
     }
    }
    $757 = $26;
    $758 = $757;
    $759 = HEAP32[$758>>2]|0;
    $760 = (($757) + 4)|0;
    $761 = $760;
    $762 = HEAP32[$761>>2]|0;
    $763 = $25;
    $764 = ($763|0)<(0);
    $765 = $764 << 31 >> 31;
    $766 = (___muldi3(($759|0),($762|0),($763|0),($765|0))|0);
    $767 = (getTempRet0() | 0);
    $768 = $29;
    $769 = ($768|0)<(0);
    $770 = $769 << 31 >> 31;
    $771 = (_i64Add(($766|0),($767|0),($768|0),($770|0))|0);
    $772 = (getTempRet0() | 0);
    $773 = $26;
    $774 = $773;
    HEAP32[$774>>2] = $771;
    $775 = (($773) + 4)|0;
    $776 = $775;
    HEAP32[$776>>2] = $772;
    $777 = $7;
    $778 = $777&255;
    $779 = $6;
    $780 = ((($779)) + 1|0);
    $6 = $780;
    HEAP8[$779>>0] = $778;
    $781 = $3;
    $782 = (_readChr($781)|0);
    $7 = $782;
   }
   $783 = $23;
   $784 = ($783|0)!=(0);
   if ($784) {
    $785 = $3;
    $786 = HEAP32[$785>>2]|0;
    $787 = $4;
    $788 = ((($787)) + 12|0);
    $789 = HEAP32[$788>>2]|0;
    $790 = $4;
    $791 = ((($790)) + 16|0);
    $792 = HEAP32[$791>>2]|0;
    _printLog($786,2,$789,$792,0,20232,$vararg_buffer68);
   }
   $793 = $26;
   $794 = $793;
   $795 = HEAP32[$794>>2]|0;
   $796 = (($793) + 4)|0;
   $797 = $796;
   $798 = HEAP32[$797>>2]|0;
   $799 = ($795|0)<(0);
   $800 = $799 << 31 >> 31;
   $801 = $26;
   $802 = $801;
   $803 = HEAP32[$802>>2]|0;
   $804 = (($801) + 4)|0;
   $805 = $804;
   $806 = HEAP32[$805>>2]|0;
   $807 = ($795|0)==($803|0);
   $808 = ($800|0)==($806|0);
   $809 = $807 & $808;
   if ($809) {
    $24 = 3;
   } else {
    $24 = 5;
   }
   $810 = $25;
   $811 = ($810|0)==(10);
   if ($811) {
    $812 = $26;
    $813 = $812;
    $814 = HEAP32[$813>>2]|0;
    $815 = (($812) + 4)|0;
    $816 = $815;
    $817 = HEAP32[$816>>2]|0;
    $818 = (+($814>>>0)) + (4294967296.0*(+($817|0)));
    $27 = $818;
    $819 = $7;
    $820 = ($819|0)==(46);
    if ($820) {
     $30 = 0.0;
     $31 = 1.0;
     $821 = $7;
     $822 = $821&255;
     $823 = $6;
     $824 = ((($823)) + 1|0);
     $6 = $824;
     HEAP8[$823>>0] = $822;
     $825 = $3;
     $826 = (_readChr($825)|0);
     $7 = $826;
     while(1) {
      $827 = $7;
      $828 = ($827|0)>=(48);
      $829 = $7;
      $830 = ($829|0)<=(57);
      $831 = $828 ? $830 : 0;
      $832 = $30;
      if (!($831)) {
       break;
      }
      $833 = $832 * 10.0;
      $834 = $7;
      $835 = (($834) - 48)|0;
      $836 = (+($835|0));
      $837 = $833 + $836;
      $30 = $837;
      $838 = $31;
      $839 = $838 * 10.0;
      $31 = $839;
      $840 = $7;
      $841 = $840&255;
      $842 = $6;
      $843 = ((($842)) + 1|0);
      $6 = $843;
      HEAP8[$842>>0] = $841;
      $844 = $3;
      $845 = (_readChr($844)|0);
      $7 = $845;
     }
     $846 = $31;
     $847 = $832 / $846;
     $848 = $27;
     $849 = $848 + $847;
     $27 = $849;
     $24 = 8;
    }
    $850 = $7;
    $851 = ($850|0)==(101);
    $852 = $7;
    $853 = ($852|0)==(69);
    $or$cond32 = $851 | $853;
    if ($or$cond32) {
     $32 = 1.0;
     $33 = 10.0;
     $34 = 0;
     $35 = 1;
     $854 = $7;
     $855 = $854&255;
     $856 = $6;
     $857 = ((($856)) + 1|0);
     $6 = $857;
     HEAP8[$856>>0] = $855;
     $858 = $3;
     $859 = (_readChr($858)|0);
     $7 = $859;
     $860 = $7;
     switch ($860|0) {
     case 45:  {
      $35 = -1;
      label = 208;
      break;
     }
     case 43:  {
      label = 208;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 208) {
      $861 = $7;
      $862 = $861&255;
      $863 = $6;
      $864 = ((($863)) + 1|0);
      $6 = $864;
      HEAP8[$863>>0] = $862;
      $865 = $3;
      $866 = (_readChr($865)|0);
      $7 = $866;
     }
     $23 = 0;
     $867 = $6;
     $28 = $867;
     while(1) {
      $868 = $7;
      $869 = ($868|0)>=(48);
      $870 = $7;
      $871 = ($870|0)<=(57);
      $872 = $869 ? $871 : 0;
      if (!($872)) {
       break;
      }
      $873 = $34;
      $874 = ($873*10)|0;
      $875 = $7;
      $876 = (($875) - 48)|0;
      $877 = (($874) + ($876))|0;
      $34 = $877;
      $878 = $34;
      $879 = ($878>>>0)>(1024);
      if ($879) {
       $23 = 1;
      }
      $880 = $7;
      $881 = $880&255;
      $882 = $6;
      $883 = ((($882)) + 1|0);
      $6 = $883;
      HEAP8[$882>>0] = $881;
      $884 = $3;
      $885 = (_readChr($884)|0);
      $7 = $885;
     }
     $886 = $28;
     $887 = $6;
     $888 = ($886|0)==($887|0);
     if ($888) {
      $889 = $3;
      $890 = HEAP32[$889>>2]|0;
      $891 = $4;
      $892 = ((($891)) + 12|0);
      $893 = HEAP32[$892>>2]|0;
      $894 = $4;
      $895 = ((($894)) + 16|0);
      $896 = HEAP32[$895>>2]|0;
      _printLog($890,-1,$893,$896,0,20247,$vararg_buffer70);
     } else {
      $897 = $23;
      $898 = ($897|0)!=(0);
      if ($898) {
       $899 = $3;
       $900 = HEAP32[$899>>2]|0;
       $901 = $4;
       $902 = ((($901)) + 12|0);
       $903 = HEAP32[$902>>2]|0;
       $904 = $4;
       $905 = ((($904)) + 16|0);
       $906 = HEAP32[$905>>2]|0;
       _printLog($900,2,$903,$906,0,20279,$vararg_buffer72);
      }
     }
     while(1) {
      $907 = $34;
      $908 = ($907|0)!=(0);
      if (!($908)) {
       break;
      }
      $909 = $34;
      $910 = $909 & 1;
      $911 = ($910|0)!=(0);
      if ($911) {
       $912 = $33;
       $913 = $32;
       $914 = $913 * $912;
       $32 = $914;
      }
      $915 = $34;
      $916 = $915 >>> 1;
      $34 = $916;
      $917 = $33;
      $918 = $33;
      $919 = $918 * $917;
      $33 = $919;
     }
     $920 = $35;
     $921 = ($920|0)<(0);
     $922 = $32;
     $923 = $27;
     if ($921) {
      $924 = $923 / $922;
      $27 = $924;
     } else {
      $925 = $923 * $922;
      $27 = $925;
     }
     $24 = 8;
    }
   }
   $926 = $6;
   $28 = $926;
   while(1) {
    $927 = $6;
    $928 = $5;
    $929 = ($927>>>0)<($928>>>0);
    $930 = $7;
    $931 = ($930|0)!=(-1);
    $932 = $929 ? $931 : 0;
    if (!($932)) {
     break;
    }
    $933 = $7;
    $934 = $933 & 255;
    $935 = (5136 + ($934<<2)|0);
    $936 = HEAP32[$935>>2]|0;
    $937 = $936 & 29184;
    $938 = ($937|0)!=(0);
    if (!($938)) {
     break;
    }
    $939 = $7;
    $940 = $939&255;
    $941 = $6;
    $942 = ((($941)) + 1|0);
    $6 = $942;
    HEAP8[$941>>0] = $940;
    $943 = $3;
    $944 = (_readChr($943)|0);
    $7 = $944;
   }
   $945 = $3;
   $946 = $7;
   (_backChr($945,$946)|0);
   $947 = $6;
   $948 = ((($947)) + 1|0);
   $6 = $948;
   HEAP8[$947>>0] = 0;
   $949 = $28;
   $950 = HEAP8[$949>>0]|0;
   $951 = ($950<<24>>24)!=(0);
   do {
    if ($951) {
     $952 = $28;
     $953 = HEAP8[$952>>0]|0;
     $954 = $953 << 24 >> 24;
     $955 = ($954|0)==(100);
     if ($955) {
      $956 = $28;
      $957 = ((($956)) + 1|0);
      $958 = HEAP8[$957>>0]|0;
      $959 = $958 << 24 >> 24;
      $960 = ($959|0)==(0);
      if ($960) {
       $24 = 3;
       break;
      }
     }
     $961 = $28;
     $962 = HEAP8[$961>>0]|0;
     $963 = $962 << 24 >> 24;
     $964 = ($963|0)==(68);
     if ($964) {
      $965 = $28;
      $966 = ((($965)) + 1|0);
      $967 = HEAP8[$966>>0]|0;
      $968 = $967 << 24 >> 24;
      $969 = ($968|0)==(0);
      if ($969) {
       $24 = 5;
       break;
      }
     }
     $970 = $28;
     $971 = HEAP8[$970>>0]|0;
     $972 = $971 << 24 >> 24;
     $973 = ($972|0)==(117);
     if ($973) {
      $974 = $28;
      $975 = ((($974)) + 1|0);
      $976 = HEAP8[$975>>0]|0;
      $977 = $976 << 24 >> 24;
      $978 = ($977|0)==(0);
      if ($978) {
       $24 = 4;
       break;
      }
     }
     $979 = $28;
     $980 = HEAP8[$979>>0]|0;
     $981 = $980 << 24 >> 24;
     $982 = ($981|0)==(85);
     if ($982) {
      $983 = $28;
      $984 = ((($983)) + 1|0);
      $985 = HEAP8[$984>>0]|0;
      $986 = $985 << 24 >> 24;
      $987 = ($986|0)==(0);
      if ($987) {
       $24 = 6;
       break;
      }
     }
     $988 = $28;
     $989 = HEAP8[$988>>0]|0;
     $990 = $989 << 24 >> 24;
     $991 = ($990|0)==(102);
     if ($991) {
      $992 = $28;
      $993 = ((($992)) + 1|0);
      $994 = HEAP8[$993>>0]|0;
      $995 = $994 << 24 >> 24;
      $996 = ($995|0)==(0);
      if ($996) {
       $24 = 7;
       break;
      }
     }
     $997 = $28;
     $998 = HEAP8[$997>>0]|0;
     $999 = $998 << 24 >> 24;
     $1000 = ($999|0)==(70);
     if ($1000) {
      $1001 = $28;
      $1002 = ((($1001)) + 1|0);
      $1003 = HEAP8[$1002>>0]|0;
      $1004 = $1003 << 24 >> 24;
      $1005 = ($1004|0)==(0);
      if ($1005) {
       $24 = 8;
       break;
      }
     }
     $1006 = $3;
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = $4;
     $1009 = ((($1008)) + 12|0);
     $1010 = HEAP32[$1009>>2]|0;
     $1011 = $4;
     $1012 = ((($1011)) + 16|0);
     $1013 = HEAP32[$1012>>2]|0;
     $1014 = $28;
     HEAP32[$vararg_buffer74>>2] = $1014;
     _printLog($1007,-1,$1010,$1013,0,20297,$vararg_buffer74);
     $1015 = $4;
     HEAP32[$1015>>2] = 0;
     $24 = 0;
    }
   } while(0);
   $1016 = $24;
   switch ($1016|0) {
   case 3:  {
    $1018 = $4;
    HEAP32[$1018>>2] = 1;
    $1019 = $3;
    $1020 = ((($1019)) + 5220|0);
    $1021 = HEAP32[$1020>>2]|0;
    $1022 = $4;
    $1023 = ((($1022)) + 4|0);
    HEAP32[$1023>>2] = $1021;
    $1024 = $26;
    $1025 = $1024;
    $1026 = HEAP32[$1025>>2]|0;
    $1027 = (($1024) + 4)|0;
    $1028 = $1027;
    $1029 = HEAP32[$1028>>2]|0;
    $1030 = $4;
    $1031 = ((($1030)) + 24|0);
    $1032 = $1031;
    $1033 = $1032;
    HEAP32[$1033>>2] = $1026;
    $1034 = (($1032) + 4)|0;
    $1035 = $1034;
    HEAP32[$1035>>2] = $1029;
    break L48;
    break;
   }
   case 5:  {
    $1036 = $4;
    HEAP32[$1036>>2] = 1;
    $1037 = $3;
    $1038 = ((($1037)) + 5224|0);
    $1039 = HEAP32[$1038>>2]|0;
    $1040 = $4;
    $1041 = ((($1040)) + 4|0);
    HEAP32[$1041>>2] = $1039;
    $1042 = $26;
    $1043 = $1042;
    $1044 = HEAP32[$1043>>2]|0;
    $1045 = (($1042) + 4)|0;
    $1046 = $1045;
    $1047 = HEAP32[$1046>>2]|0;
    $1048 = $4;
    $1049 = ((($1048)) + 24|0);
    $1050 = $1049;
    $1051 = $1050;
    HEAP32[$1051>>2] = $1044;
    $1052 = (($1050) + 4)|0;
    $1053 = $1052;
    HEAP32[$1053>>2] = $1047;
    break L48;
    break;
   }
   case 4:  {
    $1054 = $4;
    HEAP32[$1054>>2] = 1;
    $1055 = $3;
    $1056 = ((($1055)) + 5236|0);
    $1057 = HEAP32[$1056>>2]|0;
    $1058 = $4;
    $1059 = ((($1058)) + 4|0);
    HEAP32[$1059>>2] = $1057;
    $1060 = $26;
    $1061 = $1060;
    $1062 = HEAP32[$1061>>2]|0;
    $1063 = (($1060) + 4)|0;
    $1064 = $1063;
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = $4;
    $1067 = ((($1066)) + 24|0);
    $1068 = $1067;
    $1069 = $1068;
    HEAP32[$1069>>2] = $1062;
    $1070 = (($1068) + 4)|0;
    $1071 = $1070;
    HEAP32[$1071>>2] = $1065;
    break L48;
    break;
   }
   case 6:  {
    $1072 = $4;
    HEAP32[$1072>>2] = 1;
    $1073 = $3;
    $1074 = ((($1073)) + 5240|0);
    $1075 = HEAP32[$1074>>2]|0;
    $1076 = $4;
    $1077 = ((($1076)) + 4|0);
    HEAP32[$1077>>2] = $1075;
    $1078 = $26;
    $1079 = $1078;
    $1080 = HEAP32[$1079>>2]|0;
    $1081 = (($1078) + 4)|0;
    $1082 = $1081;
    $1083 = HEAP32[$1082>>2]|0;
    $1084 = $4;
    $1085 = ((($1084)) + 24|0);
    $1086 = $1085;
    $1087 = $1086;
    HEAP32[$1087>>2] = $1080;
    $1088 = (($1086) + 4)|0;
    $1089 = $1088;
    HEAP32[$1089>>2] = $1083;
    break L48;
    break;
   }
   case 7:  {
    $1090 = $4;
    HEAP32[$1090>>2] = 1;
    $1091 = $3;
    $1092 = ((($1091)) + 5244|0);
    $1093 = HEAP32[$1092>>2]|0;
    $1094 = $4;
    $1095 = ((($1094)) + 4|0);
    HEAP32[$1095>>2] = $1093;
    $1096 = $27;
    $1097 = $4;
    $1098 = ((($1097)) + 24|0);
    HEAPF64[$1098>>3] = $1096;
    break L48;
    break;
   }
   case 8:  {
    $1099 = $4;
    HEAP32[$1099>>2] = 1;
    $1100 = $3;
    $1101 = ((($1100)) + 5248|0);
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = $4;
    $1104 = ((($1103)) + 4|0);
    HEAP32[$1104>>2] = $1102;
    $1105 = $27;
    $1106 = $4;
    $1107 = ((($1106)) + 24|0);
    HEAPF64[$1107>>3] = $1105;
    break L48;
    break;
   }
   default: {
    $1017 = $4;
    HEAP32[$1017>>2] = 0;
    break L48;
   }
   }
  }
 } while(0);
 $1108 = $6;
 $1109 = $5;
 $1110 = ($1108>>>0)>=($1109>>>0);
 if ($1110) {
  $1111 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer77>>2] = 20337;
  $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
  HEAP32[$vararg_ptr80>>2] = 1061;
  $vararg_ptr81 = ((($vararg_buffer77)) + 8|0);
  HEAP32[$vararg_ptr81>>2] = 20349;
  _printFmt($1111,0,25109,$vararg_buffer77);
  __abort_405();
  $2 = 0;
  $1114 = $2;
  STACKTOP = sp;return ($1114|0);
 } else {
  $1112 = $4;
  $1113 = HEAP32[$1112>>2]|0;
  $2 = $1113;
  $1114 = $2;
  STACKTOP = sp;return ($1114|0);
 }
 return (0)|0;
}
function _readChr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4148|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)!=(-1);
 $10 = $2;
 $11 = ((($10)) + 4148|0);
 if ($9) {
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = -1;
  $13 = $3;
  $1 = $13;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $14 = ((($11)) + 12|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $18 = $2;
  $19 = (_fillBuf($18)|0);
  $20 = ($19>>>0)<(1);
  if ($20) {
   $1 = -1;
   $90 = $1;
   STACKTOP = sp;return ($90|0);
  }
 }
 $21 = $2;
 $22 = ((($21)) + 4148|0);
 $23 = ((($22)) + 12|0);
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $3 = $27;
 $28 = $3;
 $29 = ($28|0)==(10);
 $30 = $3;
 $31 = ($30|0)==(13);
 $or$cond = $29 | $31;
 if ($or$cond) {
  $32 = $3;
  $33 = ($32|0)==(13);
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 4148|0);
   $36 = ((($35)) + 12|0);
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = ($41|0)==(10);
   if ($42) {
    $43 = $2;
    $44 = ((($43)) + 4148|0);
    $45 = ((($44)) + 12|0);
    $46 = ((($45)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) - 1)|0;
    HEAP32[$46>>2] = $48;
    $49 = $2;
    $50 = ((($49)) + 4148|0);
    $51 = ((($50)) + 12|0);
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 1|0);
    HEAP32[$52>>2] = $54;
    $55 = $2;
    $56 = ((($55)) + 4144|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$56>>2] = $58;
   }
  }
  $59 = $2;
  $60 = ((($59)) + 4136|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)>(0);
  if ($62) {
   $63 = $2;
   $64 = ((($63)) + 4136|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 1)|0;
   HEAP32[$64>>2] = $66;
  }
  $67 = $2;
  $68 = ((($67)) + 4144|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 1)|0;
  $71 = $2;
  $72 = ((($71)) + 4140|0);
  HEAP32[$72>>2] = $70;
  $3 = 10;
 }
 $73 = $2;
 $74 = ((($73)) + 4148|0);
 $75 = ((($74)) + 12|0);
 $76 = ((($75)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) - 1)|0;
 HEAP32[$76>>2] = $78;
 $79 = $2;
 $80 = ((($79)) + 4148|0);
 $81 = ((($80)) + 12|0);
 $82 = ((($81)) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($83)) + 1|0);
 HEAP32[$82>>2] = $84;
 $85 = $2;
 $86 = ((($85)) + 4144|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 1)|0;
 HEAP32[$86>>2] = $88;
 $89 = $3;
 $1 = $89;
 $90 = $1;
 STACKTOP = sp;return ($90|0);
}
function _peekChr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4148|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = $1;
  $8 = (_readChr($7)|0);
  $9 = $1;
  $10 = ((($9)) + 4148|0);
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $8;
 }
 $12 = $1;
 $13 = ((($12)) + 4148|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _skipChr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $4;
  $8 = $3;
  $9 = (_peekChr($8)|0);
  $10 = ($7|0)==($9|0);
  if (!($10)) {
   $2 = 0;
   $13 = $2;
   STACKTOP = sp;return ($13|0);
  }
 }
 $11 = $3;
 $12 = (_readChr($11)|0);
 $2 = $12;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _backChr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4148|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(-1);
 if ($9) {
  $10 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 20337;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 144;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 20357;
  _printFmt($10,0,28431,$vararg_buffer);
  __abort_405();
  $2 = -1;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $11 = $4;
  $12 = $3;
  $13 = ((($12)) + 4148|0);
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $11;
  $2 = $11;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __abort_405() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _fillBuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 4148|0);
 $7 = ((($6)) + 12|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>=(0);
 if (!($10)) {
  $88 = $1;
  $89 = ((($88)) + 4148|0);
  $90 = ((($89)) + 12|0);
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  STACKTOP = sp;return ($92|0);
 }
 $11 = $1;
 $12 = ((($11)) + 4148|0);
 $13 = ((($12)) + 12|0);
 $14 = ((($13)) + 16|0);
 $15 = $1;
 $16 = ((($15)) + 4148|0);
 $17 = ((($16)) + 12|0);
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 4148|0);
 $22 = ((($21)) + 12|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 _memcpy(($14|0),($19|0),($24|0))|0;
 $25 = $1;
 $26 = ((($25)) + 4148|0);
 $27 = ((($26)) + 12|0);
 $28 = ((($27)) + 16|0);
 $29 = $1;
 $30 = ((($29)) + 4148|0);
 $31 = ((($30)) + 12|0);
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($28) + ($33)|0);
 $2 = $34;
 $35 = $1;
 $36 = ((($35)) + 4148|0);
 $37 = ((($36)) + 12|0);
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (1024 - ($39))|0;
 $3 = $40;
 $41 = $1;
 $42 = ((($41)) + 4148|0);
 $43 = ((($42)) + 12|0);
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $2;
 $47 = $3;
 $48 = (_read($45,$46,$47)|0);
 $4 = $48;
 $49 = $4;
 $50 = ($49|0)<=(0);
 if ($50) {
  $51 = $4;
  $52 = ($51|0)<(0);
  if ($52) {
   $53 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 20337;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 52;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 20401;
   _printFmt($53,0,20365,$vararg_buffer);
   __abort_405();
  }
  $54 = $1;
  $55 = ((($54)) + 4148|0);
  $56 = ((($55)) + 12|0);
  $57 = ((($56)) + 16|0);
  $58 = $1;
  $59 = ((($58)) + 4148|0);
  $60 = ((($59)) + 12|0);
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($57) + ($62)|0);
  HEAP8[$63>>0] = 0;
  $64 = $1;
  $65 = ((($64)) + 4148|0);
  $66 = ((($65)) + 12|0);
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  (_close($68)|0);
  $69 = $1;
  $70 = ((($69)) + 4148|0);
  $71 = ((($70)) + 12|0);
  $72 = ((($71)) + 4|0);
  HEAP32[$72>>2] = -1;
 }
 $73 = $1;
 $74 = ((($73)) + 4148|0);
 $75 = ((($74)) + 12|0);
 $76 = ((($75)) + 16|0);
 $77 = $1;
 $78 = ((($77)) + 4148|0);
 $79 = ((($78)) + 12|0);
 $80 = ((($79)) + 12|0);
 HEAP32[$80>>2] = $76;
 $81 = $4;
 $82 = $1;
 $83 = ((($82)) + 4148|0);
 $84 = ((($83)) + 12|0);
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($81))|0;
 HEAP32[$85>>2] = $87;
 $88 = $1;
 $89 = ((($88)) + 4148|0);
 $90 = ((($89)) + 12|0);
 $91 = ((($90)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 STACKTOP = sp;return ($92|0);
}
function _nextTok($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $5;
 $12 = (_peekTok($10,$11)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $7;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = ((($18)) + 4148|0);
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = $17;
  $21 = $7;
  $22 = ((($21)) + 8|0);
  HEAP32[$22>>2] = 0;
  $23 = $7;
  $3 = $23;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 $24 = $6;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $4;
  $27 = ((($26)) + 4132|0);
  $28 = HEAP32[$27>>2]|0;
  $8 = $28;
  $29 = $4;
  $30 = ((($29)) + 4136|0);
  $31 = HEAP32[$30>>2]|0;
  $9 = $31;
  $32 = $4;
  $33 = ((($32)) + 4148|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
  $36 = $7;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $7;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $7;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $7;
     $47 = ((($46)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $8 = $48;
     $49 = $7;
     $50 = ((($49)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $9 = $51;
    }
   }
  }
  $52 = $4;
  $53 = HEAP32[$52>>2]|0;
  $54 = $8;
  $55 = $9;
  $56 = $7;
  $57 = $5;
  HEAP32[$vararg_buffer>>2] = $56;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $57;
  _printLog($53,-1,$54,$55,0,20409,$vararg_buffer);
 }
 $3 = 0;
 $58 = $3;
 STACKTOP = sp;return ($58|0);
}
function _skipTok($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = (_nextTok($9,$10,$11)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $7;
  $16 = HEAP32[$15>>2]|0;
  $8 = $16;
  $17 = $4;
  $18 = $7;
  _recycle($17,$18);
  $19 = $8;
  $3 = $19;
  $20 = $3;
  STACKTOP = sp;return ($20|0);
 } else {
  $3 = 0;
  $20 = $3;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _ccOpen($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ((($10)) + 4148|0);
 $12 = ((($11)) + 12|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = $5;
  $17 = ((($16)) + 4148|0);
  $18 = ((($17)) + 12|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  (_close($20)|0);
 }
 $21 = $8;
 $22 = ($21|0)==(0|0);
 $23 = $6;
 $24 = ($23|0)!=(0|0);
 $or$cond = $22 & $24;
 do {
  if ($or$cond) {
   $25 = $6;
   $26 = (_open($25,0,$vararg_buffer)|0);
   $27 = $5;
   $28 = ((($27)) + 4148|0);
   $29 = ((($28)) + 12|0);
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $26;
   $31 = ($26|0)<=(0);
   if (!($31)) {
    $32 = $5;
    $33 = ((($32)) + 4148|0);
    $34 = ((($33)) + 12|0);
    $35 = ((($34)) + 12|0);
    HEAP32[$35>>2] = 0;
    $36 = $5;
    $37 = ((($36)) + 4148|0);
    $38 = ((($37)) + 12|0);
    $39 = ((($38)) + 8|0);
    HEAP32[$39>>2] = 0;
    break;
   }
   $4 = -1;
   $116 = $4;
   STACKTOP = sp;return ($116|0);
  } else {
   $40 = $8;
   $41 = ($40|0)!=(0|0);
   $42 = $5;
   $43 = ((($42)) + 4148|0);
   $44 = ((($43)) + 12|0);
   $45 = ((($44)) + 4|0);
   HEAP32[$45>>2] = -1;
   if ($41) {
    $46 = $8;
    $47 = $5;
    $48 = ((($47)) + 4148|0);
    $49 = ((($48)) + 12|0);
    $50 = ((($49)) + 12|0);
    HEAP32[$50>>2] = $46;
    $51 = $8;
    $52 = (_strlen($51)|0);
    $53 = $5;
    $54 = ((($53)) + 4148|0);
    $55 = ((($54)) + 12|0);
    $56 = ((($55)) + 8|0);
    HEAP32[$56>>2] = $52;
    break;
   } else {
    $57 = $5;
    $58 = ((($57)) + 4148|0);
    $59 = ((($58)) + 12|0);
    $60 = ((($59)) + 12|0);
    HEAP32[$60>>2] = 0;
    $61 = $5;
    $62 = ((($61)) + 4148|0);
    $63 = ((($62)) + 12|0);
    $64 = ((($63)) + 8|0);
    HEAP32[$64>>2] = 0;
    break;
   }
  }
 } while(0);
 $65 = $6;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = $5;
  $68 = $6;
  $69 = (_ccUniqueStr($67,$68,-1,-1)|0);
  $6 = $69;
 }
 $70 = $5;
 $71 = ((($70)) + 4148|0);
 $72 = ((($71)) + 8|0);
 HEAP32[$72>>2] = -1;
 $73 = $5;
 $74 = ((($73)) + 4148|0);
 $75 = ((($74)) + 4|0);
 HEAP32[$75>>2] = 0;
 $76 = $6;
 $77 = $5;
 $78 = ((($77)) + 4132|0);
 HEAP32[$78>>2] = $76;
 $79 = $7;
 $80 = $5;
 $81 = ((($80)) + 4136|0);
 HEAP32[$81>>2] = $79;
 $82 = $5;
 $83 = ((($82)) + 4124|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $5;
 $86 = ((($85)) + 4148|0);
 $87 = ((($86)) + 12|0);
 HEAP32[$87>>2] = $84;
 $88 = $5;
 $89 = (_fillBuf($88)|0);
 $90 = ($89>>>0)>(2);
 L18: do {
  if ($90) {
   $91 = $5;
   $92 = ((($91)) + 4148|0);
   $93 = ((($92)) + 12|0);
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96 << 24 >> 24;
   $98 = ($97|0)==(35);
   if ($98) {
    $99 = $5;
    $100 = ((($99)) + 4148|0);
    $101 = ((($100)) + 12|0);
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($103)) + 1|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105 << 24 >> 24;
    $107 = ($106|0)==(33);
    if ($107) {
     $108 = $5;
     $109 = (_readChr($108)|0);
     $9 = $109;
     while(1) {
      $110 = $9;
      $111 = ($110|0)==(-1);
      $112 = $9;
      $113 = ($112|0)==(10);
      $or$cond3 = $111 | $113;
      if ($or$cond3) {
       break L18;
      }
      $114 = $5;
      $115 = (_readChr($114)|0);
      $9 = $115;
     }
    }
   }
  }
 } while(0);
 $4 = 0;
 $116 = $4;
 STACKTOP = sp;return ($116|0);
}
function _ccClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = -1;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $6 = $2;
 $7 = (_nextTok($6,0,0)|0);
 $3 = $7;
 $8 = ($7|0)!=(0|0);
 $9 = $2;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  HEAP32[$vararg_buffer>>2] = $17;
  _printLog($10,-1,$13,$16,0,22105,$vararg_buffer);
 } else {
  $18 = ((($9)) + 4148|0);
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((($21)) + 4124|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)!=($23|0);
  if ($24) {
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = $2;
   $28 = ((($27)) + 4132|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = ((($30)) + 4136|0);
   $32 = HEAP32[$31>>2]|0;
   _printLog($26,-1,$29,$32,0,20449,$vararg_buffer1);
  }
 }
 $33 = $2;
 (_ccOpen($33,0,0,0)|0);
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $1 = $37;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _ccLibStd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $5 = sp + 368|0;
 $6 = sp + 352|0;
 $7 = sp + 288|0;
 $8 = sp + 224|0;
 $9 = sp + 160|0;
 $10 = sp + 128|0;
 $11 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 dest=$5; src=6272; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$6>>2]=HEAP32[6336>>2]|0;HEAP32[$6+4>>2]=HEAP32[6336+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[6336+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[6336+12>>2]|0;
 dest=$7; src=6352; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$8; src=6416; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$9; src=6480; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$10>>2]=HEAP32[6544>>2]|0;HEAP32[$10+4>>2]=HEAP32[6544+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[6544+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[6544+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[6544+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[6544+20>>2]|0;HEAP32[$10+24>>2]=HEAP32[6544+24>>2]|0;HEAP32[$10+28>>2]=HEAP32[6544+28>>2]|0;
 dest=$11; src=6576; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = ($12>>>0)<(2);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = $4;
  $16 = (($10) + ($15<<4)|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = (($10) + ($19<<4)|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (_ccDefInt($14,$18,$23,$26)|0);
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   label = 4;
   break;
  }
  $29 = $4;
  $30 = (($29) + 1)|0;
  $4 = $30;
 }
 if ((label|0) == 4) {
  $3 = 1;
 }
 $31 = $3;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $33 = $1;
  $34 = ((($33)) + 5256|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $1;
   $38 = (_ccAddCall($37,61,20478)|0);
   $39 = $1;
   $40 = ((($39)) + 5308|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $42 = ((($41)) + 5308|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0|0);
   if ($44) {
    $3 = 2;
   }
   $45 = $3;
   $46 = ($45|0)!=(0);
   if (!($46)) {
    $47 = $1;
    $48 = $1;
    $49 = ((($48)) + 5308|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_ccExtend($47,$50)|0);
    $52 = ($51|0)!=(0|0);
    if ($52) {
     $4 = 0;
     while(1) {
      $53 = $4;
      $54 = ($53>>>0)<(8);
      if (!($54)) {
       break;
      }
      $55 = $1;
      $56 = $4;
      $57 = (($11) + ($56<<4)|0);
      $58 = ((($57)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $4;
      $61 = (($11) + ($60<<4)|0);
      $62 = $61;
      $63 = $62;
      $64 = HEAP32[$63>>2]|0;
      $65 = (($62) + 4)|0;
      $66 = $65;
      $67 = HEAP32[$66>>2]|0;
      $68 = (_ccDefInt($55,$59,$64,$67)|0);
      $69 = ($68|0)!=(0|0);
      if (!($69)) {
       label = 15;
       break;
      }
      $70 = $4;
      $71 = (($70) + 1)|0;
      $4 = $71;
     }
     if ((label|0) == 15) {
      $3 = 1;
     }
     $72 = $1;
     $73 = $1;
     $74 = ((($73)) + 5308|0);
     $75 = HEAP32[$74>>2]|0;
     (_ccEnd($72,$75)|0);
    }
   }
  }
 }
 $76 = $3;
 $77 = ($76|0)!=(0);
 if (!($77)) {
  $78 = $1;
  $79 = ((($78)) + 5252|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0|0);
  if ($81) {
   $82 = $1;
   $83 = (_ccAddCall($82,62,20569)|0);
   $84 = $1;
   $85 = ((($84)) + 5312|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = ((($86)) + 5312|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(0|0);
   if ($89) {
    $3 = 2;
   }
  }
 }
 $90 = $3;
 $91 = ($90|0)!=(0);
 if (!($91)) {
  $92 = $1;
  $93 = $1;
  $94 = ((($93)) + 5252|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_ccExtend($92,$95)|0);
  $97 = ($96|0)!=(0|0);
  if ($97) {
   $98 = $1;
   $99 = (_ccAddCall($98,63,20622)|0);
   $100 = ($99|0)!=(0|0);
   if (!($100)) {
    $3 = 3;
   }
   $101 = $1;
   $102 = (_ccAddCall($101,64,20661)|0);
   $103 = ($102|0)!=(0|0);
   if (!($103)) {
    $3 = 3;
   }
   $104 = $1;
   $105 = (_ccAddCall($104,65,20710)|0);
   $106 = ($105|0)!=(0|0);
   if (!($106)) {
    $3 = 3;
   }
   $107 = $1;
   $108 = (_ccAddCall($107,66,20761)|0);
   $109 = ($108|0)!=(0|0);
   if (!($109)) {
    $3 = 3;
   }
   $110 = $1;
   $111 = $1;
   $112 = ((($111)) + 5252|0);
   $113 = HEAP32[$112>>2]|0;
   (_ccEnd($110,$113)|0);
  }
 }
 $114 = $3;
 $115 = ($114|0)!=(0);
 if (!($115)) {
  $116 = $1;
  $117 = (_ccBegin($116,20812)|0);
  $2 = $117;
  $118 = ($117|0)!=(0|0);
  if ($118) {
   $4 = 0;
   while(1) {
    $119 = $4;
    $120 = ($119>>>0)<(7);
    if (!($120)) {
     break;
    }
    $121 = $1;
    $122 = $4;
    $123 = (($9) + ($122<<3)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $4;
    $126 = (($9) + ($125<<3)|0);
    $127 = ((($126)) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (_ccAddCall($121,$124,$128)|0);
    $130 = ($129|0)!=(0|0);
    if (!($130)) {
     label = 38;
     break;
    }
    $131 = $4;
    $132 = (($131) + 1)|0;
    $4 = $132;
   }
   if ((label|0) == 38) {
    $3 = 4;
   }
   $133 = $1;
   $134 = $2;
   (_ccEnd($133,$134)|0);
  }
 }
 $135 = $3;
 $136 = ($135|0)!=(0);
 if (!($136)) {
  $137 = $1;
  $138 = $1;
  $139 = ((($138)) + 5236|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (_ccExtend($137,$140)|0);
  $142 = ($141|0)!=(0|0);
  if ($142) {
   $4 = 0;
   while(1) {
    $143 = $4;
    $144 = ($143>>>0)<(8);
    if (!($144)) {
     break;
    }
    $145 = $1;
    $146 = $4;
    $147 = (($5) + ($146<<3)|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $4;
    $150 = (($5) + ($149<<3)|0);
    $151 = ((($150)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (_ccAddCall($145,$148,$152)|0);
    $154 = ($153|0)!=(0|0);
    if (!($154)) {
     label = 46;
     break;
    }
    $155 = $4;
    $156 = (($155) + 1)|0;
    $4 = $156;
   }
   if ((label|0) == 46) {
    $3 = 5;
   }
   $157 = $1;
   $158 = $1;
   $159 = ((($158)) + 5236|0);
   $160 = HEAP32[$159>>2]|0;
   (_ccEnd($157,$160)|0);
  }
 }
 $161 = $3;
 $162 = ($161|0)!=(0);
 if (!($162)) {
  $163 = $1;
  $164 = $1;
  $165 = ((($164)) + 5240|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (_ccExtend($163,$166)|0);
  $168 = ($167|0)!=(0|0);
  if ($168) {
   $4 = 0;
   while(1) {
    $169 = $4;
    $170 = ($169>>>0)<(2);
    if (!($170)) {
     break;
    }
    $171 = $1;
    $172 = $4;
    $173 = (($6) + ($172<<3)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $4;
    $176 = (($6) + ($175<<3)|0);
    $177 = ((($176)) + 4|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (_ccAddCall($171,$174,$178)|0);
    $180 = ($179|0)!=(0|0);
    if (!($180)) {
     label = 54;
     break;
    }
    $181 = $4;
    $182 = (($181) + 1)|0;
    $4 = $182;
   }
   if ((label|0) == 54) {
    $3 = 5;
   }
   $183 = $1;
   $184 = $1;
   $185 = ((($184)) + 5240|0);
   $186 = HEAP32[$185>>2]|0;
   (_ccEnd($183,$186)|0);
  }
 }
 $187 = $3;
 $188 = ($187|0)!=(0);
 if (!($188)) {
  $189 = $1;
  $190 = $1;
  $191 = ((($190)) + 5244|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (_ccExtend($189,$192)|0);
  $194 = ($193|0)!=(0|0);
  if ($194) {
   $4 = 0;
   while(1) {
    $195 = $4;
    $196 = ($195>>>0)<(8);
    if (!($196)) {
     break;
    }
    $197 = $1;
    $198 = $4;
    $199 = (($7) + ($198<<3)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = $4;
    $202 = (($7) + ($201<<3)|0);
    $203 = ((($202)) + 4|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (_ccAddCall($197,$200,$204)|0);
    $206 = ($205|0)!=(0|0);
    if (!($206)) {
     label = 62;
     break;
    }
    $207 = $4;
    $208 = (($207) + 1)|0;
    $4 = $208;
   }
   if ((label|0) == 62) {
    $3 = 7;
   }
   $209 = $1;
   $210 = $1;
   $211 = ((($210)) + 5244|0);
   $212 = HEAP32[$211>>2]|0;
   (_ccEnd($209,$212)|0);
  }
 }
 $213 = $3;
 $214 = ($213|0)!=(0);
 if ($214) {
  $239 = $3;
  STACKTOP = sp;return ($239|0);
 }
 $215 = $1;
 $216 = $1;
 $217 = ((($216)) + 5248|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = (_ccExtend($215,$218)|0);
 $220 = ($219|0)!=(0|0);
 if (!($220)) {
  $239 = $3;
  STACKTOP = sp;return ($239|0);
 }
 $4 = 0;
 while(1) {
  $221 = $4;
  $222 = ($221>>>0)<(8);
  if (!($222)) {
   break;
  }
  $223 = $1;
  $224 = $4;
  $225 = (($8) + ($224<<3)|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = $4;
  $228 = (($8) + ($227<<3)|0);
  $229 = ((($228)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (_ccAddCall($223,$226,$230)|0);
  $232 = ($231|0)!=(0|0);
  if (!($232)) {
   label = 70;
   break;
  }
  $233 = $4;
  $234 = (($233) + 1)|0;
  $4 = $234;
 }
 if ((label|0) == 70) {
  $3 = 6;
 }
 $235 = $1;
 $236 = $1;
 $237 = ((($236)) + 5248|0);
 $238 = HEAP32[$237>>2]|0;
 (_ccEnd($235,$238)|0);
 $239 = $3;
 STACKTOP = sp;return ($239|0);
}
function _sysRaise($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 24|0;
 $5 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $3 = $13;
 $14 = $2;
 $15 = $2;
 $16 = (_nfcNextArg($15)|0);
 _nfcReadArg($5,$14,$16);
 $17 = HEAP32[$5>>2]|0;
 $4 = $17;
 $18 = $2;
 _nfcCheckArg($18,10,27668);
 $19 = $2;
 $20 = $2;
 $21 = (_nfcNextArg($20)|0);
 $22 = (_argi32($19,$21)|0);
 $6 = $22;
 $23 = $2;
 _nfcCheckArg($23,3,27673);
 $24 = $2;
 $25 = $2;
 $26 = (_nfcNextArg($25)|0);
 $27 = (_argi32($24,$26)|0);
 $7 = $27;
 $28 = $2;
 _nfcCheckArg($28,3,20819);
 $29 = $2;
 $30 = $2;
 $31 = (_nfcNextArg($30)|0);
 $32 = (_argi32($29,$31)|0);
 $8 = $32;
 $33 = $2;
 _nfcCheckArg($33,3,20825);
 $34 = $2;
 $35 = $2;
 $36 = (_nfcNextArg($35)|0);
 _nfcReadArg($10,$34,$36);
 $37 = HEAP32[$10>>2]|0;
 $9 = $37;
 $38 = $2;
 _nfcCheckArg($38,10,20831);
 $39 = $2;
 $40 = $2;
 $41 = (_nfcNextArg($40)|0);
 _nfcReadArg($11,$39,$41);
 $42 = $2;
 _nfcCheckArg($42,11,20839);
 $43 = $3;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  $47 = $7;
  $48 = $3;
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 >>> 6;
  $51 = $50 & 15;
  $52 = ($47|0)>($51|0);
  if (!($52)) {
   $53 = $3;
   $54 = $7;
   $55 = $4;
   $56 = $6;
   $57 = $9;
   HEAP32[$vararg_buffer>>2] = $57;
   _printLog($53,$54,$55,$56,$11,20847,$vararg_buffer);
   $58 = $3;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   $62 = $8;
   $63 = ($62|0)>(0);
   $or$cond = $61 & $63;
   if ($or$cond) {
    $64 = $3;
    $65 = ((($64)) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $3;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $8;
    $71 = (($70) - 1)|0;
    _traceCalls($66,$69,1,$71,1);
   }
   $72 = $7;
   $73 = ($72|0)==(-2);
   if ($73) {
    $1 = 6;
    $74 = $1;
    STACKTOP = sp;return ($74|0);
   } else {
    $1 = 0;
    $74 = $1;
    STACKTOP = sp;return ($74|0);
   }
  }
 }
 $1 = 0;
 $74 = $1;
 STACKTOP = sp;return ($74|0);
}
function _sysTryExec($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $1 = $0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $1;
 $11 = $1;
 $12 = (_nfcNextArg($11)|0);
 $13 = (_argref_433($10,$12)|0);
 $4 = $13;
 $14 = $1;
 $15 = $1;
 $16 = (_nfcNextArg($15)|0);
 $17 = (_argref_433($14,$16)|0);
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = (_rtLookup($18,$19,32)|0);
 $6 = $20;
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $6;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ($25|0)==($26|0);
  if ($27) {
   $28 = $4;
   HEAP32[$7>>2] = $28;
   $29 = $3;
   $30 = $6;
   $31 = $1;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_invoke($29,$30,0,$7,$33)|0);
   $2 = $34;
   $35 = $1;
   $36 = $2;
   _reti32_434($35,$36);
   STACKTOP = sp;return 0;
  }
 }
 $2 = 1;
 $35 = $1;
 $36 = $2;
 _reti32_434($35,$36);
 STACKTOP = sp;return 0;
}
function _sysMemMgr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $5 = sp;
 $1 = $0;
 $7 = $1;
 $8 = $1;
 $9 = (_nfcNextArg($8)|0);
 _nfcReadArg($3,$7,$9);
 $10 = HEAP32[$3>>2]|0;
 $2 = $10;
 $11 = $1;
 $12 = $1;
 $13 = (_nfcNextArg($12)|0);
 _nfcReadArg($5,$11,$13);
 $14 = HEAP32[$5>>2]|0;
 $4 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = $4;
 $19 = (_rtAlloc($16,$17,$18,0)|0);
 $6 = $19;
 $20 = $1;
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = $6;
 $24 = (_vmOffset_431($22,$23)|0);
 _retref_432($20,$24);
 STACKTOP = sp;return 0;
}
function _sysMemSet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 16|0;
 $5 = sp + 8|0;
 $7 = sp;
 $1 = $0;
 $9 = $1;
 $10 = $1;
 $11 = (_nfcNextArg($10)|0);
 _nfcReadArg($3,$9,$11);
 $12 = HEAP32[$3>>2]|0;
 $2 = $12;
 $13 = $1;
 $14 = $1;
 $15 = (_nfcNextArg($14)|0);
 _nfcReadArg($5,$13,$15);
 $16 = HEAP32[$5>>2]|0;
 $4 = $16;
 $17 = $1;
 $18 = $1;
 $19 = (_nfcNextArg($18)|0);
 _nfcReadArg($7,$17,$19);
 $20 = HEAP32[$7>>2]|0;
 $6 = $20;
 $21 = $2;
 $22 = $4;
 $23 = $22&255;
 $24 = $6;
 _memset(($21|0),($23|0),($24|0))|0;
 $8 = $21;
 $25 = $1;
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = $8;
 $29 = (_vmOffset_431($27,$28)|0);
 _retref_432($25,$29);
 STACKTOP = sp;return 0;
}
function _sysMemCpy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 16|0;
 $5 = sp + 8|0;
 $7 = sp;
 $1 = $0;
 $9 = $1;
 $10 = $1;
 $11 = (_nfcNextArg($10)|0);
 _nfcReadArg($3,$9,$11);
 $12 = HEAP32[$3>>2]|0;
 $2 = $12;
 $13 = $1;
 $14 = $1;
 $15 = (_nfcNextArg($14)|0);
 _nfcReadArg($5,$13,$15);
 $16 = HEAP32[$5>>2]|0;
 $4 = $16;
 $17 = $1;
 $18 = $1;
 $19 = (_nfcNextArg($18)|0);
 _nfcReadArg($7,$17,$19);
 $20 = HEAP32[$7>>2]|0;
 $6 = $20;
 $21 = $2;
 $22 = $4;
 $23 = $6;
 _memcpy(($21|0),($22|0),($23|0))|0;
 $8 = $21;
 $24 = $1;
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = $8;
 $28 = (_vmOffset_431($26,$27)|0);
 _retref_432($24,$28);
 STACKTOP = sp;return 0;
}
function _sysMemMove($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 16|0;
 $5 = sp + 8|0;
 $7 = sp;
 $1 = $0;
 $9 = $1;
 $10 = $1;
 $11 = (_nfcNextArg($10)|0);
 _nfcReadArg($3,$9,$11);
 $12 = HEAP32[$3>>2]|0;
 $2 = $12;
 $13 = $1;
 $14 = $1;
 $15 = (_nfcNextArg($14)|0);
 _nfcReadArg($5,$13,$15);
 $16 = HEAP32[$5>>2]|0;
 $4 = $16;
 $17 = $1;
 $18 = $1;
 $19 = (_nfcNextArg($18)|0);
 _nfcReadArg($7,$17,$19);
 $20 = HEAP32[$7>>2]|0;
 $6 = $20;
 $21 = $2;
 $22 = $4;
 $23 = $6;
 _memmove(($21|0),($22|0),($23|0))|0;
 $8 = $21;
 $24 = $1;
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = $8;
 $28 = (_vmOffset_431($26,$27)|0);
 _retref_432($24,$28);
 STACKTOP = sp;return 0;
}
function _vmOffset_431($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _retref_432($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAP32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _argref_433($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _reti32_434($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAP32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _argi32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _sysExit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_argi32($2,0)|0);
 _exit(($3|0));
 // unreachable;
 return (0)|0;
}
function _sysSRand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argi32($3,0)|0);
 $2 = $4;
 $5 = $2;
 _srand($5);
 STACKTOP = sp;return 0;
}
function _sysRand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_rand()|0);
 _reti32_434($2,$3);
 STACKTOP = sp;return 0;
}
function _sysTime($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_time((0|0))|0);
 _reti32_434($2,$3);
 STACKTOP = sp;return 0;
}
function _sysClock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_clock()|0);
 _reti32_434($2,$3);
 STACKTOP = sp;return 0;
}
function _sysMillis($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_timeMillis()|0);
 $4 = (getTempRet0() | 0);
 _retu64($2,$3,$4);
 STACKTOP = sp;return 0;
}
function _sysMSleep($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_argi64($2,0)|0);
 $4 = (getTempRet0() | 0);
 _sleepMillis($3,$4);
 STACKTOP = sp;return 0;
}
function _argi64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($11|0);
}
function _retu64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $3 = $0;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20)|0);
 $22 = ((($21)) + -8|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $11;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $14;
 STACKTOP = sp;return;
}
function _f64sin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_sin((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64cos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_cos((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64tan($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_tan((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64log($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_log((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64exp($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_exp((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64pow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_argf64($4,8));
 $2 = $5;
 $6 = $1;
 $7 = (+_argf64($6,0));
 $3 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (+Math_pow((+$9),(+$10)));
 _retf64($8,$11);
 STACKTOP = sp;return 0;
}
function _f64sqrt($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf64($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_sqrt((+$6)));
 _retf64($5,$7);
 STACKTOP = sp;return 0;
}
function _f64atan2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_argf64($4,8));
 $2 = $5;
 $6 = $1;
 $7 = (+_argf64($6,0));
 $3 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (+Math_atan2((+$9),(+$10)));
 _retf64($8,$11);
 STACKTOP = sp;return 0;
}
function _argf64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = +HEAPF64[$8>>3];
 STACKTOP = sp;return (+$9);
}
function _retf64($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -8|0);
 HEAPF64[$12>>3] = $4;
 STACKTOP = sp;return;
}
function _f32sin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_sin((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32cos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_cos((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32tan($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_tan((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32log($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_log((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32exp($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_exp((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32pow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_argf32($4,4));
 $2 = $5;
 $6 = $1;
 $7 = (+_argf32($6,0));
 $3 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (+Math_pow((+$9),(+$10)));
 _retf32($8,$11);
 STACKTOP = sp;return 0;
}
function _f32sqrt($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_argf32($3,0));
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (+Math_sqrt((+$6)));
 _retf32($5,$7);
 STACKTOP = sp;return 0;
}
function _f32atan2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_argf32($4,4));
 $2 = $5;
 $6 = $1;
 $7 = (+_argf32($6,0));
 $3 = $7;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (+Math_atan2((+$9),(+$10)));
 _retf32($8,$11);
 STACKTOP = sp;return 0;
}
function _argf32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = +HEAPF32[$8>>2];
 STACKTOP = sp;return (+$9);
}
function _retf32($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAPF32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _b64zxt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (_argi64($5,12)|0);
 $7 = (getTempRet0() | 0);
 $8 = $2;
 $9 = $8;
 HEAP32[$9>>2] = $6;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $1;
 $13 = (_argi32($12,8)|0);
 $3 = $13;
 $14 = $1;
 $15 = (_argi32($14,0)|0);
 $4 = $15;
 $16 = $1;
 $17 = $2;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = $4;
 $25 = (($23) + ($24))|0;
 $26 = (64 - ($25))|0;
 $27 = (_bitshift64Shl(($19|0),($22|0),($26|0))|0);
 $28 = (getTempRet0() | 0);
 $29 = $4;
 $30 = (64 - ($29))|0;
 $31 = (_bitshift64Lshr(($27|0),($28|0),($30|0))|0);
 $32 = (getTempRet0() | 0);
 _retu64($16,$31,$32);
 STACKTOP = sp;return 0;
}
function _b64sxt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (_argi64($5,12)|0);
 $7 = (getTempRet0() | 0);
 $8 = $2;
 $9 = $8;
 HEAP32[$9>>2] = $6;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $1;
 $13 = (_argi32($12,8)|0);
 $3 = $13;
 $14 = $1;
 $15 = (_argi32($14,0)|0);
 $4 = $15;
 $16 = $1;
 $17 = $2;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = $4;
 $25 = (($23) + ($24))|0;
 $26 = (64 - ($25))|0;
 $27 = (_bitshift64Shl(($19|0),($22|0),($26|0))|0);
 $28 = (getTempRet0() | 0);
 $29 = $4;
 $30 = (64 - ($29))|0;
 $31 = (_bitshift64Ashr(($27|0),($28|0),($30|0))|0);
 $32 = (getTempRet0() | 0);
 _reti64($16,$31,$32);
 STACKTOP = sp;return 0;
}
function _reti64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $3 = $0;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20)|0);
 $22 = ((($21)) + -8|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $11;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $14;
 STACKTOP = sp;return;
}
function _b32zxt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = (_argu32($5,8)|0);
 $2 = $6;
 $7 = $1;
 $8 = (_argi32($7,4)|0);
 $3 = $8;
 $9 = $1;
 $10 = (_argi32($9,0)|0);
 $4 = $10;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = (($13) + ($14))|0;
 $16 = (32 - ($15))|0;
 $17 = $12 << $16;
 $18 = $4;
 $19 = (32 - ($18))|0;
 $20 = $17 >>> $19;
 _retu32($11,$20);
 STACKTOP = sp;return 0;
}
function _b32sxt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = (_argi32($5,8)|0);
 $2 = $6;
 $7 = $1;
 $8 = (_argi32($7,4)|0);
 $3 = $8;
 $9 = $1;
 $10 = (_argi32($9,0)|0);
 $4 = $10;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = (($13) + ($14))|0;
 $16 = (32 - ($15))|0;
 $17 = $12 << $16;
 $18 = $4;
 $19 = (32 - ($18))|0;
 $20 = $17 >> $19;
 _reti32_434($11,$20);
 STACKTOP = sp;return 0;
}
function _b32pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (_bitcnt($6)|0);
 _retu32($5,$7);
 STACKTOP = sp;return 0;
}
function _b32swp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $2;
 $6 = $5 >>> 1;
 $7 = $6 & 1431655765;
 $8 = $2;
 $9 = $8 & 1431655765;
 $10 = $9 << 1;
 $11 = $7 | $10;
 $2 = $11;
 $12 = $2;
 $13 = $12 >>> 2;
 $14 = $13 & 858993459;
 $15 = $2;
 $16 = $15 & 858993459;
 $17 = $16 << 2;
 $18 = $14 | $17;
 $2 = $18;
 $19 = $2;
 $20 = $19 >>> 4;
 $21 = $20 & 252645135;
 $22 = $2;
 $23 = $22 & 252645135;
 $24 = $23 << 4;
 $25 = $21 | $24;
 $2 = $25;
 $26 = $2;
 $27 = $26 >>> 8;
 $28 = $27 & 16711935;
 $29 = $2;
 $30 = $29 & 16711935;
 $31 = $30 << 8;
 $32 = $28 | $31;
 $2 = $32;
 $33 = $1;
 $34 = $2;
 $35 = $34 >>> 16;
 $36 = $2;
 $37 = $36 << 16;
 $38 = $35 | $37;
 _retu32($33,$38);
 STACKTOP = sp;return 0;
}
function _b32sr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (_bitsr($6)|0);
 _reti32_434($5,$7);
 STACKTOP = sp;return 0;
}
function _b32sf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (_bitsf_485($6)|0);
 _reti32_434($5,$7);
 STACKTOP = sp;return 0;
}
function _b32hi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $2;
 $6 = $5 >>> 1;
 $7 = $2;
 $8 = $7 | $6;
 $2 = $8;
 $9 = $2;
 $10 = $9 >>> 2;
 $11 = $2;
 $12 = $11 | $10;
 $2 = $12;
 $13 = $2;
 $14 = $13 >>> 4;
 $15 = $2;
 $16 = $15 | $14;
 $2 = $16;
 $17 = $2;
 $18 = $17 >>> 8;
 $19 = $2;
 $20 = $19 | $18;
 $2 = $20;
 $21 = $2;
 $22 = $21 >>> 16;
 $23 = $2;
 $24 = $23 | $22;
 $2 = $24;
 $25 = $1;
 $26 = $2;
 $27 = $2;
 $28 = $27 >>> 1;
 $29 = (($26) - ($28))|0;
 _retu32($25,$29);
 STACKTOP = sp;return 0;
}
function _b32lo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_argu32($3,0)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = $2;
 $8 = (0 - ($7))|0;
 $9 = $6 & $8;
 _retu32($5,$9);
 STACKTOP = sp;return 0;
}
function _argu32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7)|0);
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _retu32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $12 = ((($11)) + -4|0);
 HEAP32[$12>>2] = $4;
 STACKTOP = sp;return;
}
function _bitsf_485($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $1 = -1;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $3 = 0;
 $6 = $2;
 $7 = $6 & 65535;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + 16)|0;
  $3 = $10;
  $11 = $2;
  $12 = $11 >>> 16;
  $2 = $12;
 }
 $13 = $2;
 $14 = $13 & 255;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $3;
  $17 = (($16) + 8)|0;
  $3 = $17;
  $18 = $2;
  $19 = $18 >>> 8;
  $2 = $19;
 }
 $20 = $2;
 $21 = $20 & 15;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $3;
  $24 = (($23) + 4)|0;
  $3 = $24;
  $25 = $2;
  $26 = $25 >>> 4;
  $2 = $26;
 }
 $27 = $2;
 $28 = $27 & 3;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = $3;
  $31 = (($30) + 2)|0;
  $3 = $31;
  $32 = $2;
  $33 = $32 >>> 2;
  $2 = $33;
 }
 $34 = $2;
 $35 = $34 & 1;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $3;
  $38 = (($37) + 1)|0;
  $3 = $38;
 }
 $39 = $3;
 $1 = $39;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _bitsr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $1 = -1;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $3 = 0;
 $6 = $2;
 $7 = $6 & -65536;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + 16)|0;
  $3 = $10;
  $11 = $2;
  $12 = $11 >>> 16;
  $2 = $12;
 }
 $13 = $2;
 $14 = $13 & 65280;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $3;
  $17 = (($16) + 8)|0;
  $3 = $17;
  $18 = $2;
  $19 = $18 >>> 8;
  $2 = $19;
 }
 $20 = $2;
 $21 = $20 & 240;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $3;
  $24 = (($23) + 4)|0;
  $3 = $24;
  $25 = $2;
  $26 = $25 >>> 4;
  $2 = $26;
 }
 $27 = $2;
 $28 = $27 & 12;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $3;
  $31 = (($30) + 2)|0;
  $3 = $31;
  $32 = $2;
  $33 = $32 >>> 2;
  $2 = $33;
 }
 $34 = $2;
 $35 = $34 & 2;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $3;
  $38 = (($37) + 1)|0;
  $3 = $38;
 }
 $39 = $3;
 $1 = $39;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _bitcnt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >>> 1;
 $4 = $3 & 1431655765;
 $5 = $1;
 $6 = (($5) - ($4))|0;
 $1 = $6;
 $7 = $1;
 $8 = $7 >>> 2;
 $9 = $8 & 858993459;
 $10 = $1;
 $11 = $10 & 858993459;
 $12 = (($9) + ($11))|0;
 $1 = $12;
 $13 = $1;
 $14 = $13 >>> 4;
 $15 = $1;
 $16 = (($14) + ($15))|0;
 $17 = $16 & 252645135;
 $1 = $17;
 $18 = $1;
 $19 = $18 >>> 8;
 $20 = $1;
 $21 = $20 >>> 16;
 $22 = (($19) + ($21))|0;
 $23 = $1;
 $24 = (($23) + ($22))|0;
 $1 = $24;
 $25 = $1;
 $26 = $25 & 63;
 STACKTOP = sp;return ($26|0);
}
function _ccAddUnit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = (_ccOpen($13,$14,$15,$16)|0);
 $18 = ($17|0)!=(0);
 $19 = $5;
 if ($18) {
  $20 = HEAP32[$19>>2]|0;
  $21 = $6;
  HEAP32[$vararg_buffer>>2] = $21;
  _printLog($20,-1,0,0,0,26482,$vararg_buffer);
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $22 = ((($19)) + 4148|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $10 = 0;
  $11 = 0;
  while(1) {
   $26 = $5;
   $27 = (_nextTok($26,0,0)|0);
   $9 = $27;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    break;
   }
   $29 = $11;
   $30 = ($29|0)!=(0|0);
   $31 = $9;
   if ($30) {
    $32 = $11;
    $33 = ((($32)) + 8|0);
    HEAP32[$33>>2] = $31;
   } else {
    $10 = $31;
   }
   $34 = $9;
   $11 = $34;
  }
  $35 = $10;
  $36 = $5;
  $37 = ((($36)) + 4148|0);
  $38 = ((($37)) + 4|0);
  HEAP32[$38>>2] = $35;
 }
 $39 = $5;
 $40 = (_statement_list($39)|0);
 $12 = $40;
 $41 = $12;
 $42 = ($41|0)!=(0|0);
 $43 = $5;
 if ($42) {
  $44 = $12;
  $45 = (_expand2Statement($43,$44,1)|0);
  $12 = $45;
  $46 = $5;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $5;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(42);
   if ($54) {
    $55 = $5;
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $12;
    _addTail($57,$58);
   }
  }
 } else {
  $59 = (_newNode($43,42)|0);
  $12 = $59;
 }
 $60 = $5;
 $61 = (_ccClose($60)|0);
 $62 = ($61|0)!=(0);
 if ($62) {
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 } else {
  $63 = $12;
  $4 = $63;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _statement_list($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $3 = 0;
 $4 = 0;
 while(1) {
  $6 = $1;
  $7 = (_peekTok($6,0)|0);
  $2 = $7;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 12;
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $cond = ($10|0)==(57);
  if ($cond) {
   $2 = 0;
  }
  $11 = $2;
  $12 = ($11|0)==(0|0);
  if ($12) {
   label = 12;
   break;
  }
  $13 = $1;
  $14 = (_qualifier($13)|0);
  $5 = $14;
  $15 = $1;
  $16 = $5;
  $17 = (_statement($15,$16)|0);
  $2 = $17;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $4;
   $20 = ($19|0)!=(0|0);
   $21 = $2;
   if ($20) {
    $22 = $4;
    $23 = ((($22)) + 8|0);
    HEAP32[$23>>2] = $21;
   } else {
    $3 = $21;
   }
   $24 = $2;
   $4 = $24;
  }
 }
 if ((label|0) == 12) {
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _expand2Statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 42 : 52;
 $11 = (_newNode($7,$10)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $32 = $6;
  STACKTOP = sp;return ($32|0);
 }
 $14 = $3;
 $15 = ((($14)) + 5200|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $6;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $4;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $6;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = $21;
 $24 = $4;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $6;
 $28 = ((($27)) + 16|0);
 HEAP32[$28>>2] = $26;
 $29 = $4;
 $30 = $6;
 $31 = ((($30)) + 24|0);
 HEAP32[$31>>2] = $29;
 $32 = $6;
 STACKTOP = sp;return ($32|0);
}
function _addTail($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 22031;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 20;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 22044;
  _printFmt($6,0,21988,$vararg_buffer);
  __abort_556();
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(42);
 if ($9) {
  $10 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer3>>2] = 22031;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 21;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 22044;
  _printFmt($10,0,22052,$vararg_buffer3);
  __abort_556();
 }
 $11 = $2;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 $16 = $3;
 $17 = $2;
 $18 = ((($17)) + 24|0);
 if ($15) {
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = $16;
  $22 = $3;
  $23 = $2;
  $24 = ((($23)) + 24|0);
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $22;
  STACKTOP = sp;return;
 } else {
  HEAP32[$18>>2] = $16;
  $22 = $3;
  $23 = $2;
  $24 = ((($23)) + 24|0);
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __abort_556() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _qualifier($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 0;
 L1: while(1) {
  $5 = $2;
  $6 = (_peekTok($5,0)|0);
  $4 = $6;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 15;
   break;
  }
  $8 = $4;
  $9 = HEAP32[$8>>2]|0;
  switch ($9|0) {
  case 61:  {
   $11 = $2;
   (_skipTok($11,61,1)|0);
   $12 = $3;
   $13 = $12 & 128;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $2;
    $16 = HEAP32[$15>>2]|0;
    $17 = $4;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $4;
    $21 = ((($20)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $4;
    HEAP32[$vararg_buffer>>2] = $23;
    _printLog($16,-1,$19,$22,0,23657,$vararg_buffer);
   }
   $24 = $3;
   $25 = $24 | 128;
   $3 = $25;
   break;
  }
  case 62:  {
   $26 = $2;
   (_skipTok($26,62,1)|0);
   $27 = $3;
   $28 = $27 & 64;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $2;
    $31 = HEAP32[$30>>2]|0;
    $32 = $4;
    $33 = ((($32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $4;
    $36 = ((($35)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $4;
    HEAP32[$vararg_buffer1>>2] = $38;
    _printLog($31,-1,$34,$37,0,23657,$vararg_buffer1);
   }
   $39 = $3;
   $40 = $39 | 64;
   $3 = $40;
   break;
  }
  case 63:  {
   $41 = $2;
   (_skipTok($41,63,1)|0);
   $42 = $3;
   $43 = $42 & 256;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $2;
    $46 = HEAP32[$45>>2]|0;
    $47 = $4;
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $4;
    $51 = ((($50)) + 16|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $4;
    HEAP32[$vararg_buffer4>>2] = $53;
    _printLog($46,-1,$49,$52,0,23657,$vararg_buffer4);
   }
   $54 = $3;
   $55 = $54 | 256;
   $3 = $55;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $10 = $3;
  $1 = $10;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 15) {
  $56 = $3;
  $1 = $56;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = ((($14)) + 4132|0);
 $16 = HEAP32[$15>>2]|0;
 $4 = $16;
 $17 = $2;
 $18 = ((($17)) + 4136|0);
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $6 = 1;
 $7 = 0;
 $8 = 0;
 while(1) {
  $20 = $2;
  $21 = (_peekTok($20,0)|0);
  $8 = $21;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $8;
  $24 = HEAP32[$23>>2]|0;
  switch ($24|0) {
  case 0: case 57: case 56: case 54:  {
   $31 = $6;
   $32 = ($31|0)==(1);
   if ($32) {
    $33 = $2;
    $34 = HEAP32[$33>>2]|0;
    $35 = $8;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $8;
    $39 = ((($38)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $8;
    HEAP32[$vararg_buffer>>2] = $41;
    _printLog($34,-1,$37,$40,0,22105,$vararg_buffer);
    $6 = 0;
   }
   $42 = $2;
   (_skipTok($42,0,0)|0);
   break;
  }
  default: {
   $25 = $8;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $4 = $27;
   $28 = $8;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $5 = $30;
   $8 = 0;
  }
  }
  $43 = $8;
  $44 = ($43|0)==(0|0);
  if ($44) {
   break;
  }
 }
 $45 = $2;
 $46 = (_nextTok($45,52,0)|0);
 $8 = $46;
 $47 = ($46|0)!=(0|0);
 $48 = $2;
 do {
  if ($47) {
   $49 = HEAP32[$48>>2]|0;
   $50 = $8;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $8;
   $54 = ((($53)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   _printLog($49,8,$52,$55,0,22128,$vararg_buffer2);
   $56 = $2;
   $57 = $8;
   _recycle($56,$57);
  } else {
   $58 = (_nextTok($48,42,0)|0);
   $8 = $58;
   $59 = ($58|0)!=(0|0);
   $60 = $2;
   if ($59) {
    $61 = (_statement_list($60)|0);
    $62 = $8;
    $63 = ((($62)) + 24|0);
    HEAP32[$63>>2] = $61;
    $64 = $2;
    (_skipTok($64,57,1)|0);
    $65 = $2;
    $66 = ((($65)) + 5200|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $8;
    $69 = ((($68)) + 4|0);
    HEAP32[$69>>2] = $67;
    $70 = $3;
    $71 = $70 & 256;
    $72 = ($71|0)!=(0);
    if ($72) {
     $73 = $8;
     HEAP32[$73>>2] = 43;
     $74 = $3;
     $75 = $74 & -257;
     $3 = $75;
    }
    $76 = $8;
    $77 = ((($76)) + 24|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(0|0);
    if (!($79)) {
     break;
    }
    $80 = $2;
    $81 = $8;
    _recycle($80,$81);
    $8 = 0;
    break;
   }
   $82 = (_peekTok($60,44)|0);
   $83 = ($82|0)!=(0|0);
   $84 = $2;
   if ($83) {
    $85 = $3;
    $86 = (_statement_if($84,$85)|0);
    $8 = $86;
    $87 = $8;
    $88 = ($87|0)!=(0|0);
    if (!($88)) {
     break;
    }
    $89 = $2;
    $90 = ((($89)) + 5200|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $8;
    $93 = ((($92)) + 4|0);
    HEAP32[$93>>2] = $91;
    $94 = $8;
    $95 = ((($94)) + 24|0);
    $96 = HEAP32[$95>>2]|0;
    $9 = $96;
    $97 = $9;
    $98 = ($97|0)!=(0|0);
    do {
     if ($98) {
      $99 = $9;
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)!=(42);
      if ($101) {
       $102 = $2;
       $103 = $9;
       $104 = (_expand2Statement($102,$103,1)|0);
       $105 = $8;
       $106 = ((($105)) + 24|0);
       HEAP32[$106>>2] = $104;
       $107 = $3;
       $108 = $107 & 64;
       $109 = ($108|0)!=(0);
       $110 = $2;
       $111 = HEAP32[$110>>2]|0;
       $112 = $9;
       $113 = ((($112)) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = $9;
       $116 = ((($115)) + 16|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $9;
       if ($109) {
        HEAP32[$vararg_buffer4>>2] = $118;
        _printLog($111,-1,$114,$117,0,22148,$vararg_buffer4);
        break;
       } else {
        HEAP32[$vararg_buffer7>>2] = $118;
        _printLog($111,8,$114,$117,0,22148,$vararg_buffer7);
        break;
       }
      }
     }
    } while(0);
    $119 = $8;
    $120 = ((($119)) + 24|0);
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $10 = $122;
    $123 = $10;
    $124 = ($123|0)!=(0|0);
    do {
     if ($124) {
      $125 = $10;
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)!=(42);
      if ($127) {
       $128 = $2;
       $129 = $10;
       $130 = (_expand2Statement($128,$129,1)|0);
       $131 = $8;
       $132 = ((($131)) + 24|0);
       $133 = ((($132)) + 4|0);
       HEAP32[$133>>2] = $130;
       $134 = $3;
       $135 = $134 & 64;
       $136 = ($135|0)!=(0);
       $137 = $2;
       $138 = HEAP32[$137>>2]|0;
       $139 = $10;
       $140 = ((($139)) + 12|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = $10;
       $143 = ((($142)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = $10;
       if ($136) {
        HEAP32[$vararg_buffer10>>2] = $145;
        _printLog($138,-1,$141,$144,0,22148,$vararg_buffer10);
        break;
       } else {
        HEAP32[$vararg_buffer13>>2] = $145;
        _printLog($138,8,$141,$144,0,22148,$vararg_buffer13);
        break;
       }
      }
     }
    } while(0);
    $146 = $3;
    $147 = $146 & 64;
    $148 = ($147|0)!=(0);
    if (!($148)) {
     break;
    }
    $149 = $8;
    HEAP32[$149>>2] = 45;
    $150 = $3;
    $151 = $150 & -65;
    $3 = $151;
    break;
   }
   $152 = (_peekTok($84,46)|0);
   $153 = ($152|0)!=(0|0);
   $154 = $2;
   if ($153) {
    $155 = $3;
    $156 = (_statement_for($154,$155)|0);
    $8 = $156;
    $157 = $8;
    $158 = ($157|0)!=(0|0);
    if (!($158)) {
     break;
    }
    $159 = $2;
    $160 = ((($159)) + 5200|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $8;
    $163 = ((($162)) + 4|0);
    HEAP32[$163>>2] = $161;
    $164 = $3;
    $165 = $164 & 64;
    $166 = ($165|0)!=(0);
    if ($166) {
     $167 = $8;
     HEAP32[$167>>2] = 48;
     $168 = $3;
     $169 = $168 & -65;
     $3 = $169;
     break;
    }
    $170 = $3;
    $171 = $170 & 256;
    $172 = ($171|0)!=(0);
    if (!($172)) {
     break;
    }
    $173 = $8;
    HEAP32[$173>>2] = 47;
    $174 = $3;
    $175 = $174 & -257;
    $3 = $175;
    break;
   }
   $176 = (_nextTok($154,50,0)|0);
   $8 = $176;
   $177 = ($176|0)!=(0|0);
   $178 = $2;
   if ($177) {
    (_skipTok($178,52,1)|0);
    $179 = $2;
    $180 = ((($179)) + 5200|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $8;
    $183 = ((($182)) + 4|0);
    HEAP32[$183>>2] = $181;
    break;
   }
   $184 = (_nextTok($178,49,0)|0);
   $8 = $184;
   $185 = ($184|0)!=(0|0);
   $186 = $2;
   if ($185) {
    (_skipTok($186,52,1)|0);
    $187 = $2;
    $188 = ((($187)) + 5200|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $8;
    $191 = ((($190)) + 4|0);
    HEAP32[$191>>2] = $189;
    break;
   }
   $192 = (_nextTok($186,51,0)|0);
   $8 = $192;
   $193 = ($192|0)!=(0|0);
   $194 = $2;
   if ($193) {
    $195 = ((($194)) + 8|0);
    $196 = HEAP32[$195>>2]|0;
    $11 = $196;
    $197 = $2;
    $198 = (_skipTok($197,52,0)|0);
    $199 = ($198|0)!=(0);
    if (!($199)) {
     $200 = $2;
     $201 = (_initializer($200)|0);
     $12 = $201;
     $202 = $12;
     $203 = ($202|0)!=(0|0);
     $204 = $11;
     $205 = ($204|0)!=(0|0);
     $or$cond = $203 & $205;
     if ($or$cond) {
      $206 = $11;
      $207 = (_isFunction_561($206)|0);
      $208 = ($207|0)!=(0);
      if ($208) {
       $209 = $11;
       $210 = ((($209)) + 40|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = HEAP32[$211>>2]|0;
       $213 = (_strcmp($212,22191)|0);
       $214 = ($213|0)!=(0);
       if ($214) {
        $215 = HEAP32[3314]|0;
        HEAP32[$vararg_buffer16>>2] = 22031;
        $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
        HEAP32[$vararg_ptr19>>2] = 1667;
        $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
        HEAP32[$vararg_ptr20>>2] = 22276;
        _printFmt($215,0,22199,$vararg_buffer16);
        __abort_556();
       }
       $216 = $12;
       $217 = HEAP32[$216>>2]|0;
       $218 = ($217|0)==(42);
       if ($218) {
        $219 = $2;
        $220 = $11;
        $221 = ((($220)) + 40|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $12;
        $224 = (_expandInitializer($219,$222,$223)|0);
        $12 = $224;
        $225 = $2;
        $226 = ((($225)) + 5200|0);
        $227 = HEAP32[$226>>2]|0;
        $228 = $12;
        $229 = ((($228)) + 4|0);
        HEAP32[$229>>2] = $227;
       }
       $230 = $2;
       $231 = $2;
       $232 = $11;
       $233 = ((($232)) + 40|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = (_lnkNode($231,$234)|0);
       $236 = $12;
       $237 = (_opNode($230,30,$235,$236)|0);
       $238 = $8;
       $239 = ((($238)) + 24|0);
       $240 = ((($239)) + 4|0);
       HEAP32[$240>>2] = $237;
       $241 = $12;
       $242 = ((($241)) + 4|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = $8;
       $245 = ((($244)) + 24|0);
       $246 = ((($245)) + 4|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ((($247)) + 4|0);
       HEAP32[$248>>2] = $243;
      } else {
       label = 50;
      }
     } else {
      label = 50;
     }
     if ((label|0) == 50) {
      $249 = $2;
      $250 = HEAP32[$249>>2]|0;
      $251 = $8;
      $252 = ((($251)) + 12|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $8;
      $255 = ((($254)) + 16|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $8;
      HEAP32[$vararg_buffer21>>2] = $257;
      _printLog($250,-1,$253,$256,0,22105,$vararg_buffer21);
     }
     $258 = $2;
     (_skipTok($258,52,1)|0);
    }
    $259 = $11;
    $260 = $8;
    $261 = ((($260)) + 24|0);
    HEAP32[$261>>2] = $259;
    $262 = $2;
    $263 = ((($262)) + 5200|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $8;
    $266 = ((($265)) + 4|0);
    HEAP32[$266>>2] = $264;
    $267 = $8;
    $268 = ((($267)) + 24|0);
    $269 = ((($268)) + 4|0);
    $270 = HEAP32[$269>>2]|0;
    $7 = $270;
    break;
   }
   $271 = (_peekTok($194,64)|0);
   $272 = ($271|0)!=(0|0);
   $273 = $2;
   if ($272) {
    $274 = $3;
    $275 = (_declare_alias($273,$274)|0);
    $8 = $275;
    $276 = $8;
    $277 = ($276|0)!=(0|0);
    if (!($277)) {
     break;
    }
    $278 = $2;
    $279 = ((($278)) + 5260|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $8;
    $282 = ((($281)) + 4|0);
    HEAP32[$282>>2] = $280;
    break;
   }
   $283 = (_peekTok($273,65)|0);
   $284 = ($283|0)!=(0|0);
   $285 = $2;
   if ($284) {
    $286 = $3;
    $287 = (_declare_record($285,$286)|0);
    $8 = $287;
    $288 = $8;
    $289 = ($288|0)!=(0|0);
    if ($289) {
     $290 = $2;
     $291 = ((($290)) + 5260|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = $8;
     $294 = ((($293)) + 4|0);
     HEAP32[$294>>2] = $292;
    }
    $295 = $3;
    $296 = $295 & -193;
    $3 = $296;
    break;
   }
   $297 = (_peekTok($285,66)|0);
   $298 = ($297|0)!=(0|0);
   $299 = $2;
   if ($298) {
    $300 = (_declare_enum($299)|0);
    $8 = $300;
    $301 = $8;
    $302 = ($301|0)!=(0|0);
    if (!($302)) {
     break;
    }
    $303 = $2;
    $304 = ((($303)) + 5260|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $8;
    $307 = ((($306)) + 4|0);
    HEAP32[$307>>2] = $305;
    break;
   }
   $308 = (_expression($299,0)|0);
   $8 = $308;
   $309 = ($308|0)!=(0|0);
   if ($309) {
    $310 = $2;
    $311 = $8;
    $312 = (_typeCheck($310,0,$311,1)|0);
    $13 = $312;
    $313 = $13;
    $314 = ($313|0)==(0|0);
    L89: do {
     if ($314) {
      $315 = $2;
      $316 = HEAP32[$315>>2]|0;
      $317 = $8;
      $318 = ((($317)) + 12|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = $8;
      $321 = ((($320)) + 16|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = $8;
      HEAP32[$vararg_buffer24>>2] = $323;
      _printLog($316,-1,$319,$322,0,25603,$vararg_buffer24);
      $324 = $2;
      $325 = ((($324)) + 5200|0);
      $326 = HEAP32[$325>>2]|0;
      $13 = $326;
     } else {
      $327 = $8;
      $328 = (_isTypeExpr($327)|0);
      $329 = ($328|0)!=(0);
      if ($329) {
       $330 = $2;
       $331 = $8;
       (_backTok($330,$331)|0);
       $332 = $2;
       $333 = $3;
       $334 = (_declaration($332,$333,0)|0);
       $8 = $334;
       $335 = $8;
       $336 = ($335|0)!=(0|0);
       if (!($336)) {
        break;
       }
       $337 = $8;
       $338 = ((($337)) + 4|0);
       $339 = HEAP32[$338>>2]|0;
       $13 = $339;
       $340 = $8;
       $341 = ((($340)) + 24|0);
       $342 = ((($341)) + 8|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ((($343)) + 56|0);
       $345 = HEAP32[$344>>2]|0;
       $7 = $345;
       $346 = $8;
       $347 = ((($346)) + 24|0);
       $348 = ((($347)) + 8|0);
       $349 = HEAP32[$348>>2]|0;
       $350 = ((($349)) + 44|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = $351 & 192;
       $353 = $352 ^ -1;
       $354 = $3;
       $355 = $354 & $353;
       $3 = $355;
       break;
      }
      $356 = $8;
      $7 = $356;
      $357 = $8;
      $358 = HEAP32[$357>>2]|0;
      switch ($358|0) {
      case 30: case 3:  {
       $368 = $2;
       $369 = $8;
       $370 = (_expand2Statement($368,$369,0)|0);
       $8 = $370;
       $371 = $2;
       $372 = ((($371)) + 5200|0);
       $373 = HEAP32[$372>>2]|0;
       $13 = $373;
       break L89;
       break;
      }
      default: {
       $359 = $2;
       $360 = HEAP32[$359>>2]|0;
       $361 = $8;
       $362 = ((($361)) + 12|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = $8;
       $365 = ((($364)) + 16|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $8;
       HEAP32[$vararg_buffer27>>2] = $367;
       _printLog($360,1,$363,$366,0,22286,$vararg_buffer27);
       break L89;
      }
      }
     }
    } while(0);
    $374 = $2;
    (_skipTok($374,52,1)|0);
    $375 = $13;
    $376 = $8;
    $377 = ((($376)) + 4|0);
    HEAP32[$377>>2] = $375;
   }
  }
 } while(0);
 $378 = $8;
 $379 = ($378|0)!=(0|0);
 if ($379) {
  $380 = $2;
  $381 = ((($380)) + 8|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = ($382|0)!=(0|0);
  if ($383) {
   $384 = $2;
   $385 = ((($384)) + 8|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = (_isFunction_561($386)|0);
   $388 = ($387|0)!=(0);
   if (!($388)) {
    $389 = $2;
    $390 = ((($389)) + 8|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = (_isTypename_566($391)|0);
    $393 = ($392|0)!=(0);
    if ($393) {
     $394 = $8;
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395>>>0)>(42);
     if ($396) {
      $397 = $8;
      $398 = HEAP32[$397>>2]|0;
      $399 = ($398>>>0)<=(52);
      if ($399) {
       $400 = $8;
       $401 = HEAP32[$400>>2]|0;
       $402 = ($401|0)!=(45);
       if ($402) {
        $403 = $2;
        $404 = HEAP32[$403>>2]|0;
        $405 = $8;
        $406 = ((($405)) + 12|0);
        $407 = HEAP32[$406>>2]|0;
        $408 = $8;
        $409 = ((($408)) + 16|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = $8;
        $412 = $2;
        $413 = ((($412)) + 8|0);
        $414 = HEAP32[$413>>2]|0;
        HEAP32[$vararg_buffer30>>2] = $411;
        $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
        HEAP32[$vararg_ptr33>>2] = $414;
        _printLog($404,-1,$407,$410,0,22316,$vararg_buffer30);
       }
      }
     }
    }
   }
  }
 }
 $415 = $7;
 $416 = ($415|0)!=(0|0);
 if ($416) {
  $417 = $2;
  $418 = $7;
  $419 = (_typeCheck($417,0,$418,1)|0);
  $420 = $7;
  $421 = ((($420)) + 4|0);
  HEAP32[$421>>2] = $419;
  $422 = $7;
  $423 = ((($422)) + 4|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = ($424|0)==(0|0);
  if ($425) {
   $426 = $2;
   $427 = HEAP32[$426>>2]|0;
   $428 = $8;
   $429 = ((($428)) + 12|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = $8;
   $432 = ((($431)) + 16|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = $7;
   HEAP32[$vararg_buffer34>>2] = $434;
   _printLog($427,-1,$430,$433,0,25603,$vararg_buffer34);
  }
 }
 $435 = $3;
 $436 = ($435|0)!=(0);
 if (!($436)) {
  $450 = $8;
  STACKTOP = sp;return ($450|0);
 }
 $437 = $8;
 $438 = ($437|0)!=(0|0);
 if ($438) {
  $439 = $8;
  $440 = ((($439)) + 12|0);
  $441 = HEAP32[$440>>2]|0;
  $4 = $441;
  $442 = $8;
  $443 = ((($442)) + 16|0);
  $444 = HEAP32[$443>>2]|0;
  $5 = $444;
 }
 $445 = $2;
 $446 = HEAP32[$445>>2]|0;
 $447 = $4;
 $448 = $5;
 $449 = $3;
 HEAP32[$vararg_buffer37>>2] = $449;
 _printLog($446,-1,$447,$448,0,22354,$vararg_buffer37);
 $450 = $8;
 STACKTOP = sp;return ($450|0);
}
function _statement_if($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 40|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_nextTok($10,44,1)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $2 = 0;
  $72 = $2;
  STACKTOP = sp;return ($72|0);
 }
 $14 = $3;
 (_skipTok($14,53,1)|0);
 $15 = $3;
 $16 = (_expression($15,0)|0);
 $6 = $16;
 $17 = $6;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $3;
  $20 = $6;
  $21 = (_typeCheck($19,0,$20,1)|0);
  $22 = $6;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $6;
  $25 = $5;
  $26 = ((($25)) + 24|0);
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $24;
 }
 $28 = $3;
 (_skipTok($28,54,1)|0);
 $7 = 1;
 $8 = 1;
 $29 = $4;
 $30 = $29 & 64;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $3;
   $33 = $6;
   $34 = (_eval($32,$9,$33)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    $38 = $3;
    $39 = HEAP32[$38>>2]|0;
    $40 = $6;
    $41 = ((($40)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $6;
    $44 = ((($43)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $6;
    HEAP32[$vararg_buffer>>2] = $46;
    _printLog($39,-1,$42,$45,0,23617,$vararg_buffer);
    break;
   }
   $36 = (_bolValue($9)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $7 = 0;
    break;
   } else {
    $8 = 0;
    break;
   }
  }
 } while(0);
 $47 = $7;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $3;
  _enter($49,0);
 }
 $50 = $3;
 $51 = (_statement($50,0)|0);
 $52 = $5;
 $53 = ((($52)) + 24|0);
 HEAP32[$53>>2] = $51;
 $54 = $3;
 $55 = (_skipTok($54,60,0)|0);
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $7;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $3;
   (_leave($59,0,0,0,0)|0);
   $7 = 0;
  }
  $60 = $8;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $3;
   _enter($62,0);
   $7 = 1;
  }
  $63 = $3;
  $64 = (_statement($63,0)|0);
  $65 = $5;
  $66 = ((($65)) + 24|0);
  $67 = ((($66)) + 4|0);
  HEAP32[$67>>2] = $64;
 }
 $68 = $7;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $3;
  (_leave($70,0,0,0,0)|0);
 }
 $71 = $5;
 $2 = $71;
 $72 = $2;
 STACKTOP = sp;return ($72|0);
}
function _statement_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_nextTok($10,46,1)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $2 = 0;
  $113 = $2;
  STACKTOP = sp;return ($113|0);
 }
 $14 = $3;
 _enter($14,0);
 $15 = $3;
 (_skipTok($15,53,1)|0);
 $16 = $3;
 $17 = (_peekTok($16,52)|0);
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $21 = 0;
 } else {
  $19 = $3;
  $20 = (_expression($19,0)|0);
  $21 = $20;
 }
 $6 = $21;
 $22 = $6;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $3;
  $25 = $6;
  $26 = (_typeCheck($24,0,$25,1)|0);
  $27 = $6;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = $26;
  $29 = $6;
  $30 = (_isTypeExpr($29)|0);
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $3;
   $33 = $6;
   (_backTok($32,$33)|0);
   $34 = $3;
   $35 = $4;
   $36 = (_declaration($34,$35,0)|0);
   $6 = $36;
   $37 = $6;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $6;
    $40 = ((($39)) + 24|0);
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 56|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = $6;
     $47 = ((($46)) + 24|0);
     $48 = ((($47)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($49)) + 56|0);
     $51 = HEAP32[$50>>2]|0;
     $7 = $51;
     $52 = $3;
     $53 = $7;
     $54 = (_typeCheck($52,0,$53,1)|0);
     $55 = $7;
     $56 = ((($55)) + 4|0);
     HEAP32[$56>>2] = $54;
    }
   }
  }
  $57 = $6;
  $58 = $5;
  $59 = ((($58)) + 24|0);
  $60 = ((($59)) + 12|0);
  HEAP32[$60>>2] = $57;
 }
 $61 = $3;
 $62 = (_peekTok($61,59)|0);
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 22031;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1479;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 23603;
  _printFmt($64,0,23560,$vararg_buffer);
  __abort_556();
 }
 $65 = $3;
 (_skipTok($65,52,1)|0);
 $66 = $3;
 $67 = (_peekTok($66,52)|0);
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $71 = 0;
 } else {
  $69 = $3;
  $70 = (_expression($69,0)|0);
  $71 = $70;
 }
 $8 = $71;
 $72 = $8;
 $73 = ($72|0)!=(0|0);
 if ($73) {
  $74 = $3;
  $75 = $8;
  $76 = (_typeCheck($74,0,$75,1)|0);
  $77 = $8;
  $78 = ((($77)) + 4|0);
  HEAP32[$78>>2] = $76;
  $79 = $8;
  $80 = $5;
  $81 = ((($80)) + 24|0);
  $82 = ((($81)) + 8|0);
  HEAP32[$82>>2] = $79;
 }
 $83 = $3;
 (_skipTok($83,52,1)|0);
 $84 = $3;
 $85 = (_peekTok($84,54)|0);
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $89 = 0;
 } else {
  $87 = $3;
  $88 = (_expression($87,0)|0);
  $89 = $88;
 }
 $9 = $89;
 $90 = $9;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = $3;
  $93 = $9;
  $94 = (_typeCheck($92,0,$93,1)|0);
  $95 = $9;
  $96 = ((($95)) + 4|0);
  HEAP32[$96>>2] = $94;
  $97 = $9;
  $98 = $5;
  $99 = ((($98)) + 24|0);
  $100 = ((($99)) + 4|0);
  HEAP32[$100>>2] = $97;
 }
 $101 = $3;
 (_skipTok($101,54,1)|0);
 $102 = $3;
 $103 = (_statement($102,0)|0);
 $104 = $5;
 $105 = ((($104)) + 24|0);
 HEAP32[$105>>2] = $103;
 $106 = $3;
 (_leave($106,0,0,0,0)|0);
 $107 = $3;
 $108 = ((($107)) + 5200|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $5;
 $111 = ((($110)) + 4|0);
 HEAP32[$111>>2] = $109;
 $112 = $5;
 $2 = $112;
 $113 = $2;
 STACKTOP = sp;return ($113|0);
}
function _initializer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = $0;
 $11 = $2;
 $12 = (_peekTok($11,42)|0);
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $16 = 0;
 } else {
  $14 = $2;
  $15 = (_expression($14,1)|0);
  $16 = $15;
 }
 $3 = $16;
 $4 = 0;
 $17 = $3;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $2;
  $20 = $3;
  $21 = (_typeCheck($19,0,$20,0)|0);
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $3;
   $24 = (_isTypeExpr($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $3;
    $27 = (_linkOf($26,1)|0);
    $4 = $27;
   }
  }
 }
 $28 = $2;
 $29 = (_skipTok($28,42,0)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $3;
  $1 = $31;
  $110 = $1;
  STACKTOP = sp;return ($110|0);
 }
 $5 = 52;
 $6 = 0;
 $7 = 0;
 while(1) {
  $32 = $2;
  $33 = (_peekTok($32,0)|0);
  $3 = $33;
  $34 = ($33|0)!=(0|0);
  if (!($34)) {
   break;
  }
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  $cond = ($36|0)==(57);
  if ($cond) {
   $3 = 0;
  }
  $37 = $3;
  $38 = ($37|0)==(0|0);
  if ($38) {
   break;
  }
  $39 = $2;
  $40 = (_nextTok($39,2,0)|0);
  $3 = $40;
  $41 = $2;
  $42 = (_nextTok($41,59,0)|0);
  $8 = $42;
  $43 = $3;
  $44 = ($43|0)!=(0|0);
  $45 = $8;
  $46 = ($45|0)!=(0|0);
  $or$cond = $44 & $46;
  if ($or$cond) {
   $47 = $2;
   $48 = (_initializer($47)|0);
   $9 = $48;
   $49 = $8;
   HEAP32[$49>>2] = 29;
   $50 = $3;
   $51 = $8;
   $52 = ((($51)) + 24|0);
   $53 = ((($52)) + 4|0);
   HEAP32[$53>>2] = $50;
   $54 = $9;
   $55 = $8;
   $56 = ((($55)) + 24|0);
   HEAP32[$56>>2] = $54;
   $57 = $8;
   $3 = $57;
  } else {
   $58 = $3;
   $59 = ($58|0)!=(0|0);
   if ($59) {
    $60 = $2;
    $61 = $3;
    (_backTok($60,$61)|0);
   }
   $62 = $2;
   $63 = (_expression($62,1)|0);
   $3 = $63;
  }
  $64 = $3;
  $65 = ($64|0)==(0|0);
  if ($65) {
   break;
  }
  $66 = $7;
  $67 = ($66|0)!=(0|0);
  $68 = $3;
  if ($67) {
   $69 = $7;
   $70 = ((($69)) + 8|0);
   HEAP32[$70>>2] = $68;
  } else {
   $6 = $68;
  }
  $71 = $3;
  $7 = $71;
  $72 = $2;
  $73 = $5;
  $74 = (_skipTok($72,$73,0)|0);
  $75 = ($74|0)!=(0);
  if (!($75)) {
   $76 = $5;
   $77 = ($76|0)==(52);
   if (!($77)) {
    break;
   }
   $78 = $6;
   $79 = $7;
   $80 = ($78|0)==($79|0);
   if (!($80)) {
    label = 28;
    break;
   }
   $81 = $2;
   $82 = (_skipTok($81,41,0)|0);
   $83 = ($82|0)!=(0);
   if (!($83)) {
    label = 28;
    break;
   }
   $5 = 41;
  }
 }
 if ((label|0) == 28) {
  $84 = $2;
  $85 = (_peekTok($84,0)|0);
  $10 = $85;
  $86 = $6;
  $87 = $7;
  $88 = ($86|0)!=($87|0);
  $89 = $10;
  $90 = ($89|0)!=(0|0);
  $or$cond3 = $88 & $90;
  if ($or$cond3) {
   $91 = $2;
   $92 = HEAP32[$91>>2]|0;
   $93 = $10;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $10;
   $97 = ((($96)) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $10;
   HEAP32[$vararg_buffer>>2] = $99;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 52;
   _printLog($92,1,$95,$98,0,23516,$vararg_buffer);
  }
 }
 $100 = $2;
 (_skipTok($100,57,1)|0);
 $101 = $2;
 $102 = (_newNode($101,42)|0);
 $3 = $102;
 $103 = $6;
 $104 = $3;
 $105 = ((($104)) + 24|0);
 HEAP32[$105>>2] = $103;
 $106 = $4;
 $107 = $3;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = $106;
 $109 = $3;
 $1 = $109;
 $110 = $1;
 STACKTOP = sp;return ($110|0);
}
function _isFunction_561($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _expandInitializer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(42);
 if ($9) {
  $10 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 22031;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 413;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 23125;
  _printFmt($10,0,23065,$vararg_buffer);
  __abort_556();
 }
 $11 = $5;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer3>>2] = 22031;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 414;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 23125;
  _printFmt($16,0,23143,$vararg_buffer3);
  __abort_556();
 }
 $17 = $3;
 $18 = $4;
 $19 = (_lnkNode($17,$18)|0);
 $6 = $19;
 $20 = $4;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $6;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $6;
 $29 = ((($28)) + 16|0);
 HEAP32[$29>>2] = $27;
 $30 = $3;
 $31 = $6;
 $32 = $5;
 $33 = $5;
 $34 = (_expandInitializerObj($30,$31,$32,$33)|0);
 STACKTOP = sp;return ($34|0);
}
function _declare_alias($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $7 = 0;
 $9 = 0;
 $19 = $3;
 $20 = (_skipTok($19,64,1)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $2 = 0;
  $268 = $2;
  STACKTOP = sp;return ($268|0);
 }
 $22 = $3;
 $23 = (_nextTok($22,1,0)|0);
 $8 = $23;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $10 = 0;
  $11 = 0;
  $12 = 0;
  $25 = $3;
  $26 = (_skipTok($25,58,0)|0);
  $13 = $26;
  $27 = $3;
  (_skipTok($27,52,1)|0);
  $28 = $3;
  $29 = ((($28)) + 4148|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $10 = $31;
  $32 = $3;
  $33 = $8;
  $34 = (_ccInline($32,$33)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $13;
   $37 = ($36|0)!=(0);
   $38 = $3;
   $39 = HEAP32[$38>>2]|0;
   $40 = $8;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $8;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $8;
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   if ($37) {
    HEAP32[$vararg_buffer>>2] = $48;
    _printLog($39,13,$42,$45,0,26482,$vararg_buffer);
   } else {
    HEAP32[$vararg_buffer4>>2] = $48;
    _printLog($39,-1,$42,$45,0,26482,$vararg_buffer4);
   }
   $2 = 0;
   $268 = $2;
   STACKTOP = sp;return ($268|0);
  }
  while(1) {
   $49 = $3;
   $50 = (_nextTok($49,0,0)|0);
   $8 = $50;
   $51 = ($50|0)!=(0|0);
   $52 = $12;
   $53 = ($52|0)!=(0|0);
   if (!($51)) {
    break;
   }
   $54 = $8;
   if ($53) {
    $55 = $12;
    $56 = ((($55)) + 8|0);
    HEAP32[$56>>2] = $54;
   } else {
    $11 = $54;
   }
   $57 = $8;
   $12 = $57;
  }
  if ($53) {
   $58 = $10;
   $59 = $12;
   $60 = ((($59)) + 8|0);
   HEAP32[$60>>2] = $58;
  }
  $61 = $11;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $11;
   $64 = $3;
   $65 = ((($64)) + 4148|0);
   $66 = ((($65)) + 4|0);
   HEAP32[$66>>2] = $63;
  } else {
   $67 = $10;
   $68 = $3;
   $69 = ((($68)) + 4148|0);
   $70 = ((($69)) + 4|0);
   HEAP32[$70>>2] = $67;
  }
  $2 = 0;
  $268 = $2;
  STACKTOP = sp;return ($268|0);
 }
 $71 = $3;
 $72 = (_nextTok($71,2,1)|0);
 $8 = $72;
 $73 = ($72|0)!=(0|0);
 $74 = $3;
 if (!($73)) {
  (_skipTok($74,52,1)|0);
  $2 = 0;
  $268 = $2;
  STACKTOP = sp;return ($268|0);
 }
 _enter($74,0);
 $75 = $3;
 $76 = (_skipTok($75,53,0)|0);
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $3;
  $79 = $3;
  $80 = ((($79)) + 5200|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $8;
  (_parameters($78,$81,$82)|0);
  $83 = $3;
  (_skipTok($83,54,1)|0);
 }
 $84 = $3;
 (_skipTok($84,30,1)|0);
 $85 = $3;
 $86 = (_initializer($85)|0);
 $9 = $86;
 $87 = $3;
 $88 = (_leave($87,32,4,0,0)|0);
 $7 = $88;
 $89 = $9;
 $90 = ($89|0)==(0|0);
 if ($90) {
  $2 = 0;
  $268 = $2;
  STACKTOP = sp;return ($268|0);
 }
 $91 = $9;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(42);
 $94 = $3;
 if ($93) {
  $95 = $8;
  $96 = (_tagType($94,$95)|0);
  $6 = $96;
  $97 = $6;
  $98 = ($97|0)!=(0|0);
  $99 = $7;
  $100 = ($99|0)!=(0|0);
  $or$cond = $98 & $100;
  if ($or$cond) {
   $101 = $6;
   $102 = $7;
   $103 = ((($102)) + 28|0);
   HEAP32[$103>>2] = $101;
   $104 = $6;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $7;
   $108 = ((($107)) + 16|0);
   HEAP32[$108>>2] = $106;
   $109 = $6;
   $110 = ((($109)) + 56|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $7;
   $113 = ((($112)) + 56|0);
   HEAP32[$113>>2] = $111;
   $114 = $7;
   $115 = ((($114)) + 44|0);
   HEAP32[$115>>2] = 304;
  }
  $116 = $3;
  $117 = $7;
  $118 = $9;
  $119 = (_expandInitializer($116,$117,$118)|0);
  $9 = $119;
  $120 = $9;
  $121 = ((($120)) + 24|0);
  $122 = HEAP32[$121>>2]|0;
  $14 = $122;
  while(1) {
   $123 = $14;
   $124 = ($123|0)!=(0|0);
   if (!($124)) {
    break;
   }
   $125 = $3;
   $126 = $14;
   $127 = (_typeCheck($125,0,$126,0)|0);
   $128 = ($127|0)!=(0|0);
   if (!($128)) {
    $129 = $3;
    $130 = HEAP32[$129>>2]|0;
    $131 = $14;
    $132 = ((($131)) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $14;
    $135 = ((($134)) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $14;
    HEAP32[$vararg_buffer7>>2] = $137;
    _printLog($130,-1,$133,$136,0,25603,$vararg_buffer7);
   }
   $138 = $3;
   $139 = ((($138)) + 5200|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $14;
   $142 = ((($141)) + 4|0);
   HEAP32[$142>>2] = $140;
   $143 = $14;
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $14 = $145;
  }
  $146 = HEAP32[3314]|0;
  $147 = $8;
  $148 = ((($147)) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $8;
  $151 = ((($150)) + 16|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $9;
  HEAP32[$vararg_buffer10>>2] = 22031;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 1132;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 23033;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $149;
  $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
  HEAP32[$vararg_ptr16>>2] = $152;
  $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
  HEAP32[$vararg_ptr17>>2] = $153;
  _printFmt($146,0,22976,$vararg_buffer10);
  __abort_556();
 } else {
  $154 = $9;
  $155 = (_typeCheck($94,0,$154,1)|0);
  $6 = $155;
 }
 $156 = $6;
 $157 = $9;
 $158 = ((($157)) + 4|0);
 HEAP32[$158>>2] = $156;
 $159 = $6;
 $160 = ($159|0)==(0|0);
 if ($160) {
  $161 = $3;
  $162 = HEAP32[$161>>2]|0;
  $163 = $9;
  $164 = ((($163)) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $9;
  $167 = ((($166)) + 16|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $9;
  HEAP32[$vararg_buffer18>>2] = $169;
  _printLog($162,-1,$165,$168,0,25603,$vararg_buffer18);
 }
 $170 = $7;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $15 = 0;
  $172 = $6;
  $173 = ($172|0)!=(0|0);
  if ($173) {
   $174 = $6;
   $175 = $7;
   $176 = ((($175)) + 28|0);
   HEAP32[$176>>2] = $174;
   $177 = $6;
   $178 = ((($177)) + 16|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $7;
   $181 = ((($180)) + 16|0);
   HEAP32[$181>>2] = $179;
   $182 = $6;
   $183 = ((($182)) + 56|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $7;
   $186 = ((($185)) + 56|0);
   HEAP32[$186>>2] = $184;
   $187 = $7;
   $188 = ((($187)) + 44|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189 & -16;
   $191 = $6;
   $192 = (_refCast_571($191)|0);
   $193 = $190 | $192;
   $194 = $7;
   $195 = ((($194)) + 44|0);
   HEAP32[$195>>2] = $193;
  }
  $196 = $7;
  $16 = $196;
  while(1) {
   $197 = $16;
   $198 = ($197|0)!=(0|0);
   if (!($198)) {
    break;
   }
   $17 = 0;
   $199 = $16;
   $200 = ((($199)) + 60|0);
   $201 = HEAP32[$200>>2]|0;
   $18 = $201;
   while(1) {
    $202 = $18;
    $203 = ($202|0)!=(0|0);
    if (!($203)) {
     break;
    }
    $204 = $18;
    $205 = $16;
    $206 = ((($205)) + 64|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = ($204|0)!=($207|0);
    if ($208) {
     $209 = $17;
     $210 = (($209) + 1)|0;
     $17 = $210;
    }
    $211 = $18;
    $212 = ((($211)) + 24|0);
    $213 = ((($212)) + 12|0);
    $214 = HEAP32[$213>>2]|0;
    $18 = $214;
   }
   $215 = $16;
   $216 = ((($215)) + 44|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217 & 256;
   $219 = ($218|0)!=(0);
   if ($219) {
    label = 52;
   } else {
    $220 = $16;
    $221 = (_isInline_596($220)|0);
    $222 = ($221|0)!=(0);
    $223 = $17;
    $224 = ($223|0)<(2);
    $or$cond3 = $222 | $224;
    if ($or$cond3) {
     $225 = $16;
     $226 = ((($225)) + 44|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 & -49;
     $229 = $16;
     $230 = ((($229)) + 44|0);
     HEAP32[$230>>2] = $228;
    } else {
     label = 52;
    }
   }
   if ((label|0) == 52) {
    label = 0;
    $231 = $16;
    $232 = ((($231)) + 16|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (_padOffset_597($233,4)|0);
    $235 = $15;
    $236 = (($235) + ($234))|0;
    $15 = $236;
    $237 = $15;
    $238 = $16;
    $239 = ((($238)) + 20|0);
    HEAP32[$239>>2] = $237;
   }
   $240 = $16;
   $241 = ((($240)) + 24|0);
   $242 = HEAP32[$241>>2]|0;
   $16 = $242;
  }
  $243 = $3;
  $244 = ((($243)) + 5264|0);
  $245 = HEAP32[$244>>2]|0;
  $6 = $245;
 } else {
  $246 = $3;
  $247 = ((($246)) + 5260|0);
  $248 = HEAP32[$247>>2]|0;
  $6 = $248;
 }
 $249 = $3;
 (_skipTok($249,52,1)|0);
 $250 = $3;
 $251 = $4;
 $252 = $251 & 192;
 $253 = $8;
 $254 = $6;
 $255 = $7;
 $256 = (_declare($250,$252,$253,$254,$255)|0);
 $5 = $256;
 $257 = $5;
 $258 = ($257|0)!=(0|0);
 if ($258) {
  $259 = $7;
  $260 = $5;
  $261 = ((($260)) + 40|0);
  HEAP32[$261>>2] = $259;
  $262 = $9;
  $263 = $5;
  $264 = ((($263)) + 56|0);
  HEAP32[$264>>2] = $262;
  $265 = $5;
  $266 = ((($265)) + 16|0);
  HEAP32[$266>>2] = 0;
 }
 $267 = $8;
 $2 = $267;
 $268 = $2;
 STACKTOP = sp;return ($268|0);
}
function _declare_record($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $15 = $3;
 $16 = (_skipTok($15,65,1)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $2 = 0;
  $186 = $2;
  STACKTOP = sp;return ($186|0);
 }
 $18 = $3;
 $19 = (_nextTok($18,2,0)|0);
 $5 = $19;
 $6 = 0;
 $20 = $5;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = $3;
  $23 = (_tagNode($22,22885)|0);
  $5 = $23;
  $6 = 1;
 }
 $7 = 0;
 $8 = 4;
 $24 = $3;
 $25 = ((($24)) + 5260|0);
 $26 = HEAP32[$25>>2]|0;
 $9 = $26;
 $27 = $3;
 $28 = (_skipTok($27,59,0)|0);
 $29 = ($28|0)!=(0);
 L8: do {
  if ($29) {
   $30 = $3;
   $31 = (_expression($30,0)|0);
   $10 = $31;
   $32 = $10;
   $33 = ($32|0)!=(0|0);
   $34 = $3;
   if (!($33)) {
    $122 = HEAP32[$34>>2]|0;
    $123 = $3;
    $124 = ((($123)) + 4132|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $3;
    $127 = ((($126)) + 4136|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $3;
    $130 = (_peekTok($129,0)|0);
    HEAP32[$vararg_buffer13>>2] = $130;
    _printLog($122,-1,$125,$128,0,22817,$vararg_buffer13);
    break;
   }
   $35 = $10;
   $36 = (_typeCheck($34,0,$35,0)|0);
   $37 = ($36|0)!=(0|0);
   if (!($37)) {
    $38 = $3;
    $39 = HEAP32[$38>>2]|0;
    $40 = $10;
    $41 = ((($40)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $10;
    $44 = ((($43)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $10;
    HEAP32[$vararg_buffer>>2] = $46;
    _printLog($39,-1,$42,$45,0,22817,$vararg_buffer);
    $8 = 4;
    break;
   }
   $47 = $10;
   $48 = (_isTypeExpr($47)|0);
   $49 = ($48|0)!=(0);
   $50 = $10;
   if (!($49)) {
    $80 = HEAP32[$50>>2]|0;
    $81 = ($80|0)==(1);
    if (!($81)) {
     $113 = $3;
     $114 = HEAP32[$113>>2]|0;
     $115 = $10;
     $116 = ((($115)) + 12|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $10;
     $119 = ((($118)) + 16|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $10;
     HEAP32[$vararg_buffer10>>2] = $121;
     _printLog($114,-1,$117,$120,0,22817,$vararg_buffer10);
     break;
    }
    $82 = $10;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (_refCast_571($84)|0);
    $$off = (($85) + -3)|0;
    $switch = ($$off>>>0)<(4);
    if ($switch) {
     $95 = $10;
     $96 = ((($95)) + 24|0);
     $97 = $96;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (($97) + 4)|0;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $8 = $99;
    } else {
     $86 = $3;
     $87 = HEAP32[$86>>2]|0;
     $88 = $10;
     $89 = ((($88)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $10;
     $92 = ((($91)) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $10;
     HEAP32[$vararg_buffer4>>2] = $94;
     _printLog($87,-1,$90,$93,0,22817,$vararg_buffer4);
     $8 = 4;
    }
    $103 = $8;
    switch ($103|0) {
    case 32: case 16: case 8: case 4: case 2: case 1: case 0:  {
     break L8;
     break;
    }
    default: {
    }
    }
    $104 = $3;
    $105 = HEAP32[$104>>2]|0;
    $106 = $10;
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $10;
    $110 = ((($109)) + 16|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $10;
    HEAP32[$vararg_buffer7>>2] = $112;
    _printLog($105,-1,$108,$111,0,22941,$vararg_buffer7);
    $8 = 4;
    break;
   }
   $51 = (_linkOf($50,1)|0);
   $9 = $51;
   $52 = $9;
   $11 = $52;
   while(1) {
    $53 = $11;
    $54 = ($53|0)!=(0|0);
    if (!($54)) {
     break;
    }
    $55 = $11;
    $56 = $3;
    $57 = ((($56)) + 5260|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($55|0)==($58|0);
    if ($59) {
     label = 13;
     break;
    }
    $69 = $11;
    $70 = $3;
    $71 = ((($70)) + 5268|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($69|0)==($72|0);
    if ($73) {
     label = 15;
     break;
    }
    $77 = $11;
    $78 = ((($77)) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $11 = $79;
   }
   if ((label|0) == 13) {
    $60 = $3;
    $61 = HEAP32[$60>>2]|0;
    $62 = $10;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $10;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $10;
    HEAP32[$vararg_buffer1>>2] = $68;
    _printLog($61,-1,$64,$67,0,22896,$vararg_buffer1);
   }
   else if ((label|0) == 15) {
    $74 = $9;
    $75 = ((($74)) + 16|0);
    $76 = HEAP32[$75>>2]|0;
    $7 = $76;
   }
   $8 = 4;
  }
 } while(0);
 $131 = $3;
 (_skipTok($131,42,1)|0);
 $132 = $3;
 $133 = $5;
 $134 = $9;
 $135 = (_declare($132,217,$133,$134,0)|0);
 $12 = $135;
 $136 = $3;
 $137 = $12;
 _enter($136,$137);
 $138 = $3;
 (_statement_list($138)|0);
 $139 = $3;
 $140 = $4;
 $141 = $140 | 16;
 $142 = $8;
 $143 = $7;
 $144 = $12;
 $145 = ((($144)) + 16|0);
 $146 = (_leave($139,$141,$142,$143,$145)|0);
 $147 = $12;
 $148 = ((($147)) + 36|0);
 HEAP32[$148>>2] = $146;
 $149 = $6;
 $150 = ($149|0)!=(0);
 L37: do {
  if ($150) {
   $151 = $12;
   $152 = ((($151)) + 44|0);
   HEAP32[$152>>2] = 57;
   $153 = $12;
   $154 = $12;
   $155 = ((($154)) + 28|0);
   HEAP32[$155>>2] = $153;
   $156 = $12;
   $157 = ((($156)) + 36|0);
   $158 = HEAP32[$157>>2]|0;
   $13 = $158;
   while(1) {
    $159 = $13;
    $160 = ($159|0)!=(0|0);
    if (!($160)) {
     break L37;
    }
    $161 = $3;
    $162 = $13;
    $163 = HEAP32[$162>>2]|0;
    $164 = $13;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $13;
    $168 = ((($167)) + 64|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = (_install($161,$163,0,0,$166,$169)|0);
    $14 = $170;
    $171 = $13;
    $172 = ((($171)) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $14;
    $175 = ((($174)) + 4|0);
    HEAP32[$175>>2] = $173;
    $176 = $13;
    $177 = ((($176)) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $14;
    $180 = ((($179)) + 8|0);
    HEAP32[$180>>2] = $178;
    $181 = $13;
    $182 = ((($181)) + 24|0);
    $183 = HEAP32[$182>>2]|0;
    $13 = $183;
   }
  }
 } while(0);
 $184 = $3;
 (_skipTok($184,57,1)|0);
 $185 = $5;
 $2 = $185;
 $186 = $2;
 STACKTOP = sp;return ($186|0);
}
function _declare_enum($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer8 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $7 = sp + 40|0;
 $13 = sp;
 $2 = $0;
 $14 = $2;
 $15 = (_skipTok($14,66,1)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $1 = 0;
  $167 = $1;
  STACKTOP = sp;return ($167|0);
 }
 $17 = $2;
 $18 = (_nextTok($17,2,0)|0);
 $3 = $18;
 $19 = $2;
 $20 = ((($19)) + 5276|0);
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 $22 = $2;
 $23 = (_skipTok($22,59,0)|0);
 $24 = ($23|0)!=(0);
 do {
  if ($24) {
   $25 = $2;
   $26 = (_expression($25,0)|0);
   $5 = $26;
   $27 = $5;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    $47 = $2;
    $48 = HEAP32[$47>>2]|0;
    $49 = $2;
    $50 = ((($49)) + 4132|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $2;
    $53 = ((($52)) + 4136|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $2;
    $56 = (_peekTok($55,0)|0);
    HEAP32[$vararg_buffer1>>2] = $56;
    _printLog($48,-1,$51,$54,0,22817,$vararg_buffer1);
    break;
   }
   $4 = 0;
   $29 = $2;
   $30 = $5;
   $31 = (_typeCheck($29,0,$30,0)|0);
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $5;
    $34 = (_isTypeExpr($33)|0);
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $5;
     $37 = (_linkOf($36,1)|0);
     $4 = $37;
     break;
    }
   }
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = $5;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   HEAP32[$vararg_buffer>>2] = $46;
   _printLog($39,-1,$42,$45,0,22817,$vararg_buffer);
  }
 } while(0);
 $6 = 0;
 $57 = $3;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $2;
  $60 = $3;
  $61 = $4;
  $62 = (_declare($59,217,$60,$61,0)|0);
  $6 = $62;
  $63 = $2;
  $64 = $6;
  _enter($63,$64);
 }
 $65 = $7;
 $66 = $65;
 HEAP32[$66>>2] = 0;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = $2;
 $70 = (_initializer($69)|0);
 $8 = $70;
 $71 = $8;
 $72 = ((($71)) + 24|0);
 $73 = HEAP32[$72>>2]|0;
 $9 = $73;
 while(1) {
  $74 = $9;
  $75 = ($74|0)!=(0|0);
  if (!($75)) {
   break;
  }
  $76 = $9;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(29);
  $79 = $9;
  if ($78) {
   $80 = ((($79)) + 24|0);
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82;
  } else {
   $83 = $79;
  }
  $10 = $83;
  $84 = $2;
  $85 = $10;
  $86 = $4;
  $87 = (_declare($84,201,$85,$86,0)|0);
  $11 = $87;
  $12 = 0;
  $88 = $10;
  $89 = $9;
  $90 = ($88|0)==($89|0);
  L24: do {
   if ($90) {
    $91 = $2;
    $92 = $7;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($92) + 4)|0;
    $96 = $95;
    $97 = HEAP32[$96>>2]|0;
    $98 = (_intNode($91,$94,$97)|0);
    $12 = $98;
    label = 22;
   } else {
    $99 = $9;
    $100 = ((($99)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $12 = $101;
    $102 = $2;
    $103 = $12;
    $104 = (_typeCheck($102,0,$103,1)|0);
    $105 = ($104|0)!=(0|0);
    if ($105) {
     $106 = $2;
     $107 = $12;
     $108 = (_eval($106,$13,$107)|0);
     switch ($108|0) {
     case 8: case 7:  {
      label = 22;
      break L24;
      break;
     }
     case 6: case 4: case 5: case 3:  {
      $119 = (_intValue($13)|0);
      $120 = (getTempRet0() | 0);
      $121 = $7;
      $122 = $121;
      HEAP32[$122>>2] = $119;
      $123 = (($121) + 4)|0;
      $124 = $123;
      HEAP32[$124>>2] = $120;
      label = 22;
      break L24;
      break;
     }
     default: {
      $109 = $2;
      $110 = HEAP32[$109>>2]|0;
      $111 = $10;
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $10;
      $115 = ((($114)) + 16|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $11;
      $118 = $12;
      HEAP32[$vararg_buffer4>>2] = $117;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $118;
      _printLog($110,-1,$113,$116,0,22852,$vararg_buffer4);
      label = 22;
      break L24;
     }
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   $125 = $7;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = (_i64Add(($127|0),($130|0),1,0)|0);
   $132 = (getTempRet0() | 0);
   $133 = $7;
   $134 = $133;
   HEAP32[$134>>2] = $131;
   $135 = (($133) + 4)|0;
   $136 = $135;
   HEAP32[$136>>2] = $132;
   $137 = $2;
   $138 = $11;
   $139 = $12;
   $140 = (_canAssign($137,$138,$139,0)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    $142 = $2;
    $143 = HEAP32[$142>>2]|0;
    $144 = $10;
    $145 = ((($144)) + 12|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $10;
    $148 = ((($147)) + 16|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $11;
    $151 = $12;
    HEAP32[$vararg_buffer8>>2] = $150;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $151;
    _printLog($143,-1,$146,$149,0,22852,$vararg_buffer8);
   }
   $152 = $12;
   $153 = $11;
   $154 = ((($153)) + 56|0);
   HEAP32[$154>>2] = $152;
  }
  $155 = $9;
  $156 = ((($155)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  $9 = $157;
 }
 $158 = $6;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = $2;
  $161 = $6;
  $162 = ((($161)) + 16|0);
  $163 = (_leave($160,16,4,0,$162)|0);
  $164 = $6;
  $165 = ((($164)) + 36|0);
  HEAP32[$165>>2] = $163;
 }
 $166 = $3;
 $1 = $166;
 $167 = $1;
 STACKTOP = sp;return ($167|0);
}
function _expression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer33 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0, $vararg_buffer8 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5328|0);
 $vararg_buffer47 = sp + 5240|0;
 $vararg_buffer42 = sp + 5224|0;
 $vararg_buffer37 = sp + 5208|0;
 $vararg_buffer33 = sp + 5200|0;
 $vararg_buffer28 = sp + 5184|0;
 $vararg_buffer26 = sp + 5176|0;
 $vararg_buffer23 = sp + 5168|0;
 $vararg_buffer20 = sp + 5160|0;
 $vararg_buffer17 = sp + 5152|0;
 $vararg_buffer14 = sp + 5144|0;
 $vararg_buffer11 = sp + 5136|0;
 $vararg_buffer8 = sp + 5128|0;
 $vararg_buffer = sp + 5120|0;
 $5 = sp + 1024|0;
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $21 = ((($5)) + 4096|0);
 $6 = $21;
 $9 = 0;
 $10 = $5;
 $22 = $6;
 $11 = $22;
 $13 = 1;
 $14 = 0;
 $23 = $14;
 $24 = (($12) + ($23)|0);
 HEAP8[$24>>0] = 0;
 while(1) {
  $25 = $3;
  $26 = (_nextTok($25,0,0)|0);
  $8 = $26;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   break;
  }
  $28 = $14;
  $29 = $28 << 4;
  $16 = $29;
  $30 = $8;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)>=(42);
  if ($32) {
   $33 = $8;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34>>>0)<=(52);
   if ($35) {
    label = 5;
    break;
   }
  }
  $38 = $8;
  $39 = HEAP32[$38>>2]|0;
  L7: do {
   switch ($39|0) {
   case 53:  {
    $116 = $13;
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = $10;
     $119 = ((($118)) + 4|0);
     $10 = $119;
     HEAP32[$118>>2] = 0;
    }
    $120 = $8;
    HEAP32[$120>>2] = 3;
    $121 = $14;
    $122 = (($121) + 1)|0;
    $14 = $122;
    $123 = (($12) + ($122)|0);
    HEAP8[$123>>0] = 40;
    $13 = 1;
    label = 14;
    break;
   }
   case 55:  {
    $124 = $13;
    $125 = ($124|0)!=(0);
    if ($125) {
     $126 = $10;
     $127 = ((($126)) + 4|0);
     $10 = $127;
     HEAP32[$126>>2] = 0;
    }
    $128 = $8;
    HEAP32[$128>>2] = 4;
    $129 = $14;
    $130 = (($129) + 1)|0;
    $14 = $130;
    $131 = (($12) + ($130)|0);
    HEAP8[$131>>0] = 91;
    $13 = 1;
    label = 14;
    break;
   }
   case 58:  {
    $132 = $13;
    $133 = ($132|0)!=(0);
    if ($133) {
     $134 = $3;
     $135 = HEAP32[$134>>2]|0;
     $136 = $8;
     $137 = ((($136)) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $8;
     $140 = ((($139)) + 16|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $8;
     HEAP32[$vararg_buffer8>>2] = $142;
     _printLog($135,-1,$138,$141,0,22704,$vararg_buffer8);
     $143 = $10;
     $144 = ((($143)) + 4|0);
     $10 = $144;
     HEAP32[$143>>2] = 0;
    }
    $145 = $8;
    HEAP32[$145>>2] = 28;
    $146 = $14;
    $147 = (($146) + 1)|0;
    $14 = $147;
    $148 = (($12) + ($147)|0);
    HEAP8[$148>>0] = 63;
    $13 = 1;
    label = 14;
    break;
   }
   case 54:  {
    $149 = $13;
    $150 = ($149|0)!=(0);
    $151 = $9;
    $152 = ($151|0)!=(0|0);
    $or$cond = $150 & $152;
    if ($or$cond) {
     $153 = $9;
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(3);
     if ($155) {
      $156 = $10;
      $157 = ((($156)) + 4|0);
      $10 = $157;
      HEAP32[$156>>2] = 0;
      $13 = 0;
     }
    }
    $158 = $13;
    $159 = ($158|0)!=(0);
    do {
     if (!($159)) {
      $160 = $14;
      $161 = ($160|0)>(0);
      if ($161) {
       $162 = $14;
       $163 = (($12) + ($162)|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = $164 << 24 >> 24;
       $166 = ($165|0)!=(40);
       if ($166) {
        break;
       }
      }
      $176 = $14;
      $177 = ($176|0)<=(0);
      if ($177) {
       $178 = $3;
       $179 = $8;
       (_backTok($178,$179)|0);
       $8 = 0;
       break L7;
      } else {
       $180 = $8;
       HEAP32[$180>>2] = 52;
       $181 = $14;
       $182 = (($181) - 1)|0;
       $14 = $182;
       $13 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    $167 = $3;
    $168 = HEAP32[$167>>2]|0;
    $169 = $8;
    $170 = ((($169)) + 12|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $8;
    $173 = ((($172)) + 16|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $8;
    HEAP32[$vararg_buffer11>>2] = $175;
    _printLog($168,-1,$171,$174,0,22704,$vararg_buffer11);
    break;
   }
   case 56:  {
    $183 = $13;
    $184 = ($183|0)!=(0);
    $185 = $9;
    $186 = ($185|0)!=(0|0);
    $or$cond3 = $184 & $186;
    if ($or$cond3) {
     $187 = $9;
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)==(4);
     if ($189) {
      $190 = $10;
      $191 = ((($190)) + 4|0);
      $10 = $191;
      HEAP32[$190>>2] = 0;
      $13 = 0;
     }
    }
    $192 = $13;
    $193 = ($192|0)!=(0);
    do {
     if (!($193)) {
      $194 = $14;
      $195 = ($194|0)>(0);
      if ($195) {
       $196 = $14;
       $197 = (($12) + ($196)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198 << 24 >> 24;
       $200 = ($199|0)!=(91);
       if ($200) {
        break;
       }
      }
      $210 = $14;
      $211 = ($210|0)<=(0);
      if ($211) {
       $212 = $3;
       $213 = $8;
       (_backTok($212,$213)|0);
       $8 = 0;
       break L7;
      } else {
       $214 = $8;
       HEAP32[$214>>2] = 52;
       $215 = $14;
       $216 = (($215) - 1)|0;
       $14 = $216;
       $13 = 0;
       label = 14;
       break L7;
      }
     }
    } while(0);
    $201 = $3;
    $202 = HEAP32[$201>>2]|0;
    $203 = $8;
    $204 = ((($203)) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $8;
    $207 = ((($206)) + 16|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $8;
    HEAP32[$vararg_buffer14>>2] = $209;
    _printLog($202,-1,$205,$208,0,22704,$vararg_buffer14);
    break;
   }
   case 59:  {
    $217 = $13;
    $218 = ($217|0)!=(0);
    do {
     if (!($218)) {
      $219 = $14;
      $220 = ($219|0)>(0);
      if ($220) {
       $221 = $14;
       $222 = (($12) + ($221)|0);
       $223 = HEAP8[$222>>0]|0;
       $224 = $223 << 24 >> 24;
       $225 = ($224|0)!=(63);
       if ($225) {
        break;
       }
      }
      $235 = $14;
      $236 = ($235|0)<=(0);
      if ($236) {
       $237 = $3;
       $238 = $8;
       (_backTok($237,$238)|0);
       $8 = 0;
       break L7;
      } else {
       $239 = $8;
       HEAP32[$239>>2] = 52;
       $240 = $14;
       $241 = (($240) - 1)|0;
       $14 = $241;
       $13 = 1;
       label = 14;
       break L7;
      }
     }
    } while(0);
    $226 = $3;
    $227 = HEAP32[$226>>2]|0;
    $228 = $8;
    $229 = ((($228)) + 12|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $8;
    $232 = ((($231)) + 16|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $8;
    HEAP32[$vararg_buffer17>>2] = $234;
    _printLog($227,-1,$230,$233,0,22704,$vararg_buffer17);
    break;
   }
   case 13:  {
    $242 = $13;
    $243 = ($242|0)!=(0);
    if ($243) {
     $244 = $8;
     HEAP32[$244>>2] = 6;
    }
    $13 = 1;
    label = 14;
    break;
   }
   case 14:  {
    $245 = $13;
    $246 = ($245|0)!=(0);
    if ($246) {
     $247 = $8;
     HEAP32[$247>>2] = 7;
    }
    $13 = 1;
    label = 14;
    break;
   }
   case 8: case 9:  {
    $248 = $13;
    $249 = ($248|0)!=(0);
    if (!($249)) {
     $250 = $3;
     $251 = HEAP32[$250>>2]|0;
     $252 = $8;
     $253 = ((($252)) + 12|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $8;
     $256 = ((($255)) + 16|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $8;
     HEAP32[$vararg_buffer20>>2] = $258;
     _printLog($251,-1,$254,$257,0,22704,$vararg_buffer20);
    }
    $13 = 1;
    label = 14;
    break;
   }
   case 41:  {
    $259 = $4;
    $260 = ($259|0)!=(0);
    $261 = $14;
    $262 = ($261|0)<=(0);
    $or$cond5 = $260 & $262;
    if ($or$cond5) {
     $263 = $3;
     $264 = $8;
     (_backTok($263,$264)|0);
     $8 = 0;
     break L7;
    }
    $265 = $13;
    $266 = ($265|0)!=(0);
    if ($266) {
     $267 = $3;
     $268 = HEAP32[$267>>2]|0;
     $269 = $8;
     $270 = ((($269)) + 12|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = $8;
     $273 = ((($272)) + 16|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $8;
     HEAP32[$vararg_buffer23>>2] = $275;
     _printLog($268,-1,$271,$274,0,22704,$vararg_buffer23);
     $276 = $10;
     $277 = ((($276)) + 4|0);
     $10 = $277;
     HEAP32[$276>>2] = 0;
    }
    $13 = 1;
    label = 14;
    break;
   }
   default: {
    $40 = $8;
    $41 = HEAP32[$40>>2]|0;
    $42 = (6704 + (($41*12)|0)|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)>(0);
    $46 = $13;
    $47 = ($46|0)!=(0);
    if ($45) {
     if ($47) {
      $48 = $3;
      $49 = HEAP32[$48>>2]|0;
      $50 = $8;
      $51 = ((($50)) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $8;
      $54 = ((($53)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $8;
      HEAP32[$vararg_buffer>>2] = $56;
      _printLog($49,-1,$52,$55,0,22704,$vararg_buffer);
      $57 = $10;
      $58 = ((($57)) + 4|0);
      $10 = $58;
      HEAP32[$57>>2] = 0;
     }
     $13 = 1;
     label = 14;
     break L7;
    } else {
     if ($47) {
      $61 = $8;
      $62 = $10;
      $63 = ((($62)) + 4|0);
      $10 = $63;
      HEAP32[$62>>2] = $61;
      $13 = 0;
      break L7;
     } else {
      $59 = $3;
      $60 = $8;
      (_backTok($59,$60)|0);
      $8 = 0;
      break L7;
     }
    }
   }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   $64 = $8;
   $65 = HEAP32[$64>>2]|0;
   $66 = (6704 + (($65*12)|0)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 & 15;
   $69 = $16;
   $70 = $69 | $68;
   $16 = $70;
   $71 = $8;
   $72 = HEAP32[$71>>2]|0;
   $73 = (6704 + (($72*12)|0)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 & 16;
   $15 = $75;
   $76 = $16;
   $77 = $8;
   $78 = ((($77)) + 24|0);
   $79 = ((($78)) + 12|0);
   HEAP32[$79>>2] = $76;
   while(1) {
    $80 = $11;
    $81 = $6;
    $82 = ($80>>>0)<($81>>>0);
    if (!($82)) {
     break;
    }
    $83 = $15;
    $84 = ($83|0)!=(0);
    if ($84) {
     $85 = $11;
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($86)) + 24|0);
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $8;
     $91 = ((($90)) + 24|0);
     $92 = ((($91)) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($89|0)<=($93|0);
     if ($94) {
      break;
     }
    }
    $95 = $11;
    $96 = HEAP32[$95>>2]|0;
    $97 = ((($96)) + 24|0);
    $98 = ((($97)) + 12|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $8;
    $101 = ((($100)) + 24|0);
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($99|0)<($103|0);
    if ($104) {
     break;
    }
    $105 = $11;
    $106 = ((($105)) + 4|0);
    $11 = $106;
    $107 = HEAP32[$105>>2]|0;
    $108 = $10;
    $109 = ((($108)) + 4|0);
    $10 = $109;
    HEAP32[$108>>2] = $107;
   }
   $110 = $8;
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)!=(52);
   if ($112) {
    $113 = $8;
    $114 = $11;
    $115 = ((($114)) + -4|0);
    $11 = $115;
    HEAP32[$115>>2] = $113;
   }
  }
  $278 = $10;
  $279 = $11;
  $280 = ($278>>>0)>=($279>>>0);
  if ($280) {
   label = 73;
   break;
  }
  $289 = $8;
  $290 = ($289|0)==(0|0);
  if ($290) {
   break;
  }
  $291 = $8;
  $9 = $291;
 }
 if ((label|0) == 5) {
  $36 = $3;
  $37 = $8;
  (_backTok($36,$37)|0);
 }
 else if ((label|0) == 73) {
  $281 = $3;
  $282 = HEAP32[$281>>2]|0;
  $283 = $3;
  $284 = ((($283)) + 4132|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $3;
  $287 = ((($286)) + 4136|0);
  $288 = HEAP32[$287>>2]|0;
  _printLog($282,-1,$285,$288,0,22737,$vararg_buffer26);
  $2 = 0;
  $388 = $2;
  STACKTOP = sp;return ($388|0);
 }
 $292 = $13;
 $293 = ($292|0)!=(0);
 $294 = $14;
 $295 = ($294|0)>(0);
 $or$cond7 = $293 | $295;
 if ($or$cond7) {
  $17 = 22760;
  $296 = $14;
  $297 = ($296|0)>(0);
  L108: do {
   if ($297) {
    $298 = $14;
    $299 = (($12) + ($298)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300 << 24 >> 24;
    switch ($301|0) {
    case 40:  {
     $17 = 22771;
     break L108;
     break;
    }
    case 91:  {
     $17 = 22775;
     break L108;
     break;
    }
    case 63:  {
     $17 = 22779;
     break L108;
     break;
    }
    default: {
     $302 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer28>>2] = 22031;
     $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
     HEAP32[$vararg_ptr31>>2] = 673;
     $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
     HEAP32[$vararg_ptr32>>2] = 22760;
     _printFmt($302,0,28431,$vararg_buffer28);
     __abort_556();
     $2 = 0;
     $388 = $2;
     STACKTOP = sp;return ($388|0);
    }
    }
   }
  } while(0);
  $303 = $3;
  $304 = ((($303)) + 4132|0);
  $305 = HEAP32[$304>>2]|0;
  $18 = $305;
  $306 = $3;
  $307 = ((($306)) + 4136|0);
  $308 = HEAP32[$307>>2]|0;
  $19 = $308;
  $309 = $8;
  $310 = ($309|0)==(0|0);
  if ($310) {
   $311 = $3;
   $312 = (_peekTok($311,0)|0);
   $8 = $312;
  }
  $313 = $8;
  $314 = ($313|0)!=(0|0);
  if ($314) {
   $315 = $8;
   $316 = ((($315)) + 12|0);
   $317 = HEAP32[$316>>2]|0;
   $18 = $317;
   $318 = $8;
   $319 = ((($318)) + 16|0);
   $320 = HEAP32[$319>>2]|0;
   $19 = $320;
  }
  $321 = $3;
  $322 = HEAP32[$321>>2]|0;
  $323 = $18;
  $324 = $19;
  $325 = $17;
  $326 = $3;
  $327 = (_peekTok($326,0)|0);
  HEAP32[$vararg_buffer33>>2] = $325;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $327;
  _printLog($322,-1,$323,$324,0,22783,$vararg_buffer33);
  $2 = 0;
  $388 = $2;
  STACKTOP = sp;return ($388|0);
 }
 while(1) {
  $328 = $11;
  $329 = $6;
  $330 = ($328>>>0)<($329>>>0);
  if (!($330)) {
   break;
  }
  $331 = $11;
  $332 = ((($331)) + 4|0);
  $11 = $332;
  $333 = HEAP32[$331>>2]|0;
  $334 = $10;
  $335 = ((($334)) + 4|0);
  $10 = $335;
  HEAP32[$334>>2] = $333;
 }
 $7 = $5;
 L129: while(1) {
  $336 = $7;
  $337 = $10;
  $338 = ($336>>>0)<($337>>>0);
  if (!($338)) {
   label = 104;
   break;
  }
  $339 = $7;
  $340 = HEAP32[$339>>2]|0;
  $8 = $340;
  $341 = $8;
  $342 = ($341|0)==(0|0);
  $343 = $8;
  if ($342) {
   $344 = $11;
   $345 = ((($344)) + -4|0);
   $11 = $345;
   HEAP32[$345>>2] = $343;
  } else {
   $346 = HEAP32[$343>>2]|0;
   $347 = (6704 + (($346*12)|0)|0);
   $348 = ((($347)) + 4|0);
   $349 = HEAP32[$348>>2]|0;
   $20 = $349;
   $350 = $20;
   switch ($350|0) {
   case 3:  {
    $352 = $11;
    $353 = ((($352)) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = $8;
    $356 = ((($355)) + 24|0);
    $357 = ((($356)) + 8|0);
    HEAP32[$357>>2] = $354;
    label = 98;
    break;
   }
   case 2:  {
    label = 98;
    break;
   }
   case 1:  {
    label = 99;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    label = 96;
    break L129;
   }
   }
   if ((label|0) == 98) {
    label = 0;
    $358 = $11;
    $359 = ((($358)) + 4|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = $8;
    $362 = ((($361)) + 24|0);
    $363 = ((($362)) + 4|0);
    HEAP32[$363>>2] = $360;
    label = 99;
   }
   if ((label|0) == 99) {
    label = 0;
    $364 = $11;
    $365 = HEAP32[$364>>2]|0;
    $366 = $8;
    $367 = ((($366)) + 24|0);
    HEAP32[$367>>2] = $365;
   }
   $368 = $20;
   $369 = $11;
   $370 = (($369) + ($368<<2)|0);
   $11 = $370;
   $371 = $6;
   $372 = ($370>>>0)>($371>>>0);
   if ($372) {
    label = 101;
    break;
   }
   $374 = $3;
   $375 = $8;
   $376 = (_expandAssignment($374,$375)|0);
   $377 = $11;
   $378 = ((($377)) + -4|0);
   $11 = $378;
   HEAP32[$378>>2] = $376;
  }
  $379 = $7;
  $380 = ((($379)) + 4|0);
  $7 = $380;
 }
 if ((label|0) == 96) {
  $351 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer37>>2] = 22031;
  $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
  HEAP32[$vararg_ptr40>>2] = 717;
  $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
  HEAP32[$vararg_ptr41>>2] = 22760;
  _printFmt($351,0,28431,$vararg_buffer37);
  __abort_556();
  $2 = 0;
  $388 = $2;
  STACKTOP = sp;return ($388|0);
 }
 else if ((label|0) == 101) {
  $373 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer42>>2] = 22031;
  $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
  HEAP32[$vararg_ptr45>>2] = 734;
  $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
  HEAP32[$vararg_ptr46>>2] = 22760;
  _printFmt($373,0,28431,$vararg_buffer42);
  __abort_556();
  $2 = 0;
  $388 = $2;
  STACKTOP = sp;return ($388|0);
 }
 else if ((label|0) == 104) {
  $381 = $11;
  $382 = $6;
  $383 = ((($382)) + -4|0);
  $384 = ($381|0)!=($383|0);
  if ($384) {
   $385 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer47>>2] = 22031;
   $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
   HEAP32[$vararg_ptr50>>2] = 742;
   $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
   HEAP32[$vararg_ptr51>>2] = 22760;
   _printFmt($385,0,28431,$vararg_buffer47);
   __abort_556();
   $2 = 0;
   $388 = $2;
   STACKTOP = sp;return ($388|0);
  } else {
   $386 = $11;
   $387 = HEAP32[$386>>2]|0;
   $2 = $387;
   $388 = $2;
   STACKTOP = sp;return ($388|0);
  }
 }
 return (0)|0;
}
function _declaration($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$store$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer7 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $15 = sp + 8|0;
 $16 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $19 = $4;
 $20 = (_expression($19,0)|0);
 $7 = $20;
 $21 = $7;
 $22 = ($21|0)==(0|0);
 $23 = $4;
 if ($22) {
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $7;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  HEAP32[$vararg_buffer>>2] = $31;
  _printLog($24,-1,$27,$30,0,25603,$vararg_buffer);
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $32 = $7;
 $33 = (_typeCheck($23,0,$32,1)|0);
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = $4;
  $36 = HEAP32[$35>>2]|0;
  $37 = $7;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $7;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $7;
  HEAP32[$vararg_buffer1>>2] = $43;
  _printLog($36,-1,$39,$42,0,25603,$vararg_buffer1);
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $44 = $7;
 $45 = (_linkOf($44,1)|0);
 $8 = $45;
 $46 = $8;
 $47 = ($46|0)==(0|0);
 $48 = $4;
 if ($47) {
  $49 = HEAP32[$48>>2]|0;
  $50 = $7;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $7;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $7;
  HEAP32[$vararg_buffer4>>2] = $56;
  _printLog($49,-1,$52,$55,0,25603,$vararg_buffer4);
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $57 = (_nextTok($48,2,1)|0);
 $9 = $57;
 $58 = $9;
 $59 = ($58|0)==(0|0);
 if ($59) {
  $60 = $4;
  $61 = (_tagNode($60,21784)|0);
  $9 = $61;
 }
 $10 = 0;
 $62 = $4;
 $63 = (_skipTok($62,23,0)|0);
 $64 = ($63|0)!=(0);
 if ($64) {
  $10 = 10;
 }
 $11 = 0;
 $12 = 0;
 $65 = $4;
 $66 = (_skipTok($65,53,0)|0);
 $67 = ($66|0)!=(0);
 do {
  if ($67) {
   $68 = $4;
   $69 = $11;
   _enter($68,$69);
   $70 = $4;
   $71 = $8;
   $72 = $9;
   $73 = (_parameters($70,$71,$72)|0);
   $13 = $73;
   $74 = $4;
   (_skipTok($74,54,1)|0);
   $75 = $4;
   $76 = (_leave($75,32,4,0,0)|0);
   $12 = $76;
   $77 = $4;
   $78 = ((($77)) + 5264|0);
   $79 = HEAP32[$78>>2]|0;
   $8 = $79;
   $80 = $6;
   $81 = ($80|0)!=(0|0);
   if ($81) {
    $82 = $13;
    $83 = $6;
    HEAP32[$83>>2] = $82;
   }
   $84 = $4;
   $85 = (_peekTok($84,42)|0);
   $86 = ($85|0)!=(0|0);
   if (!($86)) {
    $10 = 10;
    break;
   }
   $87 = $4;
   $88 = $10;
   $89 = 224 | $88;
   $90 = $9;
   $91 = $8;
   $92 = $12;
   $93 = (_declare($87,$89,$90,$91,$92)|0);
   $11 = $93;
   $94 = $5;
   $95 = $94 & 64;
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = $4;
    $98 = ((($97)) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)!=(0|0);
    if ($100) {
     $101 = $4;
     $102 = ((($101)) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (_isTypename_566($103)|0);
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $11;
      $107 = ((($106)) + 44|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $108 & -65;
      HEAP32[$107>>2] = $109;
     }
    }
   }
   $110 = $12;
   $111 = $11;
   $112 = ((($111)) + 36|0);
   HEAP32[$112>>2] = $110;
   $113 = $4;
   $114 = $11;
   _enter($113,$114);
   $115 = $4;
   $116 = (_statement($115,0)|0);
   $117 = $11;
   $118 = ((($117)) + 56|0);
   HEAP32[$118>>2] = $116;
   $119 = $11;
   $120 = ((($119)) + 56|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(0|0);
   if ($122) {
    $123 = $4;
    $124 = (_newNode($123,42)|0);
    $125 = $11;
    $126 = ((($125)) + 56|0);
    HEAP32[$126>>2] = $124;
    $127 = $4;
    $128 = ((($127)) + 5200|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $11;
    $131 = ((($130)) + 56|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ((($132)) + 4|0);
    HEAP32[$133>>2] = $129;
   }
   $134 = $4;
   $135 = $4;
   $136 = (_newNode($135,52)|0);
   (_backTok($134,$136)|0);
   $137 = $4;
   (_leave($137,0,-1,0,0)|0);
   $138 = $11;
   $139 = ((($138)) + 36|0);
   HEAP32[$139>>2] = 0;
   $140 = $9;
   $3 = $140;
   $266 = $3;
   STACKTOP = sp;return ($266|0);
  }
 } while(0);
 while(1) {
  $141 = $4;
  $142 = (_skipTok($141,55,0)|0);
  $143 = ($142|0)!=(0);
  if (!($143)) {
   break;
  }
  $144 = $4;
  $145 = (_newDef($144,16)|0);
  $14 = $145;
  $146 = $4;
  $147 = (_peekTok($146,56)|0);
  $148 = ($147|0)!=(0|0);
  $149 = $4;
  do {
   if ($148) {
    $150 = $14;
    _addLength($149,$150,0);
    $151 = $14;
    $152 = ((($151)) + 16|0);
    HEAP32[$152>>2] = 8;
    $10 = 12;
   } else {
    $153 = (_skipTok($149,10,0)|0);
    $154 = ($153|0)!=(0);
    if ($154) {
     $155 = $14;
     $156 = ((($155)) + 16|0);
     HEAP32[$156>>2] = 4;
     $10 = 10;
     break;
    }
    $157 = $16;
    $158 = $157;
    HEAP32[$158>>2] = -1;
    $159 = (($157) + 4)|0;
    $160 = $159;
    HEAP32[$160>>2] = -1;
    $161 = $4;
    $162 = (_expression($161,0)|0);
    $17 = $162;
    $163 = $17;
    $164 = ($163|0)!=(0|0);
    if ($164) {
     $165 = $4;
     $166 = $17;
     $167 = (_typeCheck($165,0,$166,1)|0);
     $168 = $17;
     $169 = ((($168)) + 4|0);
     HEAP32[$169>>2] = $167;
    }
    $170 = $4;
    $171 = $17;
    $172 = (_eval($170,$15,$171)|0);
    $173 = ($172|0)!=(0);
    if ($173) {
     $174 = (_intValue($15)|0);
     $175 = (getTempRet0() | 0);
     $176 = $16;
     $177 = $176;
     HEAP32[$177>>2] = $174;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $175;
    }
    $180 = $16;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (($180) + 4)|0;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)<(0);
    $187 = ($182>>>0)<=(0);
    $188 = ($185|0)==(0);
    $189 = $188 & $187;
    $190 = $186 | $189;
    if ($190) {
     $191 = $4;
     $192 = HEAP32[$191>>2]|0;
     $193 = $17;
     $194 = ((($193)) + 12|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $17;
     $197 = ((($196)) + 16|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $17;
     HEAP32[$vararg_buffer7>>2] = $199;
     _printLog($192,-1,$195,$198,0,22381,$vararg_buffer7);
    }
    $200 = $4;
    $201 = $14;
    $202 = $17;
    _addLength($200,$201,$202);
    $203 = $16;
    $204 = $203;
    $205 = HEAP32[$204>>2]|0;
    $206 = (($203) + 4)|0;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = $8;
    $210 = ((($209)) + 16|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (___muldi3(($205|0),($208|0),($211|0),0)|0);
    $213 = (getTempRet0() | 0);
    $214 = $14;
    $215 = ((($214)) + 16|0);
    HEAP32[$215>>2] = $212;
    $10 = 9;
   }
  } while(0);
  $216 = $4;
  (_skipTok($216,56,1)|0);
  $217 = $14;
  $218 = ((($217)) + 44|0);
  HEAP32[$218>>2] = 92;
  $219 = $4;
  $220 = HEAP32[$219>>2]|0;
  $221 = $14;
  $222 = (_vmOffset_570($220,$221)|0);
  $223 = $14;
  $224 = ((($223)) + 20|0);
  HEAP32[$224>>2] = $222;
  $225 = $8;
  $226 = $14;
  $227 = ((($226)) + 28|0);
  HEAP32[$227>>2] = $225;
  $228 = $14;
  $8 = $228;
 }
 $229 = $10;
 $230 = ($229|0)==(0);
 if ($230) {
  $231 = $8;
  $232 = (_refCast_571($231)|0);
  $10 = $232;
  $233 = $10;
  $234 = ($233|0)==(0);
  $spec$store$select = $234 ? 9 : $232;
  $10 = $spec$store$select;
 }
 $235 = $4;
 $236 = $5;
 $237 = $236 & 192;
 $238 = $237 | 48;
 $239 = $10;
 $240 = $238 | $239;
 $241 = $9;
 $242 = $8;
 $243 = $12;
 $244 = (_declare($235,$240,$241,$242,$243)|0);
 $11 = $244;
 $245 = $4;
 $246 = (_skipTok($245,30,0)|0);
 $247 = ($246|0)!=(0);
 if ($247) {
  $248 = $4;
  $249 = (_initializer($248)|0);
  $18 = $249;
  $250 = $18;
  $251 = ($250|0)!=(0|0);
  if ($251) {
   $252 = $18;
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253|0)==(42);
   if ($254) {
    $255 = $4;
    $256 = $11;
    $257 = $18;
    $258 = (_expandInitializer($255,$256,$257)|0);
    $18 = $258;
    $259 = $8;
    $260 = $18;
    $261 = ((($260)) + 4|0);
    HEAP32[$261>>2] = $259;
   }
  }
  $262 = $18;
  $263 = $11;
  $264 = ((($263)) + 56|0);
  HEAP32[$264>>2] = $262;
 }
 $265 = $9;
 $3 = $265;
 $266 = $3;
 STACKTOP = sp;return ($266|0);
}
function _isTypename_566($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _tagNode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 $or$cond = $7 & $9;
 if (!($or$cond)) {
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $10 = $2;
 $11 = (_newNode($10,2)|0);
 $4 = $11;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $14 = $3;
 $15 = (_strlen($14)|0);
 $5 = $15;
 $16 = $2;
 $17 = ((($16)) + 4132|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = ((($19)) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $2;
 $22 = ((($21)) + 4136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = $23;
 $26 = $4;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 $30 = ((($29)) + 8|0);
 HEAP32[$30>>2] = 0;
 $31 = $3;
 $32 = $5;
 $33 = (($32) + 1)|0;
 $34 = (_rehash($31,$33)|0);
 $35 = (($34>>>0) % 512)&-1;
 $36 = $4;
 $37 = ((($36)) + 24|0);
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $35;
 $39 = $2;
 $40 = $3;
 $41 = $5;
 $42 = (($41) + 1)|0;
 $43 = $4;
 $44 = ((($43)) + 24|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_ccUniqueStr($39,$40,$42,$46)|0);
 $48 = $4;
 $49 = ((($48)) + 24|0);
 HEAP32[$49>>2] = $47;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _parameters($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $4;
  $15 = $5;
  $16 = (_refCast_571($15)|0);
  $17 = 48 | $16;
  $18 = $5;
  $19 = $5;
  $20 = ((($19)) + 56|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_install($14,22191,$17,0,$18,$21)|0);
  $8 = $22;
  $23 = $4;
  $24 = $8;
  $25 = (_lnkNode($23,$24)|0);
  $7 = $25;
  $26 = $6;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $6;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $8;
   $32 = ((($31)) + 4|0);
   HEAP32[$32>>2] = $30;
   $33 = $6;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $8;
   $37 = ((($36)) + 8|0);
   HEAP32[$37>>2] = $35;
  }
 }
 $38 = $4;
 $39 = (_peekTok($38,54)|0);
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $7;
  $3 = $41;
  $102 = $3;
  STACKTOP = sp;return ($102|0);
 }
 while(1) {
  $42 = $4;
  $43 = (_peekTok($42,0)|0);
  $44 = ($43|0)!=(0|0);
  if (!($44)) {
   break;
  }
  $45 = $4;
  $46 = (_qualifier($45)|0);
  $9 = $46;
  $47 = $4;
  $48 = $9;
  $49 = (_declaration($47,$48,0)|0);
  $10 = $49;
  $50 = $10;
  $51 = ($50|0)==(0|0);
  if ($51) {
   break;
  }
  $52 = $10;
  $53 = ((($52)) + 24|0);
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $11 = $55;
  $56 = $9;
  $57 = $56 & 128;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $11;
   $60 = ((($59)) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 128;
   HEAP32[$60>>2] = $62;
   $63 = $9;
   $64 = $63 & -129;
   $9 = $64;
  }
  $65 = $11;
  $66 = ((($65)) + 28|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_castOf_572($67)|0);
  $69 = ($68|0)==(12);
  if ($69) {
   $70 = $11;
   $71 = (_refCast_571($70)|0);
   $72 = ($71|0)==(9);
   if ($72) {
    $73 = $11;
    $74 = ((($73)) + 16|0);
    HEAP32[$74>>2] = 4;
    $75 = $11;
    $76 = ((($75)) + 44|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 & -16;
    HEAP32[$76>>2] = $78;
    $79 = $11;
    $80 = ((($79)) + 44|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81 | 10;
    HEAP32[$80>>2] = $82;
   }
  }
  $83 = $4;
  $84 = $7;
  $85 = $10;
  $86 = (_argNode($83,$84,$85)|0);
  $7 = $86;
  $87 = $9;
  $88 = ($87|0)!=(0);
  if ($88) {
   $89 = $4;
   $90 = HEAP32[$89>>2]|0;
   $91 = $10;
   $92 = ((($91)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $10;
   $95 = ((($94)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $9;
   HEAP32[$vararg_buffer>>2] = $97;
   _printLog($90,-1,$93,$96,0,22354,$vararg_buffer);
  }
  $98 = $4;
  $99 = (_skipTok($98,41,0)|0);
  $100 = ($99|0)!=(0);
  if (!($100)) {
   break;
  }
 }
 $101 = $7;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _declare($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer16 = sp + 80|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer10 = sp + 64|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer = sp + 40|0;
 $14 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $9;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $13 = $21;
 $22 = $8;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = $8;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(2);
  if (!($26)) {
   $29 = $7;
   $30 = $29 & 15;
   $31 = ($30|0)==(10);
   if ($31) {
    $13 = 4;
   } else {
    $32 = $9;
    $33 = $6;
    $34 = ((($33)) + 5260|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($32|0)==($35|0);
    if ($36) {
     $13 = 0;
    }
   }
   $37 = $6;
   $38 = $8;
   $39 = ((($38)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $7;
   $42 = $13;
   $43 = $9;
   $44 = (_install($37,$40,$41,$42,$43,0)|0);
   $11 = $44;
   $45 = $11;
   $46 = ($45|0)!=(0|0);
   if ($46) {
    $47 = $11;
    $48 = $8;
    $49 = ((($48)) + 24|0);
    $50 = ((($49)) + 8|0);
    HEAP32[$50>>2] = $47;
    $51 = $9;
    $52 = $8;
    $53 = ((($52)) + 4|0);
    HEAP32[$53>>2] = $51;
    $54 = $8;
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $11;
    $58 = ((($57)) + 4|0);
    HEAP32[$58>>2] = $56;
    $59 = $8;
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $11;
    $63 = ((($62)) + 8|0);
    HEAP32[$63>>2] = $61;
    $64 = $10;
    $65 = $11;
    $66 = ((($65)) + 40|0);
    HEAP32[$66>>2] = $64;
    $67 = $8;
    $68 = $11;
    $69 = ((($68)) + 60|0);
    HEAP32[$69>>2] = $67;
    $70 = $8;
    $71 = $11;
    $72 = ((($71)) + 64|0);
    HEAP32[$72>>2] = $70;
    $73 = $11;
    $74 = $8;
    _addUsage($73,$74);
    dest=$14; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$14>>2] = 2;
    $75 = $11;
    $76 = ((($75)) + 24|0);
    $77 = HEAP32[$76>>2]|0;
    $12 = $77;
    while(1) {
     $78 = $12;
     $79 = ($78|0)!=(0|0);
     if (!($79)) {
      break;
     }
     $80 = $12;
     $81 = ((($80)) + 40|0);
     $82 = HEAP32[$81>>2]|0;
     $15 = $82;
     $83 = $10;
     $16 = $83;
     $17 = 0;
     $84 = $12;
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      $87 = $12;
      $88 = HEAP32[$87>>2]|0;
      $89 = HEAP8[$88>>0]|0;
      $90 = $89 << 24 >> 24;
      $91 = ($90|0)==(46);
      if (!($91)) {
       $92 = $11;
       $93 = HEAP32[$92>>2]|0;
       $94 = $12;
       $95 = HEAP32[$94>>2]|0;
       $96 = (_strcmp($93,$95)|0);
       $97 = ($96|0)!=(0);
       if (!($97)) {
        while(1) {
         $98 = $15;
         $99 = ($98|0)!=(0|0);
         $100 = $16;
         $101 = ($100|0)!=(0|0);
         $102 = $99 ? $101 : 0;
         if (!($102)) {
          break;
         }
         $103 = $15;
         $104 = ((($103)) + 28|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = $16;
         $107 = ((($106)) + 28|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($105|0)!=($108|0);
         if ($109) {
          $110 = $17;
          $111 = (($110) + 1)|0;
          $17 = $111;
          $112 = $15;
          $113 = ((($14)) + 24|0);
          $114 = ((($113)) + 8|0);
          HEAP32[$114>>2] = $112;
          $115 = $15;
          $116 = ((($115)) + 28|0);
          $117 = HEAP32[$116>>2]|0;
          $118 = ((($14)) + 4|0);
          HEAP32[$118>>2] = $117;
          $119 = $6;
          $120 = $16;
          $121 = (_canAssign($119,$120,$14,1)|0);
          $122 = ($121|0)!=(0);
          if (!($122)) {
           $123 = $16;
           $124 = ((($14)) + 24|0);
           $125 = ((($124)) + 8|0);
           HEAP32[$125>>2] = $123;
           $126 = $16;
           $127 = ((($126)) + 28|0);
           $128 = HEAP32[$127>>2]|0;
           $129 = ((($14)) + 4|0);
           HEAP32[$129>>2] = $128;
           $130 = $6;
           $131 = $15;
           $132 = (_canAssign($130,$131,$14,1)|0);
           $133 = ($132|0)!=(0);
           if (!($133)) {
            break;
           }
          }
         }
         $134 = $15;
         $135 = ((($134)) + 24|0);
         $136 = HEAP32[$135>>2]|0;
         $15 = $136;
         $137 = $16;
         $138 = ((($137)) + 24|0);
         $139 = HEAP32[$138>>2]|0;
         $16 = $139;
        }
        $140 = $15;
        $141 = ($140|0)==(0|0);
        $142 = $16;
        $143 = ($142|0)==(0|0);
        $or$cond = $141 & $143;
        if ($or$cond) {
         label = 21;
         break;
        }
       }
      }
     }
     $159 = $12;
     $160 = ((($159)) + 24|0);
     $161 = HEAP32[$160>>2]|0;
     $12 = $161;
    }
    if ((label|0) == 21) {
     $144 = $12;
     $145 = ((($144)) + 40|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)!=(0|0);
     if ($147) {
      $148 = $12;
      $149 = ((($148)) + 56|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==(0|0);
      $152 = $17;
      $153 = ($152|0)==(0);
      $or$cond3 = $151 & $153;
      if ($or$cond3) {
       $154 = $6;
       $155 = $11;
       $156 = (_lnkNode($154,$155)|0);
       $157 = $12;
       $158 = ((($157)) + 56|0);
       HEAP32[$158>>2] = $156;
       $12 = 0;
      }
     }
    }
    $162 = $12;
    $163 = ($162|0)!=(0|0);
    do {
     if ($163) {
      $164 = $12;
      $165 = ((($164)) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = $11;
      $168 = ((($167)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($166|0)>=($169|0);
      $171 = $6;
      if (!($170)) {
       $197 = ((($171)) + 4128|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = ($198 << 7)&255;
       $200 = ($199<<24>>24) >> 7;
       $201 = $200 << 24 >> 24;
       $202 = ($201|0)!=(0);
       if (!($202)) {
        break;
       }
       $203 = $6;
       $204 = HEAP32[$203>>2]|0;
       $205 = $11;
       $206 = ((($205)) + 4|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = $11;
       $209 = ((($208)) + 8|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = $11;
       HEAP32[$vararg_buffer13>>2] = $211;
       _printLog($204,3,$207,$210,0,22615,$vararg_buffer13);
       break;
      }
      $172 = HEAP32[$171>>2]|0;
      $173 = $11;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $11;
      $177 = ((($176)) + 8|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $11;
      HEAP32[$vararg_buffer7>>2] = $179;
      _printLog($172,-1,$175,$178,0,22567,$vararg_buffer7);
      $180 = $12;
      $181 = ((($180)) + 4|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)!=(0|0);
      if ($183) {
       $184 = $12;
       $185 = ((($184)) + 8|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)!=(0);
       if ($187) {
        $188 = $6;
        $189 = HEAP32[$188>>2]|0;
        $190 = $12;
        $191 = ((($190)) + 4|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = $12;
        $194 = ((($193)) + 8|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = $12;
        HEAP32[$vararg_buffer10>>2] = $196;
        _printLog($189,0,$192,$195,0,22588,$vararg_buffer10);
       }
      }
     }
    } while(0);
    $212 = $10;
    $213 = ($212|0)!=(0|0);
    if ($213) {
     $214 = $6;
     $215 = $8;
     $216 = (_tagType($214,$215)|0);
     $18 = $216;
     $217 = $18;
     $218 = ($217|0)!=(0|0);
     if ($218) {
      $219 = $10;
      $220 = ((($219)) + 28|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = $18;
      $223 = ($221|0)!=($222|0);
      if ($223) {
       $224 = $6;
       $225 = HEAP32[$224>>2]|0;
       $226 = $8;
       $227 = ((($226)) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = $8;
       $230 = ((($229)) + 16|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = $8;
       $233 = $10;
       $234 = ((($233)) + 28|0);
       $235 = HEAP32[$234>>2]|0;
       HEAP32[$vararg_buffer16>>2] = $232;
       $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
       HEAP32[$vararg_ptr19>>2] = $235;
       _printLog($225,-1,$228,$231,0,22656,$vararg_buffer16);
      }
     }
    }
   }
   $236 = $11;
   $5 = $236;
   $237 = $5;
   STACKTOP = sp;return ($237|0);
  }
 }
 $27 = HEAP32[3314]|0;
 $28 = $8;
 HEAP32[$vararg_buffer>>2] = 22031;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 136;
 $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = 22559;
 $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $28;
 _printFmt($27,0,22493,$vararg_buffer);
 __abort_556();
 $5 = 0;
 $237 = $5;
 STACKTOP = sp;return ($237|0);
}
function _addLength($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 22031;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 33;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 22476;
  _printFmt($11,0,22426,$vararg_buffer);
  __abort_556();
 }
 $12 = $5;
 $13 = ($12|0)==(0|0);
 $14 = $3;
 if ($13) {
  $15 = ((($14)) + 5296|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = ((($17)) + 36|0);
  HEAP32[$18>>2] = $16;
  STACKTOP = sp;return;
 } else {
  _enter($14,0);
  $19 = $3;
  $20 = ((($19)) + 5280|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_refCast_571($21)|0);
  $23 = 192 | $22;
  $6 = $23;
  $24 = $3;
  $25 = $6;
  $26 = $3;
  $27 = ((($26)) + 5280|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $3;
  $32 = ((($31)) + 5280|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $5;
  (_install($24,22486,$25,$30,$33,$34)|0);
  $35 = $3;
  $36 = (_leave($35,0,0,0,0)|0);
  $37 = $4;
  $38 = ((($37)) + 36|0);
  HEAP32[$38>>2] = $36;
  STACKTOP = sp;return;
 }
}
function _vmOffset_570($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _refCast_571($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_castOf_572($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(12);
 do {
  if ($7) {
   $8 = $1;
   $9 = (_isArrayType_573($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = ((($11)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $3 = $13;
    $14 = $3;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $3;
     $17 = (_isStatic_574($16)|0);
     $18 = ($17|0)!=(0);
     if (!($18)) {
      break;
     }
    }
    $2 = 10;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _castOf_572($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _isArrayType_573($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isStatic_574($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _tagType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 2076|0);
 $8 = $4;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($7) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $3;
 $15 = $5;
 $16 = $4;
 $17 = (_lookup($14,$15,$16,0,0,0)|0);
 $5 = $17;
 $18 = $5;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = (_isTypename_566($20)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $5;
   $2 = $23;
   $24 = $2;
   STACKTOP = sp;return ($24|0);
  }
 }
 $2 = 0;
 $24 = $2;
 STACKTOP = sp;return ($24|0);
}
function _argNode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $6;
  $3 = $9;
 } else {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = (_opNode($10,41,$11,$12)|0);
  $3 = $13;
 }
 $14 = $3;
 STACKTOP = sp;return ($14|0);
}
function _expandAssignment($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 do {
  switch ($6|0) {
  case 34:  {
   $7 = $2;
   $8 = (_newNode($7,13)|0);
   $4 = $8;
   break;
  }
  case 35:  {
   $9 = $2;
   $10 = (_newNode($9,14)|0);
   $4 = $10;
   break;
  }
  case 31:  {
   $11 = $2;
   $12 = (_newNode($11,10)|0);
   $4 = $12;
   break;
  }
  case 32:  {
   $13 = $2;
   $14 = (_newNode($13,11)|0);
   $4 = $14;
   break;
  }
  case 33:  {
   $15 = $2;
   $16 = (_newNode($15,12)|0);
   $4 = $16;
   break;
  }
  case 36:  {
   $17 = $2;
   $18 = (_newNode($17,16)|0);
   $4 = $18;
   break;
  }
  case 37:  {
   $19 = $2;
   $20 = (_newNode($19,15)|0);
   $4 = $20;
   break;
  }
  case 38:  {
   $21 = $2;
   $22 = (_newNode($21,23)|0);
   $4 = $22;
   break;
  }
  case 40:  {
   $23 = $2;
   $24 = (_newNode($23,25)|0);
   $4 = $24;
   break;
  }
  case 39:  {
   $25 = $2;
   $26 = (_newNode($25,24)|0);
   $4 = $26;
   break;
  }
  default: {
  }
  }
 } while(0);
 $27 = $4;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 $29 = $3;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $4;
 $33 = ((($32)) + 24|0);
 HEAP32[$33>>2] = $31;
 $34 = $3;
 $35 = ((($34)) + 24|0);
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $4;
 $39 = ((($38)) + 24|0);
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $37;
 $41 = $3;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $4;
 $45 = ((($44)) + 12|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $4;
 $50 = ((($49)) + 16|0);
 HEAP32[$50>>2] = $48;
 $51 = $3;
 HEAP32[$51>>2] = 30;
 $52 = $4;
 $53 = $3;
 $54 = ((($53)) + 24|0);
 HEAP32[$54>>2] = $52;
 $55 = $3;
 STACKTOP = sp;return ($55|0);
}
function _ccInline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $vararg_buffer = sp + 4096|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = ((($13)) + 5272|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)!=($15|0);
 if ($16) {
  $2 = 0;
  $109 = $2;
  STACKTOP = sp;return ($109|0);
 }
 $17 = HEAP32[9666]|0;
 $18 = ($17|0)==(0|0);
 L5: do {
  if ($18) {
   $19 = (_getcwd(0,0)|0);
   HEAP32[9666] = $19;
   $20 = HEAP32[9666]|0;
   $21 = ($20|0)==(0|0);
   $spec$store$select = $21 ? 39249 : $19;
   HEAP32[9666] = $spec$store$select;
   $22 = HEAP32[9666]|0;
   $5 = $22;
   while(1) {
    $23 = $5;
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)!=(0);
    if (!($25)) {
     break L5;
    }
    $26 = $5;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(92);
    if ($29) {
     $30 = $5;
     HEAP8[$30>>0] = 47;
    }
    $31 = $5;
    $32 = ((($31)) + 1|0);
    $5 = $32;
   }
  }
 } while(0);
 $33 = $4;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_absolutePath($35,$6,4096)|0);
 $7 = $36;
 $37 = $7;
 $38 = ($37|0)!=($6|0);
 if ($38) {
  $39 = $4;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  (_strncpy($6,$41,4096)|0);
 }
 $8 = $6;
 while(1) {
  $42 = $8;
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)!=(0);
  if (!($44)) {
   break;
  }
  $45 = $8;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = ($47|0)==(92);
  if ($48) {
   $49 = $8;
   HEAP8[$49>>0] = 47;
  }
  $50 = $8;
  $51 = ((($50)) + 1|0);
  $8 = $51;
 }
 $52 = (_strrchr($6,47)|0);
 $7 = $52;
 $53 = $7;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $7;
  $56 = ((($55)) + 1|0);
  $7 = $56;
  HEAP8[$56>>0] = 0;
 }
 $57 = $4;
 $58 = ((($57)) + 24|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $7;
 $61 = $60;
 $62 = $6;
 $63 = (($61) - ($62))|0;
 $64 = (4096 - ($63))|0;
 (_strncat($6,$59,$64)|0);
 $7 = $6;
 $9 = 0;
 while(1) {
  $65 = $9;
  $66 = (($6) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67 << 24 >> 24;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   break;
  }
  $70 = $9;
  $71 = (($6) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = ($73|0)==(0);
  if ($74) {
   break;
  }
  $75 = HEAP32[9666]|0;
  $76 = $9;
  $77 = (($75) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 << 24 >> 24;
  $80 = ($79|0)==(0);
  $81 = $9;
  $82 = (($6) + ($81)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  if ($80) {
   label = 22;
   break;
  }
  $89 = HEAP32[9666]|0;
  $90 = $9;
  $91 = (($89) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 << 24 >> 24;
  $94 = ($84|0)!=($93|0);
  if ($94) {
   break;
  }
  $95 = $9;
  $96 = (($95) + 1)|0;
  $9 = $96;
 }
 if ((label|0) == 22) {
  $85 = ($84|0)==(47);
  if ($85) {
   $86 = $9;
   $87 = (($6) + ($86)|0);
   $88 = ((($87)) + 1|0);
   $7 = $88;
  }
 }
 $97 = $3;
 $98 = HEAP32[$97>>2]|0;
 $99 = $4;
 $100 = ((($99)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $4;
 $103 = ((($102)) + 16|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $7;
 HEAP32[$vararg_buffer>>2] = $105;
 _printLog($98,14,$101,$104,0,23047,$vararg_buffer);
 $106 = $3;
 $107 = $7;
 $108 = (_ccOpen($106,$107,1,0)|0);
 $2 = $108;
 $109 = $2;
 STACKTOP = sp;return ($109|0);
}
function _isInline_596($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _padOffset_597($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6))|0;
 $8 = $3;
 $9 = (0 - ($8))|0;
 $10 = $7 & $9;
 STACKTOP = sp;return ($10|0);
}
function _expandInitializerObj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer5 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $20 = $6;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $9 = $22;
 while(1) {
  $23 = $9;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   break;
  }
  $25 = $9;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(29);
  if ($27) {
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = $9;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $9;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $9;
   HEAP32[$vararg_buffer>>2] = $36;
   _printLog($29,-1,$32,$35,0,23203,$vararg_buffer);
  } else {
   $37 = $9;
   $38 = ((($37)) + 24|0);
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $10 = $40;
   $41 = $9;
   $42 = ((($41)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $11 = $43;
   $12 = 0;
   $44 = $4;
   $45 = $5;
   $46 = $10;
   $47 = (_opNode($44,5,$45,$46)|0);
   $48 = $9;
   $49 = ((($48)) + 24|0);
   $50 = ((($49)) + 4|0);
   HEAP32[$50>>2] = $47;
   $51 = $10;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $9;
   $55 = ((($54)) + 24|0);
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 12|0);
   HEAP32[$58>>2] = $53;
   $59 = $10;
   $60 = ((($59)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $9;
   $63 = ((($62)) + 24|0);
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 16|0);
   HEAP32[$66>>2] = $61;
   $67 = $11;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(42);
   if ($69) {
    $70 = $4;
    $71 = $9;
    $72 = ((($71)) + 24|0);
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_typeCheck($70,0,$74,1)|0);
    $76 = ($75|0)!=(0|0);
    if ($76) {
     $77 = $4;
     $78 = $9;
     $79 = ((($78)) + 24|0);
     $80 = ((($79)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $11;
     $83 = $7;
     (_expandInitializerObj($77,$81,$82,$83)|0);
    }
    $84 = $9;
    $85 = ((($84)) + 24|0);
    $86 = ((($85)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $9;
    $89 = ((($88)) + 24|0);
    HEAP32[$89>>2] = $87;
   } else {
    $90 = $7;
    $91 = $4;
    $92 = $9;
    $93 = (_expand2Statement($91,$92,0)|0);
    _addTail($90,$93);
    $94 = $4;
    $95 = $9;
    $96 = (_typeCheck($94,0,$95,1)|0);
    $97 = ($96|0)!=(0|0);
    if ($97) {
     $98 = $10;
     $99 = (_linkOf($98,1)|0);
     $12 = $99;
    }
    $100 = $12;
    $101 = ($100|0)!=(0|0);
    if ($101) {
     $102 = $12;
     $103 = (_isStatic_574($102)|0);
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = $4;
      $106 = HEAP32[$105>>2]|0;
      $107 = $9;
      $108 = ((($107)) + 12|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = $9;
      $111 = ((($110)) + 16|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $9;
      HEAP32[$vararg_buffer2>>2] = $113;
      _printLog($106,-1,$109,$112,0,23235,$vararg_buffer2);
     }
    }
    $114 = $4;
    $115 = ((($114)) + 5200|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $9;
    $118 = ((($117)) + 4|0);
    HEAP32[$118>>2] = $116;
   }
   $119 = $8;
   $120 = $10;
   $121 = ((($120)) + 8|0);
   HEAP32[$121>>2] = $119;
   $122 = $10;
   $8 = $122;
  }
  $123 = $9;
  $124 = ((($123)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $9 = $125;
 }
 $126 = $5;
 $127 = ((($126)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($128)) + 16|0);
 $130 = HEAP32[$129>>2]|0;
 $13 = $130;
 $131 = $5;
 $132 = ((($131)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ((($133)) + 36|0);
 $135 = HEAP32[$134>>2]|0;
 $14 = $135;
 while(1) {
  $136 = $14;
  $137 = ($136|0)!=(0|0);
  if (!($137)) {
   break;
  }
  $138 = $14;
  $139 = (_isStatic_574($138)|0);
  $140 = ($139|0)!=(0);
  if (!($140)) {
   $141 = $14;
   $142 = ((($141)) + 20|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)!=(0);
   if ($144) {
    label = 21;
    break;
   }
   $145 = $13;
   $146 = $14;
   $147 = ((($146)) + 16|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($145>>>0)<($148>>>0);
   if ($149) {
    $150 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer5>>2] = 22031;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 356;
    $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
    HEAP32[$vararg_ptr9>>2] = 23337;
    _printFmt($150,0,23279,$vararg_buffer5);
    __abort_556();
   }
  }
  $151 = $14;
  $152 = ((($151)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  $14 = $153;
 }
 if ((label|0) == 21) {
  $13 = 0;
 }
 $154 = $5;
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 36|0);
 $158 = HEAP32[$157>>2]|0;
 $15 = $158;
 while(1) {
  $159 = $15;
  $160 = ($159|0)!=(0|0);
  if (!($160)) {
   break;
  }
  $161 = $15;
  $162 = (_isStatic_574($161)|0);
  $163 = ($162|0)!=(0);
  do {
   if (!($163)) {
    $16 = 0;
    $164 = $8;
    $17 = $164;
    while(1) {
     $165 = $17;
     $166 = ($165|0)!=(0|0);
     if (!($166)) {
      break;
     }
     $167 = $15;
     $168 = ((($167)) + 60|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = $17;
     $171 = ($169|0)==($170|0);
     if ($171) {
      label = 31;
      break;
     }
     $172 = $17;
     $173 = ((($172)) + 8|0);
     $174 = HEAP32[$173>>2]|0;
     $17 = $174;
    }
    if ((label|0) == 31) {
     label = 0;
     $16 = 1;
    }
    $175 = $16;
    $176 = ($175|0)!=(0);
    $177 = $13;
    $178 = ($177>>>0)>(0);
    $or$cond = $176 | $178;
    if ($or$cond) {
     $179 = $16;
     $180 = ($179|0)!=(0);
     if (!($180)) {
      break;
     }
     $181 = $15;
     $182 = ((($181)) + 16|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = ($183>>>0)<($184>>>0);
     if (!($185)) {
      break;
     }
     $186 = $4;
     $187 = HEAP32[$186>>2]|0;
     $188 = $5;
     $189 = ((($188)) + 12|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $5;
     $192 = ((($191)) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $5;
     $195 = (_linkOf($194,0)|0);
     $196 = $15;
     HEAP32[$vararg_buffer10>>2] = $195;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $196;
     _printLog($187,1,$190,$193,0,23358,$vararg_buffer10);
     break;
    }
    $197 = $15;
    $198 = ((($197)) + 56|0);
    $199 = HEAP32[$198>>2]|0;
    $18 = $199;
    $200 = $18;
    $201 = ($200|0)==(0|0);
    if ($201) {
     $202 = $15;
     $203 = (_isConst_606($202)|0);
     $204 = ($203|0)!=(0);
     if (!($204)) {
      $205 = $5;
      $206 = (_isConstVar($205)|0);
      $207 = ($206|0)!=(0);
      if (!($207)) {
       $208 = $15;
       $209 = ((($208)) + 28|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ((($210)) + 56|0);
       $212 = HEAP32[$211>>2]|0;
       $18 = $212;
      }
     }
    }
    $213 = $18;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $215 = $4;
     $216 = HEAP32[$215>>2]|0;
     $217 = $5;
     $218 = ((($217)) + 12|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $5;
     $221 = ((($220)) + 16|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = $5;
     $224 = (_linkOf($223,0)|0);
     $225 = $15;
     HEAP32[$vararg_buffer14>>2] = $224;
     $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
     HEAP32[$vararg_ptr17>>2] = $225;
     _printLog($216,-1,$219,$222,0,23402,$vararg_buffer14);
     break;
    }
    $226 = $18;
    $227 = $15;
    $228 = ((($227)) + 56|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($226|0)==($229|0);
    $231 = $4;
    $232 = HEAP32[$231>>2]|0;
    $233 = $5;
    $234 = ((($233)) + 12|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $5;
    $237 = ((($236)) + 16|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $15;
    $240 = $18;
    if ($230) {
     HEAP32[$vararg_buffer18>>2] = $239;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = $240;
     _printLog($232,14,$235,$238,0,23433,$vararg_buffer18);
    } else {
     HEAP32[$vararg_buffer22>>2] = $239;
     $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
     HEAP32[$vararg_ptr25>>2] = $240;
     _printLog($232,14,$235,$238,0,23475,$vararg_buffer22);
    }
    $241 = $4;
    $242 = (_newNode($241,29)|0);
    $19 = $242;
    $243 = $4;
    $244 = $5;
    $245 = $4;
    $246 = $15;
    $247 = (_lnkNode($245,$246)|0);
    $248 = (_opNode($243,5,$244,$247)|0);
    $249 = $19;
    $250 = ((($249)) + 24|0);
    $251 = ((($250)) + 4|0);
    HEAP32[$251>>2] = $248;
    $252 = $18;
    $253 = $19;
    $254 = ((($253)) + 24|0);
    HEAP32[$254>>2] = $252;
    $255 = $7;
    $256 = $19;
    _addTail($255,$256);
    $257 = $4;
    $258 = $19;
    (_typeCheck($257,0,$258,1)|0);
    $259 = $4;
    $260 = ((($259)) + 5200|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = $19;
    $263 = ((($262)) + 4|0);
    HEAP32[$263>>2] = $261;
   }
  } while(0);
  $264 = $15;
  $265 = ((($264)) + 24|0);
  $266 = HEAP32[$265>>2]|0;
  $15 = $266;
 }
 $267 = $7;
 STACKTOP = sp;return ($267|0);
}
function _isConst_606($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _ccAddLib($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = $4;
 $10 = (FUNCTION_TABLE_ii[$8 & 127]($9)|0);
 $7 = $10;
 $11 = $7;
 $12 = ($11|0)==(0);
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = $4;
  $16 = $6;
  $17 = (_ccAddUnit($15,$16,1,0)|0);
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   $3 = -1;
   $20 = $3;
   STACKTOP = sp;return ($20|0);
  }
 }
 $19 = $7;
 $3 = $19;
 $20 = $3;
 STACKTOP = sp;return ($20|0);
}
function _ccAddCall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $13 = sp + 60|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $7 = $17;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 HEAP32[$13>>2] = 0;
 $18 = $5;
 $19 = ($18|0)==(0|0);
 $20 = $6;
 $21 = ($20|0)==(0|0);
 $or$cond = $19 | $21;
 if ($or$cond) {
  $22 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 22031;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 1832;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = 23708;
  _printFmt($22,0,28431,$vararg_buffer);
  __abort_556();
  $3 = 0;
  $204 = $3;
  STACKTOP = sp;return ($204|0);
 }
 $23 = $4;
 $24 = $6;
 $25 = (_ccOpen($23,0,0,$24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = 0;
  $204 = $3;
  STACKTOP = sp;return ($204|0);
 }
 $27 = $4;
 $28 = (_declaration($27,0,$13)|0);
 $12 = $28;
 $29 = $4;
 $30 = (_ccClose($29)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $7;
  $33 = $6;
  HEAP32[$vararg_buffer4>>2] = $33;
  _printLog($32,-1,0,0,0,23718,$vararg_buffer4);
  $3 = 0;
  $204 = $3;
  STACKTOP = sp;return ($204|0);
 }
 $34 = $12;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = $12;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(2);
  if (!($38)) {
   $41 = $12;
   $42 = ((($41)) + 24|0);
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $11 = $44;
   $45 = ($44|0)==(0|0);
   $46 = $7;
   if ($45) {
    $47 = $6;
    HEAP32[$vararg_buffer10>>2] = $47;
    _printLog($46,-1,0,0,0,23718,$vararg_buffer10);
    $3 = 0;
    $204 = $3;
    STACKTOP = sp;return ($204|0);
   }
   $48 = ((($46)) + 136|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + -8|0);
   HEAP32[$48>>2] = $50;
   $51 = $7;
   $52 = ((($51)) + 136|0);
   $53 = HEAP32[$52>>2]|0;
   $10 = $53;
   $54 = $7;
   $55 = ((($54)) + 132|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_padPointer_617($56,4)|0);
   $58 = $7;
   $59 = ((($58)) + 132|0);
   HEAP32[$59>>2] = $57;
   $60 = $7;
   $61 = ((($60)) + 132|0);
   $62 = HEAP32[$61>>2]|0;
   $9 = $62;
   $63 = $7;
   $64 = ((($63)) + 132|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 24|0);
   HEAP32[$64>>2] = $66;
   $67 = $7;
   $68 = ((($67)) + 132|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $7;
   $71 = ((($70)) + 136|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($69>>>0)>=($72>>>0);
   if ($73) {
    $74 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer13>>2] = 22031;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = 1864;
    $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
    HEAP32[$vararg_ptr17>>2] = 23708;
    _printFmt($74,0,25109,$vararg_buffer13);
    __abort_556();
    $3 = 0;
    $204 = $3;
    STACKTOP = sp;return ($204|0);
   }
   $75 = $4;
   $76 = ((($75)) + 20|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   if ($78) {
    $79 = $4;
    $80 = ((($79)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $14 = $83;
    $84 = $14;
    $85 = ((($84)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + 1)|0;
    $8 = $87;
   }
   $88 = $9;
   $89 = $10;
   $90 = ((($89)) + 4|0);
   HEAP32[$90>>2] = $88;
   $91 = $4;
   $92 = ((($91)) + 20|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $10;
   HEAP32[$94>>2] = $93;
   $95 = $10;
   $96 = $4;
   $97 = ((($96)) + 20|0);
   HEAP32[$97>>2] = $95;
   $98 = $4;
   $99 = (_newNode($98,67)|0);
   $12 = $99;
   $100 = $11;
   $101 = ((($100)) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $12;
   $104 = ((($103)) + 4|0);
   HEAP32[$104>>2] = $102;
   $105 = $12;
   $106 = ((($105)) + 24|0);
   HEAP32[$106>>2] = 1;
   $107 = $8;
   $108 = $12;
   $109 = ((($108)) + 24|0);
   $110 = ((($109)) + 4|0);
   HEAP32[$110>>2] = $107;
   $111 = $11;
   $112 = ((($111)) + 44|0);
   HEAP32[$112>>2] = 192;
   $113 = $12;
   $114 = $11;
   $115 = ((($114)) + 56|0);
   HEAP32[$115>>2] = $113;
   $116 = $6;
   $117 = $9;
   $118 = ((($117)) + 4|0);
   HEAP32[$118>>2] = $116;
   $119 = $5;
   $120 = $9;
   HEAP32[$120>>2] = $119;
   $121 = $11;
   $122 = $9;
   $123 = ((($122)) + 8|0);
   HEAP32[$123>>2] = $121;
   $124 = $8;
   $125 = $9;
   $126 = ((($125)) + 12|0);
   HEAP32[$126>>2] = $124;
   $127 = $9;
   $128 = ((($127)) + 20|0);
   HEAP32[$128>>2] = 0;
   $129 = $9;
   $130 = ((($129)) + 16|0);
   HEAP32[$130>>2] = 0;
   $131 = $11;
   $132 = (_isInvokable_619($131)|0);
   $133 = ($132|0)!=(0);
   $134 = $11;
   if ($133) {
    $135 = ((($134)) + 40|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ((($136)) + 28|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $12;
    $140 = ((($139)) + 4|0);
    HEAP32[$140>>2] = $138;
    $141 = $11;
    $142 = ((($141)) + 40|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ((($143)) + 44|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $145 & 192;
    $147 = $11;
    $148 = ((($147)) + 40|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($149)) + 44|0);
    HEAP32[$150>>2] = $146;
    $151 = $11;
    $152 = ((($151)) + 40|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ((($153)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $15 = $155;
    while(1) {
     $156 = $15;
     $157 = ($156|0)!=(0|0);
     if (!($157)) {
      break;
     }
     $158 = $15;
     $159 = ((($158)) + 64|0);
     HEAP32[$159>>2] = 0;
     $160 = $11;
     $161 = ((($160)) + 40|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ((($162)) + 16|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $15;
     $166 = ((($165)) + 20|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) - ($164))|0;
     HEAP32[$166>>2] = $168;
     $169 = $9;
     $170 = ((($169)) + 16|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $15;
     $173 = ((($172)) + 20|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($171>>>0)<($174>>>0);
     if ($175) {
      $176 = $15;
      $177 = ((($176)) + 20|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $9;
      $180 = ((($179)) + 16|0);
      HEAP32[$180>>2] = $178;
     }
     $181 = $15;
     $182 = ((($181)) + 24|0);
     $183 = HEAP32[$182>>2]|0;
     $15 = $183;
    }
    $184 = $9;
    $185 = ((($184)) + 16|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186>>>0) / 4)&-1;
    HEAP32[$185>>2] = $187;
    $188 = $11;
    $189 = ((($188)) + 40|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ((($190)) + 16|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192>>>0) / 4)&-1;
    $194 = $9;
    $195 = ((($194)) + 20|0);
    HEAP32[$195>>2] = $193;
   } else {
    $196 = ((($134)) + 28|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($197)) + 16|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (($199>>>0) / 4)&-1;
    $201 = $9;
    $202 = ((($201)) + 20|0);
    HEAP32[$202>>2] = $200;
   }
   $203 = $11;
   $3 = $203;
   $204 = $3;
   STACKTOP = sp;return ($204|0);
  }
 }
 $39 = $7;
 $40 = $6;
 HEAP32[$vararg_buffer7>>2] = $40;
 _printLog($39,-1,0,0,0,23718,$vararg_buffer7);
 $3 = 0;
 $204 = $3;
 STACKTOP = sp;return ($204|0);
}
function _padPointer_617($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = (_padOffset_597($5,$6)|0);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _isInvokable_619($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _timeMillis() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = sp + 8|0;
 (_gettimeofday(($1|0),(0|0))|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (___muldi3(($2|0),($4|0),1000,0)|0);
 $6 = (getTempRet0() | 0);
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = (___udivdi3(($12|0),($14|0),1000,0)|0);
 $16 = (getTempRet0() | 0);
 $17 = $0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Add(($19|0),($22|0),($15|0),($16|0))|0);
 $24 = (getTempRet0() | 0);
 $25 = $0;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = $0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 setTempRet0(($34) | 0);
 STACKTOP = sp;return ($31|0);
}
function _sleepMillis($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 8|0;
 $4 = $2;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (___divdi3(($10|0),($13|0),1000,0)|0);
 $15 = (getTempRet0() | 0);
 HEAP32[$3>>2] = $14;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (___remdi3(($18|0),($21|0),1000,0)|0);
 $23 = (getTempRet0() | 0);
 $24 = (___muldi3(($22|0),($23|0),1000000,0)|0);
 $25 = (getTempRet0() | 0);
 $26 = ((($3)) + 4|0);
 HEAP32[$26>>2] = $24;
 (_nanosleep(($3|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _absolutePath($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ($6>>>0)<(4096);
 if ($7) {
  _abort();
  // unreachable;
 } else {
  $8 = $3;
  $9 = $4;
  $10 = (_realpath($8,$9)|0);
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _importLib($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = (_dlopen(($8|0),2)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $3;
  $13 = (_dlerror()|0);
  HEAP32[$vararg_buffer>>2] = $13;
  _printLog($12,-1,0,0,0,23744,$vararg_buffer);
  $2 = -2;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 $14 = $5;
 $15 = HEAP32[3296]|0;
 $16 = (_dlsym(($14|0),($15|0))|0);
 $6 = $16;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = $3;
  $20 = (_dlerror()|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  _printLog($19,-1,0,0,0,23744,$vararg_buffer1);
  $21 = $5;
  (_dlclose(($21|0))|0);
  $2 = -1;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 $22 = (_malloc(12)|0);
 $7 = $22;
 $23 = $7;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = $3;
  HEAP32[$vararg_buffer4>>2] = 23770;
  _printLog($25,-1,0,0,0,23744,$vararg_buffer4);
  $26 = $5;
  (_dlclose(($26|0))|0);
  $2 = -1;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 } else {
  $27 = $5;
  $28 = HEAP32[3297]|0;
  $29 = (_dlsym(($27|0),($28|0))|0);
  $30 = $7;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $29;
  $32 = $5;
  $33 = $7;
  $34 = ((($33)) + 8|0);
  HEAP32[$34>>2] = $32;
  $35 = HEAP32[9667]|0;
  $36 = $7;
  HEAP32[$36>>2] = $35;
  $37 = $7;
  HEAP32[9667] = $37;
  $38 = $6;
  $39 = $3;
  $40 = (FUNCTION_TABLE_ii[$38 & 127]($39)|0);
  $2 = $40;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _closeLibs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = HEAP32[9667]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[9667]|0;
  $2 = $5;
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  HEAP32[9667] = $7;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $2;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_v[$14 & 0]();
  }
  $15 = $2;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $2;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   (_dlclose(($21|0))|0);
  }
  $22 = $2;
  _free($22);
 }
 STACKTOP = sp;return;
}
function _printAst($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_ptr22 = 0, $vararg_ptr35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer75 = sp + 184|0;
 $vararg_buffer72 = sp + 176|0;
 $vararg_buffer69 = sp + 168|0;
 $vararg_buffer66 = sp + 160|0;
 $vararg_buffer63 = sp + 152|0;
 $vararg_buffer60 = sp + 144|0;
 $vararg_buffer57 = sp + 136|0;
 $vararg_buffer54 = sp + 128|0;
 $vararg_buffer51 = sp + 120|0;
 $vararg_buffer48 = sp + 112|0;
 $vararg_buffer45 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer36 = sp + 80|0;
 $vararg_buffer32 = sp + 64|0;
 $vararg_buffer29 = sp + 56|0;
 $vararg_buffer26 = sp + 48|0;
 $vararg_buffer23 = sp + 40|0;
 $vararg_buffer19 = sp + 32|0;
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $19 = $8;
 $20 = $19 & 16384;
 $10 = $20;
 $21 = $8;
 $22 = $21 & 32768;
 $11 = $22;
 $23 = $8;
 $24 = $23 & 128;
 $12 = $24;
 $25 = $7;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = $5;
  $28 = $6;
  _printStr($27,$28,0);
  STACKTOP = sp;return;
 }
 $29 = $9;
 $30 = ($29|0)>(0);
 if ($30) {
  $31 = $12;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   $33 = $5;
   $34 = $6;
   $35 = $9;
   HEAP32[$vararg_buffer>>2] = $35;
   _printFmt($33,$34,27972,$vararg_buffer);
  }
 } else {
  $36 = $9;
  $37 = (0 - ($36))|0;
  $9 = $37;
 }
 $38 = $7;
 $39 = HEAP32[$38>>2]|0;
 $13 = $39;
 $40 = $13;
 do {
  switch ($40|0) {
  case 52:  {
   $47 = $8;
   $48 = ($47|0)==(0);
   $49 = $5;
   $50 = $6;
   if ($48) {
    $51 = $13;
    $52 = (6704 + (($51*12)|0)|0);
    $53 = ((($52)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    _printStr($49,$50,$54);
    STACKTOP = sp;return;
   } else {
    $55 = $7;
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $8;
    _printAst($49,$50,$57,$58,0);
    $59 = $5;
    $60 = $6;
    _printStr($59,$60,23784);
    STACKTOP = sp;return;
   }
   break;
  }
  case 42: case 43:  {
   $61 = $8;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $5;
    $64 = $6;
    $65 = $13;
    $66 = (6704 + (($65*12)|0)|0);
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    _printStr($63,$64,$68);
    STACKTOP = sp;return;
   }
   $69 = $12;
   $70 = ($69|0)!=(0);
   $71 = $5;
   $72 = $6;
   if ($70) {
    _printStr($71,$72,23786);
    STACKTOP = sp;return;
   }
   _printStr($71,$72,23792);
   $73 = $7;
   $74 = ((($73)) + 24|0);
   $75 = HEAP32[$74>>2]|0;
   $14 = $75;
   while(1) {
    $76 = $14;
    $77 = ($76|0)!=(0|0);
    if (!($77)) {
     break;
    }
    $78 = $9;
    $79 = (($78) + 1)|0;
    $15 = $79;
    $16 = 0;
    $80 = $5;
    $81 = $6;
    _printStr($80,$81,25916);
    $82 = $14;
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83>>>0)<(42);
    if ($84) {
     label = 20;
    } else {
     $85 = $14;
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86>>>0)>(52);
     if ($87) {
      label = 20;
     }
    }
    L33: do {
     if ((label|0) == 20) {
      label = 0;
      $88 = $14;
      $89 = HEAP32[$88>>2]|0;
      switch ($89|0) {
      case 30: case 29: case 3:  {
       $16 = 1;
       $15 = 0;
       $94 = $5;
       $95 = $6;
       $96 = $9;
       $97 = (($96) + 1)|0;
       HEAP32[$vararg_buffer13>>2] = $97;
       _printFmt($94,$95,27972,$vararg_buffer13);
       break L33;
       break;
      }
      case 2:  {
       $98 = $14;
       $99 = ((($98)) + 24|0);
       $100 = ((($99)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)!=(0|0);
       if (!($102)) {
        break L33;
       }
       $103 = $14;
       $104 = ((($103)) + 24|0);
       $105 = ((($104)) + 8|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($106)) + 64|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $14;
       $110 = ($108|0)==($109|0);
       if (!($110)) {
        break L33;
       }
       $16 = 1;
       break L33;
       break;
      }
      default: {
       $16 = -1;
       $15 = 0;
       $90 = $5;
       $91 = $6;
       $92 = $9;
       $93 = (($92) + 1)|0;
       HEAP32[$vararg_buffer10>>2] = $93;
       _printFmt($90,$91,27972,$vararg_buffer10);
       break L33;
      }
      }
     }
    } while(0);
    $111 = $5;
    $112 = $6;
    $113 = $14;
    $114 = $8;
    $115 = $15;
    _printAst($111,$112,$113,$114,$115);
    $116 = $16;
    $117 = ($116|0)!=(0);
    do {
     if ($117) {
      $118 = $16;
      $119 = ($118|0)<(0);
      $120 = $5;
      $121 = $6;
      if ($119) {
       $122 = $14;
       $123 = HEAP32[$122>>2]|0;
       HEAP32[$vararg_buffer16>>2] = $123;
       _printFmt($120,$121,23794,$vararg_buffer16);
       break;
      } else {
       _printStr($120,$121,23784);
       break;
      }
     }
    } while(0);
    $124 = $14;
    $125 = ((($124)) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    $14 = $126;
   }
   $127 = $5;
   $128 = $6;
   $129 = $9;
   HEAP32[$vararg_buffer19>>2] = $129;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = 23838;
   _printFmt($127,$128,23832,$vararg_buffer19);
   STACKTOP = sp;return;
   break;
  }
  case 44: case 45:  {
   $130 = $5;
   $131 = $6;
   $132 = $13;
   $133 = (6704 + (($132*12)|0)|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   _printStr($130,$131,$135);
   $136 = $8;
   $137 = ($136|0)==(0);
   if ($137) {
    STACKTOP = sp;return;
   }
   $138 = $5;
   $139 = $6;
   _printStr($138,$139,23840);
   $140 = $5;
   $141 = $6;
   $142 = $7;
   $143 = ((($142)) + 24|0);
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $8;
   _printAst($140,$141,$145,$146,0);
   $147 = $5;
   $148 = $6;
   _printStr($147,$148,28011);
   $149 = $12;
   $150 = ($149|0)!=(0);
   if ($150) {
    STACKTOP = sp;return;
   }
   $151 = $7;
   $152 = ((($151)) + 24|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)!=(0|0);
   do {
    if ($154) {
     $155 = $7;
     $156 = ((($155)) + 24|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = HEAP32[$157>>2]|0;
     $13 = $158;
     $159 = $13;
     $160 = ($159|0)!=(42);
     $161 = $10;
     $162 = ($161|0)!=(0);
     $or$cond = $160 | $162;
     $163 = $5;
     $164 = $6;
     if ($or$cond) {
      _printStr($163,$164,25916);
      $173 = $5;
      $174 = $6;
      $175 = $7;
      $176 = ((($175)) + 24|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $8;
      $179 = $9;
      $180 = $13;
      $181 = ($180|0)!=(42);
      $182 = $181&1;
      $183 = (($179) + ($182))|0;
      _printAst($173,$174,$177,$178,$183);
      break;
     } else {
      _printStr($163,$164,23843);
      $165 = $5;
      $166 = $6;
      $167 = $7;
      $168 = ((($167)) + 24|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = $8;
      $171 = $9;
      $172 = (0 - ($171))|0;
      _printAst($165,$166,$169,$170,$172);
      break;
     }
    } else {
     $184 = $5;
     $185 = $6;
     _printStr($184,$185,23845);
    }
   } while(0);
   $186 = $7;
   $187 = ((($186)) + 24|0);
   $188 = ((($187)) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)!=(0|0);
   if (!($190)) {
    STACKTOP = sp;return;
   }
   $191 = $7;
   $192 = ((($191)) + 24|0);
   $193 = ((($192)) + 4|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = HEAP32[$194>>2]|0;
   $13 = $195;
   $196 = $13;
   $197 = ($196|0)==(44);
   $198 = $13;
   $199 = ($198|0)==(45);
   $or$cond3 = $197 | $199;
   $or$cond3$not = $or$cond3 ^ 1;
   $200 = $11;
   $201 = ($200|0)!=(0);
   $or$cond5 = $or$cond3$not | $201;
   if (!($or$cond5)) {
    $202 = $5;
    $203 = $6;
    $204 = $9;
    HEAP32[$vararg_buffer23>>2] = $204;
    _printFmt($202,$203,23848,$vararg_buffer23);
    $205 = $5;
    $206 = $6;
    $207 = $7;
    $208 = ((($207)) + 24|0);
    $209 = ((($208)) + 4|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = $8;
    $212 = $9;
    $213 = (0 - ($212))|0;
    _printAst($205,$206,$210,$211,$213);
    STACKTOP = sp;return;
   }
   $214 = $13;
   $215 = ($214|0)!=(42);
   $216 = $10;
   $217 = ($216|0)!=(0);
   $or$cond7 = $215 | $217;
   $218 = $5;
   $219 = $6;
   $220 = $9;
   if ($or$cond7) {
    HEAP32[$vararg_buffer29>>2] = $220;
    _printFmt($218,$219,23857,$vararg_buffer29);
    $230 = $5;
    $231 = $6;
    $232 = $7;
    $233 = ((($232)) + 24|0);
    $234 = ((($233)) + 4|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $8;
    $237 = $9;
    $238 = $13;
    $239 = ($238|0)!=(42);
    $240 = $239&1;
    $241 = (($237) + ($240))|0;
    _printAst($230,$231,$235,$236,$241);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer26>>2] = $220;
    _printFmt($218,$219,23848,$vararg_buffer26);
    $221 = $5;
    $222 = $6;
    $223 = $7;
    $224 = ((($223)) + 24|0);
    $225 = ((($224)) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = $8;
    $228 = $9;
    $229 = (0 - ($228))|0;
    _printAst($221,$222,$226,$227,$229);
    STACKTOP = sp;return;
   }
   break;
  }
  case 46: case 48: case 47:  {
   $242 = $5;
   $243 = $6;
   $244 = $13;
   $245 = (6704 + (($244*12)|0)|0);
   $246 = ((($245)) + 8|0);
   $247 = HEAP32[$246>>2]|0;
   _printStr($242,$243,$247);
   $248 = $8;
   $249 = ($248|0)==(0);
   if ($249) {
    STACKTOP = sp;return;
   }
   $250 = $5;
   $251 = $6;
   _printStr($250,$251,23840);
   $252 = $7;
   $253 = ((($252)) + 24|0);
   $254 = ((($253)) + 12|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ($255|0)!=(0|0);
   $257 = $5;
   $258 = $6;
   if ($256) {
    $259 = $7;
    $260 = ((($259)) + 24|0);
    $261 = ((($260)) + 12|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $8;
    $264 = $12;
    $265 = $263 | $264;
    _printAst($257,$258,$262,$265,0);
   } else {
    _printStr($257,$258,23843);
   }
   $266 = $5;
   $267 = $6;
   _printStr($266,$267,23866);
   $268 = $7;
   $269 = ((($268)) + 24|0);
   $270 = ((($269)) + 8|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)!=(0|0);
   if ($272) {
    $273 = $5;
    $274 = $6;
    $275 = $7;
    $276 = ((($275)) + 24|0);
    $277 = ((($276)) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $8;
    _printAst($273,$274,$278,$279,0);
   }
   $280 = $5;
   $281 = $6;
   _printStr($280,$281,23866);
   $282 = $7;
   $283 = ((($282)) + 24|0);
   $284 = ((($283)) + 4|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($285|0)!=(0|0);
   if ($286) {
    $287 = $5;
    $288 = $6;
    $289 = $7;
    $290 = ((($289)) + 24|0);
    $291 = ((($290)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $8;
    _printAst($287,$288,$292,$293,0);
   }
   $294 = $5;
   $295 = $6;
   _printStr($294,$295,28011);
   $296 = $12;
   $297 = ($296|0)!=(0);
   if ($297) {
    STACKTOP = sp;return;
   }
   $298 = $7;
   $299 = ((($298)) + 24|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ($300|0)!=(0|0);
   if (!($301)) {
    $331 = $5;
    $332 = $6;
    _printStr($331,$332,23845);
    STACKTOP = sp;return;
   }
   $302 = $7;
   $303 = ((($302)) + 24|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = HEAP32[$304>>2]|0;
   $13 = $305;
   $306 = $13;
   $307 = ($306|0)!=(42);
   $308 = $10;
   $309 = ($308|0)!=(0);
   $or$cond9 = $307 | $309;
   $310 = $5;
   $311 = $6;
   if ($or$cond9) {
    _printStr($310,$311,25916);
    $320 = $5;
    $321 = $6;
    $322 = $7;
    $323 = ((($322)) + 24|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $8;
    $326 = $9;
    $327 = $13;
    $328 = ($327|0)!=(42);
    $329 = $328&1;
    $330 = (($326) + ($329))|0;
    _printAst($320,$321,$324,$325,$330);
    STACKTOP = sp;return;
   } else {
    _printStr($310,$311,23843);
    $312 = $5;
    $313 = $6;
    $314 = $7;
    $315 = ((($314)) + 24|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = $8;
    $318 = $9;
    $319 = (0 - ($318))|0;
    _printAst($312,$313,$316,$317,$319);
    STACKTOP = sp;return;
   }
   break;
  }
  case 50: case 49: case 51:  {
   $333 = $5;
   $334 = $6;
   $335 = $13;
   $336 = (6704 + (($335*12)|0)|0);
   $337 = ((($336)) + 8|0);
   $338 = HEAP32[$337>>2]|0;
   _printStr($333,$334,$338);
   $339 = $8;
   $340 = ($339|0)==(0);
   if ($340) {
    STACKTOP = sp;return;
   }
   $341 = $7;
   $342 = ((($341)) + 24|0);
   $343 = ((($342)) + 4|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = ($344|0)!=(0|0);
   if ($345) {
    $346 = $5;
    $347 = $6;
    _printStr($346,$347,23843);
    $348 = $5;
    $349 = $6;
    $350 = $7;
    $351 = ((($350)) + 24|0);
    $352 = ((($351)) + 4|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = $8;
    _printAst($348,$349,$353,$354,0);
   }
   $355 = $5;
   $356 = $6;
   _printStr($355,$356,23784);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $357 = $8;
   $358 = ($357|0)==(0);
   if ($358) {
    $359 = $5;
    $360 = $6;
    $361 = $13;
    $362 = (6704 + (($361*12)|0)|0);
    $363 = ((($362)) + 8|0);
    $364 = HEAP32[$363>>2]|0;
    _printStr($359,$360,$364);
    STACKTOP = sp;return;
   }
   $365 = $7;
   $366 = ((($365)) + 24|0);
   $367 = ((($366)) + 4|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ($368|0)!=(0|0);
   if ($369) {
    $370 = $5;
    $371 = $6;
    $372 = $7;
    $373 = ((($372)) + 24|0);
    $374 = ((($373)) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $8;
    _printAst($370,$371,$375,$376,0);
   }
   $377 = $5;
   (_printChr($377,40)|0);
   $378 = $7;
   $379 = ((($378)) + 24|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)!=(0|0);
   if ($381) {
    $382 = $5;
    $383 = $6;
    $384 = $7;
    $385 = ((($384)) + 24|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = $8;
    _printAst($382,$383,$386,$387,0);
   }
   $388 = $5;
   (_printChr($388,41)|0);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $389 = $8;
   $390 = ($389|0)==(0);
   if ($390) {
    $391 = $5;
    $392 = $6;
    $393 = $13;
    $394 = (6704 + (($393*12)|0)|0);
    $395 = ((($394)) + 8|0);
    $396 = HEAP32[$395>>2]|0;
    _printStr($391,$392,$396);
    STACKTOP = sp;return;
   }
   $397 = $7;
   $398 = ((($397)) + 24|0);
   $399 = ((($398)) + 4|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = ($400|0)!=(0|0);
   if ($401) {
    $402 = $5;
    $403 = $6;
    $404 = $7;
    $405 = ((($404)) + 24|0);
    $406 = ((($405)) + 4|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = $8;
    _printAst($402,$403,$407,$408,0);
   }
   $409 = $5;
   (_printChr($409,91)|0);
   $410 = $7;
   $411 = ((($410)) + 24|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = ($412|0)!=(0|0);
   if ($413) {
    $414 = $5;
    $415 = $6;
    $416 = $7;
    $417 = ((($416)) + 24|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = $8;
    _printAst($414,$415,$418,$419,0);
   }
   $420 = $5;
   (_printChr($420,93)|0);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $421 = $8;
   $422 = ($421|0)==(0);
   $423 = $5;
   $424 = $6;
   if ($422) {
    $425 = $13;
    $426 = (6704 + (($425*12)|0)|0);
    $427 = ((($426)) + 8|0);
    $428 = HEAP32[$427>>2]|0;
    _printStr($423,$424,$428);
    STACKTOP = sp;return;
   } else {
    $429 = $7;
    $430 = ((($429)) + 24|0);
    $431 = ((($430)) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $8;
    _printAst($423,$424,$432,$433,0);
    $434 = $5;
    (_printChr($434,46)|0);
    $435 = $5;
    $436 = $6;
    $437 = $7;
    $438 = ((($437)) + 24|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $8;
    _printAst($435,$436,$439,$440,0);
    STACKTOP = sp;return;
   }
   break;
  }
  case 30: case 29: case 41: case 27: case 26: case 18: case 17: case 20: case 19: case 22: case 21: case 24: case 25: case 23: case 15: case 16: case 12: case 11: case 10: case 14: case 13: case 9: case 8: case 7: case 6:  {
   $441 = $8;
   $442 = ($441|0)==(0);
   if ($442) {
    $443 = $5;
    $444 = $6;
    $445 = $13;
    $446 = (6704 + (($445*12)|0)|0);
    $447 = ((($446)) + 8|0);
    $448 = HEAP32[$447>>2]|0;
    _printStr($443,$444,$448);
    STACKTOP = sp;return;
   }
   $449 = $13;
   $450 = (6704 + (($449*12)|0)|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = $451 & 15;
   $17 = $452;
   $453 = $9;
   $454 = $17;
   $455 = ($453|0)>($454|0);
   $456 = $455&1;
   $18 = $456;
   $457 = $8;
   $458 = $457 & 8192;
   $459 = ($458|0)!=(0);
   if ($459) {
    $460 = $7;
    $461 = ((($460)) + 4|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = ($462|0)!=(0|0);
    if ($463) {
     $464 = $5;
     $465 = $6;
     $466 = $7;
     $467 = ((($466)) + 4|0);
     $468 = HEAP32[$467>>2]|0;
     _printSym($464,$465,$468,256,0);
     $18 = 1;
    }
   }
   $469 = $18;
   $470 = ($469|0)!=(0);
   if ($470) {
    $471 = $5;
    (_printChr($471,40)|0);
   }
   $472 = $7;
   $473 = ((($472)) + 24|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = ($475|0)!=(0|0);
   if ($476) {
    $477 = $5;
    $478 = $6;
    $479 = $7;
    $480 = ((($479)) + 24|0);
    $481 = ((($480)) + 4|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = $8;
    $484 = $17;
    $485 = (0 - ($484))|0;
    _printAst($477,$478,$482,$483,$485);
    $486 = $13;
    $487 = ($486|0)!=(41);
    if ($487) {
     $488 = $5;
     (_printChr($488,32)|0);
    }
   }
   $489 = $5;
   $490 = $6;
   $491 = $13;
   $492 = (6704 + (($491*12)|0)|0);
   $493 = ((($492)) + 8|0);
   $494 = HEAP32[$493>>2]|0;
   _printStr($489,$490,$494);
   $495 = $7;
   $496 = ((($495)) + 24|0);
   $497 = ((($496)) + 4|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = ($498|0)!=(0|0);
   if ($499) {
    $500 = $5;
    (_printChr($500,32)|0);
   }
   $501 = $5;
   $502 = $6;
   $503 = $7;
   $504 = ((($503)) + 24|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = $8;
   $507 = $17;
   $508 = (0 - ($507))|0;
   _printAst($501,$502,$505,$506,$508);
   $509 = $18;
   $510 = ($509|0)!=(0);
   if (!($510)) {
    STACKTOP = sp;return;
   }
   $511 = $5;
   (_printChr($511,41)|0);
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $512 = $8;
   $513 = ($512|0)==(0);
   if ($513) {
    $514 = $5;
    $515 = $6;
    $516 = $13;
    $517 = (6704 + (($516*12)|0)|0);
    $518 = ((($517)) + 8|0);
    $519 = HEAP32[$518>>2]|0;
    _printStr($514,$515,$519);
    STACKTOP = sp;return;
   } else {
    $520 = $13;
    $521 = (6704 + (($520*12)|0)|0);
    $522 = HEAP32[$521>>2]|0;
    $523 = $522 & 15;
    $17 = $523;
    $524 = $5;
    $525 = $6;
    $526 = $7;
    $527 = ((($526)) + 24|0);
    $528 = ((($527)) + 8|0);
    $529 = HEAP32[$528>>2]|0;
    $530 = $8;
    $531 = $17;
    $532 = (0 - ($531))|0;
    _printAst($524,$525,$529,$530,$532);
    $533 = $5;
    $534 = $6;
    _printStr($533,$534,23869);
    $535 = $5;
    $536 = $6;
    $537 = $7;
    $538 = ((($537)) + 24|0);
    $539 = ((($538)) + 4|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = $8;
    $542 = $17;
    $543 = (0 - ($542))|0;
    _printAst($535,$536,$540,$541,$543);
    $544 = $5;
    $545 = $6;
    _printStr($544,$545,23873);
    $546 = $5;
    $547 = $6;
    $548 = $7;
    $549 = ((($548)) + 24|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = $8;
    $552 = $17;
    $553 = (0 - ($552))|0;
    _printAst($546,$547,$550,$551,$553);
    STACKTOP = sp;return;
   }
   break;
  }
  case 67:  {
   $554 = $5;
   $555 = $6;
   $556 = $7;
   $557 = ((($556)) + 24|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = $7;
   $560 = ((($559)) + 24|0);
   $561 = ((($560)) + 4|0);
   $562 = HEAP32[$561>>2]|0;
   _printOpc($554,$555,$558,$562,0);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $563 = $7;
   $564 = ((($563)) + 4|0);
   $565 = HEAP32[$564>>2]|0;
   $566 = ((($565)) + 68|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = ($567|0)==(0|0);
   if ($568) {
    $569 = $5;
    $570 = $6;
    $571 = $7;
    $572 = ((($571)) + 4|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $7;
    $575 = ((($574)) + 24|0);
    $576 = $575;
    $577 = $576;
    $578 = HEAP32[$577>>2]|0;
    $579 = (($576) + 4)|0;
    $580 = $579;
    $581 = HEAP32[$580>>2]|0;
    HEAP32[$vararg_buffer32>>2] = $573;
    $vararg_ptr35 = ((($vararg_buffer32)) + 8|0);
    $582 = $vararg_ptr35;
    $583 = $582;
    HEAP32[$583>>2] = $578;
    $584 = (($582) + 4)|0;
    $585 = $584;
    HEAP32[$585>>2] = $581;
    _printFmt($569,$570,23877,$vararg_buffer32);
    STACKTOP = sp;return;
   }
   $586 = $7;
   $587 = ((($586)) + 4|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = ((($588)) + 68|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = HEAP32[3305]|0;
   $592 = ($590|0)==($591|0);
   if ($592) {
    $593 = $5;
    $594 = $6;
    $595 = HEAP8[18704]|0;
    $596 = $595 << 24 >> 24;
    HEAP32[$vararg_buffer36>>2] = $596;
    _printFmt($593,$594,23887,$vararg_buffer36);
    $597 = $5;
    $598 = $6;
    $599 = ($598|0)!=(0|0);
    if ($599) {
     $600 = $6;
     $606 = $600;
    } else {
     $601 = (_escapeStr()|0);
     $606 = $601;
    }
    $602 = HEAP32[3305]|0;
    $603 = $7;
    $604 = ((($603)) + 24|0);
    $605 = HEAP32[$604>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $605;
    _printFmt($597,$606,$602,$vararg_buffer39);
    $607 = $5;
    $608 = $6;
    $609 = HEAP8[18704]|0;
    $610 = $609 << 24 >> 24;
    HEAP32[$vararg_buffer42>>2] = $610;
    _printFmt($607,$608,23887,$vararg_buffer42);
    STACKTOP = sp;return;
   }
   $611 = $7;
   $612 = ((($611)) + 4|0);
   $613 = HEAP32[$612>>2]|0;
   $614 = ((($613)) + 68|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = HEAP32[3304]|0;
   $617 = ($615|0)==($616|0);
   if ($617) {
    $618 = $5;
    $619 = $6;
    $620 = HEAP8[18705]|0;
    $621 = $620 << 24 >> 24;
    HEAP32[$vararg_buffer45>>2] = $621;
    _printFmt($618,$619,23887,$vararg_buffer45);
    $622 = $5;
    $623 = $6;
    $624 = ($623|0)!=(0|0);
    if ($624) {
     $625 = $6;
     $640 = $625;
    } else {
     $626 = (_escapeStr()|0);
     $640 = $626;
    }
    $627 = HEAP32[3304]|0;
    $628 = $7;
    $629 = ((($628)) + 24|0);
    $630 = $629;
    $631 = $630;
    $632 = HEAP32[$631>>2]|0;
    $633 = (($630) + 4)|0;
    $634 = $633;
    $635 = HEAP32[$634>>2]|0;
    $636 = $vararg_buffer48;
    $637 = $636;
    HEAP32[$637>>2] = $632;
    $638 = (($636) + 4)|0;
    $639 = $638;
    HEAP32[$639>>2] = $635;
    _printFmt($622,$640,$627,$vararg_buffer48);
    $641 = $5;
    $642 = $6;
    $643 = HEAP8[18705]|0;
    $644 = $643 << 24 >> 24;
    HEAP32[$vararg_buffer51>>2] = $644;
    _printFmt($641,$642,23887,$vararg_buffer51);
    STACKTOP = sp;return;
   }
   $645 = $7;
   $646 = ((($645)) + 4|0);
   $647 = HEAP32[$646>>2]|0;
   $648 = ((($647)) + 68|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = HEAP32[3298]|0;
   $651 = ($649|0)==($650|0);
   if ($651) {
    $652 = $5;
    $653 = $6;
    $654 = HEAP32[3298]|0;
    $655 = $7;
    $656 = ((($655)) + 24|0);
    $657 = $656;
    $658 = $657;
    $659 = HEAP32[$658>>2]|0;
    $660 = (($657) + 4)|0;
    $661 = $660;
    $662 = HEAP32[$661>>2]|0;
    HEAP32[$vararg_buffer54>>2] = $659;
    _printFmt($652,$653,$654,$vararg_buffer54);
    STACKTOP = sp;return;
   }
   $663 = $7;
   $664 = ((($663)) + 4|0);
   $665 = HEAP32[$664>>2]|0;
   $666 = ((($665)) + 68|0);
   $667 = HEAP32[$666>>2]|0;
   $668 = HEAP32[3299]|0;
   $669 = ($667|0)==($668|0);
   if ($669) {
    $670 = $5;
    $671 = $6;
    $672 = HEAP32[3299]|0;
    $673 = $7;
    $674 = ((($673)) + 24|0);
    $675 = $674;
    $676 = $675;
    $677 = HEAP32[$676>>2]|0;
    $678 = (($675) + 4)|0;
    $679 = $678;
    $680 = HEAP32[$679>>2]|0;
    $681 = $vararg_buffer57;
    $682 = $681;
    HEAP32[$682>>2] = $677;
    $683 = (($681) + 4)|0;
    $684 = $683;
    HEAP32[$684>>2] = $680;
    _printFmt($670,$671,$672,$vararg_buffer57);
    STACKTOP = sp;return;
   }
   $685 = $7;
   $686 = ((($685)) + 4|0);
   $687 = HEAP32[$686>>2]|0;
   $688 = ((($687)) + 68|0);
   $689 = HEAP32[$688>>2]|0;
   $690 = HEAP32[3300]|0;
   $691 = ($689|0)==($690|0);
   if ($691) {
    $692 = $5;
    $693 = $6;
    $694 = HEAP32[3300]|0;
    $695 = $7;
    $696 = ((($695)) + 24|0);
    $697 = $696;
    $698 = $697;
    $699 = HEAP32[$698>>2]|0;
    $700 = (($697) + 4)|0;
    $701 = $700;
    $702 = HEAP32[$701>>2]|0;
    HEAP32[$vararg_buffer60>>2] = $699;
    _printFmt($692,$693,$694,$vararg_buffer60);
    STACKTOP = sp;return;
   }
   $703 = $7;
   $704 = ((($703)) + 4|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = ((($705)) + 68|0);
   $707 = HEAP32[$706>>2]|0;
   $708 = HEAP32[3301]|0;
   $709 = ($707|0)==($708|0);
   if ($709) {
    $710 = $5;
    $711 = $6;
    $712 = HEAP32[3301]|0;
    $713 = $7;
    $714 = ((($713)) + 24|0);
    $715 = $714;
    $716 = $715;
    $717 = HEAP32[$716>>2]|0;
    $718 = (($715) + 4)|0;
    $719 = $718;
    $720 = HEAP32[$719>>2]|0;
    $721 = $vararg_buffer63;
    $722 = $721;
    HEAP32[$722>>2] = $717;
    $723 = (($721) + 4)|0;
    $724 = $723;
    HEAP32[$724>>2] = $720;
    _printFmt($710,$711,$712,$vararg_buffer63);
    STACKTOP = sp;return;
   }
   $725 = $7;
   $726 = ((($725)) + 4|0);
   $727 = HEAP32[$726>>2]|0;
   $728 = ((($727)) + 68|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = HEAP32[3302]|0;
   $731 = ($729|0)==($730|0);
   if ($731) {
    $732 = $5;
    $733 = $6;
    $734 = HEAP32[3302]|0;
    $735 = $7;
    $736 = ((($735)) + 24|0);
    $737 = +HEAPF64[$736>>3];
    $738 = $737;
    $739 = $738;
    HEAPF64[$vararg_buffer66>>3] = $739;
    _printFmt($732,$733,$734,$vararg_buffer66);
    STACKTOP = sp;return;
   }
   $740 = $7;
   $741 = ((($740)) + 4|0);
   $742 = HEAP32[$741>>2]|0;
   $743 = ((($742)) + 68|0);
   $744 = HEAP32[$743>>2]|0;
   $745 = HEAP32[3303]|0;
   $746 = ($744|0)==($745|0);
   if ($746) {
    $747 = $5;
    $748 = $6;
    $749 = HEAP32[3303]|0;
    $750 = $7;
    $751 = ((($750)) + 24|0);
    $752 = +HEAPF64[$751>>3];
    HEAPF64[$vararg_buffer69>>3] = $752;
    _printFmt($747,$748,$749,$vararg_buffer69);
    STACKTOP = sp;return;
   }
   $753 = $7;
   $754 = ((($753)) + 4|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = ((($755)) + 68|0);
   $757 = HEAP32[$756>>2]|0;
   $758 = HEAP32[3306]|0;
   $759 = ($757|0)==($758|0);
   $760 = $5;
   $761 = $6;
   if ($759) {
    $762 = HEAP32[3306]|0;
    $763 = $7;
    $764 = ((($763)) + 4|0);
    $765 = HEAP32[$764>>2]|0;
    HEAP32[$vararg_buffer72>>2] = $765;
    _printFmt($760,$761,$762,$vararg_buffer72);
    STACKTOP = sp;return;
   } else {
    $766 = $7;
    $767 = ((($766)) + 4|0);
    $768 = HEAP32[$767>>2]|0;
    $769 = ((($768)) + 68|0);
    $770 = HEAP32[$769>>2]|0;
    $771 = $7;
    $772 = ((($771)) + 24|0);
    $773 = $772;
    $774 = $773;
    $775 = HEAP32[$774>>2]|0;
    $776 = (($773) + 4)|0;
    $777 = $776;
    $778 = HEAP32[$777>>2]|0;
    $779 = $vararg_buffer75;
    $780 = $779;
    HEAP32[$780>>2] = $775;
    $781 = (($779) + 4)|0;
    $782 = $781;
    HEAP32[$782>>2] = $778;
    _printFmt($760,$761,$770,$vararg_buffer75);
    STACKTOP = sp;return;
   }
   break;
  }
  case 2:  {
   $783 = $7;
   $784 = ((($783)) + 24|0);
   $785 = ((($784)) + 8|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = ($786|0)!=(0|0);
   if (!($787)) {
    $806 = $5;
    $807 = $6;
    $808 = $7;
    $809 = ((($808)) + 24|0);
    $810 = HEAP32[$809>>2]|0;
    _printStr($806,$807,$810);
    STACKTOP = sp;return;
   }
   $788 = $7;
   $789 = ((($788)) + 24|0);
   $790 = ((($789)) + 8|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = ((($791)) + 64|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = $7;
   $795 = ($793|0)==($794|0);
   $796 = $5;
   $797 = $6;
   $798 = $7;
   $799 = ((($798)) + 24|0);
   $800 = ((($799)) + 8|0);
   $801 = HEAP32[$800>>2]|0;
   if ($795) {
    $802 = $8;
    $803 = $802 & -257;
    $804 = $9;
    $805 = (0 - ($804))|0;
    _printSym($796,$797,$801,$803,$805);
    STACKTOP = sp;return;
   } else {
    _printSym($796,$797,$801,0,0);
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
   $41 = $5;
   $42 = $6;
   $43 = $13;
   $44 = (6704 + (($43*12)|0)|0);
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   _printStr($41,$42,$46);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _printStr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = ($7|0)==(0|0);
 $spec$store$select = $8 ? 33449 : $2;
 $5 = $spec$store$select;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $5;
  $12 = $3;
  (_fputs($11,$12)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = $5;
  $14 = ((($13)) + 1|0);
  $5 = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15 << 24 >> 24;
  $6 = $16;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = $6;
  $20 = $19 & 255;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $4;
   $25 = $6;
   $26 = $25 & 255;
   $27 = (($24) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $3;
   (_fputs($28,$29)|0);
  } else {
   $30 = $6;
   $31 = $30 & 255;
   $32 = $3;
   (_fputc($31,$32)|0);
  }
 }
 STACKTOP = sp;return;
}
function _printFmt($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$6>>2] = $varargs;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _print_fmt($7,$8,$9,$6);
 STACKTOP = sp;return;
}
function _printChr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (_fputc($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _printSym($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $8;
 $23 = $22 & 128;
 $10 = $23;
 $24 = $8;
 $25 = $24 & 4096;
 $11 = $25;
 $26 = $8;
 $27 = $26 & 256;
 $12 = $27;
 $28 = $8;
 $29 = $28 & 512;
 $13 = $29;
 $14 = 0;
 $30 = $8;
 $31 = $30 & 1024;
 $15 = $31;
 $32 = $8;
 $33 = $32 & 2048;
 $16 = $33;
 $34 = $10;
 $35 = ($34|0)!=(0);
 $36 = $16;
 $37 = ($36|0)!=(0);
 $38 = $35 ? 0 : $37;
 $39 = $38&1;
 $17 = $39;
 $40 = $7;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = $5;
  $43 = $6;
  _printStr($42,$43,0);
  STACKTOP = sp;return;
 }
 $44 = $9;
 $45 = ($44|0)>(0);
 if ($45) {
  $46 = $5;
  $47 = $6;
  $48 = $9;
  HEAP32[$vararg_buffer>>2] = $48;
  _printFmt($46,$47,27972,$vararg_buffer);
 } else {
  $49 = $9;
  $50 = (0 - ($49))|0;
  $9 = $50;
 }
 $51 = $11;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $7;
  $54 = (_isStatic_656($53)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $5;
   $57 = $6;
   _printStr($56,$57,23893);
  }
  $58 = $7;
  $59 = (_isConst_658($58)|0);
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $5;
   $62 = $6;
   _printStr($61,$62,23901);
  }
 }
 $63 = $7;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 do {
  if ($65) {
   $66 = $7;
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $12;
    $72 = ($71|0)!=(0);
    $73 = $5;
    $74 = $6;
    $75 = $7;
    if ($72) {
     _printQualified($73,$74,$75);
     break;
    } else {
     $76 = HEAP32[$75>>2]|0;
     _printStr($73,$74,$76);
     break;
    }
   }
  }
 } while(0);
 $77 = $7;
 $78 = ((($77)) + 44|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 48;
 $$off = (($80) + -16)|0;
 $switch = ($$off>>>0)<(1);
 $81 = $7;
 if ($switch) {
  $82 = (_castOf_660($81)|0);
  $83 = ($82|0)==(12);
  if ($83) {
   $84 = $7;
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0|0);
   if (!($86)) {
    STACKTOP = sp;return;
   }
   $87 = $5;
   $88 = $6;
   $89 = $7;
   $90 = $8;
   _printArray($87,$88,$89,$90);
   STACKTOP = sp;return;
  }
  $91 = $17;
  $92 = ($91|0)!=(0);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $5;
  $94 = $6;
  HEAP32[$vararg_buffer2>>2] = 27042;
  _printFmt($93,$94,23908,$vararg_buffer2);
  $95 = $7;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $18 = $97;
  while(1) {
   $98 = $18;
   $99 = ($98|0)!=(0|0);
   $100 = $5;
   $101 = $6;
   if (!($99)) {
    break;
   }
   $102 = $18;
   $103 = $8;
   $104 = $103 & -257;
   $105 = $9;
   $106 = (($105) + 1)|0;
   _printSym($100,$101,$102,$104,$106);
   $107 = $18;
   $108 = ((($107)) + 44|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)!=(16);
   if ($110) {
    $111 = $5;
    $112 = $6;
    _printStr($111,$112,23920);
   }
   $113 = $18;
   $114 = ((($113)) + 24|0);
   $115 = HEAP32[$114>>2]|0;
   $18 = $115;
  }
  $116 = $9;
  HEAP32[$vararg_buffer5>>2] = $116;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 23838;
  _printFmt($100,$101,23923,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $117 = ((($81)) + 28|0);
 $118 = HEAP32[$117>>2]|0;
 $19 = $118;
 $119 = $13;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $7;
  $122 = ((($121)) + 40|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)!=(0|0);
  if ($124) {
   $125 = $7;
   $126 = ((($125)) + 40|0);
   $127 = HEAP32[$126>>2]|0;
   $20 = $127;
   $21 = 1;
   $128 = $14;
   $129 = ($128|0)!=(0);
   if (!($129)) {
    $130 = $20;
    $131 = ((($130)) + 28|0);
    $132 = HEAP32[$131>>2]|0;
    $19 = $132;
    $133 = $20;
    $134 = ((($133)) + 24|0);
    $135 = HEAP32[$134>>2]|0;
    $20 = $135;
    $15 = 1;
   }
   $136 = $5;
   (_printChr($136,40)|0);
   while(1) {
    $137 = $20;
    $138 = ($137|0)!=(0|0);
    if (!($138)) {
     break;
    }
    $139 = $21;
    $140 = ($139|0)!=(0);
    if ($140) {
     $21 = 0;
    } else {
     $141 = $5;
     $142 = $6;
     _printStr($141,$142,27944);
    }
    $143 = $5;
    $144 = $6;
    $145 = $20;
    $146 = $8;
    $147 = $146 | 1024;
    $148 = $147 & -257;
    _printSym($143,$144,$145,$148,0);
    $149 = $20;
    $150 = ((($149)) + 24|0);
    $151 = HEAP32[$150>>2]|0;
    $20 = $151;
   }
   $152 = $5;
   (_printChr($152,41)|0);
  }
 }
 $153 = $15;
 $154 = ($153|0)!=(0);
 $155 = $19;
 $156 = ($155|0)!=(0|0);
 $or$cond = $154 & $156;
 if ($or$cond) {
  $157 = $5;
  $158 = $6;
  _printStr($157,$158,23928);
  $159 = $5;
  $160 = $6;
  $161 = $19;
  $162 = $9;
  $163 = (0 - ($162))|0;
  _printSym($159,$160,$161,0,$163);
 }
 $164 = $16;
 $165 = ($164|0)!=(0);
 if (!($165)) {
  STACKTOP = sp;return;
 }
 $166 = $7;
 $167 = ((($166)) + 56|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if (!($169)) {
  STACKTOP = sp;return;
 }
 $170 = $5;
 $171 = $6;
 _printStr($170,$171,23931);
 $172 = $5;
 $173 = $6;
 $174 = $7;
 $175 = ((($174)) + 56|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $8;
 $178 = $9;
 $179 = (0 - ($178))|0;
 _printAst($172,$173,$176,$177,$179);
 STACKTOP = sp;return;
}
function _escapeStr() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[39248]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  return (33504|0);
 }
 _memset((33504|0),0,1024)|0;
 HEAP32[(33544)>>2] = 28366;
 HEAP32[(33556)>>2] = 28369;
 HEAP32[(33540)>>2] = 28372;
 HEAP32[(33660)>>2] = 23890;
 HEAP32[(33640)>>2] = 28375;
 HEAP8[39248] = 1;
 return (33504|0);
}
function _isStatic_656($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isConst_658($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _printQualified($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $5;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $5;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = ($14|0)!=($15|0);
  if ($16) {
   $17 = $3;
   $18 = $4;
   $19 = $5;
   $20 = ((($19)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   _printQualified($17,$18,$21);
   $22 = $3;
   (_printChr($22,46)|0);
  }
 }
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 $26 = $3;
 $27 = $4;
 if ($25) {
  $28 = $5;
  $29 = HEAP32[$28>>2]|0;
  _printStr($26,$27,$29);
  STACKTOP = sp;return;
 } else {
  _printStr($26,$27,23962);
  STACKTOP = sp;return;
 }
}
function _castOf_660($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _printArray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $6;
  $12 = (_isArrayType_671($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $6;
   $15 = ((($14)) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $8 = $16;
   $17 = $4;
   $18 = $5;
   $19 = $6;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $7;
   _printArray($17,$18,$21,$22);
   $23 = $8;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $8;
    $26 = (_isStatic_656($25)|0);
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $4;
     $29 = $5;
     $30 = $6;
     $31 = ((($30)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $6;
     $34 = ((($33)) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($35)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($32>>>0) / ($37>>>0))&-1;
     HEAP32[$vararg_buffer>>2] = $38;
     _printFmt($28,$29,23950,$vararg_buffer);
     STACKTOP = sp;return;
    }
   }
   $39 = $8;
   $40 = ($39|0)!=(0|0);
   $41 = $4;
   $42 = $5;
   if ($40) {
    _printFmt($41,$42,23955,$vararg_buffer1);
    STACKTOP = sp;return;
   } else {
    _printFmt($41,$42,23958,$vararg_buffer3);
    STACKTOP = sp;return;
   }
  }
 }
 $43 = $4;
 $44 = $5;
 $45 = $6;
 $46 = $7;
 _printSym($43,$44,$45,$46,0);
 STACKTOP = sp;return;
}
function __abort_670() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _isArrayType_671($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _print_fmt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0.0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current27 = 0, $arglist_current33 = 0, $arglist_current36 = 0, $arglist_current39 = 0;
 var $arglist_current42 = 0, $arglist_current45 = 0, $arglist_current48 = 0, $arglist_current51 = 0, $arglist_current54 = 0, $arglist_current57 = 0, $arglist_current60 = 0, $arglist_current63 = 0, $arglist_current71 = 0, $arglist_current74 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next28 = 0, $arglist_next34 = 0, $arglist_next37 = 0, $arglist_next40 = 0, $arglist_next43 = 0, $arglist_next46 = 0;
 var $arglist_next49 = 0, $arglist_next52 = 0, $arglist_next55 = 0, $arglist_next58 = 0, $arglist_next61 = 0, $arglist_next64 = 0, $arglist_next72 = 0, $arglist_next75 = 0, $arglist_next9 = 0, $expanded = 0, $expanded100 = 0, $expanded101 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded108 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0;
 var $expanded114 = 0, $expanded115 = 0, $expanded117 = 0, $expanded118 = 0, $expanded120 = 0, $expanded121 = 0, $expanded122 = 0, $expanded124 = 0, $expanded125 = 0, $expanded127 = 0, $expanded128 = 0, $expanded129 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded136 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0;
 var $expanded142 = 0, $expanded143 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded150 = 0, $expanded152 = 0, $expanded153 = 0, $expanded155 = 0, $expanded156 = 0, $expanded157 = 0, $expanded159 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded164 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0;
 var $expanded170 = 0, $expanded171 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded178 = 0, $expanded180 = 0, $expanded181 = 0, $expanded183 = 0, $expanded184 = 0, $expanded185 = 0, $expanded187 = 0, $expanded188 = 0, $expanded190 = 0, $expanded191 = 0, $expanded192 = 0, $expanded194 = 0, $expanded195 = 0, $expanded197 = 0;
 var $expanded198 = 0, $expanded199 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded80 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded87 = 0, $expanded89 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded94 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0, $or$cond = 0;
 var $or$cond4 = 0, $or$cond6 = 0, $vararg_buffer = 0, $vararg_buffer20 = 0, $vararg_buffer29 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $vararg_buffer67 = sp + 1160|0;
 $vararg_buffer65 = sp + 1152|0;
 $vararg_buffer29 = sp + 1144|0;
 $vararg_buffer20 = sp + 1128|0;
 $vararg_buffer = sp + 1104|0;
 $8 = sp;
 $38 = sp + 1096|0;
 $39 = sp + 1088|0;
 $42 = sp + 1080|0;
 $43 = sp + 1072|0;
 $46 = sp + 1064|0;
 $47 = sp + 1056|0;
 $52 = sp + 1048|0;
 $53 = sp + 1040|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 L1: while(1) {
  $58 = $6;
  $59 = ((($58)) + 1|0);
  $6 = $59;
  $60 = HEAP8[$58>>0]|0;
  $9 = $60;
  $61 = ($60<<24>>24)!=(0);
  if (!($61)) {
   label = 175;
   break;
  }
  $62 = $9;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(37);
  if ($64) {
   $10 = 0;
   $11 = 0;
   $12 = 0;
   $13 = 0;
   $14 = 0;
   $15 = 1;
   $65 = $6;
   $66 = ((($65)) + -1|0);
   $16 = $66;
   $17 = 0;
   $67 = $6;
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($69|0)==(63);
   if ($70) {
    $71 = $6;
    $72 = ((($71)) + 1|0);
    $6 = $72;
    $73 = HEAP8[$71>>0]|0;
    $10 = $73;
   }
   $74 = $6;
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = ($76|0)==(43);
   if ($77) {
    label = 8;
   } else {
    $78 = $6;
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)==(45);
    if ($81) {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $82 = $6;
    $83 = ((($82)) + 1|0);
    $6 = $83;
    $84 = HEAP8[$82>>0]|0;
    $11 = $84;
   }
   $85 = $6;
   $86 = HEAP8[$85>>0]|0;
   $87 = $86 << 24 >> 24;
   $88 = ($87|0)==(48);
   if ($88) {
    label = 11;
   } else {
    $89 = $6;
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = ($91|0)==(32);
    if ($92) {
     label = 11;
    }
   }
   if ((label|0) == 11) {
    label = 0;
    $93 = $6;
    $94 = ((($93)) + 1|0);
    $6 = $94;
    $95 = HEAP8[$93>>0]|0;
    $12 = $95;
   }
   while(1) {
    $96 = $6;
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    $99 = ($98|0)>=(48);
    if (!($99)) {
     break;
    }
    $100 = $6;
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    $103 = ($102|0)<=(57);
    if (!($103)) {
     break;
    }
    $104 = $13;
    $105 = ($104*10)|0;
    $106 = $6;
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $109 = (($108) - 48)|0;
    $110 = (($105) + ($109))|0;
    $13 = $110;
    $111 = $6;
    $112 = ((($111)) + 1|0);
    $6 = $112;
   }
   $113 = $6;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114 << 24 >> 24;
   $116 = ($115|0)==(46);
   L24: do {
    if ($116) {
     $117 = $6;
     $118 = ((($117)) + 1|0);
     $6 = $118;
     $15 = 0;
     $119 = $6;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120 << 24 >> 24;
     $122 = ($121|0)==(42);
     if ($122) {
      $123 = $7;
      $arglist_current = HEAP32[$123>>2]|0;
      $124 = $arglist_current;
      $125 = ((0) + 4|0);
      $expanded76 = $125;
      $expanded = (($expanded76) - 1)|0;
      $126 = (($124) + ($expanded))|0;
      $127 = ((0) + 4|0);
      $expanded80 = $127;
      $expanded79 = (($expanded80) - 1)|0;
      $expanded78 = $expanded79 ^ -1;
      $128 = $126 & $expanded78;
      $129 = $128;
      $130 = HEAP32[$129>>2]|0;
      $arglist_next = ((($129)) + 4|0);
      HEAP32[$123>>2] = $arglist_next;
      $18 = $130;
      $131 = $18;
      $14 = $131;
      $132 = $6;
      $133 = ((($132)) + 1|0);
      $6 = $133;
      break;
     }
     $14 = 0;
     while(1) {
      $134 = $6;
      $135 = HEAP8[$134>>0]|0;
      $136 = $135 << 24 >> 24;
      $137 = ($136|0)>=(48);
      if (!($137)) {
       break L24;
      }
      $138 = $6;
      $139 = HEAP8[$138>>0]|0;
      $140 = $139 << 24 >> 24;
      $141 = ($140|0)<=(57);
      if (!($141)) {
       break L24;
      }
      $142 = $14;
      $143 = ($142*10)|0;
      $144 = $6;
      $145 = HEAP8[$144>>0]|0;
      $146 = $145 << 24 >> 24;
      $147 = (($146) - 48)|0;
      $148 = (($143) + ($147))|0;
      $14 = $148;
      $149 = $6;
      $150 = ((($149)) + 1|0);
      $6 = $150;
     }
    }
   } while(0);
   $151 = $6;
   $152 = ((($151)) + 1|0);
   $6 = $152;
   $153 = HEAP8[$151>>0]|0;
   $9 = $153;
   $154 = $153 << 24 >> 24;
   L34: do {
    switch ($154|0) {
    case 0:  {
     $155 = $6;
     $156 = ((($155)) + -1|0);
     $6 = $156;
     continue L1;
     break;
    }
    case 84:  {
     $160 = $7;
     $arglist_current8 = HEAP32[$160>>2]|0;
     $161 = $arglist_current8;
     $162 = ((0) + 4|0);
     $expanded83 = $162;
     $expanded82 = (($expanded83) - 1)|0;
     $163 = (($161) + ($expanded82))|0;
     $164 = ((0) + 4|0);
     $expanded87 = $164;
     $expanded86 = (($expanded87) - 1)|0;
     $expanded85 = $expanded86 ^ -1;
     $165 = $163 & $expanded85;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $arglist_next9 = ((($166)) + 4|0);
     HEAP32[$160>>2] = $arglist_next9;
     $20 = $167;
     $168 = $20;
     $19 = $168;
     $169 = $19;
     $170 = ($169|0)==(0|0);
     if ($170) {
      $171 = $10;
      $172 = $171 << 24 >> 24;
      $173 = ($172|0)!=(0);
      if ($173) {
       $174 = $12;
       $175 = $174 << 24 >> 24;
       $176 = ($175|0)!=(0);
       if ($176) {
        $177 = $4;
        $178 = $12;
        $179 = $178 << 24 >> 24;
        (_printChr($177,$179)|0);
       }
       continue L1;
      }
     }
     $180 = $11;
     $181 = $180 << 24 >> 24;
     switch ($181|0) {
     case 45:  {
      $184 = $13;
      $185 = (0 - ($184))|0;
      $13 = $185;
      label = 35;
      break;
     }
     case 43:  {
      label = 35;
      break;
     }
     default: {
      $182 = $15;
      $183 = ($182|0)!=(0);
      if ($183) {
       $14 = 896;
      }
     }
     }
     if ((label|0) == 35) {
      label = 0;
      $186 = $15;
      $187 = ($186|0)!=(0);
      if ($187) {
       $14 = 7936;
      }
     }
     $188 = $4;
     $189 = $5;
     $190 = $19;
     $191 = $14;
     $192 = $13;
     _printSym($188,$189,$190,$191,$192);
     continue L1;
     break;
    }
    case 116:  {
     $193 = $7;
     $arglist_current11 = HEAP32[$193>>2]|0;
     $194 = $arglist_current11;
     $195 = ((0) + 4|0);
     $expanded90 = $195;
     $expanded89 = (($expanded90) - 1)|0;
     $196 = (($194) + ($expanded89))|0;
     $197 = ((0) + 4|0);
     $expanded94 = $197;
     $expanded93 = (($expanded94) - 1)|0;
     $expanded92 = $expanded93 ^ -1;
     $198 = $196 & $expanded92;
     $199 = $198;
     $200 = HEAP32[$199>>2]|0;
     $arglist_next12 = ((($199)) + 4|0);
     HEAP32[$193>>2] = $arglist_next12;
     $22 = $200;
     $201 = $22;
     $21 = $201;
     $202 = $21;
     $203 = ($202|0)==(0|0);
     if ($203) {
      $204 = $10;
      $205 = $204 << 24 >> 24;
      $206 = ($205|0)!=(0);
      if ($206) {
       $207 = $12;
       $208 = $207 << 24 >> 24;
       $209 = ($208|0)!=(0);
       if ($209) {
        $210 = $4;
        $211 = $12;
        $212 = $211 << 24 >> 24;
        (_printChr($210,$212)|0);
       }
       continue L1;
      }
     }
     $213 = $11;
     $214 = $213 << 24 >> 24;
     switch ($214|0) {
     case 45:  {
      $217 = $13;
      $218 = (0 - ($217))|0;
      $13 = $218;
      label = 47;
      break;
     }
     case 43:  {
      label = 47;
      break;
     }
     default: {
      $215 = $15;
      $216 = ($215|0)!=(0);
      if ($216) {
       $14 = 896;
      }
     }
     }
     if ((label|0) == 47) {
      label = 0;
      $219 = $15;
      $220 = ($219|0)!=(0);
      if ($220) {
       $14 = 7936;
      }
     }
     $221 = $4;
     $222 = $5;
     $223 = $21;
     $224 = $14;
     $225 = $13;
     _printAst($221,$222,$223,$224,$225);
     continue L1;
     break;
    }
    case 75:  {
     $226 = $7;
     $arglist_current14 = HEAP32[$226>>2]|0;
     $227 = $arglist_current14;
     $228 = ((0) + 4|0);
     $expanded97 = $228;
     $expanded96 = (($expanded97) - 1)|0;
     $229 = (($227) + ($expanded96))|0;
     $230 = ((0) + 4|0);
     $expanded101 = $230;
     $expanded100 = (($expanded101) - 1)|0;
     $expanded99 = $expanded100 ^ -1;
     $231 = $229 & $expanded99;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $arglist_next15 = ((($232)) + 4|0);
     HEAP32[$226>>2] = $arglist_next15;
     $24 = $233;
     $234 = $24;
     $23 = $234;
     $25 = 39249;
     $26 = 39249;
     $27 = 39249;
     $28 = 39249;
     $29 = 23964;
     $235 = $10;
     $236 = $235 << 24 >> 24;
     $237 = ($236|0)!=(0);
     $238 = $23;
     $239 = ($238|0)==(0);
     $or$cond = $237 & $239;
     if ($or$cond) {
      $240 = $12;
      $241 = $240 << 24 >> 24;
      $242 = ($241|0)!=(0);
      if ($242) {
       $243 = $4;
       $244 = $12;
       $245 = $244 << 24 >> 24;
       (_printChr($243,$245)|0);
      }
      continue L1;
     }
     $246 = $23;
     $247 = $246 & 15;
     do {
      switch ($247|0) {
      case 0:  {
       $29 = 0;
       break;
      }
      case 1:  {
       $29 = 23968;
       break;
      }
      case 2:  {
       $29 = 23973;
       break;
      }
      case 3:  {
       $29 = 23978;
       break;
      }
      case 4:  {
       $29 = 23982;
       break;
      }
      case 5:  {
       $29 = 23986;
       break;
      }
      case 6:  {
       $29 = 23990;
       break;
      }
      case 7:  {
       $29 = 23994;
       break;
      }
      case 8:  {
       $29 = 23998;
       break;
      }
      case 9:  {
       $29 = 24002;
       break;
      }
      case 10:  {
       $29 = 24006;
       break;
      }
      case 12:  {
       $29 = 24010;
       break;
      }
      case 11:  {
       $29 = 26338;
       break;
      }
      default: {
      }
      }
     } while(0);
     $248 = $23;
     $249 = $248 & 48;
     $250 = (($249) - 0)|0;
     $251 = $250 >>> 4;
     $252 = $250 << 28;
     $253 = $251 | $252;
     L91: do {
      switch ($253|0) {
      case 0:  {
       $254 = $29;
       $255 = ($254|0)!=(0|0);
       if ($255) {
        $256 = $29;
        $28 = $256;
        $29 = 0;
        break L91;
       }
       $257 = $10;
       $258 = ($257<<24>>24)!=(0);
       if (!($258)) {
        $28 = 24014;
       }
       break;
      }
      case 1:  {
       $28 = 24021;
       break;
      }
      case 2:  {
       $28 = 24030;
       break;
      }
      case 3:  {
       $28 = 24039;
       break;
      }
      default: {
       label = 69;
       break L1;
      }
      }
     } while(0);
     $259 = $23;
     $260 = $259 & 64;
     $261 = ($260|0)!=(0);
     if ($261) {
      $25 = 23893;
     }
     $262 = $23;
     $263 = $262 & 128;
     $264 = ($263|0)!=(0);
     if ($264) {
      $26 = 23901;
     }
     $265 = $23;
     $266 = $265 & 256;
     $267 = ($266|0)!=(0);
     if ($267) {
      $26 = 24048;
     }
     $268 = $29;
     $269 = ($268|0)!=(0|0);
     $270 = $25;
     $271 = $26;
     $272 = $27;
     $273 = $28;
     if ($269) {
      $274 = $29;
      HEAP32[$vararg_buffer>>2] = $270;
      $vararg_ptr16 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $271;
      $vararg_ptr17 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr17>>2] = $272;
      $vararg_ptr18 = ((($vararg_buffer)) + 12|0);
      HEAP32[$vararg_ptr18>>2] = $273;
      $vararg_ptr19 = ((($vararg_buffer)) + 16|0);
      HEAP32[$vararg_ptr19>>2] = $274;
      (_snprintf($8,1024,24058,$vararg_buffer)|0);
     } else {
      HEAP32[$vararg_buffer20>>2] = $270;
      $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
      HEAP32[$vararg_ptr23>>2] = $271;
      $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
      HEAP32[$vararg_ptr24>>2] = $272;
      $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
      HEAP32[$vararg_ptr25>>2] = $273;
      (_snprintf($8,1024,24071,$vararg_buffer20)|0);
     }
     $17 = $8;
     break;
    }
    case 107:  {
     $275 = $7;
     $arglist_current27 = HEAP32[$275>>2]|0;
     $276 = $arglist_current27;
     $277 = ((0) + 4|0);
     $expanded104 = $277;
     $expanded103 = (($expanded104) - 1)|0;
     $278 = (($276) + ($expanded103))|0;
     $279 = ((0) + 4|0);
     $expanded108 = $279;
     $expanded107 = (($expanded108) - 1)|0;
     $expanded106 = $expanded107 ^ -1;
     $280 = $278 & $expanded106;
     $281 = $280;
     $282 = HEAP32[$281>>2]|0;
     $arglist_next28 = ((($281)) + 4|0);
     HEAP32[$275>>2] = $arglist_next28;
     $31 = $282;
     $283 = $31;
     $30 = $283;
     $284 = $30;
     $285 = ($284|0)==(0);
     if ($285) {
      $286 = $10;
      $287 = $286 << 24 >> 24;
      $288 = ($287|0)!=(0);
      if ($288) {
       $289 = $12;
       $290 = $289 << 24 >> 24;
       $291 = ($290|0)!=(0);
       if ($291) {
        $292 = $4;
        $293 = $12;
        $294 = $293 << 24 >> 24;
        (_printChr($292,$294)|0);
       }
       continue L1;
      }
     }
     $295 = $30;
     $296 = ($295>>>0)<(68);
     if ($296) {
      $297 = $30;
      $298 = (6704 + (($297*12)|0)|0);
      $299 = ((($298)) + 8|0);
      $300 = HEAP32[$299>>2]|0;
      $17 = $300;
      break L34;
     } else {
      $301 = $30;
      HEAP32[$vararg_buffer29>>2] = $301;
      (_snprintf($8,1024,24080,$vararg_buffer29)|0);
      $17 = $8;
      break L34;
     }
     break;
    }
    case 65:  {
     $302 = $7;
     $arglist_current33 = HEAP32[$302>>2]|0;
     $303 = $arglist_current33;
     $304 = ((0) + 4|0);
     $expanded111 = $304;
     $expanded110 = (($expanded111) - 1)|0;
     $305 = (($303) + ($expanded110))|0;
     $306 = ((0) + 4|0);
     $expanded115 = $306;
     $expanded114 = (($expanded115) - 1)|0;
     $expanded113 = $expanded114 ^ -1;
     $307 = $305 & $expanded113;
     $308 = $307;
     $309 = HEAP32[$308>>2]|0;
     $arglist_next34 = ((($308)) + 4|0);
     HEAP32[$302>>2] = $arglist_next34;
     $33 = $309;
     $310 = $33;
     $32 = $310;
     $311 = $32;
     $312 = ($311|0)==(0|0);
     if ($312) {
      $313 = $10;
      $314 = $313 << 24 >> 24;
      $315 = ($314|0)!=(0);
      if ($315) {
       $17 = 39249;
       $13 = 1;
       break L34;
      }
     }
     $316 = $4;
     $317 = $5;
     $318 = $32;
     $319 = $14;
     _printAsm($316,$317,0,$318,$319);
     continue L1;
     break;
    }
    case 73:  {
     $320 = $7;
     $arglist_current36 = HEAP32[$320>>2]|0;
     $321 = $arglist_current36;
     $322 = ((0) + 4|0);
     $expanded118 = $322;
     $expanded117 = (($expanded118) - 1)|0;
     $323 = (($321) + ($expanded117))|0;
     $324 = ((0) + 4|0);
     $expanded122 = $324;
     $expanded121 = (($expanded122) - 1)|0;
     $expanded120 = $expanded121 ^ -1;
     $325 = $323 & $expanded120;
     $326 = $325;
     $327 = HEAP32[$326>>2]|0;
     $arglist_next37 = ((($326)) + 4|0);
     HEAP32[$320>>2] = $arglist_next37;
     $35 = $327;
     $328 = $35;
     $34 = $328;
     $329 = $13;
     $330 = ($329|0)!=(0);
     if ($330) {
      $331 = $13;
      $332 = $34;
      $333 = Math_imul($331, $332)|0;
      $335 = $333;
     } else {
      $334 = $34;
      $335 = $334;
     }
     $13 = $335;
     $336 = $12;
     $337 = $336 << 24 >> 24;
     $338 = ($337|0)==(0);
     if ($338) {
      $12 = 9;
     }
     $17 = 39249;
     break;
    }
    case 98:  {
     $339 = $7;
     $arglist_current39 = HEAP32[$339>>2]|0;
     $340 = $arglist_current39;
     $341 = ((0) + 4|0);
     $expanded125 = $341;
     $expanded124 = (($expanded125) - 1)|0;
     $342 = (($340) + ($expanded124))|0;
     $343 = ((0) + 4|0);
     $expanded129 = $343;
     $expanded128 = (($expanded129) - 1)|0;
     $expanded127 = $expanded128 ^ -1;
     $344 = $342 & $expanded127;
     $345 = $344;
     $346 = HEAP32[$345>>2]|0;
     $arglist_next40 = ((($345)) + 4|0);
     HEAP32[$339>>2] = $arglist_next40;
     $37 = $346;
     $347 = $37;
     $36 = $347;
     $348 = $36;
     $349 = ($348|0)==(0);
     if ($349) {
      $350 = $10;
      $351 = $350 << 24 >> 24;
      $352 = ($351|0)!=(0);
      if ($352) {
       $353 = $12;
       $354 = $353 << 24 >> 24;
       $355 = ($354|0)!=(0);
       $356 = $355&1;
       $13 = $356;
       $17 = 39249;
       break L34;
      }
     }
     $357 = $14;
     $358 = $36;
     $359 = (_formatNum($8,1024,$357,2,$358,0)|0);
     $17 = $359;
     break;
    }
    case 66:  {
     $360 = $7;
     $arglist_current42 = HEAP32[$360>>2]|0;
     $361 = $arglist_current42;
     $362 = ((0) + 8|0);
     $expanded132 = $362;
     $expanded131 = (($expanded132) - 1)|0;
     $363 = (($361) + ($expanded131))|0;
     $364 = ((0) + 8|0);
     $expanded136 = $364;
     $expanded135 = (($expanded136) - 1)|0;
     $expanded134 = $expanded135 ^ -1;
     $365 = $363 & $expanded134;
     $366 = $365;
     $367 = $366;
     $368 = $367;
     $369 = HEAP32[$368>>2]|0;
     $370 = (($367) + 4)|0;
     $371 = $370;
     $372 = HEAP32[$371>>2]|0;
     $arglist_next43 = ((($366)) + 8|0);
     HEAP32[$360>>2] = $arglist_next43;
     $373 = $39;
     $374 = $373;
     HEAP32[$374>>2] = $369;
     $375 = (($373) + 4)|0;
     $376 = $375;
     HEAP32[$376>>2] = $372;
     $377 = $39;
     $378 = $377;
     $379 = HEAP32[$378>>2]|0;
     $380 = (($377) + 4)|0;
     $381 = $380;
     $382 = HEAP32[$381>>2]|0;
     $383 = $38;
     $384 = $383;
     HEAP32[$384>>2] = $379;
     $385 = (($383) + 4)|0;
     $386 = $385;
     HEAP32[$386>>2] = $382;
     $387 = $38;
     $388 = $387;
     $389 = HEAP32[$388>>2]|0;
     $390 = (($387) + 4)|0;
     $391 = $390;
     $392 = HEAP32[$391>>2]|0;
     $393 = ($389|0)==(0);
     $394 = ($392|0)==(0);
     $395 = $393 & $394;
     if ($395) {
      $396 = $10;
      $397 = $396 << 24 >> 24;
      $398 = ($397|0)!=(0);
      if ($398) {
       $399 = $12;
       $400 = $399 << 24 >> 24;
       $401 = ($400|0)!=(0);
       $402 = $401&1;
       $13 = $402;
       $17 = 39249;
       break L34;
      }
     }
     $403 = $14;
     $404 = $38;
     $405 = $404;
     $406 = HEAP32[$405>>2]|0;
     $407 = (($404) + 4)|0;
     $408 = $407;
     $409 = HEAP32[$408>>2]|0;
     $410 = (_formatNum($8,1024,$403,2,$406,$409)|0);
     $17 = $410;
     break;
    }
    case 111:  {
     $411 = $7;
     $arglist_current45 = HEAP32[$411>>2]|0;
     $412 = $arglist_current45;
     $413 = ((0) + 4|0);
     $expanded139 = $413;
     $expanded138 = (($expanded139) - 1)|0;
     $414 = (($412) + ($expanded138))|0;
     $415 = ((0) + 4|0);
     $expanded143 = $415;
     $expanded142 = (($expanded143) - 1)|0;
     $expanded141 = $expanded142 ^ -1;
     $416 = $414 & $expanded141;
     $417 = $416;
     $418 = HEAP32[$417>>2]|0;
     $arglist_next46 = ((($417)) + 4|0);
     HEAP32[$411>>2] = $arglist_next46;
     $41 = $418;
     $419 = $41;
     $40 = $419;
     $420 = $40;
     $421 = ($420|0)==(0);
     if ($421) {
      $422 = $10;
      $423 = $422 << 24 >> 24;
      $424 = ($423|0)!=(0);
      if ($424) {
       $425 = $12;
       $426 = $425 << 24 >> 24;
       $427 = ($426|0)!=(0);
       $428 = $427&1;
       $13 = $428;
       $17 = 39249;
       break L34;
      }
     }
     $429 = $14;
     $430 = $40;
     $431 = (_formatNum($8,1024,$429,8,$430,0)|0);
     $17 = $431;
     break;
    }
    case 79:  {
     $432 = $7;
     $arglist_current48 = HEAP32[$432>>2]|0;
     $433 = $arglist_current48;
     $434 = ((0) + 8|0);
     $expanded146 = $434;
     $expanded145 = (($expanded146) - 1)|0;
     $435 = (($433) + ($expanded145))|0;
     $436 = ((0) + 8|0);
     $expanded150 = $436;
     $expanded149 = (($expanded150) - 1)|0;
     $expanded148 = $expanded149 ^ -1;
     $437 = $435 & $expanded148;
     $438 = $437;
     $439 = $438;
     $440 = $439;
     $441 = HEAP32[$440>>2]|0;
     $442 = (($439) + 4)|0;
     $443 = $442;
     $444 = HEAP32[$443>>2]|0;
     $arglist_next49 = ((($438)) + 8|0);
     HEAP32[$432>>2] = $arglist_next49;
     $445 = $43;
     $446 = $445;
     HEAP32[$446>>2] = $441;
     $447 = (($445) + 4)|0;
     $448 = $447;
     HEAP32[$448>>2] = $444;
     $449 = $43;
     $450 = $449;
     $451 = HEAP32[$450>>2]|0;
     $452 = (($449) + 4)|0;
     $453 = $452;
     $454 = HEAP32[$453>>2]|0;
     $455 = $42;
     $456 = $455;
     HEAP32[$456>>2] = $451;
     $457 = (($455) + 4)|0;
     $458 = $457;
     HEAP32[$458>>2] = $454;
     $459 = $42;
     $460 = $459;
     $461 = HEAP32[$460>>2]|0;
     $462 = (($459) + 4)|0;
     $463 = $462;
     $464 = HEAP32[$463>>2]|0;
     $465 = ($461|0)==(0);
     $466 = ($464|0)==(0);
     $467 = $465 & $466;
     if ($467) {
      $468 = $10;
      $469 = $468 << 24 >> 24;
      $470 = ($469|0)!=(0);
      if ($470) {
       $471 = $12;
       $472 = $471 << 24 >> 24;
       $473 = ($472|0)!=(0);
       $474 = $473&1;
       $13 = $474;
       $17 = 39249;
       break L34;
      }
     }
     $475 = $14;
     $476 = $42;
     $477 = $476;
     $478 = HEAP32[$477>>2]|0;
     $479 = (($476) + 4)|0;
     $480 = $479;
     $481 = HEAP32[$480>>2]|0;
     $482 = (_formatNum($8,1024,$475,8,$478,$481)|0);
     $17 = $482;
     break;
    }
    case 120:  {
     $483 = $7;
     $arglist_current51 = HEAP32[$483>>2]|0;
     $484 = $arglist_current51;
     $485 = ((0) + 4|0);
     $expanded153 = $485;
     $expanded152 = (($expanded153) - 1)|0;
     $486 = (($484) + ($expanded152))|0;
     $487 = ((0) + 4|0);
     $expanded157 = $487;
     $expanded156 = (($expanded157) - 1)|0;
     $expanded155 = $expanded156 ^ -1;
     $488 = $486 & $expanded155;
     $489 = $488;
     $490 = HEAP32[$489>>2]|0;
     $arglist_next52 = ((($489)) + 4|0);
     HEAP32[$483>>2] = $arglist_next52;
     $45 = $490;
     $491 = $45;
     $44 = $491;
     $492 = $44;
     $493 = ($492|0)==(0);
     if ($493) {
      $494 = $10;
      $495 = $494 << 24 >> 24;
      $496 = ($495|0)!=(0);
      if ($496) {
       $497 = $12;
       $498 = $497 << 24 >> 24;
       $499 = ($498|0)!=(0);
       $500 = $499&1;
       $13 = $500;
       $17 = 39249;
       break L34;
      }
     }
     $501 = $14;
     $502 = $44;
     $503 = (_formatNum($8,1024,$501,16,$502,0)|0);
     $17 = $503;
     break;
    }
    case 88:  {
     $504 = $7;
     $arglist_current54 = HEAP32[$504>>2]|0;
     $505 = $arglist_current54;
     $506 = ((0) + 8|0);
     $expanded160 = $506;
     $expanded159 = (($expanded160) - 1)|0;
     $507 = (($505) + ($expanded159))|0;
     $508 = ((0) + 8|0);
     $expanded164 = $508;
     $expanded163 = (($expanded164) - 1)|0;
     $expanded162 = $expanded163 ^ -1;
     $509 = $507 & $expanded162;
     $510 = $509;
     $511 = $510;
     $512 = $511;
     $513 = HEAP32[$512>>2]|0;
     $514 = (($511) + 4)|0;
     $515 = $514;
     $516 = HEAP32[$515>>2]|0;
     $arglist_next55 = ((($510)) + 8|0);
     HEAP32[$504>>2] = $arglist_next55;
     $517 = $47;
     $518 = $517;
     HEAP32[$518>>2] = $513;
     $519 = (($517) + 4)|0;
     $520 = $519;
     HEAP32[$520>>2] = $516;
     $521 = $47;
     $522 = $521;
     $523 = HEAP32[$522>>2]|0;
     $524 = (($521) + 4)|0;
     $525 = $524;
     $526 = HEAP32[$525>>2]|0;
     $527 = $46;
     $528 = $527;
     HEAP32[$528>>2] = $523;
     $529 = (($527) + 4)|0;
     $530 = $529;
     HEAP32[$530>>2] = $526;
     $531 = $46;
     $532 = $531;
     $533 = HEAP32[$532>>2]|0;
     $534 = (($531) + 4)|0;
     $535 = $534;
     $536 = HEAP32[$535>>2]|0;
     $537 = ($533|0)==(0);
     $538 = ($536|0)==(0);
     $539 = $537 & $538;
     if ($539) {
      $540 = $10;
      $541 = $540 << 24 >> 24;
      $542 = ($541|0)!=(0);
      if ($542) {
       $543 = $12;
       $544 = $543 << 24 >> 24;
       $545 = ($544|0)!=(0);
       $546 = $545&1;
       $13 = $546;
       $17 = 39249;
       break L34;
      }
     }
     $547 = $14;
     $548 = $46;
     $549 = $548;
     $550 = HEAP32[$549>>2]|0;
     $551 = (($548) + 4)|0;
     $552 = $551;
     $553 = HEAP32[$552>>2]|0;
     $554 = (_formatNum($8,1024,$547,16,$550,$553)|0);
     $17 = $554;
     break;
    }
    case 100: case 117:  {
     $48 = 0;
     $555 = $7;
     $arglist_current57 = HEAP32[$555>>2]|0;
     $556 = $arglist_current57;
     $557 = ((0) + 4|0);
     $expanded167 = $557;
     $expanded166 = (($expanded167) - 1)|0;
     $558 = (($556) + ($expanded166))|0;
     $559 = ((0) + 4|0);
     $expanded171 = $559;
     $expanded170 = (($expanded171) - 1)|0;
     $expanded169 = $expanded170 ^ -1;
     $560 = $558 & $expanded169;
     $561 = $560;
     $562 = HEAP32[$561>>2]|0;
     $arglist_next58 = ((($561)) + 4|0);
     HEAP32[$555>>2] = $arglist_next58;
     $50 = $562;
     $563 = $50;
     $49 = $563;
     $564 = $49;
     $565 = ($564|0)==(0);
     if ($565) {
      $566 = $10;
      $567 = $566 << 24 >> 24;
      $568 = ($567|0)!=(0);
      if ($568) {
       $569 = $12;
       $570 = $569 << 24 >> 24;
       $571 = ($570|0)!=(0);
       $572 = $571&1;
       $13 = $572;
       $17 = 39249;
       break L34;
      }
     }
     $573 = $9;
     $574 = $573 << 24 >> 24;
     $575 = ($574|0)==(100);
     $576 = $49;
     $577 = ($576|0)<(0);
     $or$cond4 = $575 & $577;
     if ($or$cond4) {
      $578 = $49;
      $579 = (0 - ($578))|0;
      $49 = $579;
      $48 = -1;
     }
     $580 = $14;
     $581 = $49;
     $582 = (_formatNum($8,1024,$580,10,$581,0)|0);
     $17 = $582;
     $583 = $48;
     $584 = ($583|0)!=(0);
     if ($584) {
      $585 = $17;
      $586 = ((($585)) + -1|0);
      $17 = $586;
      HEAP8[$586>>0] = 45;
      break L34;
     }
     $587 = $11;
     $588 = $587 << 24 >> 24;
     $589 = ($588|0)==(43);
     if ($589) {
      $590 = $17;
      $591 = ((($590)) + -1|0);
      $17 = $591;
      HEAP8[$591>>0] = 43;
     }
     break;
    }
    case 68: case 85:  {
     $51 = 0;
     $592 = $7;
     $arglist_current60 = HEAP32[$592>>2]|0;
     $593 = $arglist_current60;
     $594 = ((0) + 8|0);
     $expanded174 = $594;
     $expanded173 = (($expanded174) - 1)|0;
     $595 = (($593) + ($expanded173))|0;
     $596 = ((0) + 8|0);
     $expanded178 = $596;
     $expanded177 = (($expanded178) - 1)|0;
     $expanded176 = $expanded177 ^ -1;
     $597 = $595 & $expanded176;
     $598 = $597;
     $599 = $598;
     $600 = $599;
     $601 = HEAP32[$600>>2]|0;
     $602 = (($599) + 4)|0;
     $603 = $602;
     $604 = HEAP32[$603>>2]|0;
     $arglist_next61 = ((($598)) + 8|0);
     HEAP32[$592>>2] = $arglist_next61;
     $605 = $53;
     $606 = $605;
     HEAP32[$606>>2] = $601;
     $607 = (($605) + 4)|0;
     $608 = $607;
     HEAP32[$608>>2] = $604;
     $609 = $53;
     $610 = $609;
     $611 = HEAP32[$610>>2]|0;
     $612 = (($609) + 4)|0;
     $613 = $612;
     $614 = HEAP32[$613>>2]|0;
     $615 = $52;
     $616 = $615;
     HEAP32[$616>>2] = $611;
     $617 = (($615) + 4)|0;
     $618 = $617;
     HEAP32[$618>>2] = $614;
     $619 = $52;
     $620 = $619;
     $621 = HEAP32[$620>>2]|0;
     $622 = (($619) + 4)|0;
     $623 = $622;
     $624 = HEAP32[$623>>2]|0;
     $625 = ($621|0)==(0);
     $626 = ($624|0)==(0);
     $627 = $625 & $626;
     if ($627) {
      $628 = $10;
      $629 = $628 << 24 >> 24;
      $630 = ($629|0)!=(0);
      if ($630) {
       $631 = $12;
       $632 = $631 << 24 >> 24;
       $633 = ($632|0)!=(0);
       $634 = $633&1;
       $13 = $634;
       $17 = 39249;
       break L34;
      }
     }
     $635 = $9;
     $636 = $635 << 24 >> 24;
     $637 = ($636|0)==(68);
     $638 = $52;
     $639 = $638;
     $640 = HEAP32[$639>>2]|0;
     $641 = (($638) + 4)|0;
     $642 = $641;
     $643 = HEAP32[$642>>2]|0;
     $644 = ($643|0)<(0);
     $or$cond6 = $637 & $644;
     if ($or$cond6) {
      $645 = $52;
      $646 = $645;
      $647 = HEAP32[$646>>2]|0;
      $648 = (($645) + 4)|0;
      $649 = $648;
      $650 = HEAP32[$649>>2]|0;
      $651 = (_i64Subtract(0,0,($647|0),($650|0))|0);
      $652 = (getTempRet0() | 0);
      $653 = $52;
      $654 = $653;
      HEAP32[$654>>2] = $651;
      $655 = (($653) + 4)|0;
      $656 = $655;
      HEAP32[$656>>2] = $652;
      $51 = -1;
     }
     $657 = $14;
     $658 = $52;
     $659 = $658;
     $660 = HEAP32[$659>>2]|0;
     $661 = (($658) + 4)|0;
     $662 = $661;
     $663 = HEAP32[$662>>2]|0;
     $664 = (_formatNum($8,1024,$657,10,$660,$663)|0);
     $17 = $664;
     $665 = $51;
     $666 = ($665|0)!=(0);
     if ($666) {
      $667 = $17;
      $668 = ((($667)) + -1|0);
      $17 = $668;
      HEAP8[$668>>0] = 45;
      break L34;
     }
     $669 = $11;
     $670 = $669 << 24 >> 24;
     $671 = ($670|0)==(43);
     if ($671) {
      $672 = $17;
      $673 = ((($672)) + -1|0);
      $17 = $673;
      HEAP8[$673>>0] = 43;
     }
     break;
    }
    case 70: case 69:  {
     $674 = $9;
     $675 = $674 << 24 >> 24;
     $676 = (($675) - -32)|0;
     $677 = $676&255;
     $9 = $677;
     label = 148;
     break;
    }
    case 102: case 101:  {
     label = 148;
     break;
    }
    case 115:  {
     $746 = $7;
     $arglist_current71 = HEAP32[$746>>2]|0;
     $747 = $arglist_current71;
     $748 = ((0) + 4|0);
     $expanded188 = $748;
     $expanded187 = (($expanded188) - 1)|0;
     $749 = (($747) + ($expanded187))|0;
     $750 = ((0) + 4|0);
     $expanded192 = $750;
     $expanded191 = (($expanded192) - 1)|0;
     $expanded190 = $expanded191 ^ -1;
     $751 = $749 & $expanded190;
     $752 = $751;
     $753 = HEAP32[$752>>2]|0;
     $arglist_next72 = ((($752)) + 4|0);
     HEAP32[$746>>2] = $arglist_next72;
     $56 = $753;
     $754 = $56;
     $17 = $754;
     $755 = $17;
     $756 = ($755|0)==(0|0);
     if ($756) {
      $757 = $10;
      $758 = $757 << 24 >> 24;
      $759 = ($758|0)!=(0);
      if ($759) {
       $760 = $12;
       $761 = $760 << 24 >> 24;
       $762 = ($761|0)!=(0);
       $763 = $762&1;
       $13 = $763;
       $17 = 39249;
      }
     }
     break;
    }
    case 99:  {
     $764 = $7;
     $arglist_current74 = HEAP32[$764>>2]|0;
     $765 = $arglist_current74;
     $766 = ((0) + 4|0);
     $expanded195 = $766;
     $expanded194 = (($expanded195) - 1)|0;
     $767 = (($765) + ($expanded194))|0;
     $768 = ((0) + 4|0);
     $expanded199 = $768;
     $expanded198 = (($expanded199) - 1)|0;
     $expanded197 = $expanded198 ^ -1;
     $769 = $767 & $expanded197;
     $770 = $769;
     $771 = HEAP32[$770>>2]|0;
     $arglist_next75 = ((($770)) + 4|0);
     HEAP32[$764>>2] = $arglist_next75;
     $57 = $771;
     $772 = $57;
     $773 = $772&255;
     HEAP8[$8>>0] = $773;
     $774 = ((($8)) + 1|0);
     HEAP8[$774>>0] = 0;
     $17 = $8;
     break;
    }
    default: {
     $157 = $4;
     $158 = $9;
     $159 = $158 << 24 >> 24;
     (_printChr($157,$159)|0);
     continue L1;
    }
    }
   } while(0);
   do {
    if ((label|0) == 148) {
     label = 0;
     $678 = $7;
     $arglist_current63 = HEAP32[$678>>2]|0;
     $679 = $arglist_current63;
     $680 = ((0) + 8|0);
     $expanded181 = $680;
     $expanded180 = (($expanded181) - 1)|0;
     $681 = (($679) + ($expanded180))|0;
     $682 = ((0) + 8|0);
     $expanded185 = $682;
     $expanded184 = (($expanded185) - 1)|0;
     $expanded183 = $expanded184 ^ -1;
     $683 = $681 & $expanded183;
     $684 = $683;
     $685 = +HEAPF64[$684>>3];
     $arglist_next64 = ((($684)) + 8|0);
     HEAP32[$678>>2] = $arglist_next64;
     $55 = $685;
     $686 = $55;
     $54 = $686;
     $687 = $54;
     $688 = $687 == 0.0;
     if ($688) {
      $689 = $10;
      $690 = $689 << 24 >> 24;
      $691 = ($690|0)!=(0);
      if ($691) {
       $692 = $12;
       $693 = $692 << 24 >> 24;
       $694 = ($693|0)!=(0);
       $695 = $694&1;
       $13 = $695;
       $17 = 39249;
       break;
      }
     }
     $696 = $6;
     $697 = $16;
     $698 = $696;
     $699 = $697;
     $700 = (($698) - ($699))|0;
     $701 = (($700) - 1)|0;
     $13 = $701;
     $702 = ($701|0)<(1020);
     if ($702) {
      $703 = $16;
      $704 = $13;
      _memcpy(($8|0),($703|0),($704|0))|0;
      $705 = $13;
      $706 = ($705|0)>(1);
      if ($706) {
       $707 = ((($8)) + 1|0);
       $708 = HEAP8[$707>>0]|0;
       $709 = $708 << 24 >> 24;
       $710 = ($709|0)==(63);
       if ($710) {
        $711 = $13;
        $712 = (($711) - 1)|0;
        $13 = $712;
        $713 = ((($8)) + 1|0);
        $714 = ((($8)) + 2|0);
        $715 = $13;
        _memcpy(($713|0),($714|0),($715|0))|0;
       }
      }
      $716 = $13;
      $717 = ($716|0)>(1);
      do {
       if ($717) {
        $718 = ((($8)) + 1|0);
        $719 = HEAP8[$718>>0]|0;
        $720 = $719 << 24 >> 24;
        $721 = ($720|0)==(45);
        if (!($721)) {
         $722 = ((($8)) + 1|0);
         $723 = HEAP8[$722>>0]|0;
         $724 = $723 << 24 >> 24;
         $725 = ($724|0)==(43);
         if (!($725)) {
          break;
         }
        }
        $726 = $13;
        $727 = (($726) - 1)|0;
        $13 = $727;
        $728 = ((($8)) + 1|0);
        $729 = ((($8)) + 2|0);
        $730 = $13;
        _memcpy(($728|0),($729|0),($730|0))|0;
        $731 = $54;
        $732 = (___DOUBLE_BITS($731)|0);
        $733 = (getTempRet0() | 0);
        $734 = (_bitshift64Lshr(($732|0),($733|0),63)|0);
        $735 = (getTempRet0() | 0);
        $736 = ($734|0)==(0);
        if ($736) {
         $737 = $4;
         (_fprintf($737,24091,$vararg_buffer65)|0);
        }
       }
      } while(0);
      $738 = $9;
      $739 = $13;
      $740 = (($739) + 1)|0;
      $13 = $740;
      $741 = (($8) + ($739)|0);
      HEAP8[$741>>0] = $738;
      $742 = $13;
      $743 = (($8) + ($742)|0);
      HEAP8[$743>>0] = 0;
      $744 = $4;
      $745 = $54;
      HEAPF64[$vararg_buffer67>>3] = $745;
      (_fprintf($744,$8,$vararg_buffer67)|0);
     }
     continue L1;
    }
   } while(0);
   $775 = $17;
   $776 = ($775|0)!=(0|0);
   if ($776) {
    $777 = $17;
    $778 = (_strlen($777)|0);
    $779 = $13;
    $780 = (($779) - ($778))|0;
    $13 = $780;
    $781 = $12;
    $782 = $781 << 24 >> 24;
    $783 = ($782|0)==(0);
    if ($783) {
     $12 = 32;
    }
    while(1) {
     $784 = $13;
     $785 = ($784|0)>(0);
     $786 = $4;
     if (!($785)) {
      break;
     }
     $787 = $12;
     $788 = $787 << 24 >> 24;
     (_printChr($786,$788)|0);
     $789 = $13;
     $790 = (($789) - 1)|0;
     $13 = $790;
    }
    $791 = $5;
    $792 = $17;
    _printStr($786,$791,$792);
   }
  } else {
   $793 = $4;
   $794 = $9;
   $795 = $794 << 24 >> 24;
   (_printChr($793,$795)|0);
  }
 }
 if ((label|0) == 69) {
  // unreachable;
 }
 else if ((label|0) == 175) {
  $796 = $4;
  (_fflush($796)|0);
  STACKTOP = sp;return;
 }
}
function _formatNum($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $14 = $10;
 $15 = $14;
 HEAP32[$15>>2] = $4;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $5;
 $18 = $6;
 $19 = $7;
 $20 = (($18) + ($19)|0);
 $11 = $20;
 $12 = 0;
 $13 = 44;
 $21 = $11;
 $22 = ((($21)) + -1|0);
 $11 = $22;
 HEAP8[$22>>0] = 0;
 while(1) {
  $23 = $8;
  $24 = ($23|0)>(0);
  if ($24) {
   $25 = $12;
   $26 = (($25) + 1)|0;
   $12 = $26;
   $27 = $8;
   $28 = ($26|0)>($27|0);
   if ($28) {
    $29 = $13;
    $30 = $29&255;
    $31 = $11;
    $32 = ((($31)) + -1|0);
    $11 = $32;
    HEAP8[$32>>0] = $30;
    $12 = 1;
   }
  }
  $33 = $10;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = $9;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = (___uremdi3(($35|0),($38|0),($39|0),($41|0))|0);
  $43 = (getTempRet0() | 0);
  $44 = (24093 + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $11;
  $47 = ((($46)) + -1|0);
  $11 = $47;
  HEAP8[$47>>0] = $45;
  $48 = $9;
  $49 = ($48|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = $10;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (___udivdi3(($53|0),($56|0),($48|0),($50|0))|0);
  $58 = (getTempRet0() | 0);
  $59 = $10;
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = ($57|0)!=(0);
  $64 = ($58|0)!=(0);
  $65 = $63 | $64;
  if (!($65)) {
   break;
  }
 }
 $66 = $11;
 STACKTOP = sp;return ($66|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 setTempRet0(($9) | 0);
 STACKTOP = sp;return ($6|0);
}
function _print_log($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $18 = $7;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $15 = 0;
 $16 = 24110;
 $21 = $8;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 6;
 $25 = $24 & 15;
 $26 = ($21|0)>($25|0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $8;
 switch ($27|0) {
 case -2:  {
  $16 = 24123;
  $32 = $7;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  break;
 }
 case -1:  {
  $16 = 24129;
  $36 = $7;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  break;
 }
 case 0:  {
  $16 = 0;
  break;
 }
 case 1:  {
  $16 = 24118;
  break;
 }
 case 13:  {
  $16 = 24135;
  break;
 }
 case 14:  {
  $16 = 24140;
  break;
 }
 case 15:  {
  $16 = 24146;
  break;
 }
 default: {
  $28 = $8;
  $29 = ($28|0)>(1);
  $30 = $8;
  $31 = ($30|0)<(13);
  $or$cond = $29 & $31;
  if ($or$cond) {
   $16 = 24118;
  }
 }
 }
 $40 = $14;
 $41 = ($40|0)==(0|0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $17 = 0;
 $42 = $9;
 $43 = ($42|0)!=(0|0);
 $44 = $10;
 $45 = ($44|0)>(0);
 $or$cond3 = $43 & $45;
 if ($or$cond3) {
  $46 = $14;
  $47 = $15;
  $48 = $9;
  $49 = $10;
  HEAP32[$vararg_buffer>>2] = $48;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $49;
  _printFmt($46,$47,24154,$vararg_buffer);
  $17 = 1;
 }
 $50 = $16;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $17;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $7;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   _printStr($56,0,23928);
  }
  $57 = $14;
  $58 = $15;
  $59 = $16;
  _printStr($57,$58,$59);
  $17 = 1;
 }
 $60 = $12;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = $17;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $7;
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   _printStr($66,0,23928);
  }
  $67 = $14;
  $68 = $12;
  $69 = $13;
  _print_fmt($67,0,$68,$69);
  $17 = 1;
 }
 $70 = $11;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = $11;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)!=(0|0);
  if ($75) {
   $76 = $11;
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   if ($78) {
    $79 = $17;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = $7;
     $82 = ((($81)) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     _printStr($83,0,23928);
    }
    $84 = $7;
    $85 = ((($84)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $7;
    $88 = $11;
    $89 = ((($88)) + 4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $11;
    $92 = HEAP32[$91>>2]|0;
    _printVal($86,0,$87,$90,$92,1408,0);
    $17 = 1;
   }
  }
 }
 $93 = $17;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  STACKTOP = sp;return;
 }
 $95 = $14;
 (_printChr($95,10)|0);
 $96 = $14;
 (_fflush($96)|0);
 STACKTOP = sp;return;
}
function _printLog($0,$1,$2,$3,$4,$5,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 HEAP32[$12>>2] = $varargs;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = $11;
 _print_log($13,$14,$15,$16,$17,$18,$12);
 STACKTOP = sp;return;
}
function _dumpApi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $vararg_buffer19 = sp + 4160|0;
 $vararg_buffer14 = sp + 4144|0;
 $vararg_buffer9 = sp + 4128|0;
 $vararg_buffer4 = sp + 4112|0;
 $vararg_buffer = sp + 4096|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $7;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 $11 = $5;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 $13 = $3;
 if ($or$cond) {
  $14 = ($13|0)==(0|0);
  if ($14) {
   $15 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer>>2] = 23936;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = 1172;
   $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr3>>2] = 24203;
   _printFmt($15,0,24162,$vararg_buffer);
   __abort_670();
  }
  $16 = $5;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer4>>2] = 23936;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 1173;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 24203;
  _printFmt($18,0,24211,$vararg_buffer4);
  __abort_670();
  STACKTOP = sp;return;
 }
 $19 = ((($13)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = $3;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $36 = $3;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $3;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($40|0)!=($45|0);
   $47 = $3;
   if ($46) {
    $48 = ((($47)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $3;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($51|0)!=($56|0);
    if (!($57)) {
     STACKTOP = sp;return;
    }
    $58 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer19>>2] = 23936;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = 1184;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = 24203;
    _printFmt($58,0,24349,$vararg_buffer19);
    __abort_670();
    STACKTOP = sp;return;
   }
   $59 = ((($47)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $8;
   HEAP32[$63>>2] = $62;
   L21: while(1) {
    $64 = $8;
    $65 = ($64>>>0)>=($7>>>0);
    if (!($65)) {
     break;
    }
    $66 = $8;
    $67 = HEAP32[$66>>2]|0;
    $6 = $67;
    $68 = ($67|0)!=(0|0);
    if (!($68)) {
     $69 = $8;
     $70 = ((($69)) + -4|0);
     $8 = $70;
     continue;
    }
    $71 = $6;
    $72 = ((($71)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $8;
    HEAP32[$74>>2] = $73;
    $75 = $6;
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)!=(0|0);
    do {
     if ($78) {
      $79 = $6;
      $80 = $3;
      $81 = ((($80)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       continue L21;
      } else {
       $84 = $6;
       $85 = ((($84)) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $8;
       $88 = ((($87)) + 4|0);
       $8 = $88;
       HEAP32[$88>>2] = $86;
       break;
      }
     }
    } while(0);
    $89 = $5;
    $90 = $4;
    $91 = $6;
    FUNCTION_TABLE_vii[$89 & 127]($90,$91);
   }
   $92 = $5;
   $93 = $4;
   $94 = $3;
   $95 = ((($94)) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vii[$92 & 127]($93,$96);
   STACKTOP = sp;return;
  }
 }
 $26 = $3;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer9>>2] = 23936;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 1179;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = 24203;
  _printFmt($30,0,24257,$vararg_buffer9);
  __abort_670();
 }
 $31 = $3;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = HEAP32[3314]|0;
 HEAP32[$vararg_buffer14>>2] = 23936;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = 1180;
 $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
 HEAP32[$vararg_ptr18>>2] = 24203;
 _printFmt($35,0,24302,$vararg_buffer14);
 __abort_670();
 STACKTOP = sp;return;
}
function _logFILE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 18;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  (_fclose($11)|0);
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & -262145;
  HEAP32[$12>>2] = $14;
 }
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _logFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[3314]|0;
 _logFILE($6,$7);
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = $5;
  $12 = ($11|0)!=(0);
  $13 = $12 ? 24413 : 24416;
  $14 = (_fopen($10,$13)|0);
  $15 = $3;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = $14;
  $17 = $3;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 & -262145;
   $24 = $23 | 262144;
   HEAP32[$21>>2] = $24;
  }
 }
 $25 = $3;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _newNode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $6 = 0;
 $9 = $3;
 $10 = ((($9)) + 4148|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 4148|0);
  $15 = HEAP32[$14>>2]|0;
  $6 = $15;
  $16 = $6;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = ((($19)) + 4148|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = $5;
 $22 = ((($21)) + 136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + -40|0);
 HEAP32[$22>>2] = $24;
 $25 = $5;
 $26 = ((($25)) + 132|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = ((($28)) + 136|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27>>>0)>=($30>>>0);
 if ($31) {
  $32 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 24419;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 23;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 24430;
  _printFmt($32,0,25109,$vararg_buffer);
  __abort_728();
  $2 = 0;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $5;
  $34 = ((($33)) + 136|0);
  $35 = HEAP32[$34>>2]|0;
  $6 = $35;
  $36 = $6;
  dest=$36; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $37 = $4;
  $38 = $6;
  HEAP32[$38>>2] = $37;
  $39 = $6;
  $2 = $39;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __abort_728() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _recycle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = ((($6)) + 4148|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 4148|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _intNode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $3 = $0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = $3;
 $11 = (_newNode($10,1)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $31 = $5;
  STACKTOP = sp;return ($31|0);
 }
 $14 = $3;
 $15 = ((($14)) + 5224|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $4;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $5;
 $26 = ((($25)) + 24|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $24;
 $31 = $5;
 STACKTOP = sp;return ($31|0);
}
function _fltNode($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_newNode($5,1)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $17 = $4;
  STACKTOP = sp;return ($17|0);
 }
 $9 = $2;
 $10 = ((($9)) + 5248|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $4;
 $16 = ((($15)) + 24|0);
 HEAPF64[$16>>3] = $14;
 $17 = $4;
 STACKTOP = sp;return ($17|0);
}
function _strNode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_newNode($5,1)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $20 = $4;
  STACKTOP = sp;return ($20|0);
 }
 $9 = $2;
 $10 = ((($9)) + 5272|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $4;
 $16 = ((($15)) + 24|0);
 HEAP32[$16>>2] = $14;
 $17 = $4;
 $18 = ((($17)) + 24|0);
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = -1;
 $20 = $4;
 STACKTOP = sp;return ($20|0);
}
function _lnkNode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_newNode($5,2)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 $9 = $3;
 $10 = (_isTypename_739($9)|0);
 $11 = ($10|0)!=(0);
 $12 = $3;
 if ($11) {
  $17 = $12;
 } else {
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $15 = $4;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $17;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = ((($20)) + 24|0);
 HEAP32[$21>>2] = $19;
 $22 = $3;
 $23 = $4;
 $24 = ((($23)) + 24|0);
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $22;
 $26 = $4;
 $27 = ((($26)) + 24|0);
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = -1;
 $29 = $4;
 STACKTOP = sp;return ($29|0);
}
function _isTypename_739($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _opNode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (_newNode($9,$10)|0);
 $8 = $11;
 $12 = $8;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $21 = $8;
  STACKTOP = sp;return ($21|0);
 }
 $14 = $6;
 $15 = $8;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $14;
 $18 = $7;
 $19 = $8;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = $8;
 STACKTOP = sp;return ($21|0);
}
function _bolValue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = $2;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(1);
    if ($11) {
     $12 = $2;
     $13 = ((($12)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_refCast_744($14)|0);
     switch ($15|0) {
     case 6: case 4: case 5: case 3: case 2:  {
      $16 = $2;
      $17 = ((($16)) + 24|0);
      $18 = $17;
      $19 = $18;
      $20 = HEAP32[$19>>2]|0;
      $21 = (($18) + 4)|0;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = ($20|0)!=(0);
      $25 = ($23|0)!=(0);
      $26 = $24 | $25;
      $27 = $26&1;
      $1 = $27;
      $35 = $1;
      STACKTOP = sp;return ($35|0);
      break;
     }
     case 8: case 7:  {
      $28 = $2;
      $29 = ((($28)) + 24|0);
      $30 = +HEAPF64[$29>>3];
      $31 = $30 != 0.0;
      $32 = $31&1;
      $1 = $32;
      $35 = $1;
      STACKTOP = sp;return ($35|0);
      break;
     }
     default: {
      break L1;
     }
     }
    }
   }
  }
 } while(0);
 $33 = HEAP32[3314]|0;
 $34 = $2;
 HEAP32[$vararg_buffer>>2] = 24419;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 107;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 24499;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $34;
 _printFmt($33,0,24438,$vararg_buffer);
 __abort_728();
 $1 = 0;
 $35 = $1;
 STACKTOP = sp;return ($35|0);
}
function _refCast_744($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_castOf_746($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(12);
 do {
  if ($7) {
   $8 = $1;
   $9 = (_isArrayType_747($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = ((($11)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $3 = $13;
    $14 = $3;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $3;
     $17 = (_isStatic_748($16)|0);
     $18 = ($17|0)!=(0);
     if (!($18)) {
      break;
     }
    }
    $2 = 10;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _castOf_746($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _isArrayType_747($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isStatic_748($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _intValue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $1 = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = $2;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(1);
    if ($11) {
     $12 = $2;
     $13 = ((($12)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_refCast_744($14)|0);
     switch ($15|0) {
     case 6: case 4: case 5: case 3: case 10: case 2:  {
      $16 = $2;
      $17 = ((($16)) + 24|0);
      $18 = $17;
      $19 = $18;
      $20 = HEAP32[$19>>2]|0;
      $21 = (($18) + 4)|0;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = $1;
      $25 = $24;
      HEAP32[$25>>2] = $20;
      $26 = (($24) + 4)|0;
      $27 = $26;
      HEAP32[$27>>2] = $23;
      break L1;
      break;
     }
     case 8: case 7:  {
      $28 = $2;
      $29 = ((($28)) + 24|0);
      $30 = +HEAPF64[$29>>3];
      $31 = (~~$30)>>>0;
      $32 = +Math_abs($30) >= 1.0 ? $30 > 0.0 ? (~~+Math_min(+Math_floor($30 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($30 - +(~~$30 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $33 = $1;
      $34 = $33;
      HEAP32[$34>>2] = $31;
      $35 = (($33) + 4)|0;
      $36 = $35;
      HEAP32[$36>>2] = $32;
      break L1;
      break;
     }
     default: {
      label = 7;
      break L1;
     }
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $37 = HEAP32[3314]|0;
  $38 = $2;
  HEAP32[$vararg_buffer>>2] = 24419;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 130;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 24508;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $38;
  _printFmt($37,0,24438,$vararg_buffer);
  __abort_728();
  $39 = $1;
  $40 = $39;
  HEAP32[$40>>2] = 0;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = 0;
 }
 $43 = $1;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 setTempRet0(($48) | 0);
 STACKTOP = sp;return ($45|0);
}
function _fltValue($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = $2;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(1);
    if ($11) {
     $12 = $2;
     $13 = ((($12)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_refCast_744($14)|0);
     switch ($15|0) {
     case 6: case 4: case 5: case 3: case 2:  {
      $16 = $2;
      $17 = ((($16)) + 24|0);
      $18 = $17;
      $19 = $18;
      $20 = HEAP32[$19>>2]|0;
      $21 = (($18) + 4)|0;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = (+($20>>>0)) + (4294967296.0*(+($23|0)));
      $1 = $24;
      $30 = $1;
      STACKTOP = sp;return (+$30);
      break;
     }
     case 8: case 7:  {
      $25 = $2;
      $26 = ((($25)) + 24|0);
      $27 = +HEAPF64[$26>>3];
      $1 = $27;
      $30 = $1;
      STACKTOP = sp;return (+$30);
      break;
     }
     default: {
      break L1;
     }
     }
    }
   }
  }
 } while(0);
 $28 = HEAP32[3314]|0;
 $29 = $2;
 HEAP32[$vararg_buffer>>2] = 24419;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 152;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 24517;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $29;
 _printFmt($28,0,24438,$vararg_buffer);
 __abort_728();
 $1 = 0.0;
 $30 = $1;
 STACKTOP = sp;return (+$30);
}
function _eval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $$off1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0.0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0.0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0.0, $716 = 0, $717 = 0.0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0.0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0.0, $772 = 0, $773 = 0.0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0.0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0, $switch = 0, $switch2 = 0, $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer107 = 0, $vararg_buffer11 = 0, $vararg_buffer112 = 0, $vararg_buffer117 = 0, $vararg_buffer122 = 0, $vararg_buffer127 = 0, $vararg_buffer132 = 0, $vararg_buffer137 = 0, $vararg_buffer142 = 0, $vararg_buffer147 = 0;
 var $vararg_buffer152 = 0, $vararg_buffer157 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer57 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer67 = 0, $vararg_buffer72 = 0, $vararg_buffer77 = 0, $vararg_buffer82 = 0, $vararg_buffer87 = 0, $vararg_buffer92 = 0;
 var $vararg_buffer97 = 0, $vararg_ptr10 = 0, $vararg_ptr100 = 0, $vararg_ptr101 = 0, $vararg_ptr105 = 0, $vararg_ptr106 = 0, $vararg_ptr110 = 0, $vararg_ptr111 = 0, $vararg_ptr115 = 0, $vararg_ptr116 = 0, $vararg_ptr120 = 0, $vararg_ptr121 = 0, $vararg_ptr125 = 0, $vararg_ptr126 = 0, $vararg_ptr130 = 0, $vararg_ptr131 = 0, $vararg_ptr135 = 0, $vararg_ptr136 = 0, $vararg_ptr14 = 0, $vararg_ptr140 = 0;
 var $vararg_ptr141 = 0, $vararg_ptr145 = 0, $vararg_ptr146 = 0, $vararg_ptr15 = 0, $vararg_ptr150 = 0, $vararg_ptr151 = 0, $vararg_ptr155 = 0, $vararg_ptr156 = 0, $vararg_ptr160 = 0, $vararg_ptr161 = 0, $vararg_ptr162 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr5 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0, $vararg_ptr76 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, $vararg_ptr9 = 0;
 var $vararg_ptr90 = 0, $vararg_ptr91 = 0, $vararg_ptr95 = 0, $vararg_ptr96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $vararg_buffer157 = sp + 576|0;
 $vararg_buffer152 = sp + 560|0;
 $vararg_buffer147 = sp + 544|0;
 $vararg_buffer142 = sp + 528|0;
 $vararg_buffer137 = sp + 512|0;
 $vararg_buffer132 = sp + 496|0;
 $vararg_buffer127 = sp + 480|0;
 $vararg_buffer122 = sp + 464|0;
 $vararg_buffer117 = sp + 448|0;
 $vararg_buffer112 = sp + 432|0;
 $vararg_buffer107 = sp + 416|0;
 $vararg_buffer102 = sp + 400|0;
 $vararg_buffer97 = sp + 384|0;
 $vararg_buffer92 = sp + 368|0;
 $vararg_buffer87 = sp + 352|0;
 $vararg_buffer82 = sp + 336|0;
 $vararg_buffer77 = sp + 320|0;
 $vararg_buffer72 = sp + 304|0;
 $vararg_buffer67 = sp + 288|0;
 $vararg_buffer62 = sp + 272|0;
 $vararg_buffer57 = sp + 256|0;
 $vararg_buffer52 = sp + 240|0;
 $vararg_buffer49 = sp + 232|0;
 $vararg_buffer46 = sp + 224|0;
 $vararg_buffer41 = sp + 208|0;
 $vararg_buffer36 = sp + 192|0;
 $vararg_buffer31 = sp + 176|0;
 $vararg_buffer26 = sp + 160|0;
 $vararg_buffer21 = sp + 144|0;
 $vararg_buffer16 = sp + 128|0;
 $vararg_buffer11 = sp + 112|0;
 $vararg_buffer6 = sp + 96|0;
 $vararg_buffer = sp + 80|0;
 $9 = sp + 40|0;
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $16 = $6;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = $6;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $23 = $5;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $5 = $10;
   }
   $25 = $6;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $8 = $27;
   $28 = $8;
   $29 = (_castOf_746($28)|0);
   switch ($29|0) {
   case 2:  {
    $7 = 2;
    break;
   }
   case 6: case 5: case 4: case 3:  {
    $7 = 5;
    break;
   }
   case 8: case 7:  {
    $7 = 8;
    break;
   }
   case 10:  {
    $7 = 10;
    break;
   }
   case 1: case 11: case 12: case 9:  {
    $3 = 0;
    $1164 = $3;
    STACKTOP = sp;return ($1164|0);
    break;
   }
   default: {
    $30 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer6>>2] = 24419;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = 176;
    $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
    HEAP32[$vararg_ptr10>>2] = 24526;
    _printFmt($30,0,28431,$vararg_buffer6);
    __abort_728();
    $3 = 0;
    $1164 = $3;
    STACKTOP = sp;return ($1164|0);
   }
   }
   $31 = $5;
   dest=$31; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $32 = $6;
   $33 = HEAP32[$32>>2]|0;
   L17: do {
    switch ($33|0) {
    case 67: case 42: case 41:  {
     $3 = 0;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
     break;
    }
    case 5:  {
     $35 = $6;
     $36 = ((($35)) + 24|0);
     $37 = ((($36)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_isTypeExpr($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      $41 = $4;
      $42 = $5;
      $43 = $6;
      $44 = ((($43)) + 24|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (_eval($41,$42,$45)|0);
      $3 = $46;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     } else {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     break;
    }
    case 3:  {
     $47 = $6;
     $48 = ((($47)) + 24|0);
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $11 = $50;
     $51 = $6;
     $52 = ((($51)) + 24|0);
     $53 = HEAP32[$52>>2]|0;
     $12 = $53;
     $54 = $11;
     $55 = ($54|0)!=(0|0);
     if ($55) {
      $56 = $11;
      $57 = (_isTypeExpr($56)|0);
      $58 = ($57|0)!=(0);
      if (!($58)) {
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
     }
     $59 = $12;
     $60 = ($59|0)==(0|0);
     if ($60) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $61 = $11;
     $62 = (_linkOf($61,1)|0);
     $63 = $4;
     $64 = ((($63)) + 5260|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($62|0)==($65|0);
     $67 = $12;
     $68 = ($67|0)!=(0|0);
     $or$cond = $66 & $68;
     if ($or$cond) {
      $69 = $12;
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(2);
      if ($71) {
       $72 = $12;
       $73 = ((($72)) + 24|0);
       $74 = ((($73)) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       $13 = $75;
       $76 = $5;
       HEAP32[$76>>2] = 1;
       $77 = $4;
       $78 = ((($77)) + 5260|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $5;
       $81 = ((($80)) + 4|0);
       HEAP32[$81>>2] = $79;
       $82 = $13;
       $83 = ($82|0)!=(0|0);
       if ($83) {
        $84 = $13;
        $85 = ((($84)) + 28|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($86|0)!=(0|0);
        if ($87) {
         $88 = $13;
         $89 = ((($88)) + 28|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = ((($90)) + 20|0);
         $92 = HEAP32[$91>>2]|0;
         $97 = $92;
        } else {
         $97 = 0;
        }
       } else {
        $97 = 0;
       }
       $93 = $5;
       $94 = ((($93)) + 24|0);
       $95 = $94;
       $96 = $95;
       HEAP32[$96>>2] = $97;
       $98 = (($95) + 4)|0;
       $99 = $98;
       HEAP32[$99>>2] = 0;
       break L17;
      }
     }
     $100 = $4;
     $101 = $5;
     $102 = $12;
     $103 = (_eval($100,$101,$102)|0);
     $14 = $103;
     $104 = $14;
     $105 = ($104|0)==(0);
     if ($105) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     break;
    }
    case 4:  {
     $3 = 0;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
     break;
    }
    case 1:  {
     $106 = $5;
     $107 = $6;
     dest=$106; src=$107; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     break;
    }
    case 2:  {
     $108 = $6;
     $109 = ((($108)) + 24|0);
     $110 = ((($109)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $15 = $111;
     $112 = $15;
     $113 = (_isInline_758($112)|0);
     $114 = ($113|0)!=(0);
     if ($114) {
      $115 = $4;
      $116 = $5;
      $117 = $15;
      $118 = ((($117)) + 56|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (_eval($115,$116,$119)|0);
      $121 = ($120|0)!=(0);
      if ($121) {
       $122 = $8;
       $123 = (_refCast_744($122)|0);
       $7 = $123;
       break L17;
      }
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     } else {
      $124 = $15;
      $125 = (_isTypename_739($124)|0);
      $126 = ($125|0)!=(0);
      if ($126) {
       $127 = $8;
       $128 = (_refCast_744($127)|0);
       $7 = $128;
       $129 = $4;
       $130 = ((($129)) + 5260|0);
       $131 = HEAP32[$130>>2]|0;
       $8 = $131;
       $132 = $5;
       HEAP32[$132>>2] = 1;
       $133 = $15;
       $134 = ((($133)) + 20|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $5;
       $137 = ((($136)) + 24|0);
       $138 = $137;
       $139 = $138;
       HEAP32[$139>>2] = $135;
       $140 = (($138) + 4)|0;
       $141 = $140;
       HEAP32[$141>>2] = 0;
       break L17;
      }
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     break;
    }
    case 6:  {
     $142 = $4;
     $143 = $5;
     $144 = $6;
     $145 = ((($144)) + 24|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (_eval($142,$143,$146)|0);
     $148 = ($147|0)!=(0);
     if (!($148)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     break;
    }
    case 7:  {
     $149 = $4;
     $150 = $5;
     $151 = $6;
     $152 = ((($151)) + 24|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (_eval($149,$150,$153)|0);
     $155 = ($154|0)!=(0);
     if (!($155)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $156 = $5;
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)!=(1);
     if ($158) {
      $159 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer16>>2] = 24419;
      $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
      HEAP32[$vararg_ptr19>>2] = 293;
      $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
      HEAP32[$vararg_ptr20>>2] = 24526;
      _printFmt($159,0,24531,$vararg_buffer16);
      __abort_728();
     }
     $160 = $5;
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (_refCast_744($162)|0);
     switch ($163|0) {
     case 6: case 4: case 5: case 3:  {
      $164 = $5;
      $165 = ((($164)) + 24|0);
      $166 = $165;
      $167 = $166;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($166) + 4)|0;
      $170 = $169;
      $171 = HEAP32[$170>>2]|0;
      $172 = (_i64Subtract(0,0,($168|0),($171|0))|0);
      $173 = (getTempRet0() | 0);
      $174 = $5;
      $175 = ((($174)) + 24|0);
      $176 = $175;
      $177 = $176;
      HEAP32[$177>>2] = $172;
      $178 = (($176) + 4)|0;
      $179 = $178;
      HEAP32[$179>>2] = $173;
      break L17;
      break;
     }
     case 8: case 7:  {
      $180 = $5;
      $181 = ((($180)) + 24|0);
      $182 = +HEAPF64[$181>>3];
      $183 = - $182;
      $184 = $5;
      $185 = ((($184)) + 24|0);
      HEAPF64[$185>>3] = $183;
      break L17;
      break;
     }
     default: {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 8:  {
     $186 = $4;
     $187 = $5;
     $188 = $6;
     $189 = ((($188)) + 24|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (_eval($186,$187,$190)|0);
     $192 = ($191|0)!=(0);
     if (!($192)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $193 = $5;
     $194 = HEAP32[$193>>2]|0;
     $195 = ($194|0)!=(1);
     if ($195) {
      $196 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer21>>2] = 24419;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = 317;
      $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
      HEAP32[$vararg_ptr25>>2] = 24526;
      _printFmt($196,0,24531,$vararg_buffer21);
      __abort_728();
     }
     $197 = $5;
     $198 = ((($197)) + 4|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = (_refCast_744($199)|0);
     $$off = (($200) + -3)|0;
     $switch = ($$off>>>0)<(4);
     if ($switch) {
      $201 = $5;
      $202 = ((($201)) + 24|0);
      $203 = $202;
      $204 = $203;
      $205 = HEAP32[$204>>2]|0;
      $206 = (($203) + 4)|0;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = $205 ^ -1;
      $210 = $208 ^ -1;
      $211 = $5;
      $212 = ((($211)) + 24|0);
      $213 = $212;
      $214 = $213;
      HEAP32[$214>>2] = $209;
      $215 = (($213) + 4)|0;
      $216 = $215;
      HEAP32[$216>>2] = $210;
      break L17;
     }
     $3 = 0;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
     break;
    }
    case 9:  {
     $217 = $4;
     $218 = $5;
     $219 = $6;
     $220 = ((($219)) + 24|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (_eval($217,$218,$221)|0);
     $223 = ($222|0)!=(0);
     if (!($223)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $224 = $5;
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)!=(1);
     if ($226) {
      $227 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer26>>2] = 24419;
      $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
      HEAP32[$vararg_ptr29>>2] = 336;
      $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
      HEAP32[$vararg_ptr30>>2] = 24526;
      _printFmt($227,0,24531,$vararg_buffer26);
      __abort_728();
     }
     $228 = $5;
     $229 = ((($228)) + 4|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (_refCast_744($230)|0);
     switch ($231|0) {
     case 10: case 6: case 4: case 5: case 3: case 2:  {
      $232 = $4;
      $233 = ((($232)) + 5204|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = $5;
      $236 = ((($235)) + 4|0);
      HEAP32[$236>>2] = $234;
      $237 = $5;
      $238 = ((($237)) + 24|0);
      $239 = $238;
      $240 = $239;
      $241 = HEAP32[$240>>2]|0;
      $242 = (($239) + 4)|0;
      $243 = $242;
      $244 = HEAP32[$243>>2]|0;
      $245 = ($241|0)!=(0);
      $246 = ($244|0)!=(0);
      $247 = $245 | $246;
      $248 = $247 ^ 1;
      $249 = $248&1;
      $250 = ($249|0)<(0);
      $251 = $250 << 31 >> 31;
      $252 = $5;
      $253 = ((($252)) + 24|0);
      $254 = $253;
      $255 = $254;
      HEAP32[$255>>2] = $249;
      $256 = (($254) + 4)|0;
      $257 = $256;
      HEAP32[$257>>2] = $251;
      break L17;
      break;
     }
     case 8: case 7:  {
      $258 = $4;
      $259 = ((($258)) + 5204|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $5;
      $262 = ((($261)) + 4|0);
      HEAP32[$262>>2] = $260;
      $263 = $5;
      $264 = ((($263)) + 24|0);
      $265 = +HEAPF64[$264>>3];
      $266 = $265 != 0.0;
      $267 = $266 ^ 1;
      $268 = $267&1;
      $269 = ($268|0)<(0);
      $270 = $269 << 31 >> 31;
      $271 = $5;
      $272 = ((($271)) + 24|0);
      $273 = $272;
      $274 = $273;
      HEAP32[$274>>2] = $268;
      $275 = (($273) + 4)|0;
      $276 = $275;
      HEAP32[$276>>2] = $270;
      break L17;
      break;
     }
     default: {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 12: case 11: case 10: case 14: case 13:  {
     $277 = $4;
     $278 = $6;
     $279 = ((($278)) + 24|0);
     $280 = ((($279)) + 4|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = (_eval($277,$9,$281)|0);
     $283 = ($282|0)!=(0);
     if (!($283)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $284 = $4;
     $285 = $6;
     $286 = ((($285)) + 24|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = (_eval($284,$10,$287)|0);
     $289 = ($288|0)!=(0);
     if (!($289)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $290 = HEAP32[$9>>2]|0;
     $291 = ($290|0)!=(1);
     if ($291) {
      $292 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer31>>2] = 24419;
      $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
      HEAP32[$vararg_ptr34>>2] = 372;
      $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
      HEAP32[$vararg_ptr35>>2] = 24526;
      _printFmt($292,0,24584,$vararg_buffer31);
      __abort_728();
     }
     $293 = HEAP32[$10>>2]|0;
     $294 = ($293|0)!=(1);
     if ($294) {
      $295 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer36>>2] = 24419;
      $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
      HEAP32[$vararg_ptr39>>2] = 373;
      $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
      HEAP32[$vararg_ptr40>>2] = 24526;
      _printFmt($295,0,24636,$vararg_buffer36);
      __abort_728();
     }
     $296 = $5;
     HEAP32[$296>>2] = 1;
     $297 = ((($9)) + 4|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = (_refCast_744($298)|0);
     switch ($299|0) {
     case 6: case 4: case 5: case 3:  {
      $300 = $4;
      $301 = ((($300)) + 5224|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $5;
      $304 = ((($303)) + 4|0);
      HEAP32[$304>>2] = $302;
      $305 = $6;
      $306 = HEAP32[$305>>2]|0;
      switch ($306|0) {
      case 13:  {
       $308 = ((($9)) + 24|0);
       $309 = $308;
       $310 = $309;
       $311 = HEAP32[$310>>2]|0;
       $312 = (($309) + 4)|0;
       $313 = $312;
       $314 = HEAP32[$313>>2]|0;
       $315 = ((($10)) + 24|0);
       $316 = $315;
       $317 = $316;
       $318 = HEAP32[$317>>2]|0;
       $319 = (($316) + 4)|0;
       $320 = $319;
       $321 = HEAP32[$320>>2]|0;
       $322 = (_i64Add(($311|0),($314|0),($318|0),($321|0))|0);
       $323 = (getTempRet0() | 0);
       $324 = $5;
       $325 = ((($324)) + 24|0);
       $326 = $325;
       $327 = $326;
       HEAP32[$327>>2] = $322;
       $328 = (($326) + 4)|0;
       $329 = $328;
       HEAP32[$329>>2] = $323;
       break L17;
       break;
      }
      case 14:  {
       $330 = ((($9)) + 24|0);
       $331 = $330;
       $332 = $331;
       $333 = HEAP32[$332>>2]|0;
       $334 = (($331) + 4)|0;
       $335 = $334;
       $336 = HEAP32[$335>>2]|0;
       $337 = ((($10)) + 24|0);
       $338 = $337;
       $339 = $338;
       $340 = HEAP32[$339>>2]|0;
       $341 = (($338) + 4)|0;
       $342 = $341;
       $343 = HEAP32[$342>>2]|0;
       $344 = (_i64Subtract(($333|0),($336|0),($340|0),($343|0))|0);
       $345 = (getTempRet0() | 0);
       $346 = $5;
       $347 = ((($346)) + 24|0);
       $348 = $347;
       $349 = $348;
       HEAP32[$349>>2] = $344;
       $350 = (($348) + 4)|0;
       $351 = $350;
       HEAP32[$351>>2] = $345;
       break L17;
       break;
      }
      case 10:  {
       $352 = ((($9)) + 24|0);
       $353 = $352;
       $354 = $353;
       $355 = HEAP32[$354>>2]|0;
       $356 = (($353) + 4)|0;
       $357 = $356;
       $358 = HEAP32[$357>>2]|0;
       $359 = ((($10)) + 24|0);
       $360 = $359;
       $361 = $360;
       $362 = HEAP32[$361>>2]|0;
       $363 = (($360) + 4)|0;
       $364 = $363;
       $365 = HEAP32[$364>>2]|0;
       $366 = (___muldi3(($355|0),($358|0),($362|0),($365|0))|0);
       $367 = (getTempRet0() | 0);
       $368 = $5;
       $369 = ((($368)) + 24|0);
       $370 = $369;
       $371 = $370;
       HEAP32[$371>>2] = $366;
       $372 = (($370) + 4)|0;
       $373 = $372;
       HEAP32[$373>>2] = $367;
       break L17;
       break;
      }
      case 11:  {
       $374 = ((($10)) + 24|0);
       $375 = $374;
       $376 = $375;
       $377 = HEAP32[$376>>2]|0;
       $378 = (($375) + 4)|0;
       $379 = $378;
       $380 = HEAP32[$379>>2]|0;
       $381 = ($377|0)==(0);
       $382 = ($380|0)==(0);
       $383 = $381 & $382;
       if ($383) {
        $384 = $4;
        $385 = HEAP32[$384>>2]|0;
        $386 = $6;
        $387 = ((($386)) + 12|0);
        $388 = HEAP32[$387>>2]|0;
        $389 = $6;
        $390 = ((($389)) + 16|0);
        $391 = HEAP32[$390>>2]|0;
        $392 = $6;
        HEAP32[$vararg_buffer46>>2] = $392;
        _printLog($385,-1,$388,$391,0,24688,$vararg_buffer46);
        $393 = $5;
        $394 = ((($393)) + 24|0);
        $395 = $394;
        $396 = $395;
        HEAP32[$396>>2] = 0;
        $397 = (($395) + 4)|0;
        $398 = $397;
        HEAP32[$398>>2] = 0;
        break L17;
       } else {
        $399 = ((($9)) + 24|0);
        $400 = $399;
        $401 = $400;
        $402 = HEAP32[$401>>2]|0;
        $403 = (($400) + 4)|0;
        $404 = $403;
        $405 = HEAP32[$404>>2]|0;
        $406 = ((($10)) + 24|0);
        $407 = $406;
        $408 = $407;
        $409 = HEAP32[$408>>2]|0;
        $410 = (($407) + 4)|0;
        $411 = $410;
        $412 = HEAP32[$411>>2]|0;
        $413 = (___divdi3(($402|0),($405|0),($409|0),($412|0))|0);
        $414 = (getTempRet0() | 0);
        $415 = $5;
        $416 = ((($415)) + 24|0);
        $417 = $416;
        $418 = $417;
        HEAP32[$418>>2] = $413;
        $419 = (($417) + 4)|0;
        $420 = $419;
        HEAP32[$420>>2] = $414;
        break L17;
       }
       break;
      }
      case 12:  {
       $421 = ((($10)) + 24|0);
       $422 = $421;
       $423 = $422;
       $424 = HEAP32[$423>>2]|0;
       $425 = (($422) + 4)|0;
       $426 = $425;
       $427 = HEAP32[$426>>2]|0;
       $428 = ($424|0)==(0);
       $429 = ($427|0)==(0);
       $430 = $428 & $429;
       if ($430) {
        $431 = $4;
        $432 = HEAP32[$431>>2]|0;
        $433 = $6;
        $434 = ((($433)) + 12|0);
        $435 = HEAP32[$434>>2]|0;
        $436 = $6;
        $437 = ((($436)) + 16|0);
        $438 = HEAP32[$437>>2]|0;
        $439 = $6;
        HEAP32[$vararg_buffer49>>2] = $439;
        _printLog($432,-1,$435,$438,0,24688,$vararg_buffer49);
        $440 = $5;
        $441 = ((($440)) + 24|0);
        $442 = $441;
        $443 = $442;
        HEAP32[$443>>2] = 0;
        $444 = (($442) + 4)|0;
        $445 = $444;
        HEAP32[$445>>2] = 0;
        break L17;
       } else {
        $446 = ((($9)) + 24|0);
        $447 = $446;
        $448 = $447;
        $449 = HEAP32[$448>>2]|0;
        $450 = (($447) + 4)|0;
        $451 = $450;
        $452 = HEAP32[$451>>2]|0;
        $453 = ((($10)) + 24|0);
        $454 = $453;
        $455 = $454;
        $456 = HEAP32[$455>>2]|0;
        $457 = (($454) + 4)|0;
        $458 = $457;
        $459 = HEAP32[$458>>2]|0;
        $460 = (___remdi3(($449|0),($452|0),($456|0),($459|0))|0);
        $461 = (getTempRet0() | 0);
        $462 = $5;
        $463 = ((($462)) + 24|0);
        $464 = $463;
        $465 = $464;
        HEAP32[$465>>2] = $460;
        $466 = (($464) + 4)|0;
        $467 = $466;
        HEAP32[$467>>2] = $461;
        break L17;
       }
       break;
      }
      default: {
       $307 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer41>>2] = 24419;
       $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
       HEAP32[$vararg_ptr44>>2] = 388;
       $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
       HEAP32[$vararg_ptr45>>2] = 24526;
       _printFmt($307,0,28431,$vararg_buffer41);
       __abort_728();
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
      }
      break;
     }
     case 8: case 7:  {
      $468 = $4;
      $469 = ((($468)) + 5248|0);
      $470 = HEAP32[$469>>2]|0;
      $471 = $5;
      $472 = ((($471)) + 4|0);
      HEAP32[$472>>2] = $470;
      $473 = $6;
      $474 = HEAP32[$473>>2]|0;
      switch ($474|0) {
      case 13:  {
       $476 = ((($9)) + 24|0);
       $477 = +HEAPF64[$476>>3];
       $478 = ((($10)) + 24|0);
       $479 = +HEAPF64[$478>>3];
       $480 = $477 + $479;
       $481 = $5;
       $482 = ((($481)) + 24|0);
       HEAPF64[$482>>3] = $480;
       break L17;
       break;
      }
      case 14:  {
       $483 = ((($9)) + 24|0);
       $484 = +HEAPF64[$483>>3];
       $485 = ((($10)) + 24|0);
       $486 = +HEAPF64[$485>>3];
       $487 = $484 - $486;
       $488 = $5;
       $489 = ((($488)) + 24|0);
       HEAPF64[$489>>3] = $487;
       break L17;
       break;
      }
      case 10:  {
       $490 = ((($9)) + 24|0);
       $491 = +HEAPF64[$490>>3];
       $492 = ((($10)) + 24|0);
       $493 = +HEAPF64[$492>>3];
       $494 = $491 * $493;
       $495 = $5;
       $496 = ((($495)) + 24|0);
       HEAPF64[$496>>3] = $494;
       break L17;
       break;
      }
      case 11:  {
       $497 = ((($9)) + 24|0);
       $498 = +HEAPF64[$497>>3];
       $499 = ((($10)) + 24|0);
       $500 = +HEAPF64[$499>>3];
       $501 = $498 / $500;
       $502 = $5;
       $503 = ((($502)) + 24|0);
       HEAPF64[$503>>3] = $501;
       break L17;
       break;
      }
      default: {
       $475 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer52>>2] = 24419;
       $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
       HEAP32[$vararg_ptr55>>2] = 428;
       $vararg_ptr56 = ((($vararg_buffer52)) + 8|0);
       HEAP32[$vararg_ptr56>>2] = 24526;
       _printFmt($475,0,28431,$vararg_buffer52);
       __abort_728();
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
      }
      break;
     }
     default: {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 18: case 17: case 20: case 19: case 22: case 21:  {
     $504 = $4;
     $505 = $6;
     $506 = ((($505)) + 24|0);
     $507 = ((($506)) + 4|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = (_eval($504,$9,$508)|0);
     $510 = ($509|0)!=(0);
     if (!($510)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $511 = $4;
     $512 = $6;
     $513 = ((($512)) + 24|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = (_eval($511,$10,$514)|0);
     $516 = ($515|0)!=(0);
     if (!($516)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $517 = HEAP32[$9>>2]|0;
     $518 = ($517|0)!=(1);
     if ($518) {
      $519 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer57>>2] = 24419;
      $vararg_ptr60 = ((($vararg_buffer57)) + 4|0);
      HEAP32[$vararg_ptr60>>2] = 471;
      $vararg_ptr61 = ((($vararg_buffer57)) + 8|0);
      HEAP32[$vararg_ptr61>>2] = 24526;
      _printFmt($519,0,24584,$vararg_buffer57);
      __abort_728();
     }
     $520 = HEAP32[$10>>2]|0;
     $521 = ($520|0)!=(1);
     if ($521) {
      $522 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer62>>2] = 24419;
      $vararg_ptr65 = ((($vararg_buffer62)) + 4|0);
      HEAP32[$vararg_ptr65>>2] = 472;
      $vararg_ptr66 = ((($vararg_buffer62)) + 8|0);
      HEAP32[$vararg_ptr66>>2] = 24526;
      _printFmt($522,0,24636,$vararg_buffer62);
      __abort_728();
     }
     $523 = $6;
     $524 = ((($523)) + 4|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = $4;
     $527 = ((($526)) + 5204|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ($525|0)!=($528|0);
     if ($529) {
      $530 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer67>>2] = 24419;
      $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
      HEAP32[$vararg_ptr70>>2] = 473;
      $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
      HEAP32[$vararg_ptr71>>2] = 24526;
      _printFmt($530,0,24709,$vararg_buffer67);
      __abort_728();
     }
     $531 = $5;
     HEAP32[$531>>2] = 1;
     $532 = $6;
     $533 = ((($532)) + 4|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = $5;
     $536 = ((($535)) + 4|0);
     HEAP32[$536>>2] = $534;
     $537 = ((($10)) + 4|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = (_refCast_744($538)|0);
     switch ($539|0) {
     case 10: case 6: case 4: case 5: case 3: case 2:  {
      $542 = $6;
      $543 = HEAP32[$542>>2]|0;
      switch ($543|0) {
      case 21:  {
       $546 = ((($9)) + 24|0);
       $547 = $546;
       $548 = $547;
       $549 = HEAP32[$548>>2]|0;
       $550 = (($547) + 4)|0;
       $551 = $550;
       $552 = HEAP32[$551>>2]|0;
       $553 = ((($10)) + 24|0);
       $554 = $553;
       $555 = $554;
       $556 = HEAP32[$555>>2]|0;
       $557 = (($554) + 4)|0;
       $558 = $557;
       $559 = HEAP32[$558>>2]|0;
       $560 = ($549|0)==($556|0);
       $561 = ($552|0)==($559|0);
       $562 = $560 & $561;
       $563 = $562&1;
       $564 = ($563|0)<(0);
       $565 = $564 << 31 >> 31;
       $566 = $5;
       $567 = ((($566)) + 24|0);
       $568 = $567;
       $569 = $568;
       HEAP32[$569>>2] = $563;
       $570 = (($568) + 4)|0;
       $571 = $570;
       HEAP32[$571>>2] = $565;
       break L17;
       break;
      }
      case 22:  {
       $572 = ((($9)) + 24|0);
       $573 = $572;
       $574 = $573;
       $575 = HEAP32[$574>>2]|0;
       $576 = (($573) + 4)|0;
       $577 = $576;
       $578 = HEAP32[$577>>2]|0;
       $579 = ((($10)) + 24|0);
       $580 = $579;
       $581 = $580;
       $582 = HEAP32[$581>>2]|0;
       $583 = (($580) + 4)|0;
       $584 = $583;
       $585 = HEAP32[$584>>2]|0;
       $586 = ($575|0)!=($582|0);
       $587 = ($578|0)!=($585|0);
       $588 = $586 | $587;
       $589 = $588&1;
       $590 = ($589|0)<(0);
       $591 = $590 << 31 >> 31;
       $592 = $5;
       $593 = ((($592)) + 24|0);
       $594 = $593;
       $595 = $594;
       HEAP32[$595>>2] = $589;
       $596 = (($594) + 4)|0;
       $597 = $596;
       HEAP32[$597>>2] = $591;
       break L17;
       break;
      }
      case 19:  {
       $598 = ((($9)) + 24|0);
       $599 = $598;
       $600 = $599;
       $601 = HEAP32[$600>>2]|0;
       $602 = (($599) + 4)|0;
       $603 = $602;
       $604 = HEAP32[$603>>2]|0;
       $605 = ((($10)) + 24|0);
       $606 = $605;
       $607 = $606;
       $608 = HEAP32[$607>>2]|0;
       $609 = (($606) + 4)|0;
       $610 = $609;
       $611 = HEAP32[$610>>2]|0;
       $612 = ($604|0)<($611|0);
       $613 = ($601>>>0)<($608>>>0);
       $614 = ($604|0)==($611|0);
       $615 = $614 & $613;
       $616 = $612 | $615;
       $617 = $616&1;
       $618 = ($617|0)<(0);
       $619 = $618 << 31 >> 31;
       $620 = $5;
       $621 = ((($620)) + 24|0);
       $622 = $621;
       $623 = $622;
       HEAP32[$623>>2] = $617;
       $624 = (($622) + 4)|0;
       $625 = $624;
       HEAP32[$625>>2] = $619;
       break L17;
       break;
      }
      case 20:  {
       $626 = ((($9)) + 24|0);
       $627 = $626;
       $628 = $627;
       $629 = HEAP32[$628>>2]|0;
       $630 = (($627) + 4)|0;
       $631 = $630;
       $632 = HEAP32[$631>>2]|0;
       $633 = ((($10)) + 24|0);
       $634 = $633;
       $635 = $634;
       $636 = HEAP32[$635>>2]|0;
       $637 = (($634) + 4)|0;
       $638 = $637;
       $639 = HEAP32[$638>>2]|0;
       $640 = ($632|0)<($639|0);
       $641 = ($629>>>0)<=($636>>>0);
       $642 = ($632|0)==($639|0);
       $643 = $642 & $641;
       $644 = $640 | $643;
       $645 = $644&1;
       $646 = ($645|0)<(0);
       $647 = $646 << 31 >> 31;
       $648 = $5;
       $649 = ((($648)) + 24|0);
       $650 = $649;
       $651 = $650;
       HEAP32[$651>>2] = $645;
       $652 = (($650) + 4)|0;
       $653 = $652;
       HEAP32[$653>>2] = $647;
       break L17;
       break;
      }
      case 17:  {
       $654 = ((($9)) + 24|0);
       $655 = $654;
       $656 = $655;
       $657 = HEAP32[$656>>2]|0;
       $658 = (($655) + 4)|0;
       $659 = $658;
       $660 = HEAP32[$659>>2]|0;
       $661 = ((($10)) + 24|0);
       $662 = $661;
       $663 = $662;
       $664 = HEAP32[$663>>2]|0;
       $665 = (($662) + 4)|0;
       $666 = $665;
       $667 = HEAP32[$666>>2]|0;
       $668 = ($660|0)>($667|0);
       $669 = ($657>>>0)>($664>>>0);
       $670 = ($660|0)==($667|0);
       $671 = $670 & $669;
       $672 = $668 | $671;
       $673 = $672&1;
       $674 = ($673|0)<(0);
       $675 = $674 << 31 >> 31;
       $676 = $5;
       $677 = ((($676)) + 24|0);
       $678 = $677;
       $679 = $678;
       HEAP32[$679>>2] = $673;
       $680 = (($678) + 4)|0;
       $681 = $680;
       HEAP32[$681>>2] = $675;
       break L17;
       break;
      }
      case 18:  {
       $682 = ((($9)) + 24|0);
       $683 = $682;
       $684 = $683;
       $685 = HEAP32[$684>>2]|0;
       $686 = (($683) + 4)|0;
       $687 = $686;
       $688 = HEAP32[$687>>2]|0;
       $689 = ((($10)) + 24|0);
       $690 = $689;
       $691 = $690;
       $692 = HEAP32[$691>>2]|0;
       $693 = (($690) + 4)|0;
       $694 = $693;
       $695 = HEAP32[$694>>2]|0;
       $696 = ($688|0)>($695|0);
       $697 = ($685>>>0)>=($692>>>0);
       $698 = ($688|0)==($695|0);
       $699 = $698 & $697;
       $700 = $696 | $699;
       $701 = $700&1;
       $702 = ($701|0)<(0);
       $703 = $702 << 31 >> 31;
       $704 = $5;
       $705 = ((($704)) + 24|0);
       $706 = $705;
       $707 = $706;
       HEAP32[$707>>2] = $701;
       $708 = (($706) + 4)|0;
       $709 = $708;
       HEAP32[$709>>2] = $703;
       break L17;
       break;
      }
      default: {
       $544 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer77>>2] = 24419;
       $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
       HEAP32[$vararg_ptr80>>2] = 493;
       $vararg_ptr81 = ((($vararg_buffer77)) + 8|0);
       HEAP32[$vararg_ptr81>>2] = 24526;
       _printFmt($544,0,28431,$vararg_buffer77);
       __abort_728();
       $545 = $5;
       HEAP32[$545>>2] = 0;
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
      }
      break;
     }
     case 8: case 7:  {
      $710 = $6;
      $711 = HEAP32[$710>>2]|0;
      switch ($711|0) {
      case 21:  {
       $714 = ((($9)) + 24|0);
       $715 = +HEAPF64[$714>>3];
       $716 = ((($10)) + 24|0);
       $717 = +HEAPF64[$716>>3];
       $718 = $715 == $717;
       $719 = $718&1;
       $720 = ($719|0)<(0);
       $721 = $720 << 31 >> 31;
       $722 = $5;
       $723 = ((($722)) + 24|0);
       $724 = $723;
       $725 = $724;
       HEAP32[$725>>2] = $719;
       $726 = (($724) + 4)|0;
       $727 = $726;
       HEAP32[$727>>2] = $721;
       break L17;
       break;
      }
      case 22:  {
       $728 = ((($9)) + 24|0);
       $729 = +HEAPF64[$728>>3];
       $730 = ((($10)) + 24|0);
       $731 = +HEAPF64[$730>>3];
       $732 = $729 != $731;
       $733 = $732&1;
       $734 = ($733|0)<(0);
       $735 = $734 << 31 >> 31;
       $736 = $5;
       $737 = ((($736)) + 24|0);
       $738 = $737;
       $739 = $738;
       HEAP32[$739>>2] = $733;
       $740 = (($738) + 4)|0;
       $741 = $740;
       HEAP32[$741>>2] = $735;
       break L17;
       break;
      }
      case 19:  {
       $742 = ((($9)) + 24|0);
       $743 = +HEAPF64[$742>>3];
       $744 = ((($10)) + 24|0);
       $745 = +HEAPF64[$744>>3];
       $746 = $743 < $745;
       $747 = $746&1;
       $748 = ($747|0)<(0);
       $749 = $748 << 31 >> 31;
       $750 = $5;
       $751 = ((($750)) + 24|0);
       $752 = $751;
       $753 = $752;
       HEAP32[$753>>2] = $747;
       $754 = (($752) + 4)|0;
       $755 = $754;
       HEAP32[$755>>2] = $749;
       break L17;
       break;
      }
      case 20:  {
       $756 = ((($9)) + 24|0);
       $757 = +HEAPF64[$756>>3];
       $758 = ((($10)) + 24|0);
       $759 = +HEAPF64[$758>>3];
       $760 = $757 <= $759;
       $761 = $760&1;
       $762 = ($761|0)<(0);
       $763 = $762 << 31 >> 31;
       $764 = $5;
       $765 = ((($764)) + 24|0);
       $766 = $765;
       $767 = $766;
       HEAP32[$767>>2] = $761;
       $768 = (($766) + 4)|0;
       $769 = $768;
       HEAP32[$769>>2] = $763;
       break L17;
       break;
      }
      case 17:  {
       $770 = ((($9)) + 24|0);
       $771 = +HEAPF64[$770>>3];
       $772 = ((($10)) + 24|0);
       $773 = +HEAPF64[$772>>3];
       $774 = $771 > $773;
       $775 = $774&1;
       $776 = ($775|0)<(0);
       $777 = $776 << 31 >> 31;
       $778 = $5;
       $779 = ((($778)) + 24|0);
       $780 = $779;
       $781 = $780;
       HEAP32[$781>>2] = $775;
       $782 = (($780) + 4)|0;
       $783 = $782;
       HEAP32[$783>>2] = $777;
       break L17;
       break;
      }
      case 18:  {
       $784 = ((($9)) + 24|0);
       $785 = +HEAPF64[$784>>3];
       $786 = ((($10)) + 24|0);
       $787 = +HEAPF64[$786>>3];
       $788 = $785 >= $787;
       $789 = $788&1;
       $790 = ($789|0)<(0);
       $791 = $790 << 31 >> 31;
       $792 = $5;
       $793 = ((($792)) + 24|0);
       $794 = $793;
       $795 = $794;
       HEAP32[$795>>2] = $789;
       $796 = (($794) + 4)|0;
       $797 = $796;
       HEAP32[$797>>2] = $791;
       break L17;
       break;
      }
      default: {
       $712 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer82>>2] = 24419;
       $vararg_ptr85 = ((($vararg_buffer82)) + 4|0);
       HEAP32[$vararg_ptr85>>2] = 531;
       $vararg_ptr86 = ((($vararg_buffer82)) + 8|0);
       HEAP32[$vararg_ptr86>>2] = 24526;
       _printFmt($712,0,28431,$vararg_buffer82);
       __abort_728();
       $713 = $5;
       HEAP32[$713>>2] = 0;
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
      }
      break;
     }
     default: {
      $540 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer72>>2] = 24419;
      $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
      HEAP32[$vararg_ptr75>>2] = 481;
      $vararg_ptr76 = ((($vararg_buffer72)) + 8|0);
      HEAP32[$vararg_ptr76>>2] = 24526;
      _printFmt($540,0,28431,$vararg_buffer72);
      __abort_728();
      $541 = $5;
      HEAP32[$541>>2] = 0;
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 24: case 25: case 23: case 16: case 15:  {
     $798 = $4;
     $799 = $6;
     $800 = ((($799)) + 24|0);
     $801 = ((($800)) + 4|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = (_eval($798,$9,$802)|0);
     $804 = ($803|0)!=(0);
     if (!($804)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $805 = $4;
     $806 = $6;
     $807 = ((($806)) + 24|0);
     $808 = HEAP32[$807>>2]|0;
     $809 = (_eval($805,$10,$808)|0);
     $810 = ($809|0)!=(0);
     if (!($810)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $811 = HEAP32[$9>>2]|0;
     $812 = ($811|0)!=(1);
     if ($812) {
      $813 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer87>>2] = 24419;
      $vararg_ptr90 = ((($vararg_buffer87)) + 4|0);
      HEAP32[$vararg_ptr90>>2] = 576;
      $vararg_ptr91 = ((($vararg_buffer87)) + 8|0);
      HEAP32[$vararg_ptr91>>2] = 24526;
      _printFmt($813,0,24584,$vararg_buffer87);
      __abort_728();
     }
     $814 = HEAP32[$10>>2]|0;
     $815 = ($814|0)!=(1);
     if ($815) {
      $816 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer92>>2] = 24419;
      $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
      HEAP32[$vararg_ptr95>>2] = 577;
      $vararg_ptr96 = ((($vararg_buffer92)) + 8|0);
      HEAP32[$vararg_ptr96>>2] = 24526;
      _printFmt($816,0,24636,$vararg_buffer92);
      __abort_728();
     }
     $817 = ((($9)) + 4|0);
     $818 = HEAP32[$817>>2]|0;
     $819 = ((($10)) + 4|0);
     $820 = HEAP32[$819>>2]|0;
     $821 = ($818|0)!=($820|0);
     if ($821) {
      $822 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer97>>2] = 24419;
      $vararg_ptr100 = ((($vararg_buffer97)) + 4|0);
      HEAP32[$vararg_ptr100>>2] = 578;
      $vararg_ptr101 = ((($vararg_buffer97)) + 8|0);
      HEAP32[$vararg_ptr101>>2] = 24526;
      _printFmt($822,0,24765,$vararg_buffer97);
      __abort_728();
     }
     $823 = $6;
     $824 = ((($823)) + 4|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = $4;
     $827 = ((($826)) + 5220|0);
     $828 = HEAP32[$827>>2]|0;
     $829 = ($825|0)!=($828|0);
     if ($829) {
      $830 = $6;
      $831 = ((($830)) + 4|0);
      $832 = HEAP32[$831>>2]|0;
      $833 = $4;
      $834 = ((($833)) + 5224|0);
      $835 = HEAP32[$834>>2]|0;
      $836 = ($832|0)!=($835|0);
      if ($836) {
       $837 = $6;
       $838 = ((($837)) + 4|0);
       $839 = HEAP32[$838>>2]|0;
       $840 = $4;
       $841 = ((($840)) + 5236|0);
       $842 = HEAP32[$841>>2]|0;
       $843 = ($839|0)!=($842|0);
       if ($843) {
        $844 = $6;
        $845 = ((($844)) + 4|0);
        $846 = HEAP32[$845>>2]|0;
        $847 = $4;
        $848 = ((($847)) + 5240|0);
        $849 = HEAP32[$848>>2]|0;
        $850 = ($846|0)!=($849|0);
        if ($850) {
         $851 = HEAP32[3314]|0;
         HEAP32[$vararg_buffer102>>2] = 24419;
         $vararg_ptr105 = ((($vararg_buffer102)) + 4|0);
         HEAP32[$vararg_ptr105>>2] = 583;
         $vararg_ptr106 = ((($vararg_buffer102)) + 8|0);
         HEAP32[$vararg_ptr106>>2] = 24526;
         _printFmt($851,0,24816,$vararg_buffer102);
         __abort_728();
        }
       }
      }
     }
     $852 = $5;
     HEAP32[$852>>2] = 1;
     $853 = $6;
     $854 = ((($853)) + 4|0);
     $855 = HEAP32[$854>>2]|0;
     $856 = $5;
     $857 = ((($856)) + 4|0);
     HEAP32[$857>>2] = $855;
     $858 = ((($9)) + 4|0);
     $859 = HEAP32[$858>>2]|0;
     $860 = (_refCast_744($859)|0);
     $$off1 = (($860) + -2)|0;
     $switch2 = ($$off1>>>0)<(5);
     if (!($switch2)) {
      $861 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer107>>2] = 24419;
      $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
      HEAP32[$vararg_ptr110>>2] = 589;
      $vararg_ptr111 = ((($vararg_buffer107)) + 8|0);
      HEAP32[$vararg_ptr111>>2] = 24526;
      _printFmt($861,0,28431,$vararg_buffer107);
      __abort_728();
      $862 = $5;
      HEAP32[$862>>2] = 0;
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $863 = $6;
     $864 = HEAP32[$863>>2]|0;
     switch ($864|0) {
     case 15:  {
      $867 = ((($9)) + 24|0);
      $868 = $867;
      $869 = $868;
      $870 = HEAP32[$869>>2]|0;
      $871 = (($868) + 4)|0;
      $872 = $871;
      $873 = HEAP32[$872>>2]|0;
      $874 = ((($10)) + 24|0);
      $875 = $874;
      $876 = $875;
      $877 = HEAP32[$876>>2]|0;
      $878 = (($875) + 4)|0;
      $879 = $878;
      $880 = HEAP32[$879>>2]|0;
      $881 = (_bitshift64Ashr(($870|0),($873|0),($877|0))|0);
      $882 = (getTempRet0() | 0);
      $883 = $5;
      $884 = ((($883)) + 24|0);
      $885 = $884;
      $886 = $885;
      HEAP32[$886>>2] = $881;
      $887 = (($885) + 4)|0;
      $888 = $887;
      HEAP32[$888>>2] = $882;
      break L17;
      break;
     }
     case 16:  {
      $889 = ((($9)) + 24|0);
      $890 = $889;
      $891 = $890;
      $892 = HEAP32[$891>>2]|0;
      $893 = (($890) + 4)|0;
      $894 = $893;
      $895 = HEAP32[$894>>2]|0;
      $896 = ((($10)) + 24|0);
      $897 = $896;
      $898 = $897;
      $899 = HEAP32[$898>>2]|0;
      $900 = (($897) + 4)|0;
      $901 = $900;
      $902 = HEAP32[$901>>2]|0;
      $903 = (_bitshift64Shl(($892|0),($895|0),($899|0))|0);
      $904 = (getTempRet0() | 0);
      $905 = $5;
      $906 = ((($905)) + 24|0);
      $907 = $906;
      $908 = $907;
      HEAP32[$908>>2] = $903;
      $909 = (($907) + 4)|0;
      $910 = $909;
      HEAP32[$910>>2] = $904;
      break L17;
      break;
     }
     case 23:  {
      $911 = ((($9)) + 24|0);
      $912 = $911;
      $913 = $912;
      $914 = HEAP32[$913>>2]|0;
      $915 = (($912) + 4)|0;
      $916 = $915;
      $917 = HEAP32[$916>>2]|0;
      $918 = ((($10)) + 24|0);
      $919 = $918;
      $920 = $919;
      $921 = HEAP32[$920>>2]|0;
      $922 = (($919) + 4)|0;
      $923 = $922;
      $924 = HEAP32[$923>>2]|0;
      $925 = $914 & $921;
      $926 = $917 & $924;
      $927 = $5;
      $928 = ((($927)) + 24|0);
      $929 = $928;
      $930 = $929;
      HEAP32[$930>>2] = $925;
      $931 = (($929) + 4)|0;
      $932 = $931;
      HEAP32[$932>>2] = $926;
      break L17;
      break;
     }
     case 24:  {
      $933 = ((($9)) + 24|0);
      $934 = $933;
      $935 = $934;
      $936 = HEAP32[$935>>2]|0;
      $937 = (($934) + 4)|0;
      $938 = $937;
      $939 = HEAP32[$938>>2]|0;
      $940 = ((($10)) + 24|0);
      $941 = $940;
      $942 = $941;
      $943 = HEAP32[$942>>2]|0;
      $944 = (($941) + 4)|0;
      $945 = $944;
      $946 = HEAP32[$945>>2]|0;
      $947 = $936 ^ $943;
      $948 = $939 ^ $946;
      $949 = $5;
      $950 = ((($949)) + 24|0);
      $951 = $950;
      $952 = $951;
      HEAP32[$952>>2] = $947;
      $953 = (($951) + 4)|0;
      $954 = $953;
      HEAP32[$954>>2] = $948;
      break L17;
      break;
     }
     case 25:  {
      $955 = ((($9)) + 24|0);
      $956 = $955;
      $957 = $956;
      $958 = HEAP32[$957>>2]|0;
      $959 = (($956) + 4)|0;
      $960 = $959;
      $961 = HEAP32[$960>>2]|0;
      $962 = ((($10)) + 24|0);
      $963 = $962;
      $964 = $963;
      $965 = HEAP32[$964>>2]|0;
      $966 = (($963) + 4)|0;
      $967 = $966;
      $968 = HEAP32[$967>>2]|0;
      $969 = $958 | $965;
      $970 = $961 | $968;
      $971 = $5;
      $972 = ((($971)) + 24|0);
      $973 = $972;
      $974 = $973;
      HEAP32[$974>>2] = $969;
      $975 = (($973) + 4)|0;
      $976 = $975;
      HEAP32[$976>>2] = $970;
      break L17;
      break;
     }
     default: {
      $865 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer112>>2] = 24419;
      $vararg_ptr115 = ((($vararg_buffer112)) + 4|0);
      HEAP32[$vararg_ptr115>>2] = 600;
      $vararg_ptr116 = ((($vararg_buffer112)) + 8|0);
      HEAP32[$vararg_ptr116>>2] = 24526;
      _printFmt($865,0,28431,$vararg_buffer112);
      __abort_728();
      $866 = $5;
      HEAP32[$866>>2] = 0;
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 27: case 26:  {
     $977 = $4;
     $978 = $6;
     $979 = ((($978)) + 24|0);
     $980 = ((($979)) + 4|0);
     $981 = HEAP32[$980>>2]|0;
     $982 = (_eval($977,$9,$981)|0);
     $983 = ($982|0)!=(0);
     if (!($983)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $984 = $4;
     $985 = $6;
     $986 = ((($985)) + 24|0);
     $987 = HEAP32[$986>>2]|0;
     $988 = (_eval($984,$10,$987)|0);
     $989 = ($988|0)!=(0);
     if (!($989)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $990 = HEAP32[$9>>2]|0;
     $991 = ($990|0)!=(1);
     if ($991) {
      $992 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer117>>2] = 24419;
      $vararg_ptr120 = ((($vararg_buffer117)) + 4|0);
      HEAP32[$vararg_ptr120>>2] = 639;
      $vararg_ptr121 = ((($vararg_buffer117)) + 8|0);
      HEAP32[$vararg_ptr121>>2] = 24526;
      _printFmt($992,0,24584,$vararg_buffer117);
      __abort_728();
     }
     $993 = HEAP32[$10>>2]|0;
     $994 = ($993|0)!=(1);
     if ($994) {
      $995 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer122>>2] = 24419;
      $vararg_ptr125 = ((($vararg_buffer122)) + 4|0);
      HEAP32[$vararg_ptr125>>2] = 640;
      $vararg_ptr126 = ((($vararg_buffer122)) + 8|0);
      HEAP32[$vararg_ptr126>>2] = 24526;
      _printFmt($995,0,24636,$vararg_buffer122);
      __abort_728();
     }
     $996 = ((($9)) + 4|0);
     $997 = HEAP32[$996>>2]|0;
     $998 = $4;
     $999 = ((($998)) + 5204|0);
     $1000 = HEAP32[$999>>2]|0;
     $1001 = ($997|0)!=($1000|0);
     if ($1001) {
      $1002 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer127>>2] = 24419;
      $vararg_ptr130 = ((($vararg_buffer127)) + 4|0);
      HEAP32[$vararg_ptr130>>2] = 641;
      $vararg_ptr131 = ((($vararg_buffer127)) + 8|0);
      HEAP32[$vararg_ptr131>>2] = 24526;
      _printFmt($1002,0,24959,$vararg_buffer127);
      __abort_728();
     }
     $1003 = ((($10)) + 4|0);
     $1004 = HEAP32[$1003>>2]|0;
     $1005 = $4;
     $1006 = ((($1005)) + 5204|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = ($1004|0)!=($1007|0);
     if ($1008) {
      $1009 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer132>>2] = 24419;
      $vararg_ptr135 = ((($vararg_buffer132)) + 4|0);
      HEAP32[$vararg_ptr135>>2] = 642;
      $vararg_ptr136 = ((($vararg_buffer132)) + 8|0);
      HEAP32[$vararg_ptr136>>2] = 24526;
      _printFmt($1009,0,25014,$vararg_buffer132);
      __abort_728();
     }
     $1010 = $6;
     $1011 = ((($1010)) + 4|0);
     $1012 = HEAP32[$1011>>2]|0;
     $1013 = $4;
     $1014 = ((($1013)) + 5204|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = ($1012|0)!=($1015|0);
     if ($1016) {
      $1017 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer137>>2] = 24419;
      $vararg_ptr140 = ((($vararg_buffer137)) + 4|0);
      HEAP32[$vararg_ptr140>>2] = 643;
      $vararg_ptr141 = ((($vararg_buffer137)) + 8|0);
      HEAP32[$vararg_ptr141>>2] = 24526;
      _printFmt($1017,0,24709,$vararg_buffer137);
      __abort_728();
     }
     $1018 = $5;
     HEAP32[$1018>>2] = 1;
     $1019 = $6;
     $1020 = ((($1019)) + 4|0);
     $1021 = HEAP32[$1020>>2]|0;
     $1022 = $5;
     $1023 = ((($1022)) + 4|0);
     HEAP32[$1023>>2] = $1021;
     $1024 = $6;
     $1025 = HEAP32[$1024>>2]|0;
     switch ($1025|0) {
     case 27:  {
      $1028 = ((($9)) + 24|0);
      $1029 = $1028;
      $1030 = $1029;
      $1031 = HEAP32[$1030>>2]|0;
      $1032 = (($1029) + 4)|0;
      $1033 = $1032;
      $1034 = HEAP32[$1033>>2]|0;
      $1035 = ($1031|0)!=(0);
      $1036 = ($1034|0)!=(0);
      $1037 = $1035 | $1036;
      if ($1037) {
       $1049 = 1;
      } else {
       $1038 = ((($10)) + 24|0);
       $1039 = $1038;
       $1040 = $1039;
       $1041 = HEAP32[$1040>>2]|0;
       $1042 = (($1039) + 4)|0;
       $1043 = $1042;
       $1044 = HEAP32[$1043>>2]|0;
       $1045 = ($1041|0)!=(0);
       $1046 = ($1044|0)!=(0);
       $1047 = $1045 | $1046;
       $1049 = $1047;
      }
      $1048 = $1049&1;
      $1050 = ($1048|0)<(0);
      $1051 = $1050 << 31 >> 31;
      $1052 = $5;
      $1053 = ((($1052)) + 24|0);
      $1054 = $1053;
      $1055 = $1054;
      HEAP32[$1055>>2] = $1048;
      $1056 = (($1054) + 4)|0;
      $1057 = $1056;
      HEAP32[$1057>>2] = $1051;
      break L17;
      break;
     }
     case 26:  {
      $1058 = ((($9)) + 24|0);
      $1059 = $1058;
      $1060 = $1059;
      $1061 = HEAP32[$1060>>2]|0;
      $1062 = (($1059) + 4)|0;
      $1063 = $1062;
      $1064 = HEAP32[$1063>>2]|0;
      $1065 = ($1061|0)!=(0);
      $1066 = ($1064|0)!=(0);
      $1067 = $1065 | $1066;
      if ($1067) {
       $1068 = ((($10)) + 24|0);
       $1069 = $1068;
       $1070 = $1069;
       $1071 = HEAP32[$1070>>2]|0;
       $1072 = (($1069) + 4)|0;
       $1073 = $1072;
       $1074 = HEAP32[$1073>>2]|0;
       $1075 = ($1071|0)!=(0);
       $1076 = ($1074|0)!=(0);
       $1077 = $1075 | $1076;
       $1079 = $1077;
      } else {
       $1079 = 0;
      }
      $1078 = $1079&1;
      $1080 = ($1078|0)<(0);
      $1081 = $1080 << 31 >> 31;
      $1082 = $5;
      $1083 = ((($1082)) + 24|0);
      $1084 = $1083;
      $1085 = $1084;
      HEAP32[$1085>>2] = $1078;
      $1086 = (($1084) + 4)|0;
      $1087 = $1086;
      HEAP32[$1087>>2] = $1081;
      break L17;
      break;
     }
     default: {
      $1026 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer142>>2] = 24419;
      $vararg_ptr145 = ((($vararg_buffer142)) + 4|0);
      HEAP32[$vararg_ptr145>>2] = 650;
      $vararg_ptr146 = ((($vararg_buffer142)) + 8|0);
      HEAP32[$vararg_ptr146>>2] = 24526;
      _printFmt($1026,0,28431,$vararg_buffer142);
      __abort_728();
      $1027 = $5;
      HEAP32[$1027>>2] = 0;
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     }
     break;
    }
    case 28:  {
     $1088 = $4;
     $1089 = $6;
     $1090 = ((($1089)) + 24|0);
     $1091 = ((($1090)) + 8|0);
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = (_eval($1088,$9,$1092)|0);
     $1094 = ($1093|0)!=(0);
     if (!($1094)) {
      $3 = 0;
      $1164 = $3;
      STACKTOP = sp;return ($1164|0);
     }
     $1095 = HEAP32[$9>>2]|0;
     $1096 = ($1095|0)!=(1);
     if ($1096) {
      $1097 = HEAP32[3314]|0;
      HEAP32[$vararg_buffer147>>2] = 24419;
      $vararg_ptr150 = ((($vararg_buffer147)) + 4|0);
      HEAP32[$vararg_ptr150>>2] = 669;
      $vararg_ptr151 = ((($vararg_buffer147)) + 8|0);
      HEAP32[$vararg_ptr151>>2] = 24526;
      _printFmt($1097,0,24584,$vararg_buffer147);
      __abort_728();
     }
     $1098 = $4;
     $1099 = $5;
     $1100 = (_bolValue($9)|0);
     $1101 = ($1100|0)!=(0);
     $1102 = $6;
     $1103 = ((($1102)) + 24|0);
     if ($1101) {
      $1104 = ((($1103)) + 4|0);
      $1105 = HEAP32[$1104>>2]|0;
      $1107 = $1105;
     } else {
      $1106 = HEAP32[$1103>>2]|0;
      $1107 = $1106;
     }
     $1108 = (_eval($1098,$1099,$1107)|0);
     $3 = $1108;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
     break;
    }
    case 30: case 29:  {
     $3 = 0;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
     break;
    }
    default: {
     $34 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer11>>2] = 24419;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 210;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 24526;
     _printFmt($34,0,28431,$vararg_buffer11);
     __abort_728();
     $3 = 0;
     $1164 = $3;
     STACKTOP = sp;return ($1164|0);
    }
    }
   } while(0);
   $1109 = $5;
   $1110 = ((($1109)) + 4|0);
   $1111 = HEAP32[$1110>>2]|0;
   $1112 = ($1111|0)!=(0|0);
   L273: do {
    if ($1112) {
     $1113 = $7;
     $1114 = $5;
     $1115 = ((($1114)) + 4|0);
     $1116 = HEAP32[$1115>>2]|0;
     $1117 = (_refCast_744($1116)|0);
     $1118 = ($1113|0)!=($1117|0);
     if ($1118) {
      $1119 = $5;
      HEAP32[$1119>>2] = 1;
      $1120 = $7;
      switch ($1120|0) {
      case 2:  {
       $1122 = $5;
       $1123 = (_bolValue($1122)|0);
       $1124 = ($1123|0)<(0);
       $1125 = $1124 << 31 >> 31;
       $1126 = $5;
       $1127 = ((($1126)) + 24|0);
       $1128 = $1127;
       $1129 = $1128;
       HEAP32[$1129>>2] = $1123;
       $1130 = (($1128) + 4)|0;
       $1131 = $1130;
       HEAP32[$1131>>2] = $1125;
       $1132 = $8;
       $1133 = $5;
       $1134 = ((($1133)) + 4|0);
       HEAP32[$1134>>2] = $1132;
       break L273;
       break;
      }
      case 5: case 10:  {
       $1135 = $5;
       $1136 = (_intValue($1135)|0);
       $1137 = (getTempRet0() | 0);
       $1138 = $5;
       $1139 = ((($1138)) + 24|0);
       $1140 = $1139;
       $1141 = $1140;
       HEAP32[$1141>>2] = $1136;
       $1142 = (($1140) + 4)|0;
       $1143 = $1142;
       HEAP32[$1143>>2] = $1137;
       $1144 = $8;
       $1145 = $5;
       $1146 = ((($1145)) + 4|0);
       HEAP32[$1146>>2] = $1144;
       break L273;
       break;
      }
      case 8:  {
       $1147 = $5;
       $1148 = (+_fltValue($1147));
       $1149 = $5;
       $1150 = ((($1149)) + 24|0);
       HEAPF64[$1150>>3] = $1148;
       $1151 = $8;
       $1152 = $5;
       $1153 = ((($1152)) + 4|0);
       HEAP32[$1153>>2] = $1151;
       break L273;
       break;
      }
      default: {
       $1121 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer152>>2] = 24419;
       $vararg_ptr155 = ((($vararg_buffer152)) + 4|0);
       HEAP32[$vararg_ptr155>>2] = 681;
       $vararg_ptr156 = ((($vararg_buffer152)) + 8|0);
       HEAP32[$vararg_ptr156>>2] = 24526;
       _printFmt($1121,0,28431,$vararg_buffer152);
       __abort_728();
       $3 = 0;
       $1164 = $3;
       STACKTOP = sp;return ($1164|0);
      }
      }
     }
    }
   } while(0);
   $1154 = $5;
   $1155 = HEAP32[$1154>>2]|0;
   $cond = ($1155|0)==(1);
   if ($cond) {
    $1160 = $8;
    $1161 = $5;
    $1162 = ((($1161)) + 4|0);
    HEAP32[$1162>>2] = $1160;
    $1163 = $7;
    $3 = $1163;
    $1164 = $3;
    STACKTOP = sp;return ($1164|0);
   } else {
    $1156 = HEAP32[3314]|0;
    $1157 = $5;
    HEAP32[$vararg_buffer157>>2] = 24419;
    $vararg_ptr160 = ((($vararg_buffer157)) + 4|0);
    HEAP32[$vararg_ptr160>>2] = 704;
    $vararg_ptr161 = ((($vararg_buffer157)) + 8|0);
    HEAP32[$vararg_ptr161>>2] = 24526;
    $vararg_ptr162 = ((($vararg_buffer157)) + 12|0);
    HEAP32[$vararg_ptr162>>2] = $1157;
    _printFmt($1156,0,25069,$vararg_buffer157);
    __abort_728();
    $1158 = $5;
    $1159 = ((($1158)) + 4|0);
    HEAP32[$1159>>2] = 0;
    $3 = 0;
    $1164 = $3;
    STACKTOP = sp;return ($1164|0);
   }
  }
 }
 $22 = HEAP32[3314]|0;
 HEAP32[$vararg_buffer>>2] = 24419;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 164;
 $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = 24526;
 _printFmt($22,0,28431,$vararg_buffer);
 __abort_728();
 $3 = 0;
 $1164 = $3;
 STACKTOP = sp;return ($1164|0);
}
function _isTypeExpr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 5:  {
  $7 = $2;
  $8 = ((($7)) + 24|0);
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_isTypeExpr($10)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_isTypeExpr($15)|0);
   $17 = ($16|0)!=(0);
   $19 = $17;
  } else {
   $19 = 0;
  }
  $18 = $19&1;
  $1 = $18;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
  break;
 }
 case 2:  {
  $20 = $2;
  $21 = ((($20)) + 24|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $2;
   $26 = ((($25)) + 24|0);
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_isTypename_739($28)|0);
   $30 = ($29|0)!=(0);
   $32 = $30;
  } else {
   $32 = 0;
  }
  $31 = $32&1;
  $1 = $31;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
  break;
 }
 default: {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 }
 return (0)|0;
}
function _linkOf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(3);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 24|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $4;
   $20 = (_linkOf($18,$19)|0);
   $2 = $20;
   $66 = $2;
   STACKTOP = sp;return ($66|0);
  }
 }
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(4);
 $24 = $3;
 if ($23) {
  $25 = ((($24)) + 24|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $4;
  $29 = (_linkOf($27,$28)|0);
  $2 = $29;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $30 = HEAP32[$24>>2]|0;
 $31 = ($30|0)==(5);
 $32 = $3;
 if ($31) {
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $4;
  $36 = (_linkOf($34,$35)|0);
  $2 = $36;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $37 = HEAP32[$32>>2]|0;
 $38 = ($37|0)==(2);
 if (!($38)) {
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $39 = $3;
 $40 = ((($39)) + 24|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $5 = $42;
 $43 = $4;
 $44 = ($43|0)!=(0);
 L22: do {
  if ($44) {
   while(1) {
    $45 = $5;
    $46 = ($45|0)!=(0|0);
    if (!($46)) {
     break L22;
    }
    $47 = $5;
    $48 = ((($47)) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    if ($50) {
     break L22;
    }
    $51 = $5;
    $52 = ((($51)) + 56|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0|0);
    if ($54) {
     break L22;
    }
    $55 = $5;
    $56 = ((($55)) + 56|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(2);
    if ($59) {
     break L22;
    }
    $60 = $5;
    $61 = ((($60)) + 56|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $4;
    $64 = (_linkOf($62,$63)|0);
    $5 = $64;
   }
  }
 } while(0);
 $65 = $5;
 $2 = $65;
 $66 = $2;
 STACKTOP = sp;return ($66|0);
}
function _isInline_758($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _addUsage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ((($13)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ($15|0)!=($16|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $2;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 24|0);
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = $20;
 $24 = $3;
 $25 = $2;
 $26 = ((($25)) + 60|0);
 HEAP32[$26>>2] = $24;
 STACKTOP = sp;return;
}
function _isConstVar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = HEAP32[$5>>2]|0;
   switch ($6|0) {
   case 4:  {
    $7 = $2;
    $8 = ((($7)) + 24|0);
    $9 = ((($8)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_isConstVar($10)|0);
    $1 = $11;
    break L1;
    break;
   }
   case 5:  {
    $12 = $2;
    $13 = ((($12)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_isConstVar($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $24 = 1;
    } else {
     $17 = $2;
     $18 = ((($17)) + 24|0);
     $19 = ((($18)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_isConstVar($20)|0);
     $22 = ($21|0)!=(0);
     $24 = $22;
    }
    $23 = $24&1;
    $1 = $23;
    break L1;
    break;
   }
   case 2:  {
    $25 = $2;
    $26 = ((($25)) + 24|0);
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = $2;
     $31 = ((($30)) + 24|0);
     $32 = ((($31)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (_isConst_773($33)|0);
     $35 = ($34|0)!=(0);
     $37 = $35;
    } else {
     $37 = 0;
    }
    $36 = $37&1;
    $1 = $36;
    break L1;
    break;
   }
   default: {
    $1 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _isConst_773($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _newDef($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $6 = 0;
 $9 = $5;
 $10 = ((($9)) + 132|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_padPointer_776($11,4)|0);
 $13 = $5;
 $14 = ((($13)) + 132|0);
 HEAP32[$14>>2] = $12;
 $15 = $5;
 $16 = ((($15)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = ((($18)) + 136|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)>=($20>>>0);
 if ($21) {
  $22 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 41;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 25156;
  _printFmt($22,0,25109,$vararg_buffer);
  __abort_779();
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 } else {
  $23 = $5;
  $24 = ((($23)) + 132|0);
  $25 = HEAP32[$24>>2]|0;
  $6 = $25;
  $26 = $5;
  $27 = ((($26)) + 132|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 72|0);
  HEAP32[$27>>2] = $29;
  $30 = $6;
  dest=$30; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $31 = $4;
  $32 = $6;
  $33 = ((($32)) + 44|0);
  HEAP32[$33>>2] = $31;
  $34 = $6;
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _padPointer_776($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = (_padOffset_780($5,$6)|0);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __abort_779() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _padOffset_780($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6))|0;
 $8 = $3;
 $9 = (0 - ($8))|0;
 $10 = $7 & $9;
 STACKTOP = sp;return ($10|0);
}
function _enter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4124|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = ((($13)) + 32|0);
 HEAP32[$14>>2] = $12;
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _leave($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $20 = $5;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $12 = $22;
 $23 = $5;
 $24 = ((($23)) + 4124|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = $12;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $12;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = ((($32)) + 4124|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)>=($34|0);
  if ($35) {
   $36 = $12;
   $37 = ((($36)) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $5;
   $40 = ((($39)) + 8|0);
   HEAP32[$40>>2] = $38;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $12 = 0;
 }
 $13 = 0;
 while(1) {
  $41 = $13;
  $42 = ($41|0)<(512);
  $43 = $5;
  if (!($42)) {
   break;
  }
  $44 = ((($43)) + 2076|0);
  $45 = $13;
  $46 = (($44) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $10 = $47;
  while(1) {
   $48 = $10;
   $49 = ($48|0)!=(0|0);
   if (!($49)) {
    break;
   }
   $50 = $10;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $5;
   $54 = ((($53)) + 4124|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52|0)>($55|0);
   if (!($56)) {
    break;
   }
   $57 = $10;
   $58 = ((($57)) + 24|0);
   $59 = HEAP32[$58>>2]|0;
   $10 = $59;
  }
  $60 = $10;
  $61 = $5;
  $62 = ((($61)) + 2076|0);
  $63 = $13;
  $64 = (($62) + ($63<<2)|0);
  HEAP32[$64>>2] = $60;
  $65 = $13;
  $66 = (($65) + 1)|0;
  $13 = $66;
 }
 $67 = ((($43)) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $10 = $68;
 while(1) {
  $69 = $10;
  $70 = ($69|0)!=(0|0);
  if (!($70)) {
   break;
  }
  $71 = $10;
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $5;
  $75 = ((($74)) + 4124|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($73|0)>($76|0);
  if (!($77)) {
   break;
  }
  $78 = $6;
  $79 = $78 & 192;
  $80 = $10;
  $81 = ((($80)) + 44|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 | $79;
  HEAP32[$81>>2] = $83;
  $84 = $12;
  $85 = $10;
  $86 = ((($85)) + 32|0);
  HEAP32[$86>>2] = $84;
  $87 = $10;
  $88 = (_isStatic_785($87)|0);
  $89 = ($88|0)!=(0);
  if (!($89)) {
   $90 = $10;
   $91 = (_isFunction_786($90)|0);
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = $10;
    $94 = ((($93)) + 56|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $97 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer>>2] = 25145;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = 87;
     $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr3>>2] = 25211;
     _printFmt($97,0,25163,$vararg_buffer);
     __abort_779();
    }
    $98 = $10;
    $99 = ((($98)) + 56|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)!=(42);
    if ($102) {
     $103 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer4>>2] = 25145;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = 88;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = 25211;
     _printFmt($103,0,25217,$vararg_buffer4);
     __abort_779();
    }
    $104 = $12;
    $105 = ($104|0)!=(0|0);
    if ($105) {
     $106 = $12;
     $107 = (_isTypename_789($106)|0);
     $108 = ($107|0)!=(0);
     if ($108) {
      $109 = $5;
      $110 = (_newDef($109,0)|0);
      $14 = $110;
      $111 = $14;
      $112 = $10;
      dest=$111; src=$112; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $113 = $14;
      $114 = ((($113)) + 44|0);
      HEAP32[$114>>2] = 186;
      $115 = $5;
      $116 = $10;
      $117 = (_lnkNode($115,$116)|0);
      $118 = $14;
      $119 = ((($118)) + 56|0);
      HEAP32[$119>>2] = $117;
      $120 = $10;
      $121 = ((($120)) + 44|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $122 | 64;
      HEAP32[$121>>2] = $123;
      $124 = $14;
      $125 = $10;
      $126 = ((($125)) + 48|0);
      HEAP32[$126>>2] = $124;
     }
    }
   }
  }
  $127 = $11;
  $128 = $10;
  $129 = ((($128)) + 24|0);
  HEAP32[$129>>2] = $127;
  $130 = $10;
  $11 = $130;
  $131 = $10;
  $132 = (_isStatic_785($131)|0);
  $133 = ($132|0)!=(0);
  if ($133) {
   $134 = $5;
   $135 = ((($134)) + 4128|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = ($136 << 7)&255;
   $138 = ($137<<24>>24) >> 7;
   $139 = $138 << 24 >> 24;
   $140 = ($139|0)!=(0);
   if (!($140)) {
    $141 = $10;
    $142 = ((($141)) + 52|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    if ($144) {
     $145 = $5;
     $146 = ((($145)) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $10;
     $149 = ((($148)) + 52|0);
     HEAP32[$149>>2] = $147;
     $150 = $10;
     $151 = $5;
     $152 = ((($151)) + 16|0);
     HEAP32[$152>>2] = $150;
    }
   }
  }
  $153 = $10;
  $154 = ((($153)) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $10 = $155;
 }
 $156 = $10;
 $157 = $5;
 $158 = ((($157)) + 12|0);
 HEAP32[$158>>2] = $156;
 $159 = $8;
 $15 = $159;
 $160 = $8;
 $16 = $160;
 $161 = $6;
 $162 = $161 & 48;
 L38: do {
  switch ($162|0) {
  case 16:  {
   $164 = $11;
   $10 = $164;
   while(1) {
    $165 = $10;
    $166 = ($165|0)!=(0|0);
    if (!($166)) {
     break;
    }
    $167 = $10;
    $168 = (_isStatic_785($167)|0);
    $169 = ($168|0)!=(0);
    if (!($169)) {
     $170 = $15;
     $171 = $7;
     $172 = $10;
     $173 = ((($172)) + 16|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($171>>>0)<($174>>>0);
     if ($175) {
      $176 = $7;
      $180 = $176;
     } else {
      $177 = $10;
      $178 = ((($177)) + 16|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $179;
     }
     $181 = (_padOffset_780($170,$180)|0);
     $182 = $10;
     $183 = ((($182)) + 20|0);
     HEAP32[$183>>2] = $181;
     $184 = $15;
     $185 = $10;
     $186 = ((($185)) + 20|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($184>>>0)<($187>>>0);
     if ($188) {
      $189 = $5;
      $190 = HEAP32[$189>>2]|0;
      $191 = $10;
      $192 = ((($191)) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $10;
      $195 = ((($194)) + 8|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $10;
      $198 = $10;
      $199 = ((($198)) + 20|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $15;
      $202 = (($200) - ($201))|0;
      $203 = $15;
      $204 = $10;
      $205 = ((($204)) + 20|0);
      $206 = HEAP32[$205>>2]|0;
      HEAP32[$vararg_buffer14>>2] = $197;
      $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
      HEAP32[$vararg_ptr17>>2] = $202;
      $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
      HEAP32[$vararg_ptr18>>2] = $203;
      $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
      HEAP32[$vararg_ptr19>>2] = $206;
      _printLog($190,6,$193,$196,0,25275,$vararg_buffer14);
     }
     $207 = $10;
     $208 = ((($207)) + 20|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $10;
     $211 = ((($210)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = (($209) + ($212))|0;
     $15 = $213;
     $214 = $16;
     $215 = $15;
     $216 = ($214>>>0)<($215>>>0);
     if ($216) {
      $217 = $15;
      $16 = $217;
     }
    }
    $218 = $10;
    $219 = ((($218)) + 24|0);
    $220 = HEAP32[$219>>2]|0;
    $10 = $220;
   }
   $221 = $16;
   $222 = $7;
   $223 = (_padOffset_780($221,$222)|0);
   $17 = $223;
   $224 = $7;
   $225 = ($224|0)!=(0);
   if ($225) {
    $226 = $16;
    $227 = $17;
    $228 = ($226|0)!=($227|0);
    if ($228) {
     $229 = $12;
     $230 = ($229|0)!=(0|0);
     if ($230) {
      $231 = $12;
      $232 = ((($231)) + 4|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233;
     } else {
      $234 = 0;
     }
     $18 = $234;
     $235 = $12;
     $236 = ($235|0)!=(0|0);
     if ($236) {
      $237 = $12;
      $238 = ((($237)) + 8|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = $239;
     } else {
      $240 = 0;
     }
     $19 = $240;
     $241 = $5;
     $242 = HEAP32[$241>>2]|0;
     $243 = $18;
     $244 = $19;
     $245 = $12;
     $246 = $17;
     $247 = $16;
     $248 = (($246) - ($247))|0;
     $249 = $16;
     $250 = $17;
     HEAP32[$vararg_buffer20>>2] = $245;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = $248;
     $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
     HEAP32[$vararg_ptr24>>2] = $249;
     $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
     HEAP32[$vararg_ptr25>>2] = $250;
     _printLog($242,6,$243,$244,0,25275,$vararg_buffer20);
     $251 = $17;
     $16 = $251;
    }
   }
   break;
  }
  case 32:  {
   $252 = $11;
   $10 = $252;
   while(1) {
    $253 = $10;
    $254 = ($253|0)!=(0|0);
    if (!($254)) {
     break L38;
    }
    $255 = $10;
    $256 = (_isStatic_785($255)|0);
    $257 = ($256|0)!=(0);
    if (!($257)) {
     $258 = $10;
     $259 = ((($258)) + 16|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = $7;
     $262 = (_padOffset_780($260,$261)|0);
     $263 = $10;
     $264 = ((($263)) + 16|0);
     HEAP32[$264>>2] = $262;
     $265 = $10;
     $266 = ((($265)) + 16|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $15;
     $269 = (($268) + ($267))|0;
     $15 = $269;
     $270 = $10;
     $271 = ((($270)) + 20|0);
     HEAP32[$271>>2] = $269;
    }
    $272 = $10;
    $273 = ((($272)) + 24|0);
    $274 = HEAP32[$273>>2]|0;
    $10 = $274;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $163 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer9>>2] = 25145;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = 120;
   $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
   HEAP32[$vararg_ptr13>>2] = 25211;
   _printFmt($163,0,28431,$vararg_buffer9);
   __abort_779();
  }
  }
 } while(0);
 $275 = $9;
 $276 = ($275|0)!=(0|0);
 if (!($276)) {
  $279 = $11;
  STACKTOP = sp;return ($279|0);
 }
 $277 = $16;
 $278 = $9;
 HEAP32[$278>>2] = $277;
 $279 = $11;
 STACKTOP = sp;return ($279|0);
}
function _isStatic_785($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isFunction_786($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isTypename_789($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _install($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $19 = $9;
 $20 = $19 & 48;
 $21 = ($20|0)==(16);
 $22 = $21&1;
 $13 = $22;
 $23 = $7;
 $24 = ($23|0)==(0|0);
 $25 = $8;
 $26 = ($25|0)==(0|0);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $27 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 174;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = 25315;
  _printFmt($27,0,28431,$vararg_buffer);
  __abort_779();
  $6 = 0;
  $160 = $6;
  STACKTOP = sp;return ($160|0);
 }
 $28 = $12;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $12;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $34 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer4>>2] = 25145;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 180;
   $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
   HEAP32[$vararg_ptr8>>2] = 25315;
   _printFmt($34,0,28431,$vararg_buffer4);
   __abort_779();
   $6 = 0;
   $160 = $6;
   STACKTOP = sp;return ($160|0);
  }
 }
 $35 = $13;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $9;
  $38 = 192 | $37;
  $9 = $38;
 }
 $39 = $10;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $9;
  $42 = $41 & 48;
  $43 = ($42|0)==(48);
  if ($43) {
   $44 = $11;
   $45 = (_refSize_794($44)|0);
   $10 = $45;
  }
 }
 $46 = $7;
 $47 = $9;
 $48 = (_newDef($46,$47)|0);
 $14 = $48;
 $49 = $14;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $8;
  $52 = (_strlen($51)|0);
  $53 = (($52) + 1)|0;
  $15 = $53;
  $54 = $8;
  $55 = $15;
  $56 = (_rehash($54,$55)|0);
  $57 = (($56>>>0) % 512)&-1;
  $16 = $57;
  $58 = $7;
  $59 = $8;
  $60 = $15;
  $61 = $16;
  $62 = (_ccUniqueStr($58,$59,$60,$61)|0);
  $63 = $14;
  HEAP32[$63>>2] = $62;
  $64 = $7;
  $65 = ((($64)) + 4124|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $14;
  $68 = ((($67)) + 12|0);
  HEAP32[$68>>2] = $66;
  $69 = $11;
  $70 = $14;
  $71 = ((($70)) + 28|0);
  HEAP32[$71>>2] = $69;
  $72 = $12;
  $73 = $14;
  $74 = ((($73)) + 56|0);
  HEAP32[$74>>2] = $72;
  $75 = $10;
  $76 = $14;
  $77 = ((($76)) + 16|0);
  HEAP32[$77>>2] = $75;
  $78 = $13;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $7;
   $81 = HEAP32[$80>>2]|0;
   $82 = $14;
   $83 = (_vmOffset_795($81,$82)|0);
   $84 = $14;
   $85 = ((($84)) + 20|0);
   HEAP32[$85>>2] = $83;
   $86 = $11;
   $87 = ($86|0)!=(0|0);
   if ($87) {
    $88 = $11;
    $89 = $7;
    $90 = ((($89)) + 5260|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($88|0)!=($91|0);
    if ($92) {
     $17 = 16;
     $93 = $11;
     $18 = $93;
     while(1) {
      $94 = $18;
      $95 = ($94|0)!=(0|0);
      if (!($95)) {
       break;
      }
      $96 = $17;
      $97 = (($96) - 1)|0;
      $17 = $97;
      $98 = ($97|0)<(0);
      if ($98) {
       label = 18;
       break;
      }
      $108 = $18;
      $109 = $7;
      $110 = ((($109)) + 5260|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ($108|0)==($111|0);
      if ($112) {
       break;
      }
      $113 = $18;
      $114 = $7;
      $115 = ((($114)) + 5268|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($113|0)==($116|0);
      if ($117) {
       label = 21;
       break;
      }
      $125 = $18;
      $126 = ((($125)) + 28|0);
      $127 = HEAP32[$126>>2]|0;
      $18 = $127;
     }
     if ((label|0) == 18) {
      $99 = $7;
      $100 = HEAP32[$99>>2]|0;
      $101 = $7;
      $102 = ((($101)) + 4132|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = $7;
      $105 = ((($104)) + 4136|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = $14;
      HEAP32[$vararg_buffer9>>2] = $107;
      _printLog($100,-1,$103,$106,0,25323,$vararg_buffer9);
     }
     else if ((label|0) == 21) {
      $118 = $14;
      $119 = ((($118)) + 44|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = $120 & -16;
      $122 = $121 | 10;
      $123 = $14;
      $124 = ((($123)) + 44|0);
      HEAP32[$124>>2] = $122;
     }
     $128 = $18;
     $129 = ($128|0)==(0|0);
     if ($129) {
      $130 = $7;
      $131 = HEAP32[$130>>2]|0;
      $132 = $7;
      $133 = ((($132)) + 4132|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $7;
      $136 = ((($135)) + 4136|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = $14;
      HEAP32[$vararg_buffer12>>2] = $138;
      _printLog($131,-1,$134,$137,0,25323,$vararg_buffer12);
     }
    }
   }
  }
  $139 = $7;
  $140 = ((($139)) + 2076|0);
  $141 = $16;
  $142 = (($140) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $14;
  $145 = ((($144)) + 24|0);
  HEAP32[$145>>2] = $143;
  $146 = $14;
  $147 = $7;
  $148 = ((($147)) + 2076|0);
  $149 = $16;
  $150 = (($148) + ($149<<2)|0);
  HEAP32[$150>>2] = $146;
  $151 = $7;
  $152 = ((($151)) + 12|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $14;
  $155 = ((($154)) + 48|0);
  HEAP32[$155>>2] = $153;
  $156 = $14;
  $157 = $7;
  $158 = ((($157)) + 12|0);
  HEAP32[$158>>2] = $156;
 }
 $159 = $14;
 $6 = $159;
 $160 = $6;
 STACKTOP = sp;return ($160|0);
}
function _refSize_794($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_refCast_797($3)|0);
 switch ($4|0) {
 case 10:  {
  $1 = 4;
  break;
 }
 case 11: case 12:  {
  $1 = 8;
  break;
 }
 default: {
  $5 = $2;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
 }
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _vmOffset_795($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _refCast_797($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_castOf_798($4)|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(12);
 do {
  if ($7) {
   $8 = $1;
   $9 = (_isArrayType_799($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = ((($11)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $3 = $13;
    $14 = $3;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $3;
     $17 = (_isStatic_785($16)|0);
     $18 = ($17|0)!=(0);
     if (!($18)) {
      break;
     }
    }
    $2 = 10;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _castOf_798($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 15;
 STACKTOP = sp;return ($5|0);
}
function _isArrayType_799($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($5|0)==(28);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _lookup($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer12 = sp + 16|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 $22 = $8;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $8;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(2);
  if ($26) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $27 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr10 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = 245;
  $vararg_ptr11 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr11>>2] = 25414;
  _printFmt($27,0,25353,$vararg_buffer);
  __abort_779();
 }
 $28 = $10;
 $29 = $28 & 64;
 $15 = $29;
 $30 = $10;
 $31 = $30 & 128;
 $16 = $31;
 $32 = $10;
 $33 = $32 & 48;
 $17 = $33;
 $34 = $10;
 $35 = $34 & 15;
 $18 = $35;
 L6: while(1) {
  $36 = $7;
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   break;
  }
  $38 = $7;
  $39 = ((($38)) + 40|0);
  $40 = HEAP32[$39>>2]|0;
  $19 = $40;
  $20 = 0;
  $41 = $15;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $7;
   $44 = ((($43)) + 44|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 64;
   $47 = $15;
   $48 = ($46|0)!=($47|0);
   if (!($48)) {
    label = 8;
   }
  } else {
   label = 8;
  }
  L11: do {
   if ((label|0) == 8) {
    label = 0;
    $49 = $16;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $7;
     $52 = ((($51)) + 44|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53 & 128;
     $55 = $16;
     $56 = ($54|0)!=($55|0);
     if ($56) {
      break;
     }
    }
    $57 = $17;
    $58 = ($57|0)!=(0);
    if ($58) {
     $59 = $7;
     $60 = ((($59)) + 44|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 & 48;
     $63 = $17;
     $64 = ($62|0)!=($63|0);
     if ($64) {
      break;
     }
    }
    $65 = $18;
    $66 = ($65|0)!=(0);
    if ($66) {
     $67 = $7;
     $68 = ((($67)) + 44|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $69 & 15;
     $71 = $18;
     $72 = ($70|0)!=($71|0);
     if ($72) {
      break;
     }
    }
    $73 = $7;
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $76 = $7;
     $77 = HEAP32[$76>>2]|0;
     $78 = $8;
     $79 = ((($78)) + 24|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (_strcmp($77,$80)|0);
     $82 = ($81|0)!=(0);
     if (!($82)) {
      $83 = $19;
      $84 = ($83|0)!=(0|0);
      $85 = $9;
      $86 = ($85|0)==(0|0);
      $or$cond = $84 & $86;
      if ($or$cond) {
       $87 = $12;
       $88 = ($87|0)==(0|0);
       if ($88) {
        $89 = $7;
        $12 = $89;
       }
       $90 = $14;
       $91 = (($90) + 1)|0;
       $14 = $91;
       break;
      }
      $92 = $9;
      $93 = ($92|0)!=(0|0);
      do {
       if ($93) {
        $21 = 0;
        $94 = $9;
        $95 = $6;
        $96 = ((($95)) + 5304|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($94|0)!=($97|0);
        if ($98) {
         $99 = $9;
         $100 = (_chainArgs_803($99)|0);
         $21 = $100;
        }
        $101 = $19;
        $102 = ($101|0)!=(0|0);
        if ($102) {
         $103 = $19;
         $104 = ((($103)) + 24|0);
         $105 = HEAP32[$104>>2]|0;
         $19 = $105;
        }
        $106 = $7;
        $107 = $6;
        $108 = ((($107)) + 5308|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = ($106|0)==($109|0);
        if ($110) {
         $111 = $19;
         $112 = ((($111)) + 24|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = ((($113)) + 24|0);
         $115 = HEAP32[$114>>2]|0;
         $19 = $115;
        }
        while(1) {
         $116 = $19;
         $117 = ($116|0)!=(0|0);
         $118 = $21;
         $119 = ($118|0)!=(0|0);
         $120 = $117 ? $119 : 0;
         if (!($120)) {
          break;
         }
         $121 = $6;
         $122 = $19;
         $123 = $21;
         $124 = (_canAssign($121,$122,$123,0)|0);
         $125 = ($124|0)!=(0);
         if (!($125)) {
          break;
         }
         $126 = $6;
         $127 = $19;
         $128 = $21;
         $129 = (_canAssign($126,$127,$128,1)|0);
         $130 = ($129|0)!=(0);
         if (!($130)) {
          $131 = $20;
          $132 = (($131) + 1)|0;
          $20 = $132;
         }
         $133 = $19;
         $134 = ((($133)) + 24|0);
         $135 = HEAP32[$134>>2]|0;
         $19 = $135;
         $136 = $21;
         $137 = ((($136)) + 8|0);
         $138 = HEAP32[$137>>2]|0;
         $21 = $138;
        }
        $139 = $21;
        $140 = ($139|0)!=(0|0);
        $141 = $19;
        $142 = ($141|0)!=(0|0);
        $or$cond3 = $140 & $142;
        $143 = $19;
        $144 = ($143|0)!=(0|0);
        $or$cond9 = $or$cond3 | $144;
        if ($or$cond9) {
         break L11;
        }
        $145 = $21;
        $146 = ($145|0)!=(0|0);
        if ($146) {
         $147 = $7;
         $148 = (_aliasOf($147)|0);
         $149 = (_isTypename_789($148)|0);
         $150 = ($149|0)!=(0);
         if ($150) {
          $151 = $21;
          $152 = $9;
          $153 = ($151|0)==($152|0);
          if ($153) {
           break;
          }
         }
         $154 = $7;
         $155 = $6;
         $156 = ((($155)) + 5300|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ($154|0)==($157|0);
         if (!($158)) {
          break L11;
         }
        }
       }
      } while(0);
      $159 = $20;
      $160 = ($159|0)==(0);
      if ($160) {
       break L6;
      }
      $161 = $13;
      $162 = ($161|0)==(0|0);
      if ($162) {
       $163 = $7;
       $13 = $163;
      }
      $164 = $14;
      $165 = (($164) + 1)|0;
      $14 = $165;
     }
    }
   }
  } while(0);
  $166 = $7;
  $167 = ((($166)) + 24|0);
  $168 = HEAP32[$167>>2]|0;
  $7 = $168;
 }
 $169 = $7;
 $170 = ($169|0)==(0|0);
 $171 = $13;
 $172 = ($171|0)!=(0|0);
 $or$cond5 = $170 & $172;
 if ($or$cond5) {
  $173 = $14;
  $174 = ($173|0)>(1);
  if ($174) {
   $175 = $6;
   $176 = HEAP32[$175>>2]|0;
   $177 = $8;
   $178 = ((($177)) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $8;
   $181 = ((($180)) + 16|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $13;
   $184 = $14;
   HEAP32[$vararg_buffer12>>2] = $183;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $184;
   _printLog($176,3,$179,$182,0,25421,$vararg_buffer12);
  }
  $185 = $13;
  $7 = $185;
 }
 $186 = $7;
 $187 = ($186|0)==(0|0);
 $188 = $12;
 $189 = ($188|0)!=(0|0);
 $or$cond7 = $187 & $189;
 if (!($or$cond7)) {
  $212 = $7;
  $213 = (_aliasOf($212)|0);
  STACKTOP = sp;return ($213|0);
 }
 $190 = $14;
 $191 = ($190|0)==(1);
 if (!($191)) {
  $192 = $6;
  $193 = ((($192)) + 4128|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = ($194 << 7)&255;
  $196 = ($195<<24>>24) >> 7;
  $197 = $196 << 24 >> 24;
  $198 = ($197|0)!=(0);
  if (!($198)) {
   $200 = $11;
   $201 = ($200|0)!=(0);
   if (!($201)) {
    $212 = $7;
    $213 = (_aliasOf($212)|0);
    STACKTOP = sp;return ($213|0);
   }
   $202 = $6;
   $203 = HEAP32[$202>>2]|0;
   $204 = $8;
   $205 = ((($204)) + 12|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $8;
   $208 = ((($207)) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $14;
   $211 = $12;
   HEAP32[$vararg_buffer16>>2] = $210;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $211;
   _printLog($203,-1,$206,$209,0,25464,$vararg_buffer16);
   $212 = $7;
   $213 = (_aliasOf($212)|0);
   STACKTOP = sp;return ($213|0);
  }
 }
 $199 = $12;
 $7 = $199;
 $212 = $7;
 $213 = (_aliasOf($212)|0);
 STACKTOP = sp;return ($213|0);
}
function _chainArgs_803($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(41);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 24|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_chainArgs_803($13)|0);
  $3 = $14;
  $15 = $2;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_chainArgs_803($17)|0);
  $4 = $18;
  $19 = $3;
  $2 = $19;
  while(1) {
   $20 = $3;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    break;
   }
   $24 = $3;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
  }
  $27 = $4;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
 } else {
  $30 = ((($10)) + 8|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $2;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _canAssign($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer4 = sp + 96|0;
 $vararg_buffer = sp + 80|0;
 $15 = sp + 40|0;
 $16 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $6;
 $19 = (_isTypename_789($18)|0);
 $20 = ($19|0)!=(0);
 $21 = $6;
 if ($20) {
  $24 = $21;
 } else {
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 }
 $9 = $24;
 $25 = $7;
 $26 = (_linkOf($25,1)|0);
 $10 = $26;
 $27 = $6;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 874;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = 25531;
  _printFmt($29,0,25496,$vararg_buffer);
  __abort_779();
 }
 $30 = $7;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $32 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer4>>2] = 25145;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 875;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 25531;
  _printFmt($32,0,25541,$vararg_buffer4);
  __abort_779();
 }
 $33 = $7;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $4 = 0;
  $197 = $4;
  STACKTOP = sp;return ($197|0);
 }
 $37 = $6;
 $38 = (_castOf_798($37)|0);
 $11 = $38;
 $39 = $10;
 $40 = $5;
 $41 = ((($40)) + 5284|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($39|0)==($42|0);
 if ($43) {
  $44 = $9;
  $45 = ($44|0)!=(0|0);
  L16: do {
   if ($45) {
    $46 = $9;
    $47 = (_castOf_798($46)|0);
    switch ($47|0) {
    case 10:  {
     $4 = 10;
     $197 = $4;
     STACKTOP = sp;return ($197|0);
     break;
    }
    case 12:  {
     $4 = 12;
     $197 = $4;
     STACKTOP = sp;return ($197|0);
     break;
    }
    case 11:  {
     $4 = 11;
     $197 = $4;
     STACKTOP = sp;return ($197|0);
     break;
    }
    default: {
     break L16;
    }
    }
   }
  } while(0);
  $48 = $11;
  $$off = (($48) + -10)|0;
  $switch = ($$off>>>0)<(3);
  if ($switch) {
   $49 = $11;
   $4 = $49;
   $197 = $4;
   STACKTOP = sp;return ($197|0);
  }
 }
 $50 = $10;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $6;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = ((($55)) + 5260|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)==($57|0);
  if ($58) {
   $59 = $10;
   $60 = ((($59)) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 48;
   $cond = ($62|0)==(16);
   if ($cond) {
    $4 = 10;
    $197 = $4;
    STACKTOP = sp;return ($197|0);
   }
  }
 }
 $63 = $10;
 $64 = ($63|0)!=(0|0);
 do {
  if ($64) {
   $65 = $9;
   $66 = $5;
   $67 = ((($66)) + 5252|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($65|0)==($68|0);
   if (!($69)) {
    $70 = $9;
    $71 = $5;
    $72 = ((($71)) + 5256|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($70|0)==($73|0);
    if (!($74)) {
     break;
    }
   }
   $75 = $9;
   $76 = (_refCast_797($75)|0);
   $4 = $76;
   $197 = $4;
   STACKTOP = sp;return ($197|0);
  }
 } while(0);
 $77 = $9;
 $78 = $6;
 $79 = ($77|0)!=($78|0);
 do {
  if ($79) {
   $80 = $6;
   $81 = ((($80)) + 40|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if (!($83)) {
    $131 = $8;
    $132 = ($131|0)!=(0);
    if ($132) {
     break;
    }
    $133 = $11;
    $134 = ($133|0)==(10);
    $135 = $134&1;
    $8 = $135;
    break;
   }
   $84 = $7;
   $85 = (_linkOf($84,1)|0);
   $12 = $85;
   $86 = $6;
   $87 = ((($86)) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   $13 = $88;
   $14 = 0;
   HEAP32[$15>>2] = 2;
   $89 = $9;
   $90 = ((($15)) + 4|0);
   HEAP32[$90>>2] = $89;
   $91 = $6;
   $92 = ((($15)) + 24|0);
   $93 = ((($92)) + 8|0);
   HEAP32[$93>>2] = $91;
   $94 = $12;
   $95 = ($94|0)!=(0|0);
   if ($95) {
    $96 = $5;
    $97 = $12;
    $98 = ((($97)) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (_canAssign($96,$99,$15,1)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     $102 = $12;
     $103 = ((($102)) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     $14 = $104;
     while(1) {
      $105 = $13;
      $106 = ($105|0)!=(0|0);
      $107 = $14;
      $108 = ($107|0)!=(0|0);
      $109 = $106 ? $108 : 0;
      if (!($109)) {
       break;
      }
      $110 = $14;
      $111 = ((($110)) + 28|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ((($15)) + 4|0);
      HEAP32[$113>>2] = $112;
      $114 = $14;
      $115 = ((($15)) + 24|0);
      $116 = ((($115)) + 8|0);
      HEAP32[$116>>2] = $114;
      $117 = $5;
      $118 = $13;
      $119 = (_canAssign($117,$118,$15,1)|0);
      $120 = ($119|0)!=(0);
      if (!($120)) {
       break;
      }
      $121 = $13;
      $122 = ((($121)) + 24|0);
      $123 = HEAP32[$122>>2]|0;
      $13 = $123;
      $124 = $14;
      $125 = ((($124)) + 24|0);
      $126 = HEAP32[$125>>2]|0;
      $14 = $126;
     }
     $127 = $13;
     $128 = ($127|0)!=(0|0);
     $129 = $14;
     $130 = ($129|0)!=(0|0);
     $or$cond = $128 | $130;
     if ($or$cond) {
      $4 = 0;
      $197 = $4;
      STACKTOP = sp;return ($197|0);
     } else {
      $4 = 48;
      $197 = $4;
      STACKTOP = sp;return ($197|0);
     }
    }
   }
   $4 = 0;
   $197 = $4;
   STACKTOP = sp;return ($197|0);
  }
 } while(0);
 $136 = $9;
 $137 = $7;
 $138 = ((($137)) + 4|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($136|0)==($139|0);
 if ($140) {
  $141 = $11;
  $4 = $141;
  $197 = $4;
  STACKTOP = sp;return ($197|0);
 }
 $142 = $9;
 $143 = (_castOf_798($142)|0);
 $144 = ($143|0)==(12);
 if ($144) {
  $145 = $7;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $17 = $147;
  dest=$16; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$16>>2] = 2;
  $148 = $17;
  $149 = ($148|0)!=(0|0);
  if ($149) {
   $150 = $17;
   $151 = ((($150)) + 28|0);
   $152 = HEAP32[$151>>2]|0;
   $154 = $152;
  } else {
   $154 = 0;
  }
  $153 = ((($16)) + 4|0);
  HEAP32[$153>>2] = $154;
  $155 = ((($16)) + 24|0);
  $156 = ((($155)) + 8|0);
  HEAP32[$156>>2] = 0;
  $157 = ((($16)) + 24|0);
  HEAP32[$157>>2] = 25576;
  $158 = $5;
  $159 = $9;
  $160 = ((($159)) + 28|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $8;
  $163 = (_canAssign($158,$161,$16,$162)|0);
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $9;
   $166 = ((($165)) + 56|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==(0|0);
   if ($168) {
    $4 = 12;
    $197 = $4;
    STACKTOP = sp;return ($197|0);
   }
   $169 = $9;
   $170 = ((($169)) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $7;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($171|0)==($176|0);
   if ($177) {
    $4 = 48;
    $197 = $4;
    STACKTOP = sp;return ($197|0);
   }
  }
  $178 = $8;
  $179 = ($178|0)!=(0);
  if (!($179)) {
   $180 = $5;
   $181 = $6;
   $182 = ((($181)) + 28|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $7;
   $185 = $8;
   $186 = (_canAssign($180,$183,$184,$185)|0);
   $4 = $186;
   $197 = $4;
   STACKTOP = sp;return ($197|0);
  }
 }
 $187 = $8;
 $188 = ($187|0)!=(0);
 if (!($188)) {
  $189 = $9;
  $190 = $7;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (_promote($189,$192)|0);
  $9 = $193;
  $194 = ($193|0)!=(0|0);
  if ($194) {
   $195 = $9;
   $196 = (_refCast_797($195)|0);
   $4 = $196;
   $197 = $4;
   STACKTOP = sp;return ($197|0);
  }
 }
 $4 = 0;
 $197 = $4;
 STACKTOP = sp;return ($197|0);
}
function _aliasOf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = (_isInline_808($4)|0);
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = (_isInvokable_809($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $1;
  if ($13) {
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $1 = $16;
  } else {
   $17 = ((($14)) + 56|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(2);
   if (!($20)) {
    break;
   }
   $21 = $1;
   $22 = ((($21)) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $1 = $26;
  }
 }
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _isInline_808($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isInvokable_809($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _promote($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 $or$cond = $7 & $9;
 L1: do {
  if ($or$cond) {
   $10 = $3;
   $11 = $4;
   $12 = ($10|0)==($11|0);
   if ($12) {
    $13 = $3;
    $5 = $13;
    break;
   }
   $14 = $4;
   $15 = (_castKind($14)|0);
   switch ($15|0) {
   case 9:  {
    $16 = $3;
    $17 = (_castKind($16)|0);
    $$off = (($17) + -9)|0;
    $switch = ($$off>>>0)<(2);
    if (!($switch)) {
     break L1;
    }
    $18 = $3;
    $2 = $18;
    $63 = $2;
    STACKTOP = sp;return ($63|0);
    break;
   }
   case 10:  {
    $19 = $3;
    $20 = (_castKind($19)|0);
    $$off2 = (($20) + -9)|0;
    $switch3 = ($$off2>>>0)<(2);
    if (!($switch3)) {
     break L1;
    }
    $21 = $4;
    $2 = $21;
    $63 = $2;
    STACKTOP = sp;return ($63|0);
    break;
   }
   case 6: case 4: case 5: case 3:  {
    $22 = $3;
    $23 = (_castKind($22)|0);
    switch ($23|0) {
    case 6: case 4: case 5: case 3:  {
     break;
    }
    case 8: case 7:  {
     $45 = $3;
     $5 = $45;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    $24 = $3;
    $25 = (_refCast_797($24)|0);
    $26 = ($25|0)==(2);
    if ($26) {
     $27 = $3;
     $28 = ((($27)) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $4;
     $31 = ((($30)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($29|0)==($32|0);
     if ($33) {
      $34 = $4;
      $5 = $34;
      break L1;
     }
    }
    $35 = $3;
    $36 = ((($35)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $4;
    $39 = ((($38)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($37>>>0)>=($40>>>0);
    $42 = $3;
    $43 = $4;
    $44 = $41 ? $42 : $43;
    $5 = $44;
    break L1;
    break;
   }
   case 8: case 7:  {
    $46 = $3;
    $47 = (_castKind($46)|0);
    switch ($47|0) {
    case 6: case 4: case 5: case 3:  {
     $48 = $4;
     $5 = $48;
     break L1;
     break;
    }
    case 8: case 7:  {
     $49 = $3;
     $50 = ((($49)) + 16|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $4;
     $53 = ((($52)) + 16|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($51>>>0)>=($54>>>0);
     $56 = $3;
     $57 = $4;
     $58 = $55 ? $56 : $57;
     $5 = $58;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   $59 = $4;
   $60 = ($59|0)!=(0|0);
   if ($60) {
    $61 = $4;
    $5 = $61;
   }
  }
 } while(0);
 $62 = $5;
 $2 = $62;
 $63 = $2;
 STACKTOP = sp;return ($63|0);
}
function _castKind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $1 = 0;
  } else {
   $5 = $2;
   $6 = (_refCast_797($5)|0);
   switch ($6|0) {
   case 1:  {
    $1 = 1;
    break L1;
    break;
   }
   case 2:  {
    $1 = 2;
    break L1;
    break;
   }
   case 3: case 4:  {
    $1 = 3;
    break L1;
    break;
   }
   case 6: case 5:  {
    $1 = 5;
    break L1;
    break;
   }
   case 8: case 7:  {
    $1 = 8;
    break L1;
    break;
   }
   case 10:  {
    $1 = 10;
    break L1;
    break;
   }
   case 9:  {
    $1 = 9;
    break L1;
    break;
   }
   case 48:  {
    $1 = 48;
    break L1;
    break;
   }
   default: {
    $1 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _typeCheck($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off = 0, $$off12 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch = 0, $switch13 = 0, $vararg_buffer = 0, $vararg_buffer30 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer66 = sp + 120|0;
 $vararg_buffer63 = sp + 112|0;
 $vararg_buffer60 = sp + 104|0;
 $vararg_buffer55 = sp + 88|0;
 $vararg_buffer52 = sp + 80|0;
 $vararg_buffer47 = sp + 64|0;
 $vararg_buffer44 = sp + 56|0;
 $vararg_buffer41 = sp + 48|0;
 $vararg_buffer38 = sp + 40|0;
 $vararg_buffer35 = sp + 32|0;
 $vararg_buffer30 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $17 = $7;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr28 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = 477;
  $vararg_ptr29 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr29>>2] = 25593;
  _printFmt($19,0,28431,$vararg_buffer);
  __abort_779();
  $4 = 0;
  $922 = $4;
  STACKTOP = sp;return ($922|0);
 }
 $20 = $7;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 $24 = $7;
 if ($23) {
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $4 = $26;
  $922 = $4;
  STACKTOP = sp;return ($922|0);
 }
 $27 = HEAP32[$24>>2]|0;
 do {
  switch ($27|0) {
  case 3:  {
   $29 = $7;
   $30 = ((($29)) + 24|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $13 = $32;
   $33 = $7;
   $34 = ((($33)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $14 = $35;
   $36 = $13;
   $37 = ($36|0)==(0|0);
   $38 = $14;
   $39 = ($38|0)==(0|0);
   $or$cond = $37 & $39;
   if ($or$cond) {
    $40 = $8;
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = $5;
     $43 = HEAP32[$42>>2]|0;
     $44 = $7;
     $45 = ((($44)) + 12|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $7;
     $48 = ((($47)) + 16|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $7;
     HEAP32[$vararg_buffer35>>2] = $50;
     _printLog($43,-1,$46,$49,0,25603,$vararg_buffer35);
    }
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $51 = $13;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $53 = $5;
    $54 = $13;
    $55 = (_linkOf($54,1)|0);
    $56 = $14;
    $57 = $8;
    $58 = (_typeCheck($53,$55,$56,$57)|0);
    $10 = $58;
    $59 = $5;
    $60 = $14;
    $61 = $10;
    $62 = (_convert($59,$60,$61)|0);
    $63 = $7;
    $64 = ((($63)) + 24|0);
    HEAP32[$64>>2] = $62;
    $65 = $10;
    $66 = $7;
    $67 = ((($66)) + 4|0);
    HEAP32[$67>>2] = $65;
    $68 = $10;
    $4 = $68;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $69 = $14;
   $70 = ($69|0)==(0|0);
   if ($70) {
    $71 = $5;
    $72 = ((($71)) + 5304|0);
    $73 = HEAP32[$72>>2]|0;
    $14 = $73;
   }
   $74 = $6;
   $75 = $5;
   $76 = ((($75)) + 5300|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)==($77|0);
   if ($78) {
    $79 = $7;
    $80 = ((($79)) + 24|0);
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(65);
    if ($84) {
     $85 = $5;
     $86 = $14;
     $87 = (_typeCheck($85,0,$86,1)|0);
     $11 = $87;
     $88 = $11;
     $89 = $7;
     $90 = ((($89)) + 24|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($91)) + 4|0);
     HEAP32[$92>>2] = $88;
     $93 = $11;
     $94 = $7;
     $95 = ((($94)) + 4|0);
     HEAP32[$95>>2] = $93;
     $96 = $11;
     $4 = $96;
     $922 = $4;
     STACKTOP = sp;return ($922|0);
    }
   }
   $97 = $5;
   $98 = $6;
   $99 = $14;
   $100 = (_typeCheck($97,$98,$99,0)|0);
   $10 = $100;
   $101 = $13;
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(5);
   if ($103) {
    $104 = $5;
    $105 = $6;
    $106 = $13;
    $107 = ((($106)) + 24|0);
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $8;
    $111 = (_typeCheck($104,$105,$109,$110)|0);
    $112 = ($111|0)!=(0|0);
    if (!($112)) {
     $4 = 0;
     $922 = $4;
     STACKTOP = sp;return ($922|0);
    }
    $113 = $13;
    $114 = ((($113)) + 24|0);
    $115 = ((($114)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (_linkOf($116,1)|0);
    $6 = $117;
    $118 = $6;
    $119 = ($118|0)!=(0|0);
    if ($119) {
     $120 = $6;
     $121 = (_isVariable_816($120)|0);
     $122 = ($121|0)!=(0);
     if ($122) {
      $123 = $14;
      $124 = $5;
      $125 = ((($124)) + 5304|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($123|0)==($126|0);
      if ($127) {
       $128 = $13;
       $129 = ((($128)) + 24|0);
       $130 = ((($129)) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $14 = $131;
      } else {
       $132 = $5;
       $133 = $13;
       $134 = ((($133)) + 24|0);
       $135 = ((($134)) + 4|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = $14;
       $138 = (_argNode_817($132,$136,$137)|0);
       $14 = $138;
       $139 = $5;
       $140 = ((($139)) + 5200|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = $14;
       $143 = ((($142)) + 4|0);
       HEAP32[$143>>2] = $141;
      }
      $144 = $13;
      $145 = ((($144)) + 24|0);
      $146 = HEAP32[$145>>2]|0;
      $13 = $146;
      $147 = $14;
      $148 = $7;
      $149 = ((($148)) + 24|0);
      HEAP32[$149>>2] = $147;
      $150 = $5;
      $151 = $13;
      $152 = $14;
      $153 = (_typeCheckRef($150,0,$151,$152,0)|0);
      $11 = $153;
      $154 = $11;
      $155 = ($154|0)!=(0|0);
      if ($155) {
       $156 = $13;
       $157 = $7;
       $158 = ((($157)) + 24|0);
       $159 = ((($158)) + 4|0);
       HEAP32[$159>>2] = $156;
       $160 = $11;
       $161 = $7;
       $162 = ((($161)) + 4|0);
       HEAP32[$162>>2] = $160;
       $4 = $160;
       $922 = $4;
       STACKTOP = sp;return ($922|0);
      }
      $163 = $5;
      $164 = $6;
      $165 = $13;
      $166 = $14;
      $167 = $8;
      $168 = (_typeCheckRef($163,$164,$165,$166,$167)|0);
      $11 = $168;
      $169 = $11;
      $170 = ($169|0)!=(0|0);
      $171 = $11;
      $172 = $7;
      if ($170) {
       $173 = ((($172)) + 24|0);
       $174 = ((($173)) + 4|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ((($175)) + 4|0);
       HEAP32[$176>>2] = $171;
       $177 = $11;
       $178 = $7;
       $179 = ((($178)) + 4|0);
       HEAP32[$179>>2] = $177;
       $4 = $177;
       $922 = $4;
       STACKTOP = sp;return ($922|0);
      } else {
       $180 = ((($172)) + 4|0);
       HEAP32[$180>>2] = $171;
       $181 = $11;
       $4 = $181;
       $922 = $4;
       STACKTOP = sp;return ($922|0);
      }
     }
    }
    $182 = $5;
    $183 = ((($182)) + 5264|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $13;
    $186 = ((($185)) + 4|0);
    HEAP32[$186>>2] = $184;
    $187 = $13;
    $188 = ((($187)) + 24|0);
    $189 = HEAP32[$188>>2]|0;
    $13 = $189;
   }
   $190 = $10;
   $191 = ($190|0)==(0|0);
   if ($191) {
    $192 = $5;
    $193 = $6;
    $194 = $13;
    $195 = (_typeCheck($192,$193,$194,0)|0);
    $9 = $195;
    $196 = $9;
    $197 = $5;
    $198 = ((($197)) + 5260|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($196|0)==($199|0);
    if ($200) {
     $201 = $13;
     $202 = (_linkOf($201,1)|0);
     $203 = $5;
     $204 = ((($203)) + 5260|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ($202|0)==($205|0);
     if ($206) {
      $207 = $14;
      $208 = HEAP32[$207>>2]|0;
      $209 = ($208|0)==(2);
      if ($209) {
       $210 = $5;
       $211 = ((($210)) + 5260|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = HEAP32[$212>>2]|0;
       $15 = $213;
       $214 = $15;
       $215 = (_strlen($214)|0);
       $16 = $215;
       $216 = $5;
       $217 = ((($216)) + 5260|0);
       $218 = HEAP32[$217>>2]|0;
       $10 = $218;
       $219 = $7;
       HEAP32[$219>>2] = 2;
       $220 = $10;
       $221 = $7;
       $222 = ((($221)) + 4|0);
       HEAP32[$222>>2] = $220;
       $223 = $5;
       $224 = ((($223)) + 5284|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = $7;
       $227 = ((($226)) + 24|0);
       $228 = ((($227)) + 8|0);
       HEAP32[$228>>2] = $225;
       $229 = $15;
       $230 = $16;
       $231 = (($230) + 1)|0;
       $232 = (_rehash($229,$231)|0);
       $233 = (($232>>>0) % 512)&-1;
       $234 = $7;
       $235 = ((($234)) + 24|0);
       $236 = ((($235)) + 4|0);
       HEAP32[$236>>2] = $233;
       $237 = $5;
       $238 = $15;
       $239 = $16;
       $240 = (($239) + 1)|0;
       $241 = $7;
       $242 = ((($241)) + 24|0);
       $243 = ((($242)) + 4|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (_ccUniqueStr($237,$238,$240,$244)|0);
       $246 = $7;
       $247 = ((($246)) + 24|0);
       HEAP32[$247>>2] = $245;
       $248 = $10;
       $249 = $7;
       $250 = ((($249)) + 4|0);
       HEAP32[$250>>2] = $248;
       $251 = $10;
       $4 = $251;
       $922 = $4;
       STACKTOP = sp;return ($922|0);
      }
     }
    }
    $252 = $5;
    $253 = $13;
    $254 = (_linkOf($253,1)|0);
    $255 = $14;
    $256 = $8;
    $257 = (_typeCheck($252,$254,$255,$256)|0);
    $10 = $257;
   }
   $258 = $10;
   $259 = ($258|0)==(0|0);
   if ($259) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $260 = $5;
   $261 = $6;
   $262 = $13;
   $263 = $14;
   $264 = $8;
   $265 = (_typeCheckRef($260,$261,$262,$263,$264)|0);
   $11 = $265;
   $266 = $11;
   $267 = ($266|0)==(0|0);
   if ($267) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $268 = $11;
    $269 = $7;
    $270 = ((($269)) + 4|0);
    HEAP32[$270>>2] = $268;
    $271 = $11;
    $4 = $271;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 5:  {
   $272 = $6;
   $273 = $5;
   $274 = ((($273)) + 5300|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($272|0)==($275|0);
   if ($276) {
    $277 = $7;
    $278 = ((($277)) + 24|0);
    $279 = ((($278)) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = HEAP32[$280>>2]|0;
    $282 = ($281|0)==(2);
    if ($282) {
     $283 = $7;
     $284 = ((($283)) + 24|0);
     $285 = ((($284)) + 4|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ((($286)) + 4|0);
     HEAP32[$287>>2] = 0;
     $288 = $7;
     $289 = ((($288)) + 24|0);
     $290 = ((($289)) + 4|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ((($291)) + 24|0);
     $293 = ((($292)) + 8|0);
     HEAP32[$293>>2] = 0;
    }
   }
   $294 = $5;
   $295 = $6;
   $296 = $7;
   $297 = ((($296)) + 24|0);
   $298 = ((($297)) + 4|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $8;
   $301 = (_typeCheck($294,$295,$299,$300)|0);
   $9 = $301;
   $302 = $7;
   $303 = ((($302)) + 24|0);
   $304 = ((($303)) + 4|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = (_linkOf($305,1)|0);
   $6 = $306;
   $307 = $6;
   $308 = ($307|0)==(0|0);
   if ($308) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $309 = $5;
   $310 = $6;
   $311 = $7;
   $312 = ((($311)) + 24|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $8;
   $315 = (_typeCheck($309,$310,$313,$314)|0);
   $10 = $315;
   $316 = $9;
   $317 = ($316|0)!=(0|0);
   $318 = $10;
   $319 = ($318|0)!=(0|0);
   $or$cond3 = $317 & $319;
   if ($or$cond3) {
    $320 = $5;
    $321 = $7;
    $322 = ((($321)) + 24|0);
    $323 = ((($322)) + 4|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $9;
    $326 = (_convert($320,$324,$325)|0);
    $327 = $7;
    $328 = ((($327)) + 24|0);
    $329 = ((($328)) + 4|0);
    HEAP32[$329>>2] = $326;
    $330 = $5;
    $331 = $7;
    $332 = ((($331)) + 24|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = $10;
    $335 = (_convert($330,$333,$334)|0);
    $336 = $7;
    $337 = ((($336)) + 24|0);
    HEAP32[$337>>2] = $335;
    $338 = $10;
    $339 = $7;
    $340 = ((($339)) + 4|0);
    HEAP32[$340>>2] = $338;
    $341 = $10;
    $4 = $341;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 4:  {
   $342 = $7;
   $343 = ((($342)) + 24|0);
   $344 = ((($343)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = ($345|0)!=(0|0);
   if ($346) {
    $347 = $5;
    $348 = $6;
    $349 = $7;
    $350 = ((($349)) + 24|0);
    $351 = ((($350)) + 4|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = $8;
    $354 = (_typeCheck($347,$348,$352,$353)|0);
    $9 = $354;
   }
   $355 = $7;
   $356 = ((($355)) + 24|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = ($357|0)!=(0|0);
   if ($358) {
    $359 = $5;
    $360 = $6;
    $361 = $7;
    $362 = ((($361)) + 24|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = $8;
    $365 = (_typeCheck($359,$360,$363,$364)|0);
    $10 = $365;
   }
   $366 = $9;
   $367 = ($366|0)!=(0|0);
   $368 = $10;
   $369 = ($368|0)!=(0|0);
   $or$cond5 = $367 & $369;
   if ($or$cond5) {
    $370 = $9;
    $371 = ((($370)) + 28|0);
    $372 = HEAP32[$371>>2]|0;
    $11 = $372;
    $373 = $11;
    $374 = $7;
    $375 = ((($374)) + 4|0);
    HEAP32[$375>>2] = $373;
    $376 = $11;
    $4 = $376;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 8: case 7: case 6:  {
   $377 = $5;
   $378 = $6;
   $379 = $7;
   $380 = ((($379)) + 24|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = $8;
   $383 = (_typeCheck($377,$378,$381,$382)|0);
   $10 = $383;
   $384 = $10;
   $385 = ($384|0)!=(0|0);
   if (!($385)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $386 = $10;
   $387 = (_promote(0,$386)|0);
   $11 = $387;
   $388 = ($387|0)==(0|0);
   if ($388) {
    $389 = $5;
    $390 = HEAP32[$389>>2]|0;
    $391 = $7;
    $392 = ((($391)) + 12|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = $7;
    $395 = ((($394)) + 16|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $7;
    HEAP32[$vararg_buffer38>>2] = $397;
    _printLog($390,-1,$393,$396,0,25603,$vararg_buffer38);
   }
   $398 = $5;
   $399 = $7;
   $400 = ((($399)) + 24|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = $11;
   $403 = (_convert($398,$401,$402)|0);
   $404 = $7;
   $405 = ((($404)) + 24|0);
   HEAP32[$405>>2] = $403;
   $406 = $11;
   $407 = $7;
   $408 = ((($407)) + 4|0);
   HEAP32[$408>>2] = $406;
   $409 = $11;
   $4 = $409;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 9:  {
   $410 = $5;
   $411 = $6;
   $412 = $7;
   $413 = ((($412)) + 24|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $8;
   $416 = (_typeCheck($410,$411,$414,$415)|0);
   $10 = $416;
   $417 = $10;
   $418 = ($417|0)!=(0|0);
   if ($418) {
    $419 = $5;
    $420 = ((($419)) + 5204|0);
    $421 = HEAP32[$420>>2]|0;
    $11 = $421;
    $422 = $5;
    $423 = $7;
    $424 = ((($423)) + 24|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = $11;
    $427 = (_convert($422,$425,$426)|0);
    $428 = $7;
    $429 = ((($428)) + 24|0);
    HEAP32[$429>>2] = $427;
    $430 = $11;
    $431 = $7;
    $432 = ((($431)) + 4|0);
    HEAP32[$432>>2] = $430;
    $433 = $11;
    $4 = $433;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 12: case 11: case 10: case 14: case 13:  {
   $434 = $5;
   $435 = $6;
   $436 = $7;
   $437 = ((($436)) + 24|0);
   $438 = ((($437)) + 4|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = $8;
   $441 = (_typeCheck($434,$435,$439,$440)|0);
   $9 = $441;
   $442 = $5;
   $443 = $6;
   $444 = $7;
   $445 = ((($444)) + 24|0);
   $446 = HEAP32[$445>>2]|0;
   $447 = $8;
   $448 = (_typeCheck($442,$443,$446,$447)|0);
   $10 = $448;
   $449 = $9;
   $450 = ($449|0)!=(0|0);
   $451 = $10;
   $452 = ($451|0)!=(0|0);
   $or$cond7 = $450 & $452;
   if (!($or$cond7)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $453 = $9;
   $454 = $10;
   $455 = (_promote($453,$454)|0);
   $11 = $455;
   $456 = ($455|0)==(0|0);
   if ($456) {
    $457 = $5;
    $458 = HEAP32[$457>>2]|0;
    $459 = $7;
    $460 = ((($459)) + 12|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $7;
    $463 = ((($462)) + 16|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = $7;
    HEAP32[$vararg_buffer41>>2] = $465;
    _printLog($458,-1,$461,$464,0,25603,$vararg_buffer41);
   }
   $466 = $5;
   $467 = $7;
   $468 = ((($467)) + 24|0);
   $469 = ((($468)) + 4|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = $11;
   $472 = (_convert($466,$470,$471)|0);
   $473 = $7;
   $474 = ((($473)) + 24|0);
   $475 = ((($474)) + 4|0);
   HEAP32[$475>>2] = $472;
   $476 = $5;
   $477 = $7;
   $478 = ((($477)) + 24|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = $11;
   $481 = (_convert($476,$479,$480)|0);
   $482 = $7;
   $483 = ((($482)) + 24|0);
   HEAP32[$483>>2] = $481;
   $484 = $11;
   $485 = $7;
   $486 = ((($485)) + 4|0);
   HEAP32[$486>>2] = $484;
   $487 = $11;
   $4 = $487;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 15: case 16:  {
   $488 = $5;
   $489 = $6;
   $490 = $7;
   $491 = ((($490)) + 24|0);
   $492 = ((($491)) + 4|0);
   $493 = HEAP32[$492>>2]|0;
   $494 = $8;
   $495 = (_typeCheck($488,$489,$493,$494)|0);
   $9 = $495;
   $496 = $5;
   $497 = $6;
   $498 = $7;
   $499 = ((($498)) + 24|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = $8;
   $502 = (_typeCheck($496,$497,$500,$501)|0);
   $10 = $502;
   $503 = $9;
   $504 = ($503|0)!=(0|0);
   $505 = $10;
   $506 = ($505|0)!=(0|0);
   $or$cond9 = $504 & $506;
   if (!($or$cond9)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $507 = $9;
   $508 = $10;
   $509 = (_promote($507,$508)|0);
   $11 = $509;
   $510 = ($509|0)==(0|0);
   if ($510) {
    $511 = $5;
    $512 = HEAP32[$511>>2]|0;
    $513 = $7;
    $514 = ((($513)) + 12|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = $7;
    $517 = ((($516)) + 16|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = $7;
    HEAP32[$vararg_buffer44>>2] = $519;
    _printLog($512,-1,$515,$518,0,25603,$vararg_buffer44);
   }
   $520 = $5;
   $521 = $7;
   $522 = ((($521)) + 24|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $11;
   $526 = (_convert($520,$524,$525)|0);
   $527 = $7;
   $528 = ((($527)) + 24|0);
   $529 = ((($528)) + 4|0);
   HEAP32[$529>>2] = $526;
   $530 = $5;
   $531 = $7;
   $532 = ((($531)) + 24|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = $5;
   $535 = ((($534)) + 5220|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = (_convert($530,$533,$536)|0);
   $538 = $7;
   $539 = ((($538)) + 24|0);
   HEAP32[$539>>2] = $537;
   $540 = $11;
   $541 = ($540|0)!=(0|0);
   if ($541) {
    $542 = $11;
    $543 = (_refCast_797($542)|0);
    $$off = (($543) + -3)|0;
    $switch = ($$off>>>0)<(4);
    if (!($switch)) {
     $544 = $5;
     $545 = HEAP32[$544>>2]|0;
     $546 = $7;
     $547 = ((($546)) + 12|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $7;
     $550 = ((($549)) + 16|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $7;
     $553 = $9;
     $554 = $10;
     HEAP32[$vararg_buffer47>>2] = $552;
     $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
     HEAP32[$vararg_ptr50>>2] = $553;
     $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
     HEAP32[$vararg_ptr51>>2] = $554;
     _printLog($545,-1,$548,$551,0,25639,$vararg_buffer47);
    }
   }
   $555 = $11;
   $556 = $7;
   $557 = ((($556)) + 4|0);
   HEAP32[$557>>2] = $555;
   $558 = $11;
   $4 = $558;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 24: case 25: case 23:  {
   $559 = $5;
   $560 = $6;
   $561 = $7;
   $562 = ((($561)) + 24|0);
   $563 = ((($562)) + 4|0);
   $564 = HEAP32[$563>>2]|0;
   $565 = $8;
   $566 = (_typeCheck($559,$560,$564,$565)|0);
   $9 = $566;
   $567 = $5;
   $568 = $6;
   $569 = $7;
   $570 = ((($569)) + 24|0);
   $571 = HEAP32[$570>>2]|0;
   $572 = $8;
   $573 = (_typeCheck($567,$568,$571,$572)|0);
   $10 = $573;
   $574 = $9;
   $575 = ($574|0)!=(0|0);
   $576 = $10;
   $577 = ($576|0)!=(0|0);
   $or$cond11 = $575 & $577;
   if (!($or$cond11)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $578 = $9;
   $579 = $10;
   $580 = (_promote($578,$579)|0);
   $11 = $580;
   $581 = ($580|0)==(0|0);
   if ($581) {
    $582 = $5;
    $583 = HEAP32[$582>>2]|0;
    $584 = $7;
    $585 = ((($584)) + 12|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = $7;
    $588 = ((($587)) + 16|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = $7;
    HEAP32[$vararg_buffer52>>2] = $590;
    _printLog($583,-1,$586,$589,0,25603,$vararg_buffer52);
   }
   $591 = $5;
   $592 = $7;
   $593 = ((($592)) + 24|0);
   $594 = ((($593)) + 4|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = $11;
   $597 = (_convert($591,$595,$596)|0);
   $598 = $7;
   $599 = ((($598)) + 24|0);
   $600 = ((($599)) + 4|0);
   HEAP32[$600>>2] = $597;
   $601 = $5;
   $602 = $7;
   $603 = ((($602)) + 24|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = $11;
   $606 = (_convert($601,$604,$605)|0);
   $607 = $7;
   $608 = ((($607)) + 24|0);
   HEAP32[$608>>2] = $606;
   $609 = $11;
   $610 = ($609|0)!=(0|0);
   if ($610) {
    $611 = $11;
    $612 = (_refCast_797($611)|0);
    $$off12 = (($612) + -2)|0;
    $switch13 = ($$off12>>>0)<(5);
    if (!($switch13)) {
     $613 = $5;
     $614 = HEAP32[$613>>2]|0;
     $615 = $7;
     $616 = ((($615)) + 12|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = $7;
     $619 = ((($618)) + 16|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $7;
     $622 = $9;
     $623 = $10;
     HEAP32[$vararg_buffer55>>2] = $621;
     $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
     HEAP32[$vararg_ptr58>>2] = $622;
     $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
     HEAP32[$vararg_ptr59>>2] = $623;
     _printLog($614,-1,$617,$620,0,25639,$vararg_buffer55);
    }
   }
   $624 = $11;
   $625 = $7;
   $626 = ((($625)) + 4|0);
   HEAP32[$626>>2] = $624;
   $627 = $11;
   $4 = $627;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 18: case 17: case 20: case 19: case 22: case 21:  {
   $628 = $5;
   $629 = $6;
   $630 = $7;
   $631 = ((($630)) + 24|0);
   $632 = ((($631)) + 4|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = $8;
   $635 = (_typeCheck($628,$629,$633,$634)|0);
   $9 = $635;
   $636 = $5;
   $637 = $6;
   $638 = $7;
   $639 = ((($638)) + 24|0);
   $640 = HEAP32[$639>>2]|0;
   $641 = $8;
   $642 = (_typeCheck($636,$637,$640,$641)|0);
   $10 = $642;
   $643 = $9;
   $644 = ($643|0)!=(0|0);
   $645 = $10;
   $646 = ($645|0)!=(0|0);
   $or$cond15 = $644 & $646;
   if (!($or$cond15)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $647 = $9;
   $648 = $10;
   $649 = (_promote($647,$648)|0);
   $11 = $649;
   $650 = ($649|0)==(0|0);
   if ($650) {
    $651 = $5;
    $652 = HEAP32[$651>>2]|0;
    $653 = $7;
    $654 = ((($653)) + 12|0);
    $655 = HEAP32[$654>>2]|0;
    $656 = $7;
    $657 = ((($656)) + 16|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = $7;
    HEAP32[$vararg_buffer60>>2] = $659;
    _printLog($652,-1,$655,$658,0,25603,$vararg_buffer60);
   }
   $660 = $5;
   $661 = $7;
   $662 = ((($661)) + 24|0);
   $663 = ((($662)) + 4|0);
   $664 = HEAP32[$663>>2]|0;
   $665 = $11;
   $666 = (_convert($660,$664,$665)|0);
   $667 = $7;
   $668 = ((($667)) + 24|0);
   $669 = ((($668)) + 4|0);
   HEAP32[$669>>2] = $666;
   $670 = $5;
   $671 = $7;
   $672 = ((($671)) + 24|0);
   $673 = HEAP32[$672>>2]|0;
   $674 = $11;
   $675 = (_convert($670,$673,$674)|0);
   $676 = $7;
   $677 = ((($676)) + 24|0);
   HEAP32[$677>>2] = $675;
   $678 = $5;
   $679 = ((($678)) + 5204|0);
   $680 = HEAP32[$679>>2]|0;
   $11 = $680;
   $681 = $11;
   $682 = $7;
   $683 = ((($682)) + 4|0);
   HEAP32[$683>>2] = $681;
   $684 = $11;
   $4 = $684;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 27: case 26:  {
   $685 = $5;
   $686 = $6;
   $687 = $7;
   $688 = ((($687)) + 24|0);
   $689 = ((($688)) + 4|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = $8;
   $692 = (_typeCheck($685,$686,$690,$691)|0);
   $9 = $692;
   $693 = $5;
   $694 = $6;
   $695 = $7;
   $696 = ((($695)) + 24|0);
   $697 = HEAP32[$696>>2]|0;
   $698 = $8;
   $699 = (_typeCheck($693,$694,$697,$698)|0);
   $10 = $699;
   $700 = $9;
   $701 = ($700|0)!=(0|0);
   $702 = $10;
   $703 = ($702|0)!=(0|0);
   $or$cond17 = $701 & $703;
   if ($or$cond17) {
    $704 = $5;
    $705 = ((($704)) + 5204|0);
    $706 = HEAP32[$705>>2]|0;
    $11 = $706;
    $707 = $5;
    $708 = $7;
    $709 = ((($708)) + 24|0);
    $710 = ((($709)) + 4|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = $11;
    $713 = (_convert($707,$711,$712)|0);
    $714 = $7;
    $715 = ((($714)) + 24|0);
    $716 = ((($715)) + 4|0);
    HEAP32[$716>>2] = $713;
    $717 = $5;
    $718 = $7;
    $719 = ((($718)) + 24|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = $11;
    $722 = (_convert($717,$720,$721)|0);
    $723 = $7;
    $724 = ((($723)) + 24|0);
    HEAP32[$724>>2] = $722;
    $725 = $11;
    $726 = $7;
    $727 = ((($726)) + 4|0);
    HEAP32[$727>>2] = $725;
    $728 = $11;
    $4 = $728;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 28:  {
   $729 = $5;
   $730 = $6;
   $731 = $7;
   $732 = ((($731)) + 24|0);
   $733 = ((($732)) + 4|0);
   $734 = HEAP32[$733>>2]|0;
   $735 = $8;
   $736 = (_typeCheck($729,$730,$734,$735)|0);
   $9 = $736;
   $737 = $5;
   $738 = $6;
   $739 = $7;
   $740 = ((($739)) + 24|0);
   $741 = HEAP32[$740>>2]|0;
   $742 = $8;
   $743 = (_typeCheck($737,$738,$741,$742)|0);
   $10 = $743;
   $744 = $5;
   $745 = $6;
   $746 = $7;
   $747 = ((($746)) + 24|0);
   $748 = ((($747)) + 8|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = $8;
   $751 = (_typeCheck($744,$745,$749,$750)|0);
   $11 = $751;
   $752 = $9;
   $753 = ($752|0)!=(0|0);
   $754 = $10;
   $755 = ($754|0)!=(0|0);
   $or$cond19 = $753 & $755;
   $756 = $11;
   $757 = ($756|0)!=(0|0);
   $or$cond21 = $or$cond19 & $757;
   if (!($or$cond21)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $758 = $9;
   $759 = $10;
   $760 = (_promote($758,$759)|0);
   $11 = $760;
   $761 = ($760|0)==(0|0);
   if ($761) {
    $762 = $5;
    $763 = HEAP32[$762>>2]|0;
    $764 = $7;
    $765 = ((($764)) + 12|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = $7;
    $768 = ((($767)) + 16|0);
    $769 = HEAP32[$768>>2]|0;
    $770 = $7;
    HEAP32[$vararg_buffer63>>2] = $770;
    _printLog($763,-1,$766,$769,0,25603,$vararg_buffer63);
   }
   $771 = $5;
   $772 = $7;
   $773 = ((($772)) + 24|0);
   $774 = ((($773)) + 8|0);
   $775 = HEAP32[$774>>2]|0;
   $776 = $5;
   $777 = ((($776)) + 5204|0);
   $778 = HEAP32[$777>>2]|0;
   $779 = (_convert($771,$775,$778)|0);
   $780 = $7;
   $781 = ((($780)) + 24|0);
   $782 = ((($781)) + 8|0);
   HEAP32[$782>>2] = $779;
   $783 = $5;
   $784 = $7;
   $785 = ((($784)) + 24|0);
   $786 = ((($785)) + 4|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = $11;
   $789 = (_convert($783,$787,$788)|0);
   $790 = $7;
   $791 = ((($790)) + 24|0);
   $792 = ((($791)) + 4|0);
   HEAP32[$792>>2] = $789;
   $793 = $5;
   $794 = $7;
   $795 = ((($794)) + 24|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = $11;
   $798 = (_convert($793,$796,$797)|0);
   $799 = $7;
   $800 = ((($799)) + 24|0);
   HEAP32[$800>>2] = $798;
   $801 = $11;
   $802 = $7;
   $803 = ((($802)) + 4|0);
   HEAP32[$803>>2] = $801;
   $804 = $11;
   $4 = $804;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
   break;
  }
  case 41:  {
   $805 = $5;
   $806 = $6;
   $807 = $7;
   $808 = ((($807)) + 24|0);
   $809 = ((($808)) + 4|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = $8;
   $812 = (_typeCheck($805,$806,$810,$811)|0);
   $9 = $812;
   $813 = $5;
   $814 = $6;
   $815 = $7;
   $816 = ((($815)) + 24|0);
   $817 = HEAP32[$816>>2]|0;
   $818 = $8;
   $819 = (_typeCheck($813,$814,$817,$818)|0);
   $10 = $819;
   $820 = $9;
   $821 = ($820|0)!=(0|0);
   $822 = $10;
   $823 = ($822|0)!=(0|0);
   $or$cond23 = $821 & $823;
   if ($or$cond23) {
    $824 = $5;
    $825 = $7;
    $826 = ((($825)) + 24|0);
    $827 = ((($826)) + 4|0);
    $828 = HEAP32[$827>>2]|0;
    $829 = $9;
    $830 = (_convert($824,$828,$829)|0);
    $831 = $7;
    $832 = ((($831)) + 24|0);
    $833 = ((($832)) + 4|0);
    HEAP32[$833>>2] = $830;
    $834 = $5;
    $835 = $7;
    $836 = ((($835)) + 24|0);
    $837 = HEAP32[$836>>2]|0;
    $838 = $10;
    $839 = (_convert($834,$837,$838)|0);
    $840 = $7;
    $841 = ((($840)) + 24|0);
    HEAP32[$841>>2] = $839;
    $842 = $5;
    $843 = ((($842)) + 5200|0);
    $844 = HEAP32[$843>>2]|0;
    $11 = $844;
    $845 = $11;
    $846 = $7;
    $847 = ((($846)) + 4|0);
    HEAP32[$847>>2] = $845;
    $848 = $11;
    $4 = $848;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 30: case 29:  {
   $849 = $5;
   $850 = $6;
   $851 = $7;
   $852 = ((($851)) + 24|0);
   $853 = ((($852)) + 4|0);
   $854 = HEAP32[$853>>2]|0;
   $855 = $8;
   $856 = (_typeCheck($849,$850,$854,$855)|0);
   $9 = $856;
   $857 = $5;
   $858 = $7;
   $859 = ((($858)) + 24|0);
   $860 = HEAP32[$859>>2]|0;
   $861 = $8;
   $862 = (_typeCheck($857,0,$860,$861)|0);
   $10 = $862;
   $863 = $7;
   $864 = ((($863)) + 24|0);
   $865 = ((($864)) + 4|0);
   $866 = HEAP32[$865>>2]|0;
   $867 = (_linkOf($866,1)|0);
   $12 = $867;
   $868 = $9;
   $869 = ($868|0)!=(0|0);
   $870 = $10;
   $871 = ($870|0)!=(0|0);
   $or$cond25 = $869 & $871;
   $872 = $12;
   $873 = ($872|0)!=(0|0);
   $or$cond27 = $or$cond25 & $873;
   if (!($or$cond27)) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   $874 = $7;
   $875 = ((($874)) + 24|0);
   $876 = ((($875)) + 4|0);
   $877 = HEAP32[$876>>2]|0;
   $878 = (_isConstVar($877)|0);
   $879 = ($878|0)!=(0);
   if ($879) {
    $880 = $7;
    $881 = HEAP32[$880>>2]|0;
    $882 = ($881|0)!=(29);
    if ($882) {
     $883 = $5;
     $884 = HEAP32[$883>>2]|0;
     $885 = $7;
     $886 = ((($885)) + 12|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = $7;
     $889 = ((($888)) + 16|0);
     $890 = HEAP32[$889>>2]|0;
     $891 = $7;
     HEAP32[$vararg_buffer66>>2] = $891;
     _printLog($884,-1,$887,$890,0,25668,$vararg_buffer66);
    }
   }
   $892 = $5;
   $893 = $9;
   $894 = $7;
   $895 = ((($894)) + 24|0);
   $896 = HEAP32[$895>>2]|0;
   $897 = (_canAssign($892,$893,$896,0)|0);
   $898 = ($897|0)!=(0);
   if ($898) {
    $899 = $5;
    $900 = $7;
    $901 = ((($900)) + 24|0);
    $902 = HEAP32[$901>>2]|0;
    $903 = $9;
    $904 = (_convert($899,$902,$903)|0);
    $905 = $7;
    $906 = ((($905)) + 24|0);
    HEAP32[$906>>2] = $904;
    $907 = $9;
    $908 = $7;
    $909 = ((($908)) + 4|0);
    HEAP32[$909>>2] = $907;
    $910 = $9;
    $4 = $910;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  case 2:  {
   $911 = $5;
   $912 = $6;
   $913 = $7;
   $914 = $8;
   $915 = (_typeCheckRef($911,$912,$913,0,$914)|0);
   $11 = $915;
   $916 = $11;
   $917 = ($916|0)==(0|0);
   if ($917) {
    $4 = 0;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   } else {
    $918 = $11;
    $919 = $7;
    $920 = ((($919)) + 4|0);
    HEAP32[$920>>2] = $918;
    $921 = $11;
    $4 = $921;
    $922 = $4;
    STACKTOP = sp;return ($922|0);
   }
   break;
  }
  default: {
   $28 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer30>>2] = 25145;
   $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
   HEAP32[$vararg_ptr33>>2] = 488;
   $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
   HEAP32[$vararg_ptr34>>2] = 25593;
   _printFmt($28,0,28431,$vararg_buffer30);
   __abort_779();
   $4 = 0;
   $922 = $4;
   STACKTOP = sp;return ($922|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _convert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 $10 = $5;
 if ($9) {
  $3 = $10;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $6;
  $15 = $5;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = $14;
  $17 = $5;
  $3 = $17;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 $18 = $5;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = ($20|0)==($21|0);
 if ($22) {
  $23 = $5;
  $3 = $23;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 } else {
  $24 = $4;
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $5;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $6;
  $33 = $5;
  $34 = $5;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $36;
  _printLog($25,6,$28,$31,0,25799,$vararg_buffer);
  $37 = $4;
  $38 = (_newNode($37,3)|0);
  $7 = $38;
  $39 = $5;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $7;
  $43 = ((($42)) + 12|0);
  HEAP32[$43>>2] = $41;
  $44 = $5;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $7;
  $48 = ((($47)) + 16|0);
  HEAP32[$48>>2] = $46;
  $49 = $5;
  $50 = $7;
  $51 = ((($50)) + 24|0);
  HEAP32[$51>>2] = $49;
  $52 = $6;
  $53 = $7;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $7;
  $3 = $55;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _isVariable_816($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(48);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _argNode_817($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $6;
  $3 = $9;
 } else {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = (_opNode($10,41,$11,$12)|0);
  $3 = $13;
 }
 $14 = $3;
 STACKTOP = sp;return ($14|0);
}
function _typeCheckRef($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $8;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = $8;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(2);
  if (!($18)) {
   $11 = 0;
   $19 = $8;
   $20 = ((($19)) + 24|0);
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   L4: do {
    if ($23) {
     $24 = $8;
     $25 = ((($24)) + 24|0);
     $26 = ((($25)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $11 = $27;
    } else {
     $28 = $7;
     $29 = ($28|0)!=(0|0);
     if ($29) {
      $30 = $7;
      $31 = (_isVariable_816($30)|0);
      $32 = ($31|0)!=(0);
      if ($32) {
       $33 = $6;
       $34 = $7;
       $35 = ((($34)) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ((($36)) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $8;
       $40 = $9;
       $41 = (_lookup($33,$38,$39,$40,48,0)|0);
       $11 = $41;
       $42 = $7;
       $43 = ((($42)) + 28|0);
       $44 = HEAP32[$43>>2]|0;
       $7 = $44;
      }
      $45 = $11;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $47 = $7;
       $48 = (_isTypename_789($47)|0);
       $49 = ($48|0)!=(0);
       if ($49) {
        $50 = $6;
        $51 = $7;
        $52 = ((($51)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $8;
        $55 = $9;
        $56 = (_lookup($50,$53,$54,$55,64,0)|0);
        $11 = $56;
       }
      }
      $57 = $11;
      $58 = ($57|0)==(0|0);
      if (!($58)) {
       break;
      }
      $59 = $6;
      $60 = $7;
      $61 = ((($60)) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $8;
      $64 = $9;
      $65 = $10;
      $66 = (_lookup($59,$62,$63,$64,0,$65)|0);
      $11 = $66;
      break;
     } else {
      $67 = $6;
      $68 = ((($67)) + 2076|0);
      $69 = $8;
      $70 = ((($69)) + 24|0);
      $71 = ((($70)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($68) + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $11 = $74;
      $75 = $6;
      $76 = $11;
      $77 = $8;
      $78 = $9;
      $79 = $10;
      $80 = (_lookup($75,$76,$77,$78,0,$79)|0);
      $11 = $80;
      $81 = $6;
      $82 = ((($81)) + 8|0);
      $83 = HEAP32[$82>>2]|0;
      $7 = $83;
      while(1) {
       $84 = $7;
       $85 = ($84|0)!=(0|0);
       if (!($85)) {
        break L4;
       }
       $86 = $11;
       $87 = ($86|0)!=(0|0);
       if ($87) {
        $88 = $11;
        $89 = ((($88)) + 12|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $7;
        $92 = ((($91)) + 12|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($90|0)>($93|0);
        if ($94) {
         break L4;
        }
       }
       $95 = $6;
       $96 = $7;
       $97 = ((($96)) + 36|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = $8;
       $100 = $9;
       $101 = (_lookup($95,$98,$99,$100,0,0)|0);
       $12 = $101;
       $102 = $12;
       $103 = ($102|0)==(0|0);
       if (!($103)) {
        $104 = $12;
        $11 = $104;
       }
       $105 = $7;
       $106 = ((($105)) + 32|0);
       $107 = HEAP32[$106>>2]|0;
       $7 = $107;
      }
     }
    }
   } while(0);
   $108 = $11;
   $109 = ($108|0)==(0|0);
   if ($109) {
    $110 = $10;
    $111 = ($110|0)!=(0);
    if ($111) {
     $112 = $6;
     $113 = HEAP32[$112>>2]|0;
     $114 = $8;
     $115 = ((($114)) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $8;
     $118 = ((($117)) + 16|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $8;
     HEAP32[$vararg_buffer>>2] = $120;
     _printLog($113,-1,$116,$119,0,25703,$vararg_buffer);
    }
    $5 = 0;
    $166 = $5;
    STACKTOP = sp;return ($166|0);
   }
   $121 = $11;
   $122 = (_isInline_808($121)|0);
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $11;
    $125 = ((($124)) + 56|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)!=(0|0);
    if ($127) {
     $128 = $11;
     $129 = ((($128)) + 56|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ((($130)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $13 = $132;
    } else {
     label = 28;
    }
   } else {
    label = 28;
   }
   do {
    if ((label|0) == 28) {
     $133 = $11;
     $134 = (_isInvokable_809($133)|0);
     $135 = ($134|0)!=(0);
     $136 = $9;
     $137 = ($136|0)!=(0|0);
     $or$cond = $135 & $137;
     $138 = $11;
     if ($or$cond) {
      $139 = ((($138)) + 40|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($140)) + 28|0);
      $142 = HEAP32[$141>>2]|0;
      $13 = $142;
      break;
     }
     $143 = (_isTypename_789($138)|0);
     $144 = ($143|0)!=(0);
     $145 = $9;
     $146 = ($145|0)!=(0|0);
     $or$cond3 = $144 & $146;
     $147 = $11;
     if ($or$cond3) {
      $13 = $147;
      break;
     } else {
      $148 = ((($147)) + 28|0);
      $149 = HEAP32[$148>>2]|0;
      $13 = $149;
      break;
     }
    }
   } while(0);
   $150 = $8;
   $151 = HEAP32[$150>>2]|0;
   $152 = ($151|0)!=(2);
   if ($152) {
    $153 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer4>>2] = 25145;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = 463;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = 25786;
    _printFmt($153,0,25733,$vararg_buffer4);
    __abort_779();
   }
   $154 = $11;
   $155 = $8;
   $156 = ((($155)) + 24|0);
   $157 = ((($156)) + 8|0);
   HEAP32[$157>>2] = $154;
   $158 = $11;
   $159 = ((($158)) + 28|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $8;
   $162 = ((($161)) + 4|0);
   HEAP32[$162>>2] = $160;
   $163 = $11;
   $164 = $8;
   _addUsage($163,$164);
   $165 = $13;
   $5 = $165;
   $166 = $5;
   STACKTOP = sp;return ($166|0);
  }
 }
 $5 = 0;
 $166 = $5;
 STACKTOP = sp;return ($166|0);
}
function _argsSize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 0;
 $6 = $2;
 $7 = (_isFunction_786($6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer>>2] = 25145;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1034;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 25831;
  _printFmt($9,0,28431,$vararg_buffer);
  __abort_779();
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $2;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $4 = $12;
 while(1) {
  $13 = $4;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = (_isInline_808($15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   $18 = $4;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $5 = $20;
   $21 = $3;
   $22 = $5;
   $23 = ($21>>>0)<($22>>>0);
   if ($23) {
    $24 = $5;
    $3 = $24;
   }
  }
  $25 = $4;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $4 = $27;
 }
 $28 = $3;
 $1 = $28;
 $29 = $1;
 STACKTOP = sp;return ($29|0);
}
function _rehash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = -1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $28 = $4;
  $29 = $28 ^ -1;
  STACKTOP = sp;return ($29|0);
 }
 $7 = $3;
 $8 = ($7|0)==(-1);
 if ($8) {
  $9 = $2;
  $10 = (_strlen($9)|0);
  $11 = (($10) + 1)|0;
  $3 = $11;
 }
 while(1) {
  $12 = $3;
  $13 = (($12) + -1)|0;
  $3 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = $15 >>> 8;
  $17 = $4;
  $18 = $2;
  $19 = ((($18)) + 1|0);
  $2 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $17 ^ $21;
  $23 = $22&255;
  $24 = $23&255;
  $25 = (9776 + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $16 ^ $26;
  $4 = $27;
 }
 $28 = $4;
 $29 = $28 ^ -1;
 STACKTOP = sp;return ($29|0);
}
function _initBuff($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = $3;
 HEAP32[$8>>2] = 0;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $4;
 $13 = $5;
 $14 = Math_imul($12, $13)|0;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = $3;
 $18 = $4;
 $19 = (_setBuff($17,$18,0)|0);
 $20 = ($19|0)!=(0|0);
 $21 = $20&1;
 STACKTOP = sp;return ($21|0);
}
function _setBuff($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $7 = $12;
 $13 = $7;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13>>>0)>=($16>>>0);
 do {
  if ($17) {
   $18 = $3;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 << 1;
   HEAP32[$19>>2] = $21;
   $22 = $7;
   $23 = $3;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25<<1;
   $27 = ($22>>>0)>($26>>>0);
   if ($27) {
    $28 = $7;
    $29 = $28 << 1;
    $30 = $3;
    $31 = ((($30)) + 8|0);
    HEAP32[$31>>2] = $29;
   }
   $32 = $3;
   $33 = HEAP32[$32>>2]|0;
   $34 = $3;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_realloc($33,$36)|0);
   $6 = $37;
   $38 = $6;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = $6;
    $41 = $3;
    HEAP32[$41>>2] = $40;
    break;
   } else {
    $42 = $3;
    _freeBuff($42);
    break;
   }
  }
 } while(0);
 $43 = $3;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = ($45>>>0)>=($46>>>0);
 if ($47) {
  $48 = $4;
  $49 = (($48) + 1)|0;
  $50 = $3;
  $51 = ((($50)) + 12|0);
  HEAP32[$51>>2] = $49;
 }
 $52 = $3;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 $55 = $5;
 $56 = ($55|0)!=(0|0);
 $or$cond = $54 & $56;
 if ($or$cond) {
  $57 = $3;
  $58 = HEAP32[$57>>2]|0;
  $59 = $7;
  $60 = (($58) + ($59)|0);
  $61 = $5;
  $62 = $3;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  _memcpy(($60|0),($61|0),($64|0))|0;
 }
 $65 = $3;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  $72 = 0;
  STACKTOP = sp;return ($72|0);
 }
 $68 = $3;
 $69 = HEAP32[$68>>2]|0;
 $70 = $7;
 $71 = (($69) + ($70)|0);
 $72 = $71;
 STACKTOP = sp;return ($72|0);
}
function _freeBuff($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _insBuff($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = Math_imul($9, $12)|0;
 $7 = $13;
 $14 = $3;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($16, $19)|0;
 $8 = $20;
 $21 = $8;
 $22 = $7;
 $23 = ($21>>>0)<($22>>>0);
 if ($23) {
  $24 = $7;
  $8 = $24;
 }
 $25 = $8;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($25>>>0)>=($28>>>0);
 do {
  if ($29) {
   $30 = $8;
   $31 = $3;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33<<1;
   $35 = ($30>>>0)>($34>>>0);
   if ($35) {
    $36 = $8;
    $37 = $3;
    $38 = ((($37)) + 8|0);
    HEAP32[$38>>2] = $36;
   }
   $39 = $3;
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41<<1;
   HEAP32[$40>>2] = $42;
   $43 = $3;
   $44 = HEAP32[$43>>2]|0;
   $45 = $3;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_realloc($44,$47)|0);
   $6 = $48;
   $49 = $6;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $6;
    $52 = $3;
    HEAP32[$52>>2] = $51;
    break;
   } else {
    $53 = $3;
    _freeBuff($53);
    break;
   }
  }
 } while(0);
 $54 = $4;
 $55 = $3;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($54>>>0)<($57>>>0);
 if ($58) {
  $59 = $3;
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  $62 = (($60) + ($61)|0);
  $63 = $3;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($62) + ($65)|0);
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $69 = $7;
  $70 = (($68) + ($69)|0);
  $71 = $3;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $3;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $4;
  $78 = (($76) - ($77))|0;
  $79 = Math_imul($73, $78)|0;
  _memmove(($66|0),($70|0),($79|0))|0;
  $80 = $3;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $4 = $82;
 }
 $83 = $3;
 $84 = ((($83)) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $4;
 $87 = ($85>>>0)>=($86>>>0);
 if ($87) {
  $88 = $4;
  $89 = (($88) + 1)|0;
  $90 = $3;
  $91 = ((($90)) + 12|0);
  HEAP32[$91>>2] = $89;
 }
 $92 = $3;
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0|0);
 $95 = $5;
 $96 = ($95|0)!=(0|0);
 $or$cond = $94 & $96;
 if ($or$cond) {
  $97 = $3;
  $98 = HEAP32[$97>>2]|0;
  $99 = $7;
  $100 = (($98) + ($99)|0);
  $101 = $5;
  $102 = $3;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  _memcpy(($100|0),($101|0),($104|0))|0;
 }
 $105 = $3;
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if (!($107)) {
  $112 = 0;
  STACKTOP = sp;return ($112|0);
 }
 $108 = $3;
 $109 = HEAP32[$108>>2]|0;
 $110 = $7;
 $111 = (($109) + ($110)|0);
 $112 = $111;
 STACKTOP = sp;return ($112|0);
}
function _printFields($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $7;
 $13 = HEAP32[$12>>2]|0;
 $8 = $13;
 $9 = 1408;
 $14 = $6;
 $15 = ((($14)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $10 = $16;
 while(1) {
  $17 = $10;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $10;
  $20 = $8;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)==($22|0);
  do {
   if (!($23)) {
    $24 = $10;
    $25 = (_isInline_833($24)|0);
    $26 = ($25|0)!=(0);
    if (!($26)) {
     $27 = $10;
     $28 = (_isTypename_834($27)|0);
     $29 = ($28|0)!=(0);
     if ($29) {
      $30 = $10;
      $31 = (_isStatic_835($30)|0);
      $32 = ($31|0)!=(0);
      if (!($32)) {
       $33 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer>>2] = 25885;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = 784;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = 25896;
       _printFmt($33,0,25840,$vararg_buffer);
       __abort_838();
      }
      $34 = $4;
      $35 = $5;
      $36 = $10;
      $37 = $7;
      _printFields($34,$35,$36,$37);
      $38 = $7;
      $39 = ((($38)) + 32|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $40 & 64;
      $42 = ($41|0)!=(0);
      if (!($42)) {
       break;
      }
     }
     $43 = $10;
     $44 = (_isFunction_839($43)|0);
     $45 = ($44|0)!=(0);
     if ($45) {
      $46 = $10;
      $47 = (_isStatic_835($46)|0);
      $48 = ($47|0)!=(0);
      if (!($48)) {
       $49 = HEAP32[3314]|0;
       HEAP32[$vararg_buffer3>>2] = 25885;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = 791;
       $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
       HEAP32[$vararg_ptr7>>2] = 25896;
       _printFmt($49,0,25840,$vararg_buffer3);
       __abort_838();
      }
      $50 = $4;
      $51 = $5;
      $52 = $10;
      $53 = $7;
      _printFields($50,$51,$52,$53);
      $54 = $7;
      $55 = ((($54)) + 32|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $56 & 32;
      $58 = ($57|0)!=(0);
      if (!($58)) {
       break;
      }
     }
     $59 = $10;
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      label = 15;
     } else {
      $63 = $10;
      $64 = ((($63)) + 8|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)<=(0);
      if ($66) {
       label = 15;
      }
     }
     if ((label|0) == 15) {
      label = 0;
      $67 = $7;
      $68 = ((($67)) + 32|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $69 & 128;
      $71 = ($70|0)!=(0);
      if (!($71)) {
       break;
      }
     }
     $72 = $10;
     $73 = (_isStatic_835($72)|0);
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $8;
      $76 = ((($75)) + 144|0);
      $77 = $10;
      $78 = ((($77)) + 20|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($76) + ($79)|0);
      $11 = $80;
     } else {
      $81 = $6;
      $82 = $8;
      $83 = ((($82)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($81|0)==($84|0);
      if (!($85)) {
       break;
      }
      $86 = $8;
      $87 = ((($86)) + 24|0);
      $88 = ((($87)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $10;
      $91 = ((($90)) + 20|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (0 - ($92))|0;
      $94 = (($89) + ($93)|0);
      $11 = $94;
     }
     $95 = $10;
     $96 = ((($95)) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)!=(0|0);
     if ($98) {
      $99 = $10;
      $100 = ((($99)) + 8|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)!=(0);
      if ($102) {
       $103 = $4;
       $104 = $5;
       $105 = $10;
       $106 = ((($105)) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = $10;
       $109 = ((($108)) + 8|0);
       $110 = HEAP32[$109>>2]|0;
       HEAP32[$vararg_buffer8>>2] = $107;
       $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
       HEAP32[$vararg_ptr11>>2] = $110;
       _printFmt($103,$104,25908,$vararg_buffer8);
      }
     }
     $111 = $4;
     $112 = $5;
     $113 = $8;
     $114 = $10;
     $115 = $11;
     $116 = $9;
     _printVal($111,$112,$113,$114,$115,$116,0);
     $117 = $4;
     $118 = $5;
     _printFmt($117,$118,25916,$vararg_buffer12);
    }
   }
  } while(0);
  $119 = $10;
  $120 = ((($119)) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  $10 = $121;
 }
 STACKTOP = sp;return;
}
function _isInline_833($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isTypename_834($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(16);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _isStatic_835($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function __abort_838() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _isFunction_839($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(32);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0.0, $1239 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer106 = 0, $vararg_buffer112 = 0, $vararg_buffer118 = 0, $vararg_buffer124 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer144 = 0, $vararg_buffer148 = 0, $vararg_buffer153 = 0, $vararg_buffer157 = 0, $vararg_buffer164 = 0, $vararg_buffer167 = 0, $vararg_buffer173 = 0, $vararg_buffer179 = 0, $vararg_buffer182 = 0, $vararg_buffer188 = 0, $vararg_buffer19 = 0, $vararg_buffer194 = 0, $vararg_buffer200 = 0, $vararg_buffer203 = 0, $vararg_buffer205 = 0, $vararg_buffer207 = 0;
 var $vararg_buffer212 = 0, $vararg_buffer216 = 0, $vararg_buffer219 = 0, $vararg_buffer222 = 0, $vararg_buffer225 = 0, $vararg_buffer227 = 0, $vararg_buffer25 = 0, $vararg_buffer31 = 0, $vararg_buffer37 = 0, $vararg_buffer43 = 0, $vararg_buffer49 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer66 = 0, $vararg_buffer71 = 0, $vararg_buffer77 = 0, $vararg_buffer82 = 0, $vararg_buffer88 = 0, $vararg_buffer94 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr103 = 0, $vararg_ptr104 = 0, $vararg_ptr105 = 0, $vararg_ptr109 = 0, $vararg_ptr11 = 0, $vararg_ptr110 = 0, $vararg_ptr111 = 0, $vararg_ptr115 = 0, $vararg_ptr116 = 0, $vararg_ptr117 = 0, $vararg_ptr12 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0, $vararg_ptr123 = 0, $vararg_ptr127 = 0, $vararg_ptr128 = 0, $vararg_ptr129 = 0, $vararg_ptr130 = 0, $vararg_ptr134 = 0, $vararg_ptr135 = 0;
 var $vararg_ptr142 = 0, $vararg_ptr143 = 0, $vararg_ptr147 = 0, $vararg_ptr151 = 0, $vararg_ptr152 = 0, $vararg_ptr156 = 0, $vararg_ptr16 = 0, $vararg_ptr160 = 0, $vararg_ptr161 = 0, $vararg_ptr162 = 0, $vararg_ptr163 = 0, $vararg_ptr17 = 0, $vararg_ptr170 = 0, $vararg_ptr171 = 0, $vararg_ptr172 = 0, $vararg_ptr176 = 0, $vararg_ptr177 = 0, $vararg_ptr178 = 0, $vararg_ptr18 = 0, $vararg_ptr185 = 0;
 var $vararg_ptr186 = 0, $vararg_ptr187 = 0, $vararg_ptr191 = 0, $vararg_ptr192 = 0, $vararg_ptr193 = 0, $vararg_ptr197 = 0, $vararg_ptr198 = 0, $vararg_ptr199 = 0, $vararg_ptr210 = 0, $vararg_ptr211 = 0, $vararg_ptr215 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr230 = 0, $vararg_ptr231 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0;
 var $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr69 = 0, $vararg_ptr70 = 0, $vararg_ptr74 = 0, $vararg_ptr75 = 0;
 var $vararg_ptr76 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, $vararg_ptr87 = 0, $vararg_ptr91 = 0, $vararg_ptr92 = 0, $vararg_ptr93 = 0, $vararg_ptr97 = 0, $vararg_ptr98 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $vararg_buffer227 = sp + 1000|0;
 $vararg_buffer225 = sp + 992|0;
 $vararg_buffer222 = sp + 984|0;
 $vararg_buffer219 = sp + 976|0;
 $vararg_buffer216 = sp + 968|0;
 $vararg_buffer212 = sp + 960|0;
 $vararg_buffer207 = sp + 944|0;
 $vararg_buffer205 = sp + 936|0;
 $vararg_buffer203 = sp + 928|0;
 $vararg_buffer200 = sp + 920|0;
 $vararg_buffer194 = sp + 904|0;
 $vararg_buffer188 = sp + 888|0;
 $vararg_buffer182 = sp + 872|0;
 $vararg_buffer179 = sp + 864|0;
 $vararg_buffer173 = sp + 848|0;
 $vararg_buffer167 = sp + 832|0;
 $vararg_buffer164 = sp + 824|0;
 $vararg_buffer157 = sp + 800|0;
 $vararg_buffer153 = sp + 792|0;
 $vararg_buffer148 = sp + 776|0;
 $vararg_buffer144 = sp + 768|0;
 $vararg_buffer139 = sp + 752|0;
 $vararg_buffer136 = sp + 744|0;
 $vararg_buffer131 = sp + 728|0;
 $vararg_buffer124 = sp + 704|0;
 $vararg_buffer118 = sp + 688|0;
 $vararg_buffer112 = sp + 672|0;
 $vararg_buffer106 = sp + 656|0;
 $vararg_buffer100 = sp + 640|0;
 $vararg_buffer94 = sp + 624|0;
 $vararg_buffer88 = sp + 608|0;
 $vararg_buffer82 = sp + 592|0;
 $vararg_buffer77 = sp + 576|0;
 $vararg_buffer71 = sp + 560|0;
 $vararg_buffer66 = sp + 544|0;
 $vararg_buffer60 = sp + 528|0;
 $vararg_buffer55 = sp + 512|0;
 $vararg_buffer49 = sp + 496|0;
 $vararg_buffer43 = sp + 480|0;
 $vararg_buffer37 = sp + 464|0;
 $vararg_buffer31 = sp + 448|0;
 $vararg_buffer25 = sp + 432|0;
 $vararg_buffer19 = sp + 416|0;
 $vararg_buffer13 = sp + 400|0;
 $vararg_buffer = sp + 384|0;
 $5 = sp + 1208|0;
 $6 = sp + 1180|0;
 $19 = sp + 256|0;
 $20 = sp + 128|0;
 $21 = sp;
 $27 = sp + 1108|0;
 $32 = sp + 1088|0;
 $39 = sp + 1060|0;
 $40 = sp + 1056|0;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $51 = HEAP32[3314]|0;
 _setbuf($51,0);
 $52 = HEAP32[3379]|0;
 _setbuf($52,0);
 $53 = $3;
 $54 = ($53|0)<(2);
 if ($54) {
  $55 = (_usage()|0);
  $2 = $55;
  $1249 = $2;
  STACKTOP = sp;return ($1249|0);
 }
 $56 = $3;
 $57 = ($56|0)==(2);
 if ($57) {
  $58 = $4;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_strcmp($60,25918)|0);
  $62 = ($61|0)==(0);
  if ($62) {
   $63 = (_usage()|0);
   $2 = $63;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
  }
  $64 = $4;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_strcmp($66,25925)|0);
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (_vmSelfTest(67)|0);
   $2 = $69;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
  }
  $70 = $4;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (_strcmp($72,25935)|0);
  $74 = ($73|0)==(0);
  if ($74) {
   $75 = (_vmSelfTest(68)|0);
   $2 = $75;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
  }
 }
 HEAP32[$5>>2] = 0;
 $76 = ((($5)) + 4|0);
 $77 = HEAP32[3347]|0;
 HEAP32[$76>>2] = $77;
 $78 = ((($5)) + 8|0);
 $79 = HEAP32[3314]|0;
 HEAP32[$78>>2] = $79;
 $80 = ((($5)) + 12|0);
 HEAP32[$80>>2] = 0;
 $81 = ((($5)) + 16|0);
 HEAP32[$81>>2] = 0;
 $82 = ((($5)) + 20|0);
 HEAP32[$82>>2] = -1;
 $83 = ((($5)) + 24|0);
 HEAP32[$83>>2] = -1;
 $84 = ((($5)) + 28|0);
 HEAP32[$84>>2] = -1;
 $85 = ((($5)) + 32|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($5)) + 36|0);
 HEAP32[$86>>2] = 0;
 $87 = ((($5)) + 40|0);
 HEAP32[$87>>2] = 0;
 $88 = ((($5)) + 44|0);
 HEAP32[$88>>2] = 0;
 $89 = ((($5)) + 48|0);
 HEAP32[$89>>2] = 0;
 $90 = ((($5)) + 52|0);
 HEAP32[$90>>2] = 0;
 $91 = ((($5)) + 56|0);
 HEAP32[$91>>2] = 0;
 $92 = ((($5)) + 60|0);
 HEAP32[$92>>2] = 0;
 $93 = ((($5)) + 64|0);
 HEAP32[$93>>2] = 0;
 $94 = ((($5)) + 68|0);
 HEAP32[$94>>2] = 0;
 $95 = ((($5)) + 72|0);
 HEAP32[$95>>2] = 0;
 $96 = ((($5)) + 76|0);
 HEAP32[$96>>2] = 114;
 $97 = ((($5)) + 80|0);
 HEAP32[$97>>2] = 7;
 $98 = ((($5)) + 84|0);
 HEAP32[$98>>2] = 0;
 $99 = ((($5)) + 88|0);
 HEAP32[$99>>2] = 0;
 ;HEAP32[$6>>2]=HEAP32[13228>>2]|0;HEAP32[$6+4>>2]=HEAP32[13228+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[13228+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[13228+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[13228+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[13228+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[13228+24>>2]|0;
 $7 = 0;
 $8 = 63;
 $9 = 29172;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $17 = 3;
 $22 = 0;
 $18 = 1;
 L18: while(1) {
  $100 = $18;
  $101 = $3;
  $102 = ($100|0)<($101|0);
  if (!($102)) {
   label = 198;
   break;
  }
  $103 = $4;
  $104 = $18;
  $105 = (($103) + ($104<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $23 = $106;
  $107 = $23;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108 << 24 >> 24;
  $110 = ($109|0)!=(45);
  if ($110) {
   label = 198;
   break;
  }
  $111 = $23;
  $112 = (_strncmp($111,25945,4)|0);
  $113 = ($112|0)==(0);
  $114 = $23;
  L22: do {
   if ($113) {
    $115 = ((($114)) + 4|0);
    $24 = $115;
    $116 = $17;
    $117 = ($116|0)!=(3);
    if ($117) {
     label = 15;
     break L18;
    }
    $17 = 0;
    while(1) {
     $120 = $24;
     $121 = HEAP8[$120>>0]|0;
     $122 = $121 << 24 >> 24;
     $123 = ($122|0)==(47);
     $124 = $24;
     if (!($123)) {
      break;
     }
     $125 = ((($124)) + 1|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126 << 24 >> 24;
     switch ($127|0) {
     case 77:  {
      $130 = ((($5)) + 32|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = $131 | 3;
      HEAP32[$130>>2] = $132;
      $133 = $24;
      $134 = ((($133)) + 2|0);
      $24 = $134;
      break;
     }
     case 109:  {
      $135 = ((($5)) + 32|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $136 | 1;
      HEAP32[$135>>2] = $137;
      $138 = $24;
      $139 = ((($138)) + 2|0);
      $24 = $139;
      break;
     }
     case 71:  {
      $140 = ((($5)) + 32|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $141 | 240;
      HEAP32[$140>>2] = $142;
      $143 = $24;
      $144 = ((($143)) + 2|0);
      $24 = $144;
      break;
     }
     case 103:  {
      $145 = ((($5)) + 32|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = $146 | 16;
      HEAP32[$145>>2] = $147;
      $148 = $24;
      $149 = ((($148)) + 2|0);
      $24 = $149;
      break;
     }
     default: {
      $128 = $24;
      $129 = ((($128)) + 1|0);
      $24 = $129;
     }
     }
    }
    $150 = HEAP8[$124>>0]|0;
    $151 = ($150<<24>>24)!=(0);
    if ($151) {
     label = 26;
     break L18;
    }
   } else {
    $154 = (_strncmp($114,26057,6)|0);
    $155 = ($154|0)==(0);
    $156 = $23;
    if ($155) {
     $157 = ((($156)) + 6|0);
     $25 = $157;
     $158 = $17;
     $159 = ($158|0)!=(3);
     if ($159) {
      label = 29;
      break L18;
     }
     $17 = 1;
     while(1) {
      $162 = $25;
      $163 = HEAP8[$162>>0]|0;
      $164 = $163 << 24 >> 24;
      $165 = ($164|0)==(47);
      $166 = $25;
      if (!($165)) {
       break;
      }
      $167 = ((($166)) + 1|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168 << 24 >> 24;
      switch ($169|0) {
      case 77:  {
       $172 = ((($5)) + 32|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = $173 | 3;
       HEAP32[$172>>2] = $174;
       $175 = $25;
       $176 = ((($175)) + 2|0);
       $25 = $176;
       break;
      }
      case 109:  {
       $177 = ((($5)) + 32|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $178 | 1;
       HEAP32[$177>>2] = $179;
       $180 = $25;
       $181 = ((($180)) + 2|0);
       $25 = $181;
       break;
      }
      case 71:  {
       $182 = ((($5)) + 32|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = $183 | 240;
       HEAP32[$182>>2] = $184;
       $185 = $25;
       $186 = ((($185)) + 2|0);
       $25 = $186;
       break;
      }
      case 103:  {
       $187 = ((($5)) + 32|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = $188 | 16;
       HEAP32[$187>>2] = $189;
       $190 = $25;
       $191 = ((($190)) + 2|0);
       $25 = $191;
       break;
      }
      case 80:  {
       $192 = ((($5)) + 84|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = $193 | 2;
       HEAP32[$192>>2] = $194;
       label = 39;
       break;
      }
      case 112:  {
       label = 39;
       break;
      }
      case 97:  {
       $200 = ((($5)) + 84|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 4;
       HEAP32[$200>>2] = $202;
       $203 = $25;
       $204 = ((($203)) + 2|0);
       $25 = $204;
       break;
      }
      case 115:  {
       $205 = ((($5)) + 88|0);
       HEAP32[$205>>2] = -1;
       $206 = $25;
       $207 = ((($206)) + 2|0);
       $25 = $207;
       break;
      }
      case 84:  {
       $208 = ((($5)) + 32|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $209 | 16384;
       HEAP32[$208>>2] = $210;
       label = 43;
       break;
      }
      case 116:  {
       label = 43;
       break;
      }
      default: {
       $170 = $25;
       $171 = ((($170)) + 1|0);
       $25 = $171;
      }
      }
      if ((label|0) == 39) {
       label = 0;
       $195 = ((($5)) + 84|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = $196 | 1;
       HEAP32[$195>>2] = $197;
       $198 = $25;
       $199 = ((($198)) + 2|0);
       $25 = $199;
      }
      else if ((label|0) == 43) {
       label = 0;
       $211 = ((($5)) + 32|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = $212 | 8192;
       HEAP32[$211>>2] = $213;
       $214 = $25;
       $215 = ((($214)) + 2|0);
       $25 = $215;
      }
     }
     $216 = HEAP8[$166>>0]|0;
     $217 = ($216<<24>>24)!=(0);
     if ($217) {
      label = 46;
      break L18;
     } else {
      break;
     }
    }
    $220 = (_strncmp($156,26064,8)|0);
    $221 = ($220|0)==(0);
    $222 = $23;
    if ($221) {
     $223 = ((($222)) + 8|0);
     $26 = $223;
     $224 = $17;
     $225 = ($224|0)!=(3);
     if ($225) {
      label = 49;
      break L18;
     }
     $17 = 2;
     $228 = ((($5)) + 32|0);
     HEAP32[$228>>2] = 256;
     while(1) {
      $229 = $26;
      $230 = HEAP8[$229>>0]|0;
      $231 = $230 << 24 >> 24;
      $232 = ($231|0)==(47);
      $233 = $26;
      if (!($232)) {
       break;
      }
      $234 = ((($233)) + 1|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = $235 << 24 >> 24;
      switch ($236|0) {
      case 77:  {
       $239 = ((($5)) + 32|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $240 | 3;
       HEAP32[$239>>2] = $241;
       $242 = $26;
       $243 = ((($242)) + 2|0);
       $26 = $243;
       break;
      }
      case 109:  {
       $244 = ((($5)) + 32|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = $245 | 1;
       HEAP32[$244>>2] = $246;
       $247 = $26;
       $248 = ((($247)) + 2|0);
       $26 = $248;
       break;
      }
      case 71:  {
       $249 = ((($5)) + 32|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = $250 | 240;
       HEAP32[$249>>2] = $251;
       $252 = $26;
       $253 = ((($252)) + 2|0);
       $26 = $253;
       break;
      }
      case 103:  {
       $254 = ((($5)) + 32|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = $255 | 16;
       HEAP32[$254>>2] = $256;
       $257 = $26;
       $258 = ((($257)) + 2|0);
       $26 = $258;
       break;
      }
      case 80:  {
       $259 = ((($5)) + 32|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260 | 1792;
       HEAP32[$259>>2] = $261;
       $262 = $26;
       $263 = ((($262)) + 2|0);
       $26 = $263;
       break;
      }
      case 112:  {
       $264 = ((($5)) + 32|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $265 | 512;
       HEAP32[$264>>2] = $266;
       $267 = $26;
       $268 = ((($267)) + 2|0);
       $26 = $268;
       break;
      }
      case 84:  {
       $269 = ((($5)) + 32|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = $270 | 8192;
       HEAP32[$269>>2] = $271;
       label = 61;
       break;
      }
      case 116:  {
       label = 61;
       break;
      }
      default: {
       $237 = $26;
       $238 = ((($237)) + 1|0);
       $26 = $238;
      }
      }
      if ((label|0) == 61) {
       label = 0;
       $272 = ((($5)) + 32|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = $273 | 36864;
       HEAP32[$272>>2] = $274;
       $275 = $26;
       $276 = ((($275)) + 2|0);
       $26 = $276;
      }
     }
     $277 = HEAP8[$233>>0]|0;
     $278 = ($277<<24>>24)!=(0);
     if ($278) {
      label = 64;
      break L18;
     } else {
      break;
     }
    }
    $281 = (_strncmp($222,26073,4)|0);
    $282 = ($281|0)==(0);
    if ($282) {
     $283 = $9;
     $284 = ($283|0)!=(29172|0);
     if ($284) {
      label = 67;
      break L18;
     }
     $287 = $23;
     $288 = ((($287)) + 4|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $289 << 24 >> 24;
     $291 = ($290|0)!=(0);
     if ($291) {
      $292 = $23;
      $293 = ((($292)) + 4|0);
      $9 = $293;
      break;
     } else {
      $9 = 0;
      break;
     }
    }
    $294 = $23;
    $295 = (_strncmp($294,26078,4)|0);
    $296 = ($295|0)==(0);
    if ($296) {
     HEAP32[$27>>2] = -1;
     $297 = $23;
     $298 = ((($297)) + 4|0);
     $28 = $298;
     $299 = $28;
     $300 = HEAP8[$299>>0]|0;
     $301 = ($300<<24>>24)!=(0);
     if ($301) {
      $302 = $28;
      $303 = (_parseInt($302,$27,10)|0);
      $28 = $303;
      $304 = HEAP32[$27>>2]|0;
      $305 = ((($6)) + 24|0);
      HEAP32[$305>>2] = $304;
     }
     $306 = $28;
     $307 = HEAP8[$306>>0]|0;
     $308 = $307 << 24 >> 24;
     switch ($308|0) {
     case 75: case 107:  {
      $309 = ((($6)) + 24|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = $310 << 10;
      HEAP32[$309>>2] = $311;
      $312 = ((($6)) + 24|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $313 >>> 10;
      $315 = HEAP32[$27>>2]|0;
      $316 = ($314|0)!=($315|0);
      if (!($316)) {
       $317 = $28;
       $318 = ((($317)) + 1|0);
       $28 = $318;
      }
      break;
     }
     case 77: case 109:  {
      $319 = ((($6)) + 24|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = $320 << 20;
      HEAP32[$319>>2] = $321;
      $322 = ((($6)) + 24|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $323 >>> 20;
      $325 = HEAP32[$27>>2]|0;
      $326 = ($324|0)!=($325|0);
      if (!($326)) {
       $327 = $28;
       $328 = ((($327)) + 1|0);
       $28 = $328;
      }
      break;
     }
     case 71: case 103:  {
      $329 = ((($6)) + 24|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = $330 << 30;
      HEAP32[$329>>2] = $331;
      $332 = ((($6)) + 24|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = $333 >>> 30;
      $335 = HEAP32[$27>>2]|0;
      $336 = ($334|0)!=($335|0);
      if (!($336)) {
       $337 = $28;
       $338 = ((($337)) + 1|0);
       $28 = $338;
      }
      break;
     }
     default: {
     }
     }
     $339 = $28;
     $340 = HEAP8[$339>>0]|0;
     $341 = ($340<<24>>24)!=(0);
     if ($341) {
      label = 82;
      break L18;
     } else {
      break;
     }
    }
    $344 = $23;
    $345 = (_strncmp($344,26083,4)|0);
    $346 = ($345|0)==(0);
    $347 = $23;
    if ($346) {
     $348 = ((($347)) + 4|0);
     $29 = $348;
     $349 = $18;
     $350 = (($349) + 1)|0;
     $18 = $350;
     $351 = $3;
     $352 = ($350|0)>=($351|0);
     $353 = $11;
     $354 = ($353|0)!=(0|0);
     $or$cond = $352 | $354;
     if ($or$cond) {
      label = 85;
      break L18;
     }
     $356 = $4;
     $357 = $18;
     $358 = (($356) + ($357<<2)|0);
     $359 = HEAP32[$358>>2]|0;
     $11 = $359;
     while(1) {
      $360 = $29;
      $361 = HEAP8[$360>>0]|0;
      $362 = $361 << 24 >> 24;
      $363 = ($362|0)==(47);
      $364 = $29;
      if (!($363)) {
       break;
      }
      $365 = ((($364)) + 1|0);
      $366 = HEAP8[$365>>0]|0;
      $367 = $366 << 24 >> 24;
      $cond = ($367|0)==(97);
      if ($cond) {
       $12 = 1;
       $370 = $29;
       $371 = ((($370)) + 2|0);
       $29 = $371;
      } else {
       $368 = $29;
       $369 = ((($368)) + 1|0);
       $29 = $369;
      }
     }
     $372 = ((($6)) + 16|0);
     $373 = (_parseInt($364,$372,10)|0);
     $374 = HEAP8[$373>>0]|0;
     $375 = ($374<<24>>24)!=(0);
     if ($375) {
      label = 93;
      break L18;
     }
     $378 = ((($6)) + 16|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = ($379|0)>(15);
     if (!($380)) {
      break;
     }
     $381 = ((($6)) + 16|0);
     HEAP32[$381>>2] = 15;
     break;
    }
    $382 = (_strncmp($347,26142,5)|0);
    $383 = ($382|0)==(0);
    $384 = $23;
    if ($383) {
     $385 = (_strEquals($384,26142)|0);
     $386 = ($385|0)!=(0);
     do {
      if ($386) {
       $16 = 69;
      } else {
       $387 = $23;
       $388 = (_strEquals($387,26148)|0);
       $389 = ($388|0)!=(0);
       if ($389) {
        $390 = $18;
        $391 = (($390) + 1)|0;
        $18 = $391;
        $392 = $3;
        $393 = ($391|0)>=($392|0);
        $394 = $15;
        $395 = ($394|0)!=(0|0);
        $or$cond3 = $393 | $395;
        if ($or$cond3) {
         label = 101;
         break L18;
        }
        $397 = $4;
        $398 = $18;
        $399 = (($397) + ($398<<2)|0);
        $400 = HEAP32[$399>>2]|0;
        $15 = $400;
        break L22;
       }
       $401 = $23;
       $402 = (_strEquals($401,26217)|0);
       $403 = ($402|0)!=(0);
       if ($403) {
        $16 = 70;
        break;
       }
       $404 = $23;
       $405 = (_strEquals($404,26228)|0);
       $406 = ($405|0)!=(0);
       if (!($406)) {
        label = 107;
        break L18;
       }
       $16 = 71;
      }
     } while(0);
     $409 = $18;
     $410 = (($409) + 1)|0;
     $18 = $410;
     $411 = $3;
     $412 = ($410|0)>=($411|0);
     $413 = $13;
     $414 = ($413|0)!=(0|0);
     $or$cond5 = $412 | $414;
     if ($or$cond5) {
      label = 109;
      break L18;
     }
     $416 = $4;
     $417 = $18;
     $418 = (($416) + ($417<<2)|0);
     $419 = HEAP32[$418>>2]|0;
     $14 = $419;
     $420 = $14;
     $421 = (_fopen($420,26240)|0);
     $13 = $421;
     $422 = $13;
     $423 = ($422|0)==(0|0);
     if ($423) {
      label = 111;
      break L18;
     } else {
      break;
     }
    }
    $429 = (_strncmp($384,26291,4)|0);
    $430 = ($429|0)==(0);
    $431 = $23;
    if ($430) {
     $432 = ((($431)) + 4|0);
     $30 = $432;
     $433 = ((($5)) + 20|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)!=(-1);
     if ($435) {
      label = 114;
      break L18;
     }
     $438 = ((($5)) + 20|0);
     HEAP32[$438>>2] = 0;
     while(1) {
      $439 = $30;
      $440 = HEAP8[$439>>0]|0;
      $441 = $440 << 24 >> 24;
      $442 = ($441|0)==(47);
      $443 = $30;
      if (!($442)) {
       break;
      }
      $444 = ((($443)) + 1|0);
      $445 = HEAP8[$444>>0]|0;
      $446 = $445 << 24 >> 24;
      switch ($446|0) {
      case 97:  {
       $449 = ((($5)) + 40|0);
       HEAP32[$449>>2] = 1;
       $450 = $30;
       $451 = ((($450)) + 2|0);
       $30 = $451;
       break;
      }
      case 109:  {
       $452 = ((($5)) + 36|0);
       HEAP32[$452>>2] = 1;
       $453 = $30;
       $454 = ((($453)) + 2|0);
       $30 = $454;
       break;
      }
      case 100:  {
       $455 = ((($5)) + 44|0);
       HEAP32[$455>>2] = 1;
       $456 = $30;
       $457 = ((($456)) + 2|0);
       $30 = $457;
       break;
      }
      case 112:  {
       $458 = ((($5)) + 48|0);
       HEAP32[$458>>2] = 1;
       $459 = $30;
       $460 = ((($459)) + 2|0);
       $30 = $460;
       break;
      }
      case 117:  {
       $461 = ((($5)) + 52|0);
       HEAP32[$461>>2] = 1;
       $462 = $30;
       $463 = ((($462)) + 2|0);
       $30 = $463;
       break;
      }
      default: {
       $447 = $30;
       $448 = ((($447)) + 1|0);
       $30 = $448;
      }
      }
     }
     $464 = HEAP8[$443>>0]|0;
     $465 = ($464<<24>>24)!=(0);
     if ($465) {
      label = 126;
      break L18;
     } else {
      break;
     }
    }
    $468 = (_strncmp($431,26296,4)|0);
    $469 = ($468|0)==(0);
    $470 = $23;
    if ($469) {
     $471 = ((($470)) + 4|0);
     $31 = $471;
     $472 = ((($5)) + 28|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = ($473|0)!=(-1);
     if ($474) {
      label = 129;
      break L18;
     }
     $477 = ((($5)) + 28|0);
     HEAP32[$477>>2] = 0;
     while(1) {
      $478 = $31;
      $479 = HEAP8[$478>>0]|0;
      $480 = $479 << 24 >> 24;
      $481 = ($480|0)==(47);
      if (!($481)) {
       break;
      }
      $482 = $31;
      $483 = ((($482)) + 1|0);
      $484 = HEAP8[$483>>0]|0;
      $485 = $484 << 24 >> 24;
      switch ($485|0) {
      case 97:  {
       $488 = ((($5)) + 28|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = $489 | 80;
       HEAP32[$488>>2] = $490;
       $491 = $31;
       $492 = ((($491)) + 2|0);
       $31 = $492;
       break;
      }
      case 110:  {
       $493 = ((($5)) + 28|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = $494 | 48;
       HEAP32[$493>>2] = $495;
       $496 = $31;
       $497 = ((($496)) + 2|0);
       $31 = $497;
       break;
      }
      case 115:  {
       $498 = ((($5)) + 56|0);
       HEAP32[$498>>2] = 1;
       $499 = $31;
       $500 = ((($499)) + 2|0);
       $31 = $500;
       break;
      }
      case 109:  {
       $501 = ((($5)) + 36|0);
       HEAP32[$501>>2] = 1;
       $502 = $31;
       $503 = ((($502)) + 2|0);
       $31 = $503;
       break;
      }
      case 100:  {
       $504 = ((($5)) + 44|0);
       HEAP32[$504>>2] = 1;
       $505 = $31;
       $506 = ((($505)) + 2|0);
       $31 = $506;
       break;
      }
      case 112:  {
       $507 = ((($5)) + 48|0);
       HEAP32[$507>>2] = 1;
       $508 = $31;
       $509 = ((($508)) + 2|0);
       $31 = $509;
       break;
      }
      case 117:  {
       $510 = ((($5)) + 52|0);
       HEAP32[$510>>2] = 1;
       $511 = $31;
       $512 = ((($511)) + 2|0);
       $31 = $512;
       break;
      }
      default: {
       $486 = $31;
       $487 = ((($486)) + 1|0);
       $31 = $487;
      }
      }
     }
     HEAP32[$32>>2] = 9;
     $513 = $31;
     $514 = HEAP8[$513>>0]|0;
     $515 = $514 << 24 >> 24;
     $516 = ($515|0)!=(0);
     if ($516) {
      $517 = $31;
      $518 = (_parseInt($517,$32,10)|0);
      $519 = HEAP8[$518>>0]|0;
      $520 = $519 << 24 >> 24;
      $521 = ($520|0)!=(0);
      if ($521) {
       label = 144;
       break L18;
      }
     }
     $524 = HEAP32[$32>>2]|0;
     $525 = ($524|0)>(15);
     if ($525) {
      HEAP32[$32>>2] = 15;
     }
     $526 = HEAP32[$32>>2]|0;
     $527 = 15 & $526;
     $528 = ((($5)) + 28|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = $529 | $527;
     HEAP32[$528>>2] = $530;
     break;
    }
    $531 = (_strncmp($470,26301,4)|0);
    $532 = ($531|0)==(0);
    $533 = $23;
    if ($532) {
     $534 = ((($533)) + 4|0);
     $33 = $534;
     $535 = ((($5)) + 24|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = ($536|0)!=(-1);
     if ($537) {
      label = 150;
      break L18;
     }
     $540 = ((($5)) + 24|0);
     HEAP32[$540>>2] = 7936;
     while(1) {
      $541 = $33;
      $542 = HEAP8[$541>>0]|0;
      $543 = $542 << 24 >> 24;
      $544 = ($543|0)==(47);
      $545 = $33;
      if (!($544)) {
       break;
      }
      $546 = ((($545)) + 1|0);
      $547 = HEAP8[$546>>0]|0;
      $548 = $547 << 24 >> 24;
      switch ($548|0) {
      case 116:  {
       $551 = ((($5)) + 24|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = $552 | 8192;
       HEAP32[$551>>2] = $553;
       $554 = $33;
       $555 = ((($554)) + 2|0);
       $33 = $555;
       break;
      }
      case 108:  {
       $556 = ((($5)) + 24|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = $557 | 128;
       HEAP32[$556>>2] = $558;
       $559 = $33;
       $560 = ((($559)) + 2|0);
       $33 = $560;
       break;
      }
      case 98:  {
       $561 = ((($5)) + 24|0);
       $562 = HEAP32[$561>>2]|0;
       $563 = $562 | 16384;
       HEAP32[$561>>2] = $563;
       $564 = $33;
       $565 = ((($564)) + 2|0);
       $33 = $565;
       break;
      }
      case 101:  {
       $566 = ((($5)) + 24|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = $567 | 32768;
       HEAP32[$566>>2] = $568;
       $569 = $33;
       $570 = ((($569)) + 2|0);
       $33 = $570;
       break;
      }
      case 109:  {
       $571 = ((($5)) + 36|0);
       HEAP32[$571>>2] = 1;
       $572 = $33;
       $573 = ((($572)) + 2|0);
       $33 = $573;
       break;
      }
      case 100:  {
       $574 = ((($5)) + 44|0);
       HEAP32[$574>>2] = 1;
       $575 = $33;
       $576 = ((($575)) + 2|0);
       $33 = $576;
       break;
      }
      case 112:  {
       $577 = ((($5)) + 48|0);
       HEAP32[$577>>2] = 1;
       $578 = $33;
       $579 = ((($578)) + 2|0);
       $33 = $579;
       break;
      }
      case 117:  {
       $580 = ((($5)) + 52|0);
       HEAP32[$580>>2] = 1;
       $581 = $33;
       $582 = ((($581)) + 2|0);
       $33 = $582;
       break;
      }
      default: {
       $549 = $33;
       $550 = ((($549)) + 1|0);
       $33 = $550;
      }
      }
     }
     $583 = HEAP8[$545>>0]|0;
     $584 = ($583<<24>>24)!=(0);
     if ($584) {
      label = 165;
      break L18;
     } else {
      break;
     }
    }
    $587 = (_strBegins($533,26306)|0);
    $588 = ($587|0)!=(0);
    if (!($588)) {
     label = 198;
     break L18;
    }
    $589 = $23;
    $590 = ((($589)) + 2|0);
    $34 = $590;
    L190: while(1) {
     $591 = $34;
     $592 = HEAP8[$591>>0]|0;
     $593 = $592 << 24 >> 24;
     $594 = ($593|0)==(45);
     if (!($594)) {
      $595 = $34;
      $596 = HEAP8[$595>>0]|0;
      $597 = $596 << 24 >> 24;
      $598 = ($597|0)==(43);
      if (!($598)) {
       break;
      }
     }
     $599 = $34;
     $600 = HEAP8[$599>>0]|0;
     $601 = $600 << 24 >> 24;
     $602 = ($601|0)==(43);
     $603 = $602&1;
     $35 = $603;
     $604 = $34;
     $605 = ((($604)) + 1|0);
     $606 = (_strBegins($605,26309)|0);
     $607 = ($606|0)!=(0);
     do {
      if ($607) {
       $608 = $35;
       HEAP32[$6>>2] = $608;
       $609 = $34;
       $610 = ((($609)) + 5|0);
       $34 = $610;
      } else {
       $611 = $34;
       $612 = ((($611)) + 1|0);
       $613 = (_strBegins($612,26314)|0);
       $614 = ($613|0)!=(0);
       if ($614) {
        $615 = $35;
        $616 = ((($6)) + 4|0);
        HEAP32[$616>>2] = $615;
        $617 = $34;
        $618 = ((($617)) + 5|0);
        $34 = $618;
        break;
       }
       $619 = $34;
       $620 = ((($619)) + 1|0);
       $621 = (_strBegins($620,26319)|0);
       $622 = ($621|0)!=(0);
       if ($622) {
        $623 = $35;
        $624 = ((($6)) + 8|0);
        HEAP32[$624>>2] = $623;
        $625 = $34;
        $626 = ((($625)) + 5|0);
        $34 = $626;
        break;
       }
       $627 = $34;
       $628 = ((($627)) + 1|0);
       $629 = (_strBegins($628,26324)|0);
       $630 = ($629|0)!=(0);
       if ($630) {
        $631 = $35;
        $632 = ((($6)) + 12|0);
        HEAP32[$632>>2] = $631;
        $633 = $34;
        $634 = ((($633)) + 5|0);
        $34 = $634;
        break;
       }
       $635 = $34;
       $636 = ((($635)) + 1|0);
       $637 = (_strBegins($636,26329)|0);
       $638 = ($637|0)!=(0);
       if ($638) {
        $639 = $8;
        $640 = $639 & -17;
        $641 = $35;
        $642 = $641<<4;
        $643 = $640 | $642;
        $8 = $643;
        $644 = $34;
        $645 = ((($644)) + 5|0);
        $34 = $645;
        break;
       }
       $646 = $34;
       $647 = ((($646)) + 1|0);
       $648 = (_strBegins($647,26334)|0);
       $649 = ($648|0)!=(0);
       if ($649) {
        $650 = $8;
        $651 = $650 & -2;
        $652 = $35;
        $653 = $652;
        $654 = $651 | $653;
        $8 = $654;
        $655 = $34;
        $656 = ((($655)) + 4|0);
        $34 = $656;
        break;
       }
       $657 = $34;
       $658 = ((($657)) + 1|0);
       $659 = (_strBegins($658,26338)|0);
       $660 = ($659|0)!=(0);
       if ($660) {
        $661 = $8;
        $662 = $661 & -3;
        $663 = $35;
        $664 = $663<<1;
        $665 = $662 | $664;
        $8 = $665;
        $666 = $34;
        $667 = ((($666)) + 4|0);
        $34 = $667;
        break;
       }
       $668 = $34;
       $669 = ((($668)) + 1|0);
       $670 = (_strBegins($669,26342)|0);
       $671 = ($670|0)!=(0);
       if ($671) {
        $672 = $8;
        $673 = $672 & -5;
        $674 = $35;
        $675 = $674<<2;
        $676 = $673 | $675;
        $8 = $676;
        $677 = $34;
        $678 = ((($677)) + 4|0);
        $34 = $678;
        break;
       }
       $679 = $34;
       $680 = ((($679)) + 1|0);
       $681 = (_strBegins($680,26346)|0);
       $682 = ($681|0)!=(0);
       if ($682) {
        $683 = $35;
        $684 = ($683|0)!=(0);
        $685 = HEAP32[3347]|0;
        $686 = $684 ? $685 : 0;
        $687 = ((($5)) + 4|0);
        HEAP32[$687>>2] = $686;
        $688 = $34;
        $689 = ((($688)) + 6|0);
        $34 = $689;
        break;
       }
       $690 = $34;
       $691 = ((($690)) + 1|0);
       $692 = (_strBegins($691,26352)|0);
       $693 = ($692|0)!=(0);
       if ($693) {
        $694 = $8;
        $695 = $694 & -9;
        $696 = $35;
        $697 = $696<<3;
        $698 = $695 | $697;
        $8 = $698;
        $699 = $34;
        $700 = ((($699)) + 4|0);
        $34 = $700;
        break;
       }
       $701 = $34;
       $702 = ((($701)) + 1|0);
       $703 = (_strBegins($702,26356)|0);
       $704 = ($703|0)!=(0);
       if ($704) {
        $705 = $35;
        $706 = ($705|0)!=(0);
        $707 = $706 ^ 1;
        $708 = $707&1;
        $709 = ((($5)) + 60|0);
        HEAP32[$709>>2] = $708;
        $710 = $34;
        $711 = ((($710)) + 8|0);
        $34 = $711;
        break;
       }
       $712 = $34;
       $713 = ((($712)) + 1|0);
       $714 = (_strBegins($713,26364)|0);
       $715 = ($714|0)!=(0);
       if (!($715)) {
        break L190;
       }
       $716 = $35;
       $717 = ($716|0)!=(0);
       $718 = $717 ? 26370 : 0;
       $719 = ((($5)) + 64|0);
       HEAP32[$719>>2] = $718;
       $720 = $34;
       $721 = ((($720)) + 6|0);
       $34 = $721;
      }
     } while(0);
    }
    $722 = $34;
    $723 = HEAP8[$722>>0]|0;
    $724 = ($723<<24>>24)!=(0);
    if ($724) {
     label = 196;
     break L18;
    }
   }
  } while(0);
  $732 = $18;
  $733 = (($732) + 1)|0;
  $18 = $733;
 }
 switch (label|0) {
  case 15: {
   $118 = HEAP32[3314]|0;
   $119 = $23;
   HEAP32[$vararg_buffer>>2] = 25885;
   $vararg_ptr10 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = 1601;
   $vararg_ptr11 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = 26009;
   $vararg_ptr12 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr12>>2] = $119;
   _printFmt($118,0,25950,$vararg_buffer);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 26: {
   $152 = HEAP32[3314]|0;
   $153 = $23;
   HEAP32[$vararg_buffer13>>2] = 25885;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1631;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = 26009;
   $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
   HEAP32[$vararg_ptr18>>2] = $153;
   _printFmt($152,0,26014,$vararg_buffer13);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 29: {
   $160 = HEAP32[3314]|0;
   $161 = $23;
   HEAP32[$vararg_buffer19>>2] = 25885;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = 1638;
   $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
   HEAP32[$vararg_ptr23>>2] = 26009;
   $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
   HEAP32[$vararg_ptr24>>2] = $161;
   _printFmt($160,0,25950,$vararg_buffer19);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 46: {
   $218 = HEAP32[3314]|0;
   $219 = $23;
   HEAP32[$vararg_buffer25>>2] = 25885;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = 1695;
   $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
   HEAP32[$vararg_ptr29>>2] = 26009;
   $vararg_ptr30 = ((($vararg_buffer25)) + 12|0);
   HEAP32[$vararg_ptr30>>2] = $219;
   _printFmt($218,0,26014,$vararg_buffer25);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 49: {
   $226 = HEAP32[3314]|0;
   $227 = $23;
   HEAP32[$vararg_buffer31>>2] = 25885;
   $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
   HEAP32[$vararg_ptr34>>2] = 1702;
   $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
   HEAP32[$vararg_ptr35>>2] = 26009;
   $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
   HEAP32[$vararg_ptr36>>2] = $227;
   _printFmt($226,0,25950,$vararg_buffer31);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 64: {
   $279 = HEAP32[3314]|0;
   $280 = $23;
   HEAP32[$vararg_buffer37>>2] = 25885;
   $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
   HEAP32[$vararg_ptr40>>2] = 1750;
   $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
   HEAP32[$vararg_ptr41>>2] = 26009;
   $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
   HEAP32[$vararg_ptr42>>2] = $280;
   _printFmt($279,0,26014,$vararg_buffer37);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 67: {
   $285 = HEAP32[3314]|0;
   $286 = $23;
   HEAP32[$vararg_buffer43>>2] = 25885;
   $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
   HEAP32[$vararg_ptr46>>2] = 1758;
   $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
   HEAP32[$vararg_ptr47>>2] = 26009;
   $vararg_ptr48 = ((($vararg_buffer43)) + 12|0);
   HEAP32[$vararg_ptr48>>2] = $286;
   _printFmt($285,0,25950,$vararg_buffer43);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 82: {
   $342 = HEAP32[3314]|0;
   $343 = $23;
   HEAP32[$vararg_buffer49>>2] = 25885;
   $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
   HEAP32[$vararg_ptr52>>2] = 1809;
   $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
   HEAP32[$vararg_ptr53>>2] = 26009;
   $vararg_ptr54 = ((($vararg_buffer49)) + 12|0);
   HEAP32[$vararg_ptr54>>2] = $343;
   _printFmt($342,0,26014,$vararg_buffer49);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 85: {
   $355 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer55>>2] = 25885;
   $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
   HEAP32[$vararg_ptr58>>2] = 1818;
   $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
   HEAP32[$vararg_ptr59>>2] = 26009;
   _printFmt($355,0,26088,$vararg_buffer55);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 93: {
   $376 = HEAP32[3314]|0;
   $377 = $23;
   HEAP32[$vararg_buffer60>>2] = 25885;
   $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
   HEAP32[$vararg_ptr63>>2] = 1836;
   $vararg_ptr64 = ((($vararg_buffer60)) + 8|0);
   HEAP32[$vararg_ptr64>>2] = 26009;
   $vararg_ptr65 = ((($vararg_buffer60)) + 12|0);
   HEAP32[$vararg_ptr65>>2] = $377;
   _printFmt($376,0,26014,$vararg_buffer60);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 101: {
   $396 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer66>>2] = 25885;
   $vararg_ptr69 = ((($vararg_buffer66)) + 4|0);
   HEAP32[$vararg_ptr69>>2] = 1851;
   $vararg_ptr70 = ((($vararg_buffer66)) + 8|0);
   HEAP32[$vararg_ptr70>>2] = 26009;
   _printFmt($396,0,26162,$vararg_buffer66);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 107: {
   $407 = HEAP32[3314]|0;
   $408 = $23;
   HEAP32[$vararg_buffer71>>2] = 25885;
   $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
   HEAP32[$vararg_ptr74>>2] = 1864;
   $vararg_ptr75 = ((($vararg_buffer71)) + 8|0);
   HEAP32[$vararg_ptr75>>2] = 26009;
   $vararg_ptr76 = ((($vararg_buffer71)) + 12|0);
   HEAP32[$vararg_ptr76>>2] = $408;
   _printFmt($407,0,26014,$vararg_buffer71);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 109: {
   $415 = HEAP32[3314]|0;
   HEAP32[$vararg_buffer77>>2] = 25885;
   $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
   HEAP32[$vararg_ptr80>>2] = 1868;
   $vararg_ptr81 = ((($vararg_buffer77)) + 8|0);
   HEAP32[$vararg_ptr81>>2] = 26009;
   _printFmt($415,0,26162,$vararg_buffer77);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 111: {
   $424 = HEAP32[3314]|0;
   $425 = $4;
   $426 = $18;
   $427 = (($425) + ($426<<2)|0);
   $428 = HEAP32[$427>>2]|0;
   HEAP32[$vararg_buffer82>>2] = 25885;
   $vararg_ptr85 = ((($vararg_buffer82)) + 4|0);
   HEAP32[$vararg_ptr85>>2] = 1874;
   $vararg_ptr86 = ((($vararg_buffer82)) + 8|0);
   HEAP32[$vararg_ptr86>>2] = 26009;
   $vararg_ptr87 = ((($vararg_buffer82)) + 12|0);
   HEAP32[$vararg_ptr87>>2] = $428;
   _printFmt($424,0,26242,$vararg_buffer82);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 114: {
   $436 = HEAP32[3314]|0;
   $437 = $23;
   HEAP32[$vararg_buffer88>>2] = 25885;
   $vararg_ptr91 = ((($vararg_buffer88)) + 4|0);
   HEAP32[$vararg_ptr91>>2] = 1881;
   $vararg_ptr92 = ((($vararg_buffer88)) + 8|0);
   HEAP32[$vararg_ptr92>>2] = 26009;
   $vararg_ptr93 = ((($vararg_buffer88)) + 12|0);
   HEAP32[$vararg_ptr93>>2] = $437;
   _printFmt($436,0,25950,$vararg_buffer88);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 126: {
   $466 = HEAP32[3314]|0;
   $467 = $23;
   HEAP32[$vararg_buffer94>>2] = 25885;
   $vararg_ptr97 = ((($vararg_buffer94)) + 4|0);
   HEAP32[$vararg_ptr97>>2] = 1916;
   $vararg_ptr98 = ((($vararg_buffer94)) + 8|0);
   HEAP32[$vararg_ptr98>>2] = 26009;
   $vararg_ptr99 = ((($vararg_buffer94)) + 12|0);
   HEAP32[$vararg_ptr99>>2] = $467;
   _printFmt($466,0,26014,$vararg_buffer94);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 129: {
   $475 = HEAP32[3314]|0;
   $476 = $23;
   HEAP32[$vararg_buffer100>>2] = 25885;
   $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
   HEAP32[$vararg_ptr103>>2] = 1923;
   $vararg_ptr104 = ((($vararg_buffer100)) + 8|0);
   HEAP32[$vararg_ptr104>>2] = 26009;
   $vararg_ptr105 = ((($vararg_buffer100)) + 12|0);
   HEAP32[$vararg_ptr105>>2] = $476;
   _printFmt($475,0,25950,$vararg_buffer100);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 144: {
   $522 = HEAP32[3314]|0;
   $523 = $23;
   HEAP32[$vararg_buffer106>>2] = 25885;
   $vararg_ptr109 = ((($vararg_buffer106)) + 4|0);
   HEAP32[$vararg_ptr109>>2] = 1968;
   $vararg_ptr110 = ((($vararg_buffer106)) + 8|0);
   HEAP32[$vararg_ptr110>>2] = 26009;
   $vararg_ptr111 = ((($vararg_buffer106)) + 12|0);
   HEAP32[$vararg_ptr111>>2] = $523;
   _printFmt($522,0,26014,$vararg_buffer106);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 150: {
   $538 = HEAP32[3314]|0;
   $539 = $23;
   HEAP32[$vararg_buffer112>>2] = 25885;
   $vararg_ptr115 = ((($vararg_buffer112)) + 4|0);
   HEAP32[$vararg_ptr115>>2] = 1979;
   $vararg_ptr116 = ((($vararg_buffer112)) + 8|0);
   HEAP32[$vararg_ptr116>>2] = 26009;
   $vararg_ptr117 = ((($vararg_buffer112)) + 12|0);
   HEAP32[$vararg_ptr117>>2] = $539;
   _printFmt($538,0,25950,$vararg_buffer112);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 165: {
   $585 = HEAP32[3314]|0;
   $586 = $23;
   HEAP32[$vararg_buffer118>>2] = 25885;
   $vararg_ptr121 = ((($vararg_buffer118)) + 4|0);
   HEAP32[$vararg_ptr121>>2] = 2028;
   $vararg_ptr122 = ((($vararg_buffer118)) + 8|0);
   HEAP32[$vararg_ptr122>>2] = 26009;
   $vararg_ptr123 = ((($vararg_buffer118)) + 12|0);
   HEAP32[$vararg_ptr123>>2] = $586;
   _printFmt($585,0,26014,$vararg_buffer118);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 196: {
   $725 = HEAP32[3314]|0;
   $726 = $23;
   $727 = $34;
   $728 = $23;
   $729 = $727;
   $730 = $728;
   $731 = (($729) - ($730))|0;
   HEAP32[$vararg_buffer124>>2] = 25885;
   $vararg_ptr127 = ((($vararg_buffer124)) + 4|0);
   HEAP32[$vararg_ptr127>>2] = 2091;
   $vararg_ptr128 = ((($vararg_buffer124)) + 8|0);
   HEAP32[$vararg_ptr128>>2] = 26009;
   $vararg_ptr129 = ((($vararg_buffer124)) + 12|0);
   HEAP32[$vararg_ptr129>>2] = $726;
   $vararg_ptr130 = ((($vararg_buffer124)) + 16|0);
   HEAP32[$vararg_ptr130>>2] = $731;
   _printFmt($725,0,26383,$vararg_buffer124);
   __abort_838();
   $2 = -1;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
  case 198: {
   $734 = ((($5)) + 60|0);
   $735 = HEAP32[$734>>2]|0;
   $736 = ($735|0)!=(0);
   if ($736) {
    $737 = ((($5)) + 20|0);
    $738 = HEAP32[$737>>2]|0;
    $739 = $738 & -97;
    HEAP32[$737>>2] = $739;
    $740 = ((($5)) + 28|0);
    $741 = HEAP32[$740>>2]|0;
    $742 = $741 & -112;
    HEAP32[$740>>2] = $742;
    $743 = ((($5)) + 24|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = $744 & -97;
    HEAP32[$743>>2] = $745;
   }
   $746 = (_clock()|0);
   $747 = ((($5)) + 68|0);
   HEAP32[$747>>2] = $746;
   $748 = ((($6)) + 24|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = (_rtInit(0,$749)|0);
   $7 = $750;
   $751 = $7;
   $752 = ($751|0)==(0|0);
   if ($752) {
    $753 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer131>>2] = 25885;
    $vararg_ptr134 = ((($vararg_buffer131)) + 4|0);
    HEAP32[$vararg_ptr134>>2] = 2111;
    $vararg_ptr135 = ((($vararg_buffer131)) + 8|0);
    HEAP32[$vararg_ptr135>>2] = 26009;
    _printFmt($753,0,26432,$vararg_buffer131);
    __abort_838();
    $2 = -1;
    $1249 = $2;
    STACKTOP = sp;return ($1249|0);
   }
   $754 = HEAP32[$6>>2]|0;
   $755 = ($754|0)!=(0);
   $756 = $755&1;
   $757 = $7;
   $758 = HEAP32[$757>>2]|0;
   $759 = $756 & 1;
   $760 = $759 << 1;
   $761 = $758 & -3;
   $762 = $761 | $760;
   HEAP32[$757>>2] = $762;
   $763 = HEAP32[$6>>2]|0;
   $764 = ($763|0)!=(0);
   $765 = $764&1;
   $766 = $7;
   $767 = HEAP32[$766>>2]|0;
   $768 = $765 & 1;
   $769 = $767 & -2;
   $770 = $769 | $768;
   HEAP32[$766>>2] = $770;
   $771 = ((($6)) + 4|0);
   $772 = HEAP32[$771>>2]|0;
   $773 = ($772|0)!=(0);
   $774 = $773&1;
   $775 = $7;
   $776 = HEAP32[$775>>2]|0;
   $777 = $774 & 1;
   $778 = $777 << 2;
   $779 = $776 & -5;
   $780 = $779 | $778;
   HEAP32[$775>>2] = $780;
   $781 = ((($6)) + 4|0);
   $782 = HEAP32[$781>>2]|0;
   $783 = ($782|0)!=(0);
   $784 = $783&1;
   $785 = $7;
   $786 = HEAP32[$785>>2]|0;
   $787 = $784 & 1;
   $788 = $787 << 3;
   $789 = $786 & -9;
   $790 = $789 | $788;
   HEAP32[$785>>2] = $790;
   $791 = ((($6)) + 8|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = ($792|0)!=(0);
   $794 = $793&1;
   $795 = $7;
   $796 = HEAP32[$795>>2]|0;
   $797 = $794 & 1;
   $798 = $797 << 4;
   $799 = $796 & -17;
   $800 = $799 | $798;
   HEAP32[$795>>2] = $800;
   $801 = ((($6)) + 12|0);
   $802 = HEAP32[$801>>2]|0;
   $803 = ($802|0)!=(0);
   $804 = $803&1;
   $805 = $7;
   $806 = HEAP32[$805>>2]|0;
   $807 = $804 & 1;
   $808 = $807 << 5;
   $809 = $806 & -33;
   $810 = $809 | $808;
   HEAP32[$805>>2] = $810;
   $811 = ((($6)) + 16|0);
   $812 = HEAP32[$811>>2]|0;
   $813 = $7;
   $814 = HEAP32[$813>>2]|0;
   $815 = $812 & 15;
   $816 = $815 << 6;
   $817 = $814 & -961;
   $818 = $817 | $816;
   HEAP32[$813>>2] = $818;
   $819 = $13;
   $820 = ($819|0)!=(0|0);
   if ($820) {
    $821 = $14;
    $822 = $11;
    $823 = (_strEquals($821,$822)|0);
    $824 = ($823|0)!=(0);
    if ($824) {
     $825 = $16;
     $826 = ($825|0)!=(70|0);
     if ($826) {
      $827 = $7;
      $828 = $13;
      _logFILE($827,$828);
     }
    } else {
     label = 206;
    }
   } else {
    label = 206;
   }
   if ((label|0) == 206) {
    $829 = $11;
    $830 = ($829|0)!=(0|0);
    if ($830) {
     $831 = $7;
     $832 = $11;
     $833 = $12;
     $834 = (_logFile($831,$832,$833)|0);
     $835 = ($834|0)!=(0|0);
     if (!($835)) {
      $836 = $7;
      $837 = $11;
      HEAP32[$vararg_buffer136>>2] = $837;
      _printLog($836,0,0,0,0,26482,$vararg_buffer136);
     }
    }
   }
   $838 = $7;
   $839 = $8;
   $840 = (_ccInit($838,$839,0)|0);
   $841 = ($840|0)!=(0|0);
   if (!($841)) {
    $842 = HEAP32[3314]|0;
    HEAP32[$vararg_buffer139>>2] = 25885;
    $vararg_ptr142 = ((($vararg_buffer139)) + 4|0);
    HEAP32[$vararg_ptr142>>2] = 2136;
    $vararg_ptr143 = ((($vararg_buffer139)) + 8|0);
    HEAP32[$vararg_ptr143>>2] = 26009;
    _printFmt($842,0,26504,$vararg_buffer139);
    __abort_838();
    $843 = $7;
    (_logFile($843,0,0)|0);
    $2 = -6;
    $1249 = $2;
    STACKTOP = sp;return ($1249|0);
   }
   $844 = $7;
   HEAP32[$5>>2] = $844;
   $845 = $13;
   $846 = ($845|0)!=(0|0);
   if ($846) {
    $847 = $13;
    $848 = ((($5)) + 8|0);
    HEAP32[$848>>2] = $847;
   }
   $849 = $8;
   $850 = $849 & 8;
   $851 = ($850|0)!=(0);
   if ($851) {
    $852 = ((($5)) + 64|0);
    $853 = HEAP32[$852>>2]|0;
    $854 = ($853|0)!=(0|0);
    if ($854) {
     $855 = HEAP32[$5>>2]|0;
     $856 = ((($5)) + 64|0);
     $857 = HEAP32[$856>>2]|0;
     $858 = $9;
     HEAP32[$vararg_buffer144>>2] = $857;
     $vararg_ptr147 = ((($vararg_buffer144)) + 4|0);
     HEAP32[$vararg_ptr147>>2] = $858;
     _printLog($855,0,0,0,0,26554,$vararg_buffer144);
    }
    $859 = $7;
    $860 = ((($859)) + 16|0);
    $861 = HEAP32[$860>>2]|0;
    $862 = $9;
    $863 = (_ccAddLib($861,72,$862)|0);
    $864 = ($863|0)!=(0);
    if ($864) {
     $865 = HEAP32[3314]|0;
     HEAP32[$vararg_buffer148>>2] = 25885;
     $vararg_ptr151 = ((($vararg_buffer148)) + 4|0);
     HEAP32[$vararg_ptr151>>2] = 2150;
     $vararg_ptr152 = ((($vararg_buffer148)) + 8|0);
     HEAP32[$vararg_ptr152>>2] = 26009;
     _printFmt($865,0,26571,$vararg_buffer148);
     __abort_838();
    }
   }
   while(1) {
    $866 = $18;
    $867 = $3;
    $868 = ($866|0)<=($867|0);
    if (!($868)) {
     break;
    }
    $869 = $4;
    $870 = $18;
    $871 = (($869) + ($870<<2)|0);
    $872 = HEAP32[$871>>2]|0;
    $36 = $872;
    $873 = $18;
    $874 = $3;
    $875 = ($873|0)==($874|0);
    do {
     if ($875) {
      label = 222;
     } else {
      $876 = $36;
      $877 = HEAP8[$876>>0]|0;
      $878 = $877 << 24 >> 24;
      $879 = ($878|0)!=(45);
      if ($879) {
       label = 222;
      } else {
       $927 = $10;
       $928 = ($927|0)==(0|0);
       if ($928) {
        $929 = HEAP32[3314]|0;
        $930 = $36;
        HEAP32[$vararg_buffer167>>2] = 25885;
        $vararg_ptr170 = ((($vararg_buffer167)) + 4|0);
        HEAP32[$vararg_ptr170>>2] = 2176;
        $vararg_ptr171 = ((($vararg_buffer167)) + 8|0);
        HEAP32[$vararg_ptr171>>2] = 26009;
        $vararg_ptr172 = ((($vararg_buffer167)) + 12|0);
        HEAP32[$vararg_ptr172>>2] = $930;
        _printFmt($929,0,26718,$vararg_buffer167);
        __abort_838();
       }
       $931 = $36;
       $932 = ((($931)) + 1|0);
       $933 = HEAP8[$932>>0]|0;
       $934 = $933 << 24 >> 24;
       $935 = ($934|0)==(119);
       if ($935) {
        HEAP32[$39>>2] = 0;
        $936 = $36;
        $937 = (_strcmp($936,26780)|0);
        $938 = ($937|0)==(0);
        if ($938) {
         HEAP32[$39>>2] = 15;
        } else {
         $939 = $36;
         $940 = ((($939)) + 2|0);
         $941 = (_parseInt($940,$39,10)|0);
         $942 = HEAP8[$941>>0]|0;
         $943 = ($942<<24>>24)!=(0);
         if ($943) {
          $944 = HEAP32[3314]|0;
          $945 = $36;
          $946 = ((($945)) + 2|0);
          HEAP32[$vararg_buffer173>>2] = 25885;
          $vararg_ptr176 = ((($vararg_buffer173)) + 4|0);
          HEAP32[$vararg_ptr176>>2] = 2184;
          $vararg_ptr177 = ((($vararg_buffer173)) + 8|0);
          HEAP32[$vararg_ptr177>>2] = 26009;
          $vararg_ptr178 = ((($vararg_buffer173)) + 12|0);
          HEAP32[$vararg_ptr178>>2] = $946;
          _printFmt($944,0,26784,$vararg_buffer173);
          __abort_838();
         }
        }
        $947 = HEAP32[$39>>2]|0;
        $948 = ($947|0)>(15);
        if ($948) {
         HEAP32[$39>>2] = 15;
        }
        $949 = HEAP32[$39>>2]|0;
        $950 = $7;
        $951 = HEAP32[$950>>2]|0;
        $952 = $949 & 15;
        $953 = $952 << 6;
        $954 = $951 & -961;
        $955 = $954 | $953;
        HEAP32[$950>>2] = $955;
        break;
       }
       $956 = $36;
       $957 = ((($956)) + 1|0);
       $958 = HEAP8[$957>>0]|0;
       $959 = $958 << 24 >> 24;
       $960 = ($959|0)==(98);
       if (!($960)) {
        $1009 = HEAP32[3314]|0;
        $1010 = $36;
        HEAP32[$vararg_buffer188>>2] = 25885;
        $vararg_ptr191 = ((($vararg_buffer188)) + 4|0);
        HEAP32[$vararg_ptr191>>2] = 2233;
        $vararg_ptr192 = ((($vararg_buffer188)) + 8|0);
        HEAP32[$vararg_ptr192>>2] = 26009;
        $vararg_ptr193 = ((($vararg_buffer188)) + 12|0);
        HEAP32[$vararg_ptr193>>2] = $1010;
        _printFmt($1009,0,26916,$vararg_buffer188);
        __abort_838();
        break;
       }
       HEAP32[$40>>2] = 0;
       $41 = 4;
       $961 = $36;
       $962 = ((($961)) + 2|0);
       $42 = $962;
       $963 = $22;
       $964 = ($963|0)>(32);
       if ($964) {
        $965 = $7;
        HEAP32[$vararg_buffer179>>2] = 32;
        _printLog($965,0,0,0,0,26832,$vararg_buffer179);
       }
       while(1) {
        $966 = $42;
        $967 = HEAP8[$966>>0]|0;
        $968 = $967 << 24 >> 24;
        $969 = ($968|0)==(47);
        $970 = $42;
        if (!($969)) {
         break;
        }
        $971 = ((($970)) + 1|0);
        $972 = HEAP8[$971>>0]|0;
        $973 = $972 << 24 >> 24;
        switch ($973|0) {
        case 112:  {
         $976 = $41;
         $977 = $976 & -5;
         $41 = $977;
         $978 = $41;
         $979 = $978 | 1;
         $41 = $979;
         $980 = $42;
         $981 = ((($980)) + 2|0);
         $42 = $981;
         break;
        }
        case 116:  {
         $982 = $41;
         $983 = $982 & -5;
         $41 = $983;
         $984 = $41;
         $985 = $984 | 2;
         $41 = $985;
         $986 = $42;
         $987 = ((($986)) + 2|0);
         $42 = $987;
         break;
        }
        case 111:  {
         $988 = $41;
         $989 = $988 | 16;
         $41 = $989;
         $990 = $42;
         $991 = ((($990)) + 2|0);
         $42 = $991;
         break;
        }
        default: {
         $974 = $42;
         $975 = ((($974)) + 1|0);
         $42 = $975;
        }
        }
       }
       $992 = (_parseInt($970,$40,10)|0);
       $993 = HEAP8[$992>>0]|0;
       $994 = ($993<<24>>24)!=(0);
       if ($994) {
        $995 = HEAP32[3314]|0;
        $996 = $36;
        $997 = ((($996)) + 2|0);
        HEAP32[$vararg_buffer182>>2] = 25885;
        $vararg_ptr185 = ((($vararg_buffer182)) + 4|0);
        HEAP32[$vararg_ptr185>>2] = 2225;
        $vararg_ptr186 = ((($vararg_buffer182)) + 8|0);
        HEAP32[$vararg_ptr186>>2] = 26009;
        $vararg_ptr187 = ((($vararg_buffer182)) + 12|0);
        HEAP32[$vararg_ptr187>>2] = $997;
        _printFmt($995,0,26870,$vararg_buffer182);
        __abort_838();
       }
       $998 = $41;
       $999 = $22;
       $1000 = (($19) + ($999<<2)|0);
       HEAP32[$1000>>2] = $998;
       $1001 = $10;
       $1002 = $22;
       $1003 = (($20) + ($1002<<2)|0);
       HEAP32[$1003>>2] = $1001;
       $1004 = HEAP32[$40>>2]|0;
       $1005 = $22;
       $1006 = (($21) + ($1005<<2)|0);
       HEAP32[$1006>>2] = $1004;
       $1007 = $22;
       $1008 = (($1007) + 1)|0;
       $22 = $1008;
      }
     }
    } while(0);
    if ((label|0) == 222) {
     label = 0;
     $880 = ((($5)) + 64|0);
     $881 = HEAP32[$880>>2]|0;
     $882 = ($881|0)!=(0|0);
     $883 = $10;
     $884 = ($883|0)!=(0|0);
     $or$cond7 = $882 & $884;
     if ($or$cond7) {
      $885 = HEAP32[$5>>2]|0;
      $886 = ((($5)) + 64|0);
      $887 = HEAP32[$886>>2]|0;
      $888 = $10;
      HEAP32[$vararg_buffer153>>2] = $887;
      $vararg_ptr156 = ((($vararg_buffer153)) + 4|0);
      HEAP32[$vararg_ptr156>>2] = $888;
      _printLog($885,0,0,0,0,26554,$vararg_buffer153);
     }
     $889 = $10;
     $890 = ($889|0)!=(0|0);
     L308: do {
      if ($890) {
       $891 = $10;
       $892 = (_strrchr($891,46)|0);
       $37 = $892;
       $893 = $37;
       $894 = ($893|0)!=(0|0);
       do {
        if ($894) {
         $895 = $37;
         $896 = (_strEquals($895,26627)|0);
         $897 = ($896|0)!=(0);
         if (!($897)) {
          $898 = $37;
          $899 = (_strEquals($898,26631)|0);
          $900 = ($899|0)!=(0);
          if (!($900)) {
           break;
          }
         }
         $901 = $7;
         $902 = $10;
         $903 = (_importLib($901,$902)|0);
         $38 = $903;
         $904 = $38;
         $905 = ($904|0)!=(0);
         if (!($905)) {
          break L308;
         }
         $906 = HEAP32[3314]|0;
         $907 = $38;
         $908 = $10;
         HEAP32[$vararg_buffer157>>2] = 25885;
         $vararg_ptr160 = ((($vararg_buffer157)) + 4|0);
         HEAP32[$vararg_ptr160>>2] = 2164;
         $vararg_ptr161 = ((($vararg_buffer157)) + 8|0);
         HEAP32[$vararg_ptr161>>2] = 26009;
         $vararg_ptr162 = ((($vararg_buffer157)) + 12|0);
         HEAP32[$vararg_ptr162>>2] = $907;
         $vararg_ptr163 = ((($vararg_buffer157)) + 16|0);
         HEAP32[$vararg_ptr163>>2] = $908;
         _printFmt($906,0,26636,$vararg_buffer157);
         __abort_838();
         break L308;
        }
       } while(0);
       $909 = $7;
       $910 = ((($909)) + 16|0);
       $911 = HEAP32[$910>>2]|0;
       $912 = $10;
       $913 = (_ccAddUnit($911,$912,1,0)|0);
       $914 = ($913|0)!=(0|0);
       if (!($914)) {
        $915 = $7;
        $916 = $10;
        $917 = $10;
        HEAP32[$vararg_buffer164>>2] = $917;
        _printLog($915,-1,$916,1,0,26690,$vararg_buffer164);
       }
      }
     } while(0);
     $918 = $36;
     $10 = $918;
     $919 = ((($6)) + 16|0);
     $920 = HEAP32[$919>>2]|0;
     $921 = $7;
     $922 = HEAP32[$921>>2]|0;
     $923 = $920 & 15;
     $924 = $923 << 6;
     $925 = $922 & -961;
     $926 = $925 | $924;
     HEAP32[$921>>2] = $926;
    }
    $1011 = $18;
    $1012 = (($1011) + 1)|0;
    $18 = $1012;
   }
   $1013 = (_clock()|0);
   $1014 = ((($5)) + 68|0);
   $1015 = HEAP32[$1014>>2]|0;
   $1016 = (($1013) - ($1015))|0;
   $1017 = ((($5)) + 68|0);
   HEAP32[$1017>>2] = $1016;
   $1018 = $15;
   $1019 = ($1018|0)!=(0|0);
   do {
    if ($1019) {
     $1020 = $15;
     $1021 = (_fopen($1020,26240)|0);
     $43 = $1021;
     $1022 = $43;
     $1023 = ($1022|0)!=(0|0);
     if ($1023) {
      $1024 = $43;
      $1025 = (_escapeXML()|0);
      $1026 = $7;
      $1027 = ((($1026)) + 16|0);
      $1028 = HEAP32[$1027>>2]|0;
      $1029 = ((($1028)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      _dumpAstXML($1024,$1025,$1030,16313,0,26009);
      $1031 = $43;
      (_fclose($1031)|0);
      break;
     } else {
      $1032 = HEAP32[3314]|0;
      $1033 = $15;
      HEAP32[$vararg_buffer194>>2] = 25885;
      $vararg_ptr197 = ((($vararg_buffer194)) + 4|0);
      HEAP32[$vararg_ptr197>>2] = 2246;
      $vararg_ptr198 = ((($vararg_buffer194)) + 8|0);
      HEAP32[$vararg_ptr198>>2] = 26009;
      $vararg_ptr199 = ((($vararg_buffer194)) + 12|0);
      HEAP32[$vararg_ptr199>>2] = $1033;
      _printFmt($1032,0,26958,$vararg_buffer194);
      __abort_838();
      break;
     }
    }
   } while(0);
   $1034 = $7;
   $1035 = ((($1034)) + 4|0);
   $1036 = HEAP32[$1035>>2]|0;
   $1037 = ($1036|0)==(0);
   L327: do {
    if ($1037) {
     $1038 = ((($5)) + 64|0);
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = ($1039|0)!=(0|0);
     if ($1040) {
      $1041 = HEAP32[$5>>2]|0;
      $1042 = ((($5)) + 64|0);
      $1043 = HEAP32[$1042>>2]|0;
      HEAP32[$vararg_buffer200>>2] = $1043;
      _printLog($1041,0,0,0,0,27001,$vararg_buffer200);
     }
     $1044 = (_clock()|0);
     $44 = $1044;
     $1045 = $7;
     $1046 = ((($1045)) + 16|0);
     $1047 = HEAP32[$1046>>2]|0;
     $1048 = $17;
     $1049 = ($1048|0)!=(0);
     $1050 = $1049&1;
     (_ccGenCode($1047,$1050)|0);
     $1051 = (_clock()|0);
     $1052 = $44;
     $1053 = (($1051) - ($1052))|0;
     $1054 = ((($5)) + 68|0);
     $1055 = HEAP32[$1054>>2]|0;
     $1056 = (($1055) + ($1053))|0;
     HEAP32[$1054>>2] = $1056;
     $18 = 0;
     while(1) {
      $1057 = $18;
      $1058 = $22;
      $1059 = ($1057|0)<($1058|0);
      if (!($1059)) {
       break L327;
      }
      $1060 = $18;
      $1061 = (($20) + ($1060<<2)|0);
      $1062 = HEAP32[$1061>>2]|0;
      $45 = $1062;
      $1063 = $18;
      $1064 = (($21) + ($1063<<2)|0);
      $1065 = HEAP32[$1064>>2]|0;
      $46 = $1065;
      $1066 = $18;
      $1067 = (($19) + ($1066<<2)|0);
      $1068 = HEAP32[$1067>>2]|0;
      $47 = $1068;
      $1069 = $7;
      $1070 = $45;
      $1071 = $46;
      $1072 = (_getDbgStatement($1069,$1070,$1071)|0);
      $48 = $1072;
      $1073 = $48;
      $1074 = ($1073|0)!=(0|0);
      if ($1074) {
       $1075 = $47;
       $1076 = $48;
       $1077 = ((($1076)) + 24|0);
       HEAP32[$1077>>2] = $1075;
      } else {
       $1078 = $7;
       $1079 = $45;
       $1080 = $46;
       _printLog($1078,0,$1079,$1080,0,27023,$vararg_buffer203);
      }
      $1081 = $18;
      $1082 = (($1081) + 1)|0;
      $18 = $1082;
     }
    }
   } while(0);
   $1083 = $16;
   $1084 = ($1083|0)==(0|0);
   do {
    if ($1084) {
     $1085 = ((($5)) + 20|0);
     $1086 = HEAP32[$1085>>2]|0;
     $1087 = ($1086|0)!=(-1);
     if (!($1087)) {
      $1088 = ((($5)) + 28|0);
      $1089 = HEAP32[$1088>>2]|0;
      $1090 = ($1089|0)!=(-1);
      if (!($1090)) {
       $1091 = ((($5)) + 24|0);
       $1092 = HEAP32[$1091>>2]|0;
       $1093 = ($1092|0)!=(-1);
       if (!($1093)) {
        break;
       }
      }
     }
     $16 = 69;
    }
   } while(0);
   $1094 = $7;
   $1095 = ((($1094)) + 4|0);
   $1096 = HEAP32[$1095>>2]|0;
   $1097 = ($1096|0)==(0);
   do {
    if ($1097) {
     $1098 = $16;
     $1099 = ($1098|0)==(70|0);
     if ($1099) {
      $1100 = (_escapeJSON()|0);
      $1101 = ((($5)) + 16|0);
      HEAP32[$1101>>2] = $1100;
      $1102 = ((($5)) + 8|0);
      $1103 = HEAP32[$1102>>2]|0;
      _printFmt($1103,0,27042,$vararg_buffer205);
      $1104 = ((($5)) + 8|0);
      $1105 = HEAP32[$1104>>2]|0;
      $1106 = ((($5)) + 16|0);
      $1107 = HEAP32[$1106>>2]|0;
      $1108 = ((($5)) + 12|0);
      $1109 = HEAP32[$1108>>2]|0;
      HEAP32[$vararg_buffer207>>2] = $1109;
      $vararg_ptr210 = ((($vararg_buffer207)) + 4|0);
      HEAP32[$vararg_ptr210>>2] = 27059;
      $vararg_ptr211 = ((($vararg_buffer207)) + 8|0);
      HEAP32[$vararg_ptr211>>2] = 2;
      _printFmt($1105,$1107,27045,$vararg_buffer207);
      $1110 = ((($5)) + 8|0);
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = ((($5)) + 16|0);
      $1113 = HEAP32[$1112>>2]|0;
      $1114 = ((($5)) + 12|0);
      $1115 = HEAP32[$1114>>2]|0;
      HEAP32[$vararg_buffer212>>2] = $1115;
      $vararg_ptr215 = ((($vararg_buffer212)) + 4|0);
      HEAP32[$vararg_ptr215>>2] = 27081;
      _printFmt($1111,$1113,27067,$vararg_buffer212);
      $1116 = $7;
      _dumpApi($1116,$5,70);
      $1117 = ((($5)) + 8|0);
      $1118 = HEAP32[$1117>>2]|0;
      $1119 = ((($5)) + 16|0);
      $1120 = HEAP32[$1119>>2]|0;
      $1121 = ((($5)) + 12|0);
      $1122 = HEAP32[$1121>>2]|0;
      HEAP32[$vararg_buffer216>>2] = $1122;
      _printFmt($1118,$1120,27089,$vararg_buffer216);
      break;
     }
     $1123 = $16;
     $1124 = ($1123|0)!=(0|0);
     if ($1124) {
      $1125 = ((($5)) + 16|0);
      HEAP32[$1125>>2] = 0;
      $1126 = ((($5)) + 64|0);
      $1127 = HEAP32[$1126>>2]|0;
      $1128 = ($1127|0)!=(0|0);
      if ($1128) {
       $1129 = HEAP32[$5>>2]|0;
       $1130 = ((($5)) + 64|0);
       $1131 = HEAP32[$1130>>2]|0;
       HEAP32[$vararg_buffer219>>2] = $1131;
       _printLog($1129,0,0,0,0,27095,$vararg_buffer219);
      }
      $1132 = $7;
      $1133 = $16;
      _dumpApi($1132,$5,$1133);
     }
    }
   } while(0);
   $1134 = $7;
   $1135 = ((($1134)) + 4|0);
   $1136 = HEAP32[$1135>>2]|0;
   $1137 = ($1136|0)==(0);
   $1138 = $17;
   $1139 = ($1138|0)!=(3);
   $or$cond9 = $1137 & $1139;
   if ($or$cond9) {
    $1140 = ((($6)) + 20|0);
    $1141 = HEAP32[$1140>>2]|0;
    $1142 = $7;
    $1143 = HEAP32[$1142>>2]|0;
    $1144 = $1141 & 15;
    $1145 = $1144 << 6;
    $1146 = $1143 & -961;
    $1147 = $1146 | $1145;
    HEAP32[$1142>>2] = $1147;
    $1148 = $7;
    $1149 = ((($1148)) + 20|0);
    $1150 = HEAP32[$1149>>2]|0;
    $1151 = ($1150|0)!=(0|0);
    do {
     if ($1151) {
      $1152 = $7;
      $1153 = ((($1152)) + 20|0);
      $1154 = HEAP32[$1153>>2]|0;
      $1155 = ((($1154)) + 4|0);
      HEAP32[$1155>>2] = $5;
      $1156 = $17;
      $1157 = ($1156|0)==(1);
      if ($1157) {
       $1158 = $7;
       $1159 = ((($1158)) + 20|0);
       $1160 = HEAP32[$1159>>2]|0;
       $1161 = ((($1160)) + 8|0);
       HEAP32[$1161>>2] = 73;
       $1162 = ((($5)) + 88|0);
       $1163 = HEAP32[$1162>>2]|0;
       $1164 = ($1163|0)!=(0);
       if (!($1164)) {
        break;
       }
       $1165 = $7;
       $1166 = ((($1165)) + 24|0);
       $1167 = ((($1166)) + 12|0);
       $1168 = HEAP32[$1167>>2]|0;
       $1169 = ((($5)) + 88|0);
       HEAP32[$1169>>2] = $1168;
       break;
      }
      $1170 = $17;
      $1171 = ($1170|0)==(2);
      if ($1171) {
       $1172 = $16;
       $1173 = ($1172|0)==(70|0);
       $1174 = $7;
       $1175 = ((($1174)) + 20|0);
       $1176 = HEAP32[$1175>>2]|0;
       $1177 = ((($1176)) + 8|0);
       if ($1173) {
        HEAP32[$1177>>2] = 74;
        $1178 = $7;
        $1179 = ((($1178)) + 20|0);
        $1180 = HEAP32[$1179>>2]|0;
        _jsonPreProfile($1180);
        break;
       } else {
        HEAP32[$1177>>2] = 75;
        break;
       }
      }
     }
    } while(0);
    $1181 = ((($5)) + 28|0);
    $1182 = HEAP32[$1181>>2]|0;
    $1183 = ($1182|0)==(-1);
    if ($1183) {
     $1184 = ((($5)) + 32|0);
     $1185 = HEAP32[$1184>>2]|0;
     $1186 = $1185 & 8192;
     $1187 = ($1186|0)!=(0);
     if ($1187) {
      $1188 = ((($5)) + 56|0);
      HEAP32[$1188>>2] = 1;
      $1189 = ((($5)) + 28|0);
      HEAP32[$1189>>2] = 57;
     }
    }
    $1190 = ((($5)) + 64|0);
    $1191 = HEAP32[$1190>>2]|0;
    $1192 = ($1191|0)!=(0|0);
    if ($1192) {
     $1193 = HEAP32[$5>>2]|0;
     $1194 = ((($5)) + 64|0);
     $1195 = HEAP32[$1194>>2]|0;
     HEAP32[$vararg_buffer222>>2] = $1195;
     _printLog($1193,0,0,0,0,27106,$vararg_buffer222);
    }
    $1196 = (_clock()|0);
    $49 = $1196;
    $1197 = $7;
    $1198 = (_execute($1197,0,0,0)|0);
    $1199 = $7;
    $1200 = ((($1199)) + 4|0);
    HEAP32[$1200>>2] = $1198;
    $1201 = (_clock()|0);
    $1202 = $49;
    $1203 = (($1201) - ($1202))|0;
    $1204 = ((($5)) + 72|0);
    HEAP32[$1204>>2] = $1203;
   }
   $1205 = $7;
   $1206 = ((($1205)) + 4|0);
   $1207 = HEAP32[$1206>>2]|0;
   $1208 = ($1207|0)==(0);
   do {
    if ($1208) {
     $1209 = $16;
     $1210 = ($1209|0)==(70|0);
     if (!($1210)) {
      $1220 = $17;
      $1221 = ($1220|0)!=(3);
      if (!($1221)) {
       break;
      }
      _textPostProfile($5);
      break;
     }
     $1211 = $7;
     $1212 = ((($1211)) + 20|0);
     $1213 = HEAP32[$1212>>2]|0;
     $1214 = ($1213|0)!=(0|0);
     if ($1214) {
      $1215 = $7;
      $1216 = ((($1215)) + 20|0);
      $1217 = HEAP32[$1216>>2]|0;
      _jsonPostProfile($1217);
     }
     $1218 = ((($5)) + 8|0);
     $1219 = HEAP32[$1218>>2]|0;
     _printFmt($1219,0,27127,$vararg_buffer225);
    }
   } while(0);
   $1222 = ((($5)) + 64|0);
   $1223 = HEAP32[$1222>>2]|0;
   $1224 = ($1223|0)!=(0|0);
   if ($1224) {
    $1225 = ((($5)) + 60|0);
    $1226 = HEAP32[$1225>>2]|0;
    $1227 = ($1226|0)!=(0);
    $1228 = ((($5)) + 72|0);
    $1229 = HEAP32[$1228>>2]|0;
    $1230 = $1227 ? 0 : $1229;
    $50 = $1230;
    $1231 = HEAP32[$5>>2]|0;
    $1232 = ((($5)) + 64|0);
    $1233 = HEAP32[$1232>>2]|0;
    $1234 = $7;
    $1235 = ((($1234)) + 4|0);
    $1236 = HEAP32[$1235>>2]|0;
    $1237 = $50;
    $1238 = (+($1237|0));
    $1239 = $1238 * 1000.0;
    $1240 = $1239 / 1.0E+6;
    HEAP32[$vararg_buffer227>>2] = $1233;
    $vararg_ptr230 = ((($vararg_buffer227)) + 4|0);
    HEAP32[$vararg_ptr230>>2] = $1236;
    $vararg_ptr231 = ((($vararg_buffer227)) + 8|0);
    HEAPF64[$vararg_ptr231>>3] = $1240;
    _printLog($1231,0,0,0,0,27130,$vararg_buffer227);
   }
   $1241 = $13;
   $1242 = ($1241|0)!=(0|0);
   if ($1242) {
    $1243 = $13;
    (_fclose($1243)|0);
   }
   $1244 = $7;
   _closeLibs($1244);
   $1245 = $7;
   $1246 = (_rtClose($1245)|0);
   $1247 = ($1246|0)!=(0);
   $1248 = $1247&1;
   $2 = $1248;
   $1249 = $2;
   STACKTOP = sp;return ($1249|0);
   break;
  }
 }
 return (0)|0;
}
function _usage() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 29422;
 $1 = $0;
 $2 = HEAP32[3314]|0;
 (_fputs($1,$2)|0);
 STACKTOP = sp;return 0;
}
function _testVmOpc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[3314]|0;
 $7 = $2;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 _printFmt($6,0,29414,$vararg_buffer);
 STACKTOP = sp;return;
}
function _dumpVmOpc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $7 = HEAP32[3314]|0;
 $4 = $7;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer>>2] = $11;
 _printFmt($8,0,29186,$vararg_buffer);
 $12 = $4;
 _printFmt($12,0,29208,$vararg_buffer1);
 $13 = $4;
 _printFmt($13,0,29224,$vararg_buffer3);
 $14 = $4;
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $16;
 _printFmt($14,0,29242,$vararg_buffer5);
 $17 = $4;
 $18 = $3;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = $24 ? 0 : 115;
 HEAP32[$vararg_buffer8>>2] = $20;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $25;
 _printFmt($17,0,29272,$vararg_buffer8);
 $26 = $4;
 _printFmt($26,0,29306,$vararg_buffer12);
 $27 = $4;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 $35 = $34 ? 0 : 115;
 HEAP32[$vararg_buffer14>>2] = $30;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $35;
 _printFmt($27,0,29325,$vararg_buffer14);
 $5 = 0;
 while(1) {
  $36 = $5;
  $37 = $3;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36>>>0)<($39>>>0);
  $41 = $4;
  if (!($40)) {
   break;
  }
  $42 = $5;
  $43 = (97 + ($42))|0;
  HEAP32[$vararg_buffer18>>2] = $43;
  _printFmt($41,0,29354,$vararg_buffer18);
  $44 = $5;
  $45 = (($44) + 1)|0;
  $5 = $45;
 }
 $46 = $3;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $3;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(1);
 $53 = $52 ? 0 : 115;
 HEAP32[$vararg_buffer21>>2] = $48;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $53;
 _printFmt($41,0,29359,$vararg_buffer21);
 $6 = 0;
 while(1) {
  $54 = $6;
  $55 = $3;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54>>>0)<($57>>>0);
  $59 = $4;
  if (!($58)) {
   break;
  }
  $60 = $6;
  $61 = (97 + ($60))|0;
  HEAP32[$vararg_buffer25>>2] = $61;
  _printFmt($59,0,29354,$vararg_buffer25);
  $62 = $6;
  $63 = (($62) + 1)|0;
  $6 = $63;
 }
 _printFmt($59,0,29388,$vararg_buffer28);
 $64 = $2;
 $65 = ($64|0)!=(0|0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $4;
 $67 = $2;
 HEAP32[$vararg_buffer30>>2] = $67;
 _printFmt($66,0,29400,$vararg_buffer30);
 STACKTOP = sp;return;
}
function _parseInt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $6;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $7 = 1;
 $13 = $3;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 switch ($15|0) {
 case 45:  {
  $7 = -1;
  label = 3;
  break;
 }
 case 43:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  $16 = $3;
  $17 = ((($16)) + 1|0);
  $3 = $17;
 }
 $18 = $5;
 $19 = ($18|0)==(0);
 L6: do {
  if ($19) {
   $5 = 10;
   $20 = $3;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(48);
   if ($23) {
    $24 = $3;
    $25 = ((($24)) + 1|0);
    $3 = $25;
    $26 = $3;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    switch ($28|0) {
    case 66: case 98:  {
     $5 = 2;
     $29 = $3;
     $30 = ((($29)) + 1|0);
     $3 = $30;
     break L6;
     break;
    }
    case 79: case 111:  {
     $5 = 8;
     $31 = $3;
     $32 = ((($31)) + 1|0);
     $3 = $32;
     break L6;
     break;
    }
    case 88: case 120:  {
     $5 = 16;
     $33 = $3;
     $34 = ((($33)) + 1|0);
     $3 = $34;
     break L6;
     break;
    }
    default: {
     $5 = 8;
     break L6;
    }
    }
   }
  }
 } while(0);
 L15: while(1) {
  $35 = $3;
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   break;
  }
  $39 = $3;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $8 = $41;
  $42 = $8;
  $43 = ($42|0)>=(48);
  $44 = $8;
  $45 = ($44|0)<=(57);
  $or$cond = $43 & $45;
  $46 = $8;
  do {
   if ($or$cond) {
    $47 = (($46) - 48)|0;
    $8 = $47;
   } else {
    $48 = ($46|0)>=(97);
    $49 = $8;
    $50 = ($49|0)<=(122);
    $or$cond3 = $48 & $50;
    $51 = $8;
    if ($or$cond3) {
     $52 = (($51) - 87)|0;
     $8 = $52;
     break;
    }
    $53 = ($51|0)>=(65);
    $54 = $8;
    $55 = ($54|0)<=(90);
    $or$cond5 = $53 & $55;
    if (!($or$cond5)) {
     break L15;
    }
    $56 = $8;
    $57 = (($56) - 55)|0;
    $8 = $57;
   }
  } while(0);
  $58 = $8;
  $59 = $5;
  $60 = ($58|0)>($59|0);
  if ($60) {
   break;
  }
  $61 = $5;
  $62 = ($61|0)<(0);
  $63 = $62 << 31 >> 31;
  $64 = $6;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (___muldi3(($66|0),($69|0),($61|0),($63|0))|0);
  $71 = (getTempRet0() | 0);
  $72 = $6;
  $73 = $72;
  HEAP32[$73>>2] = $70;
  $74 = (($72) + 4)|0;
  $75 = $74;
  HEAP32[$75>>2] = $71;
  $76 = $8;
  $77 = ($76|0)<(0);
  $78 = $77 << 31 >> 31;
  $79 = $6;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (_i64Add(($81|0),($84|0),($76|0),($78|0))|0);
  $86 = (getTempRet0() | 0);
  $87 = $6;
  $88 = $87;
  HEAP32[$88>>2] = $85;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = $86;
  $91 = $3;
  $92 = ((($91)) + 1|0);
  $3 = $92;
 }
 $93 = $7;
 $94 = ($93|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = $6;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (___muldi3(($93|0),($95|0),($98|0),($101|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = $4;
 HEAP32[$104>>2] = $102;
 $105 = $3;
 STACKTOP = sp;return ($105|0);
}
function _strEquals($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 $7 = $4;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 $9 = $3;
 $10 = $4;
 if ($or$cond) {
  $11 = ($9|0)==($10|0);
  $12 = $11&1;
  $2 = $12;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 } else {
  $13 = (_strcmp($9,$10)|0);
  $14 = ($13|0)==(0);
  $15 = $14&1;
  $2 = $15;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _dumpApiText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer106 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0;
 var $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer52 = 0, $vararg_buffer60 = 0, $vararg_buffer67 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer88 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr102 = 0, $vararg_ptr103 = 0, $vararg_ptr104 = 0;
 var $vararg_ptr105 = 0, $vararg_ptr109 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr74 = 0, $vararg_ptr87 = 0, $vararg_ptr91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $vararg_buffer113 = sp + 312|0;
 $vararg_buffer110 = sp + 304|0;
 $vararg_buffer106 = sp + 296|0;
 $vararg_buffer99 = sp + 272|0;
 $vararg_buffer96 = sp + 264|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer92 = sp + 248|0;
 $vararg_buffer88 = sp + 240|0;
 $vararg_buffer84 = sp + 232|0;
 $vararg_buffer82 = sp + 224|0;
 $vararg_buffer80 = sp + 216|0;
 $vararg_buffer77 = sp + 208|0;
 $vararg_buffer75 = sp + 200|0;
 $vararg_buffer67 = sp + 176|0;
 $vararg_buffer60 = sp + 152|0;
 $vararg_buffer52 = sp + 128|0;
 $vararg_buffer45 = sp + 104|0;
 $vararg_buffer43 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer34 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $20 = $2;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $7 = $22;
 $23 = $2;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $8 = $25;
 $26 = $2;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $9 = $28;
 $29 = $2;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(-1);
 if ($32) {
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $3;
   $39 = ((($38)) + 56|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $5 = 1;
   }
  }
 }
 $42 = $2;
 $43 = ((($42)) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(-1);
 if ($45) {
  $46 = $3;
  $47 = (_isFunction_839($46)|0);
  $48 = ($47|0)!=(0);
  if ($48) {
   $4 = 1;
  }
 }
 $49 = $2;
 $50 = ((($49)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(-1);
 $53 = $4;
 $54 = ($53|0)!=(0);
 $or$cond = $52 | $54;
 $55 = $5;
 $56 = ($55|0)!=(0);
 $or$cond3 = $or$cond | $56;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $57 = $2;
 $58 = ((($57)) + 36|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $3;
  $62 = $2;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($61|0)==($65|0);
  if (!($66)) {
   label = 11;
  }
 } else {
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   $67 = $2;
   $68 = ((($67)) + 40|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $3;
    $72 = ((($71)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0|0);
    if ($74) {
     $75 = $3;
     $76 = ((($75)) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0);
     if ($78) {
      break;
     }
    }
   }
   $79 = $3;
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(0|0);
   if ($82) {
    STACKTOP = sp;return;
   }
   $83 = $3;
   $84 = ((($83)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0);
   if ($86) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $87 = $8;
 $88 = $7;
 $89 = $2;
 $90 = ((($89)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $3;
 $93 = $3;
 $94 = ((($93)) + 28|0);
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$vararg_buffer>>2] = $91;
 $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $92;
 $vararg_ptr7 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $95;
 _printFmt($87,$88,28757,$vararg_buffer);
 $96 = $2;
 $97 = ((($96)) + 44|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $6;
  $101 = ($100|0)!=(0);
  if (!($101)) {
   $102 = $8;
   $103 = $7;
   _printFmt($102,$103,28766,$vararg_buffer8);
   $6 = 1;
  }
  $104 = $8;
  $105 = $7;
  $106 = $9;
  $107 = $3;
  $108 = ((($107)) + 44|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $106;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $109;
  _printFmt($104,$105,28770,$vararg_buffer10);
  $110 = $8;
  $111 = $7;
  $112 = $9;
  $113 = $3;
  $114 = ((($113)) + 28|0);
  $115 = HEAP32[$114>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $112;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $115;
  _printFmt($110,$111,28783,$vararg_buffer14);
  $116 = $8;
  $117 = $7;
  $118 = $9;
  $119 = $3;
  $120 = ((($119)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  HEAP32[$vararg_buffer18>>2] = $118;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $121;
  _printFmt($116,$117,28798,$vararg_buffer18);
  $122 = $2;
  $123 = ((($122)) + 60|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)!=(0);
  if (!($125)) {
   $126 = $8;
   $127 = $7;
   $128 = $9;
   $129 = $3;
   $130 = ((($129)) + 20|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP32[$vararg_buffer22>>2] = $128;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $131;
   _printFmt($126,$127,28811,$vararg_buffer22);
  }
  $132 = $8;
  $133 = $7;
  $134 = $9;
  $135 = $3;
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$vararg_buffer26>>2] = $134;
  $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
  HEAP32[$vararg_ptr29>>2] = $136;
  _printFmt($132,$133,28828,$vararg_buffer26);
  $137 = $3;
  $138 = ((($137)) + 68|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)!=(0|0);
  if ($140) {
   $141 = $8;
   $142 = $7;
   $143 = $9;
   $144 = $3;
   $145 = ((($144)) + 68|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP32[$vararg_buffer30>>2] = $143;
   $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
   HEAP32[$vararg_ptr33>>2] = $146;
   _printFmt($141,$142,28843,$vararg_buffer30);
  }
  $147 = $3;
  $148 = ((($147)) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($149|0)!=(0|0);
  if ($150) {
   $151 = $3;
   $152 = ((($151)) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)>(0);
   if ($154) {
    $155 = $8;
    $156 = $7;
    $157 = $9;
    $158 = $3;
    $159 = ((($158)) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $3;
    $162 = ((($161)) + 8|0);
    $163 = HEAP32[$162>>2]|0;
    HEAP32[$vararg_buffer34>>2] = $157;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $160;
    $vararg_ptr38 = ((($vararg_buffer34)) + 8|0);
    HEAP32[$vararg_ptr38>>2] = $163;
    _printFmt($155,$156,28859,$vararg_buffer34);
   }
  }
  $164 = $3;
  $165 = ((($164)) + 32|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)!=(0|0);
  if ($167) {
   $168 = $8;
   $169 = $7;
   $170 = $9;
   $171 = $3;
   $172 = ((($171)) + 32|0);
   $173 = HEAP32[$172>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $170;
   $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
   HEAP32[$vararg_ptr42>>2] = $173;
   _printFmt($168,$169,28877,$vararg_buffer39);
  }
 }
 $174 = $2;
 $175 = ((($174)) + 48|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = ($176|0)!=(0);
 L43: do {
  if ($177) {
   $178 = $6;
   $179 = ($178|0)!=(0);
   if (!($179)) {
    $180 = $8;
    $181 = $7;
    _printFmt($180,$181,28766,$vararg_buffer43);
    $6 = 1;
   }
   $182 = $2;
   $183 = ((($182)) + 20|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)!=(-1);
   L48: do {
    if ($185) {
     $186 = $3;
     $187 = ((($186)) + 36|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = $3;
     $190 = ((($189)) + 40|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($188|0)!=($191|0);
     if ($192) {
      $193 = $3;
      $194 = ((($193)) + 36|0);
      $195 = HEAP32[$194>>2]|0;
      $10 = $195;
      while(1) {
       $196 = $10;
       $197 = ($196|0)!=(0|0);
       if (!($197)) {
        break L48;
       }
       $198 = $2;
       $199 = ((($198)) + 60|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)!=(0);
       $202 = $8;
       $203 = $7;
       $204 = $9;
       $205 = $10;
       $206 = $10;
       $207 = ((($206)) + 28|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = $10;
       $210 = ((($209)) + 16|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = $10;
       if ($201) {
        $213 = ((($212)) + 44|0);
        $214 = HEAP32[$213>>2]|0;
        HEAP32[$vararg_buffer45>>2] = $204;
        $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
        HEAP32[$vararg_ptr48>>2] = $205;
        $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
        HEAP32[$vararg_ptr49>>2] = $208;
        $vararg_ptr50 = ((($vararg_buffer45)) + 12|0);
        HEAP32[$vararg_ptr50>>2] = $211;
        $vararg_ptr51 = ((($vararg_buffer45)) + 16|0);
        HEAP32[$vararg_ptr51>>2] = $214;
        _printFmt($202,$203,28892,$vararg_buffer45);
       } else {
        $215 = ((($212)) + 20|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = $10;
        $218 = ((($217)) + 44|0);
        $219 = HEAP32[$218>>2]|0;
        HEAP32[$vararg_buffer52>>2] = $204;
        $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
        HEAP32[$vararg_ptr55>>2] = $205;
        $vararg_ptr56 = ((($vararg_buffer52)) + 8|0);
        HEAP32[$vararg_ptr56>>2] = $208;
        $vararg_ptr57 = ((($vararg_buffer52)) + 12|0);
        HEAP32[$vararg_ptr57>>2] = $211;
        $vararg_ptr58 = ((($vararg_buffer52)) + 16|0);
        HEAP32[$vararg_ptr58>>2] = $216;
        $vararg_ptr59 = ((($vararg_buffer52)) + 20|0);
        HEAP32[$vararg_ptr59>>2] = $219;
        _printFmt($202,$203,28928,$vararg_buffer52);
       }
       $220 = $10;
       $221 = ((($220)) + 24|0);
       $222 = HEAP32[$221>>2]|0;
       $10 = $222;
      }
     }
    }
   } while(0);
   $223 = $3;
   $224 = ((($223)) + 40|0);
   $225 = HEAP32[$224>>2]|0;
   $10 = $225;
   while(1) {
    $226 = $10;
    $227 = ($226|0)!=(0|0);
    if (!($227)) {
     break L43;
    }
    $228 = $2;
    $229 = ((($228)) + 60|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ($230|0)!=(0);
    $232 = $8;
    $233 = $7;
    $234 = $9;
    $235 = $10;
    $236 = $10;
    $237 = ((($236)) + 28|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $10;
    $240 = ((($239)) + 16|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $10;
    if ($231) {
     $243 = ((($242)) + 44|0);
     $244 = HEAP32[$243>>2]|0;
     HEAP32[$vararg_buffer60>>2] = $234;
     $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
     HEAP32[$vararg_ptr63>>2] = $235;
     $vararg_ptr64 = ((($vararg_buffer60)) + 8|0);
     HEAP32[$vararg_ptr64>>2] = $238;
     $vararg_ptr65 = ((($vararg_buffer60)) + 12|0);
     HEAP32[$vararg_ptr65>>2] = $241;
     $vararg_ptr66 = ((($vararg_buffer60)) + 16|0);
     HEAP32[$vararg_ptr66>>2] = $244;
     _printFmt($232,$233,28968,$vararg_buffer60);
    } else {
     $245 = ((($242)) + 20|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $10;
     $248 = ((($247)) + 44|0);
     $249 = HEAP32[$248>>2]|0;
     HEAP32[$vararg_buffer67>>2] = $234;
     $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
     HEAP32[$vararg_ptr70>>2] = $235;
     $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
     HEAP32[$vararg_ptr71>>2] = $238;
     $vararg_ptr72 = ((($vararg_buffer67)) + 12|0);
     HEAP32[$vararg_ptr72>>2] = $241;
     $vararg_ptr73 = ((($vararg_buffer67)) + 16|0);
     HEAP32[$vararg_ptr73>>2] = $246;
     $vararg_ptr74 = ((($vararg_buffer67)) + 20|0);
     HEAP32[$vararg_ptr74>>2] = $249;
     _printFmt($232,$233,29004,$vararg_buffer67);
    }
    $250 = $10;
    $251 = ((($250)) + 24|0);
    $252 = HEAP32[$251>>2]|0;
    $10 = $252;
   }
  }
 } while(0);
 $253 = $5;
 $254 = ($253|0)!=(0);
 if ($254) {
  $255 = $2;
  $256 = ((($255)) + 24|0);
  $257 = HEAP32[$256>>2]|0;
  $11 = $257;
  $258 = $6;
  $259 = ($258|0)!=(0);
  if (!($259)) {
   $260 = $8;
   $261 = $7;
   _printFmt($260,$261,28766,$vararg_buffer75);
   $6 = 1;
  }
  $262 = $8;
  $263 = $7;
  $264 = $9;
  HEAP32[$vararg_buffer77>>2] = $264;
  _printFmt($262,$263,29044,$vararg_buffer77);
  $265 = $8;
  $266 = $7;
  $267 = $3;
  $268 = ((($267)) + 56|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $11;
  $271 = $9;
  $272 = (0 - ($271))|0;
  _printAst($265,$266,$269,$270,$272);
  $273 = $8;
  $274 = $7;
  _printFmt($273,$274,25916,$vararg_buffer80);
 }
 $275 = $4;
 $276 = ($275|0)!=(0);
 L73: do {
  if ($276) {
   $277 = $3;
   $278 = ((($277)) + 20|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $3;
   $281 = ((($280)) + 16|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($279) + ($282))|0;
   $12 = $283;
   $284 = $6;
   $285 = ($284|0)!=(0);
   if (!($285)) {
    $286 = $8;
    $287 = $7;
    _printFmt($286,$287,28766,$vararg_buffer82);
    $6 = 1;
   }
   $288 = $8;
   $289 = $7;
   $290 = $9;
   $291 = $3;
   $292 = ((($291)) + 16|0);
   $293 = HEAP32[$292>>2]|0;
   HEAP32[$vararg_buffer84>>2] = $290;
   $vararg_ptr87 = ((($vararg_buffer84)) + 4|0);
   HEAP32[$vararg_ptr87>>2] = $293;
   _printFmt($288,$289,29055,$vararg_buffer84);
   $294 = $2;
   $295 = ((($294)) + 60|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = ($296|0)!=(0);
   if (!($297)) {
    $298 = $8;
    $299 = $7;
    $300 = $3;
    $301 = ((($300)) + 20|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $3;
    $304 = ((($303)) + 20|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $3;
    $307 = ((($306)) + 16|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($305) + ($308))|0;
    HEAP32[$vararg_buffer88>>2] = $302;
    $vararg_ptr91 = ((($vararg_buffer88)) + 4|0);
    HEAP32[$vararg_ptr91>>2] = $309;
    _printFmt($298,$299,27997,$vararg_buffer88);
   }
   $310 = $8;
   $311 = $7;
   _printFmt($310,$311,29082,$vararg_buffer92);
   $312 = $3;
   $313 = ((($312)) + 20|0);
   $314 = HEAP32[$313>>2]|0;
   $13 = $314;
   while(1) {
    $315 = $13;
    $316 = $12;
    $317 = ($315>>>0)<($316>>>0);
    if (!($317)) {
     break L73;
    }
    $318 = $2;
    $319 = HEAP32[$318>>2]|0;
    $320 = $13;
    $321 = (_vmPointer_973($319,$320)|0);
    $14 = $321;
    $322 = $14;
    $323 = ($322|0)==(0|0);
    if ($323) {
     break L73;
    }
    $324 = $14;
    $325 = HEAP8[$324>>0]|0;
    $326 = $325&255;
    $327 = (16 + (($326*20)|0)|0);
    $328 = ((($327)) + 4|0);
    $329 = HEAP32[$328>>2]|0;
    $15 = $329;
    $330 = $15;
    $331 = ($330|0)<=(0);
    if ($331) {
     break L73;
    }
    $332 = $2;
    $333 = HEAP32[$332>>2]|0;
    $334 = $13;
    $335 = (_mapDbgStatement($333,$334)|0);
    $16 = $335;
    $336 = $2;
    $337 = ((($336)) + 56|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = ($338|0)!=(0);
    $340 = $16;
    $341 = ($340|0)!=(0|0);
    $or$cond5 = $339 & $341;
    if ($or$cond5) {
     $342 = $16;
     $343 = ((($342)) + 16|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $13;
     $346 = ($344|0)==($345|0);
     if ($346) {
      $347 = $8;
      $348 = $7;
      $349 = $16;
      $350 = $2;
      $351 = $9;
      $352 = (($351) + 1)|0;
      _textDumpDbg($347,$348,$349,$350,$352);
     }
    }
    $353 = $8;
    $354 = $7;
    $355 = $13;
    $356 = $2;
    $357 = $9;
    $358 = (($357) + 1)|0;
    _textDumpAsm($353,$354,$355,$356,$358);
    $359 = $15;
    $360 = $13;
    $361 = (($360) + ($359))|0;
    $13 = $361;
   }
  }
 } while(0);
 $362 = $2;
 $363 = ((($362)) + 52|0);
 $364 = HEAP32[$363>>2]|0;
 $365 = ($364|0)!=(0);
 if ($365) {
  $17 = 0;
  $366 = $6;
  $367 = ($366|0)!=(0);
  if (!($367)) {
   $368 = $8;
   $369 = $7;
   _printFmt($368,$369,28766,$vararg_buffer94);
   $6 = 1;
  }
  $370 = $8;
  $371 = $7;
  $372 = $9;
  HEAP32[$vararg_buffer96>>2] = $372;
  _printFmt($370,$371,29085,$vararg_buffer96);
  $373 = $3;
  $374 = ((($373)) + 60|0);
  $375 = HEAP32[$374>>2]|0;
  $18 = $375;
  while(1) {
   $376 = $18;
   $377 = ($376|0)!=(0|0);
   if (!($377)) {
    break;
   }
   $378 = $18;
   $379 = ((($378)) + 12|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)!=(0|0);
   if ($381) {
    $382 = $18;
    $383 = ((($382)) + 16|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = ($384|0)!=(0);
    if ($385) {
     $386 = $18;
     $387 = $3;
     $388 = ((($387)) + 64|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = ($386|0)!=($389|0);
     $391 = $390&1;
     $19 = $391;
     $392 = $8;
     $393 = $7;
     $394 = $9;
     $395 = (($394) + 1)|0;
     $396 = $18;
     $397 = ((($396)) + 12|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = $18;
     $400 = ((($399)) + 16|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = $19;
     $403 = ($402|0)!=(0);
     $404 = $403 ? 29101 : 29112;
     $405 = $18;
     HEAP32[$vararg_buffer99>>2] = $395;
     $vararg_ptr102 = ((($vararg_buffer99)) + 4|0);
     HEAP32[$vararg_ptr102>>2] = $398;
     $vararg_ptr103 = ((($vararg_buffer99)) + 8|0);
     HEAP32[$vararg_ptr103>>2] = $401;
     $vararg_ptr104 = ((($vararg_buffer99)) + 12|0);
     HEAP32[$vararg_ptr104>>2] = $404;
     $vararg_ptr105 = ((($vararg_buffer99)) + 16|0);
     HEAP32[$vararg_ptr105>>2] = $405;
     _printFmt($392,$393,29120,$vararg_buffer99);
    } else {
     label = 70;
    }
   } else {
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $406 = $17;
    $407 = (($406) + 1)|0;
    $17 = $407;
   }
   $408 = $18;
   $409 = ((($408)) + 24|0);
   $410 = ((($409)) + 12|0);
   $411 = HEAP32[$410>>2]|0;
   $18 = $411;
  }
  $412 = $17;
  $413 = ($412|0)>(0);
  if ($413) {
   $414 = $8;
   $415 = $7;
   $416 = $9;
   $417 = (($416) + 1)|0;
   $418 = $17;
   HEAP32[$vararg_buffer106>>2] = $417;
   $vararg_ptr109 = ((($vararg_buffer106)) + 4|0);
   HEAP32[$vararg_ptr109>>2] = $418;
   _printFmt($414,$415,29141,$vararg_buffer106);
  }
 }
 $419 = $6;
 $420 = ($419|0)!=(0);
 if ($420) {
  $421 = $8;
  $422 = $7;
  $423 = $2;
  $424 = ((($423)) + 12|0);
  $425 = HEAP32[$424>>2]|0;
  HEAP32[$vararg_buffer110>>2] = $425;
  _printFmt($421,$422,29168,$vararg_buffer110);
 }
 $426 = $8;
 $427 = $7;
 _printFmt($426,$427,25916,$vararg_buffer113);
 STACKTOP = sp;return;
}
function _dumpApiJSON($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $2;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $6 = $15;
 $16 = $2;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  $20 = $2;
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(-1);
  if ($23) {
   $24 = $2;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(-1);
   if ($27) {
    STACKTOP = sp;return;
   }
  }
 }
 $28 = $3;
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($28|0)!=($34|0);
 if ($35) {
  $36 = $4;
  $37 = $6;
  $38 = $5;
  HEAP32[$vararg_buffer>>2] = $38;
  _printFmt($36,$37,27574,$vararg_buffer);
 }
 $39 = $4;
 $40 = $6;
 $41 = $3;
 $42 = $5;
 $43 = (($42) + 1)|0;
 _jsonDumpSym($39,$40,$41,0,$43);
 $44 = $2;
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(-1);
 if ($47) {
  $48 = $2;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $3;
   $54 = ((($53)) + 56|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0|0);
   if ($56) {
    $57 = $4;
    $58 = $6;
    $59 = $3;
    $60 = ((($59)) + 56|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $5;
    $63 = (($62) + 1)|0;
    _jsonDumpAst($57,$58,$61,28638,$63);
   }
  }
 }
 $64 = $2;
 $65 = ((($64)) + 28|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(-1);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $3;
 $69 = (_isFunction_839($68)|0);
 $70 = ($69|0)!=(0);
 if (!($70)) {
  STACKTOP = sp;return;
 }
 $71 = $4;
 $72 = $6;
 $73 = $5;
 $74 = (($73) + 1)|0;
 HEAP32[$vararg_buffer1>>2] = $74;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 28642;
 _printFmt($71,$72,27067,$vararg_buffer1);
 $75 = $4;
 $76 = $6;
 $77 = $3;
 $78 = $2;
 $79 = HEAP32[$78>>2]|0;
 $80 = $5;
 $81 = (($80) + 1)|0;
 _jsonDumpAsm($75,$76,$77,$79,$81);
 $82 = $4;
 $83 = $6;
 $84 = $5;
 $85 = (($84) + 1)|0;
 HEAP32[$vararg_buffer5>>2] = $85;
 _printFmt($82,$83,27089,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _dumpApiSciTE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 switch ($18|0) {
 case 0: case 46:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $19 = $3;
 $20 = (_isInvokable_954($19)|0);
 $21 = ($20|0)!=(0);
 $22 = $5;
 $23 = $3;
 if ($21) {
  _printSym($22,0,$23,1792,0);
 } else {
  _printSym($22,0,$23,768,0);
 }
 $24 = $5;
 $25 = $4;
 _printFmt($24,$25,25916,$vararg_buffer);
 STACKTOP = sp;return;
}
function _strBegins($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (_strlen($6)|0);
 $8 = (_strncmp($4,$5,$7)|0);
 $9 = ($8|0)==(0);
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function _escapeXML() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[39251]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  return (35552|0);
 }
 _memset((35552|0),0,1024)|0;
 HEAP32[(35708)>>2] = 28608;
 HEAP32[(35688)>>2] = 28615;
 HEAP32[(35704)>>2] = 28622;
 HEAP32[(35792)>>2] = 28628;
 HEAP32[(35800)>>2] = 28633;
 HEAP8[39251] = 1;
 return (35552|0);
}
function _dumpAstXML($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0;
 var $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr30 = 0, $vararg_ptr37 = 0, $vararg_ptr44 = 0, $vararg_ptr51 = 0, $vararg_ptr61 = 0, $vararg_ptr68 = 0;
 var $vararg_ptr75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer76 = sp + 192|0;
 $vararg_buffer72 = sp + 184|0;
 $vararg_buffer69 = sp + 176|0;
 $vararg_buffer65 = sp + 168|0;
 $vararg_buffer62 = sp + 160|0;
 $vararg_buffer58 = sp + 152|0;
 $vararg_buffer55 = sp + 144|0;
 $vararg_buffer52 = sp + 136|0;
 $vararg_buffer48 = sp + 128|0;
 $vararg_buffer45 = sp + 120|0;
 $vararg_buffer41 = sp + 112|0;
 $vararg_buffer38 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $8;
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $6;
 $18 = $7;
 $19 = $10;
 $20 = $11;
 $21 = $8;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer>>2] = $19;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $20;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $22;
 _printFmt($17,$18,28378,$vararg_buffer);
 $23 = $9;
 $24 = $23 & 9216;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $6;
  $27 = $7;
  $28 = $8;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $30;
  _printFmt($26,$27,28395,$vararg_buffer3);
  $31 = $8;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $6;
   $36 = $7;
   $37 = $8;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $41;
   _printFmt($35,$36,28406,$vararg_buffer6);
  }
 }
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(42);
 if ($44) {
  $45 = $8;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $49 = $8;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)>(0);
   if ($52) {
    $53 = $6;
    $54 = $7;
    $55 = $8;
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $8;
    $59 = ((($58)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $57;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $60;
    _printFmt($53,$54,28417,$vararg_buffer9);
   }
  }
 }
 $61 = $8;
 $62 = HEAP32[$61>>2]|0;
 switch ($62|0) {
 case 42:  {
  $64 = $6;
  $65 = $7;
  _printFmt($64,$65,28478,$vararg_buffer18);
  $66 = $8;
  $67 = ((($66)) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $12 = $68;
  while(1) {
   $69 = $12;
   $70 = ($69|0)!=(0|0);
   $71 = $6;
   $72 = $7;
   if (!($70)) {
    break;
   }
   $73 = $12;
   $74 = $9;
   $75 = $10;
   $76 = (($75) + 1)|0;
   _dumpAstXML($71,$72,$73,$74,$76,28481);
   $77 = $12;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $12 = $79;
  }
  $80 = $10;
  $81 = $11;
  HEAP32[$vararg_buffer20>>2] = $80;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $81;
  _printFmt($71,$72,28486,$vararg_buffer20);
  STACKTOP = sp;return;
  break;
 }
 case 52:  {
  $82 = $6;
  $83 = $7;
  $84 = $8;
  HEAP32[$vararg_buffer24>>2] = $84;
  _printFmt($82,$83,28495,$vararg_buffer24);
  $85 = $6;
  $86 = $7;
  $87 = $8;
  $88 = ((($87)) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $9;
  $91 = $10;
  $92 = (($91) + 1)|0;
  _dumpAstXML($85,$86,$89,$90,$92,28509);
  $93 = $6;
  $94 = $7;
  $95 = $10;
  $96 = $11;
  HEAP32[$vararg_buffer27>>2] = $95;
  $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $96;
  _printFmt($93,$94,28486,$vararg_buffer27);
  STACKTOP = sp;return;
  break;
 }
 case 45: case 44:  {
  $97 = $6;
  $98 = $7;
  $99 = $8;
  HEAP32[$vararg_buffer31>>2] = $99;
  _printFmt($97,$98,28495,$vararg_buffer31);
  $100 = $6;
  $101 = $7;
  $102 = $8;
  $103 = ((($102)) + 24|0);
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $9;
  $107 = $10;
  $108 = (($107) + 1)|0;
  _dumpAstXML($100,$101,$105,$106,$108,28514);
  $109 = $6;
  $110 = $7;
  $111 = $8;
  $112 = ((($111)) + 24|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $9;
  $115 = $10;
  $116 = (($115) + 1)|0;
  _dumpAstXML($109,$110,$113,$114,$116,28519);
  $117 = $6;
  $118 = $7;
  $119 = $8;
  $120 = ((($119)) + 24|0);
  $121 = ((($120)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $9;
  $124 = $10;
  $125 = (($124) + 1)|0;
  _dumpAstXML($117,$118,$122,$123,$125,28524);
  $126 = $6;
  $127 = $7;
  $128 = $10;
  $129 = $11;
  HEAP32[$vararg_buffer34>>2] = $128;
  $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
  HEAP32[$vararg_ptr37>>2] = $129;
  _printFmt($126,$127,28486,$vararg_buffer34);
  STACKTOP = sp;return;
  break;
 }
 case 46:  {
  $130 = $6;
  $131 = $7;
  $132 = $8;
  HEAP32[$vararg_buffer38>>2] = $132;
  _printFmt($130,$131,28495,$vararg_buffer38);
  $133 = $6;
  $134 = $7;
  $135 = $8;
  $136 = ((($135)) + 24|0);
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $9;
  $140 = $10;
  $141 = (($140) + 1)|0;
  _dumpAstXML($133,$134,$138,$139,$141,28529);
  $142 = $6;
  $143 = $7;
  $144 = $8;
  $145 = ((($144)) + 24|0);
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $9;
  $149 = $10;
  $150 = (($149) + 1)|0;
  _dumpAstXML($142,$143,$147,$148,$150,28514);
  $151 = $6;
  $152 = $7;
  $153 = $8;
  $154 = ((($153)) + 24|0);
  $155 = ((($154)) + 4|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $9;
  $158 = $10;
  $159 = (($158) + 1)|0;
  _dumpAstXML($151,$152,$156,$157,$159,28534);
  $160 = $6;
  $161 = $7;
  $162 = $8;
  $163 = ((($162)) + 24|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $9;
  $166 = $10;
  $167 = (($166) + 1)|0;
  _dumpAstXML($160,$161,$164,$165,$167,28481);
  $168 = $6;
  $169 = $7;
  $170 = $10;
  $171 = $11;
  HEAP32[$vararg_buffer41>>2] = $170;
  $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
  HEAP32[$vararg_ptr44>>2] = $171;
  _printFmt($168,$169,28486,$vararg_buffer41);
  STACKTOP = sp;return;
  break;
 }
 case 51: case 50: case 49:  {
  $172 = $8;
  $173 = ((($172)) + 24|0);
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($175|0)!=(0|0);
  $177 = $6;
  $178 = $7;
  $179 = $8;
  if ($176) {
   HEAP32[$vararg_buffer45>>2] = $179;
   _printFmt($177,$178,28495,$vararg_buffer45);
   $180 = $6;
   $181 = $7;
   $182 = $8;
   $183 = ((($182)) + 24|0);
   $184 = ((($183)) + 4|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $9;
   $187 = $186 & -2049;
   $188 = $10;
   $189 = (($188) + 1)|0;
   _dumpAstXML($180,$181,$185,$187,$189,28509);
   $190 = $6;
   $191 = $7;
   $192 = $10;
   $193 = $11;
   HEAP32[$vararg_buffer48>>2] = $192;
   $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
   HEAP32[$vararg_ptr51>>2] = $193;
   _printFmt($190,$191,28486,$vararg_buffer48);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer52>>2] = $179;
   _printFmt($177,$178,28539,$vararg_buffer52);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $194 = $6;
  $195 = $7;
  $196 = $8;
  HEAP32[$vararg_buffer55>>2] = $196;
  _printFmt($194,$195,28555,$vararg_buffer55);
  $197 = $8;
  $198 = ((($197)) + 24|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (_chainArgs_1022($199)|0);
  $13 = $200;
  while(1) {
   $201 = $13;
   $202 = ($201|0)!=(0|0);
   $203 = $6;
   $204 = $7;
   if (!($202)) {
    break;
   }
   $205 = $13;
   $206 = $9;
   $207 = $10;
   $208 = (($207) + 1)|0;
   _dumpAstXML($203,$204,$205,$206,$208,28570);
   $209 = $13;
   $210 = ((($209)) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $13 = $211;
  }
  $212 = $8;
  $213 = ((($212)) + 24|0);
  $214 = ((($213)) + 4|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $9;
  $217 = $216 & -2049;
  $218 = $10;
  $219 = (($218) + 1)|0;
  _dumpAstXML($203,$204,$215,$217,$219,28575);
  $220 = $6;
  $221 = $7;
  $222 = $10;
  $223 = $11;
  HEAP32[$vararg_buffer58>>2] = $222;
  $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
  HEAP32[$vararg_ptr61>>2] = $223;
  _printFmt($220,$221,28486,$vararg_buffer58);
  STACKTOP = sp;return;
  break;
 }
 case 30: case 29: case 41: case 28: case 27: case 26: case 18: case 17: case 20: case 19: case 22: case 21: case 24: case 25: case 23: case 15: case 16: case 12: case 11: case 10: case 14: case 13: case 9: case 8: case 7: case 6: case 4: case 5:  {
  $224 = $6;
  $225 = $7;
  $226 = $8;
  HEAP32[$vararg_buffer62>>2] = $226;
  _printFmt($224,$225,28555,$vararg_buffer62);
  $227 = $6;
  $228 = $7;
  $229 = $8;
  $230 = ((($229)) + 24|0);
  $231 = ((($230)) + 8|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $9;
  $234 = $233 & -2049;
  $235 = $10;
  $236 = (($235) + 1)|0;
  _dumpAstXML($227,$228,$232,$234,$236,28514);
  $237 = $6;
  $238 = $7;
  $239 = $8;
  $240 = ((($239)) + 24|0);
  $241 = ((($240)) + 4|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $9;
  $244 = $243 & -2049;
  $245 = $10;
  $246 = (($245) + 1)|0;
  _dumpAstXML($237,$238,$242,$244,$246,28580);
  $247 = $6;
  $248 = $7;
  $249 = $8;
  $250 = ((($249)) + 24|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $9;
  $253 = $252 & -2049;
  $254 = $10;
  $255 = (($254) + 1)|0;
  _dumpAstXML($247,$248,$251,$253,$255,28585);
  $256 = $6;
  $257 = $7;
  $258 = $10;
  $259 = $11;
  HEAP32[$vararg_buffer65>>2] = $258;
  $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
  HEAP32[$vararg_ptr68>>2] = $259;
  _printFmt($256,$257,28486,$vararg_buffer65);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $260 = $8;
  $261 = ((($260)) + 24|0);
  $262 = ((($261)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $14 = $263;
  $264 = $14;
  $265 = ($264|0)!=(0|0);
  if ($265) {
   $266 = $14;
   $267 = ((($266)) + 56|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ($268|0)!=(0|0);
   if ($269) {
    $270 = $9;
    $271 = $270 & 2048;
    $272 = ($271|0)!=(0);
    if ($272) {
     $273 = $6;
     $274 = $7;
     $275 = $8;
     HEAP32[$vararg_buffer69>>2] = $275;
     _printFmt($273,$274,28555,$vararg_buffer69);
     $276 = $6;
     $277 = $7;
     $278 = $14;
     $279 = ((($278)) + 56|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $9;
     $282 = $10;
     $283 = (($282) + 1)|0;
     _dumpAstXML($276,$277,$280,$281,$283,28529);
     $284 = $6;
     $285 = $7;
     $286 = $10;
     $287 = $11;
     HEAP32[$vararg_buffer72>>2] = $286;
     $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
     HEAP32[$vararg_ptr75>>2] = $287;
     _printFmt($284,$285,28486,$vararg_buffer72);
     STACKTOP = sp;return;
    }
   }
  }
  break;
 }
 case 1: case 67:  {
  break;
 }
 default: {
  $63 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer13>>2] = 25885;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 228;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = 28467;
  _printFmt($63,0,28431,$vararg_buffer13);
  __abort_838();
  STACKTOP = sp;return;
 }
 }
 $288 = $6;
 $289 = $7;
 $290 = $8;
 HEAP32[$vararg_buffer76>>2] = $290;
 _printFmt($288,$289,28591,$vararg_buffer76);
 STACKTOP = sp;return;
}
function _escapeJSON() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[39250]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  return (34528|0);
 }
 _memset((34528|0),0,1024)|0;
 HEAP32[(34568)>>2] = 28366;
 HEAP32[(34580)>>2] = 28369;
 HEAP32[(34564)>>2] = 28372;
 HEAP32[(34664)>>2] = 28375;
 HEAP8[39250] = 1;
 return (34528|0);
}
function _conDebug($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer40 = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1248|0);
 $vararg_buffer40 = sp + 1152|0;
 $vararg_buffer32 = sp + 1112|0;
 $vararg_buffer29 = sp + 1104|0;
 $vararg_buffer27 = sp + 1096|0;
 $vararg_buffer23 = sp + 1088|0;
 $vararg_buffer16 = sp + 1064|0;
 $vararg_buffer12 = sp + 1056|0;
 $vararg_buffer5 = sp + 1032|0;
 $vararg_buffer = sp + 1024|0;
 $24 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $29 = $7;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $13 = $31;
 $32 = $7;
 $33 = HEAP32[$32>>2]|0;
 $14 = $33;
 $34 = $8;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = $13;
  $37 = ((($36)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & 61440;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $7;
   $42 = $8;
   $43 = $9;
   $44 = $10;
   $45 = $11;
   $46 = $12;
   (_conProfile($41,$42,$43,$44,$45,$46)|0);
  }
 }
 $47 = $12;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $13;
  $50 = ((($49)) + 76|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(105);
  $53 = $12;
  $54 = ($53|0)>(0);
  $or$cond = $52 & $54;
  $55 = $13;
  if ($or$cond) {
   $56 = ((($55)) + 88|0);
   HEAP32[$56>>2] = -1;
  } else {
   $57 = ((($55)) + 76|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(111);
   $60 = $12;
   $61 = ($60|0)<(0);
   $or$cond3 = $59 & $61;
   if ($or$cond3) {
    $62 = $13;
    $63 = ((($62)) + 88|0);
    HEAP32[$63>>2] = -1;
   }
  }
  $6 = 0;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 $64 = $14;
 $65 = $11;
 $66 = (_mapDbgStatement($64,$65)|0);
 $15 = $66;
 $16 = 0;
 $17 = 0;
 $67 = $8;
 $68 = ($67|0)!=(0);
 do {
  if ($68) {
   $69 = $8;
   $70 = (_vmErrorMessage($69)|0);
   $17 = $70;
   $71 = $7;
   $72 = (_isChecked($71)|0);
   $73 = ($72|0)!=(0);
   $74 = $13;
   if ($73) {
    $75 = ((($74)) + 84|0);
    $76 = HEAP32[$75>>2]|0;
    $16 = $76;
    break;
   } else {
    $77 = ((($74)) + 80|0);
    $78 = HEAP32[$77>>2]|0;
    $16 = $78;
    break;
   }
  } else {
   $79 = $13;
   $80 = ((($79)) + 88|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(-1);
   if ($82) {
    $16 = 4;
    $17 = 28140;
    break;
   }
   $83 = $13;
   $84 = ((($83)) + 88|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $11;
   $87 = ($85|0)==($86|0);
   if ($87) {
    $16 = 4;
    $17 = 28140;
    break;
   }
   $88 = $15;
   $89 = ($88|0)!=(0|0);
   if ($89) {
    $90 = $11;
    $91 = $15;
    $92 = ((($91)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($90|0)==($93|0);
    if ($94) {
     $95 = $15;
     $96 = ((($95)) + 24|0);
     $97 = HEAP32[$96>>2]|0;
     $16 = $97;
     $98 = $16;
     $99 = $98 & 7;
     $100 = ($99|0)!=(0);
     if ($100) {
      $17 = 28146;
     }
     $101 = $16;
     $102 = $101 & 16;
     $103 = ($102|0)!=(0);
     if ($103) {
      $104 = $15;
      $105 = ((($104)) + 24|0);
      HEAP32[$105>>2] = 0;
     }
    }
   }
  }
 } while(0);
 $106 = $13;
 $107 = ((($106)) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $18 = $108;
 $109 = $13;
 $110 = ((($109)) + 8|0);
 $111 = HEAP32[$110>>2]|0;
 $19 = $111;
 $112 = HEAP32[3379]|0;
 $20 = $112;
 $113 = $16;
 $114 = $113 & 1;
 $115 = ($114|0)!=(0);
 if ($115) {
  $116 = $14;
  $117 = $11;
  $118 = (_rtLookup($116,$117,0)|0);
  $21 = $118;
  $119 = $11;
  $22 = $119;
  $120 = $21;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $122 = $21;
   $123 = ((($122)) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $22;
   $126 = (($125) - ($124))|0;
   $22 = $126;
  }
  $127 = $15;
  $128 = ($127|0)!=(0|0);
  if ($128) {
   $129 = $15;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)!=(0|0);
   if ($132) {
    $133 = $15;
    $134 = ((($133)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)>(0);
    if ($136) {
     $137 = $19;
     $138 = $18;
     $139 = $15;
     $140 = ((($139)) + 8|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $15;
     $143 = ((($142)) + 12|0);
     $144 = HEAP32[$143>>2]|0;
     HEAP32[$vararg_buffer>>2] = $141;
     $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $144;
     _printFmt($137,$138,25908,$vararg_buffer);
    }
   }
  }
  $145 = $19;
  $146 = $18;
  $147 = $17;
  $148 = $11;
  $149 = $21;
  $150 = $22;
  $151 = $14;
  $152 = $11;
  $153 = (_vmPointer_973($151,$152)|0);
  HEAP32[$vararg_buffer5>>2] = $147;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $148;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $149;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $150;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $153;
  _printFmt($145,$146,28158,$vararg_buffer5);
  $154 = $19;
  $155 = HEAP32[3314]|0;
  $156 = ($154|0)!=($155|0);
  if ($156) {
   $157 = $19;
   $158 = HEAP32[3379]|0;
   $159 = ($157|0)!=($158|0);
   if ($159) {
    $160 = $15;
    $161 = ($160|0)!=(0|0);
    if ($161) {
     $162 = $15;
     $163 = ((($162)) + 8|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)!=(0|0);
     if ($165) {
      $166 = $15;
      $167 = ((($166)) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)>(0);
      if ($169) {
       $170 = $20;
       $171 = $18;
       $172 = $15;
       $173 = ((($172)) + 8|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = $15;
       $176 = ((($175)) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       HEAP32[$vararg_buffer12>>2] = $174;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = $177;
       _printFmt($170,$171,25908,$vararg_buffer12);
      }
     }
    }
    $178 = $20;
    $179 = $18;
    $180 = $17;
    $181 = $11;
    $182 = $21;
    $183 = $22;
    $184 = $14;
    $185 = $11;
    $186 = (_vmPointer_973($184,$185)|0);
    HEAP32[$vararg_buffer16>>2] = $180;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $181;
    $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
    HEAP32[$vararg_ptr20>>2] = $182;
    $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
    HEAP32[$vararg_ptr21>>2] = $183;
    $vararg_ptr22 = ((($vararg_buffer16)) + 16|0);
    HEAP32[$vararg_ptr22>>2] = $186;
    _printFmt($178,$179,28158,$vararg_buffer16);
   }
  }
 }
 $187 = $16;
 $188 = $187 & 2;
 $189 = ($188|0)!=(0);
 if ($189) {
  $190 = $7;
  $191 = $19;
  $192 = $14;
  $193 = HEAP32[$192>>2]|0;
  $194 = $193 >>> 10;
  $195 = $194 & 255;
  _traceCalls($190,$191,1,$195,0);
 }
 L54: while(1) {
  $196 = $16;
  $197 = $196 & 4;
  $198 = ($197|0)!=(0);
  if (!($198)) {
   label = 68;
   break;
  }
  $199 = $13;
  $200 = ((($199)) + 76|0);
  $201 = HEAP32[$200>>2]|0;
  $23 = $201;
  $25 = 0;
  $202 = $20;
  $203 = $18;
  $204 = $23;
  $205 = $14;
  $206 = $11;
  $207 = (_vmPointer_973($205,$206)|0);
  HEAP32[$vararg_buffer23>>2] = $204;
  $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
  HEAP32[$vararg_ptr26>>2] = $207;
  _printFmt($202,$203,28222,$vararg_buffer23);
  $208 = $13;
  $209 = ((($208)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ($210|0)==(0|0);
  if ($211) {
   label = 44;
   break;
  }
  $212 = $13;
  $213 = ((($212)) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = (_fgets($24,1024,$214)|0);
  $216 = ($215|0)==(0|0);
  if ($216) {
   label = 44;
   break;
  }
  $222 = (_strchr($24,10)|0);
  $25 = $222;
  $223 = ($222|0)!=(0|0);
  if ($223) {
   $224 = $25;
   HEAP8[$224>>0] = 0;
  }
  $225 = HEAP8[$24>>0]|0;
  $226 = $225 << 24 >> 24;
  $227 = ($226|0)!=(0);
  if ($227) {
   $228 = HEAP8[$24>>0]|0;
   $229 = $228 << 24 >> 24;
   $23 = $229;
   $230 = ((($24)) + 1|0);
   $25 = $230;
   $231 = $23;
   $232 = $13;
   $233 = ((($232)) + 76|0);
   HEAP32[$233>>2] = $231;
  }
  $234 = $23;
  L65: do {
   switch ($234|0) {
   case 113:  {
    label = 51;
    break L54;
    break;
   }
   case 111: case 105: case 114:  {
    label = 52;
    break L54;
    break;
   }
   case 97:  {
    label = 53;
    break L54;
    break;
   }
   case 110:  {
    label = 54;
    break L54;
    break;
   }
   case 116:  {
    $255 = $7;
    $256 = $20;
    $257 = $14;
    $258 = HEAP32[$257>>2]|0;
    $259 = $258 >>> 10;
    $260 = $259 & 255;
    _traceCalls($255,$256,1,$260,0);
    break;
   }
   case 112:  {
    $261 = $20;
    $262 = $18;
    $263 = $11;
    $264 = $13;
    _textDumpAsm($261,$262,$263,$264,0);
    break;
   }
   case 115:  {
    $265 = $25;
    $266 = HEAP8[$265>>0]|0;
    $267 = $266 << 24 >> 24;
    $268 = ($267|0)==(0);
    if ($268) {
     $26 = 0;
     while(1) {
      $269 = $26;
      $270 = $9;
      $271 = ($269>>>0)<($270>>>0);
      if (!($271)) {
       break L65;
      }
      $272 = $10;
      $273 = $26;
      $274 = (($272) + ($273<<2)|0);
      $27 = $274;
      $275 = $20;
      $276 = $18;
      $277 = $26;
      $278 = $27;
      $279 = HEAP32[$278>>2]|0;
      $280 = $27;
      $281 = HEAP32[$280>>2]|0;
      $282 = $27;
      $283 = +HEAPF32[$282>>2];
      $284 = $283;
      $285 = $27;
      $286 = $285;
      $287 = $286;
      $288 = HEAP32[$287>>2]|0;
      $289 = (($286) + 4)|0;
      $290 = $289;
      $291 = HEAP32[$290>>2]|0;
      $292 = $27;
      $293 = +HEAPF64[$292>>3];
      HEAP32[$vararg_buffer32>>2] = $277;
      $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
      HEAP32[$vararg_ptr35>>2] = $279;
      $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
      HEAP32[$vararg_ptr36>>2] = $281;
      $vararg_ptr37 = ((($vararg_buffer32)) + 16|0);
      HEAPF64[$vararg_ptr37>>3] = $284;
      $vararg_ptr38 = ((($vararg_buffer32)) + 24|0);
      $294 = $vararg_ptr38;
      $295 = $294;
      HEAP32[$295>>2] = $288;
      $296 = (($294) + 4)|0;
      $297 = $296;
      HEAP32[$297>>2] = $291;
      $vararg_ptr39 = ((($vararg_buffer32)) + 32|0);
      HEAPF64[$vararg_ptr39>>3] = $293;
      _printFmt($275,$276,28304,$vararg_buffer32);
      $298 = $26;
      $299 = (($298) + 1)|0;
      $26 = $299;
     }
    }
    $300 = $14;
    $301 = $25;
    $302 = (_ccLookup($300,0,$301)|0);
    $28 = $302;
    $303 = $20;
    $304 = $18;
    $305 = $28;
    HEAP32[$vararg_buffer40>>2] = $305;
    _printFmt($303,$304,28359,$vararg_buffer40);
    $306 = $28;
    $307 = ($306|0)!=(0|0);
    if ($307) {
     $308 = $28;
     $309 = (_isVariable_1000($308)|0);
     $310 = ($309|0)!=(0);
     if ($310) {
      $311 = $28;
      $312 = (_isStatic_835($311)|0);
      $313 = ($312|0)!=(0);
      if (!($313)) {
       $314 = $20;
       $315 = $18;
       $316 = $14;
       $317 = $28;
       $318 = $10;
       _printVal($314,$315,$316,$317,$318,1024,0);
      }
     }
    }
    break;
   }
   default: {
    $235 = $20;
    $236 = $18;
    HEAP32[$vararg_buffer29>>2] = $24;
    _printFmt($235,$236,28282,$vararg_buffer29);
   }
   }
  } while(0);
 }
 if ((label|0) == 44) {
  $217 = $20;
  $218 = $18;
  _printFmt($217,$218,28238,$vararg_buffer27);
  $219 = $7;
  $220 = ((($219)) + 52|0);
  $221 = HEAP32[$220>>2]|0;
  $6 = $221;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 else if ((label|0) == 51) {
  $237 = $7;
  $238 = ((($237)) + 52|0);
  $239 = HEAP32[$238>>2]|0;
  $6 = $239;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 else if ((label|0) == 52) {
  $240 = $13;
  $241 = ((($240)) + 88|0);
  HEAP32[$241>>2] = 0;
  $242 = $15;
  $6 = $242;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 else if ((label|0) == 53) {
  $243 = $13;
  $244 = ((($243)) + 88|0);
  HEAP32[$244>>2] = -1;
  $245 = $15;
  $6 = $245;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 else if ((label|0) == 54) {
  $246 = $15;
  $247 = ($246|0)!=(0|0);
  if ($247) {
   $248 = $15;
   $249 = ((($248)) + 20|0);
   $250 = HEAP32[$249>>2]|0;
   $253 = $250;
  } else {
   $253 = 0;
  }
  $251 = $13;
  $252 = ((($251)) + 88|0);
  HEAP32[$252>>2] = $253;
  $254 = $15;
  $6 = $254;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 else if ((label|0) == 68) {
  $6 = 0;
  $319 = $6;
  STACKTOP = sp;return ($319|0);
 }
 return (0)|0;
}
function _jsonProfile($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $11;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return (0|0);
 }
 $18 = (_clock()|0);
 $12 = $18;
 $19 = $6;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $13 = $21;
 $22 = $13;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $14 = $24;
 $25 = $13;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $15 = $27;
 $28 = $11;
 $29 = ($28|0)<(0);
 $30 = $14;
 $31 = $15;
 $32 = $8;
 $33 = $12;
 $34 = $6;
 $35 = ((($34)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 if ($29) {
  $37 = $8;
  $38 = ($37>>>0)>(0);
  $39 = $38 ? 28123 : 39249;
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $36;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = -1;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $39;
  _printFmt($30,$31,28125,$vararg_buffer);
  STACKTOP = sp;return (0|0);
 } else {
  $40 = $11;
  HEAP32[$vararg_buffer5>>2] = $32;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $33;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $36;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $40;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = 28123;
  _printFmt($30,$31,28125,$vararg_buffer5);
  STACKTOP = sp;return (0|0);
 }
 return (0)|0;
}
function _jsonPreProfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr20 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $4 = $14;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $4;
 HEAP32[$vararg_buffer>>2] = $20;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 28020;
 _printFmt($18,$19,27724,$vararg_buffer);
 $21 = $3;
 $22 = $5;
 $23 = $4;
 $24 = (($23) + 1)|0;
 HEAP32[$vararg_buffer2>>2] = $24;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = 28038;
 _printFmt($21,$22,28028,$vararg_buffer2);
 $25 = $3;
 $26 = $5;
 HEAP32[$vararg_buffer6>>2] = 28058;
 _printFmt($25,$26,28051,$vararg_buffer6);
 $27 = $3;
 $28 = $5;
 HEAP32[$vararg_buffer9>>2] = 28070;
 _printFmt($27,$28,28051,$vararg_buffer9);
 $29 = $3;
 $30 = $5;
 HEAP32[$vararg_buffer12>>2] = 28087;
 _printFmt($29,$30,28082,$vararg_buffer12);
 $31 = $3;
 $32 = $5;
 _printFmt($31,$32,28098,$vararg_buffer15);
 $33 = $3;
 $34 = $5;
 $35 = $4;
 $36 = (($35) + 1)|0;
 HEAP32[$vararg_buffer17>>2] = $36;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = 28114;
 _printFmt($33,$34,28101,$vararg_buffer17);
 STACKTOP = sp;return;
}
function _conProfile($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr19 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $24 = $7;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $7;
 $28 = HEAP32[$27>>2]|0;
 $14 = $28;
 $29 = $13;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $15 = $31;
 $32 = $13;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $16 = $34;
 $17 = 0;
 $35 = $8;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $7;
  $38 = ((($37)) + 52|0);
  $39 = HEAP32[$38>>2]|0;
  $6 = $39;
  $177 = $6;
  STACKTOP = sp;return ($177|0);
 }
 $40 = $13;
 $41 = ((($40)) + 32|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 8704;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $14;
  $46 = $11;
  $47 = (_mapDbgStatement($45,$46)|0);
  $17 = $47;
 }
 $48 = $12;
 $49 = ($48|0)!=(0);
 $50 = $13;
 $51 = ((($50)) + 32|0);
 $52 = HEAP32[$51>>2]|0;
 if ($49) {
  $53 = $52 & 4096;
  $54 = ($53|0)!=(0);
  do {
   if ($54) {
    $55 = $13;
    $56 = ((($55)) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 & 32768;
    $59 = ($58|0)!=(0);
    if ($59) {
     $60 = (_clock()|0);
     $61 = (+($60|0));
     $62 = $61 * 1000.0;
     $63 = $62 / 1.0E+6;
     $18 = $63;
     $64 = $16;
     $65 = $15;
     $66 = $18;
     HEAPF64[$vararg_buffer>>3] = $66;
     _printFmt($64,$65,27888,$vararg_buffer);
    }
    $67 = $12;
    $68 = ($67|0)>(0);
    $69 = $16;
    $70 = $15;
    $71 = $9;
    if ($68) {
     $72 = $14;
     $73 = $12;
     $74 = (_rtLookup($72,$73,0)|0);
     HEAP32[$vararg_buffer2>>2] = $71;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $74;
     _printFmt($69,$70,27897,$vararg_buffer2);
     break;
    } else {
     HEAP32[$vararg_buffer6>>2] = $71;
     _printFmt($69,$70,27907,$vararg_buffer6);
     break;
    }
   }
  } while(0);
  $75 = $17;
  $6 = $75;
  $177 = $6;
  STACKTOP = sp;return ($177|0);
 }
 $76 = $52 & 8192;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $13;
  $79 = ((($78)) + 56|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0);
  $82 = $17;
  $83 = ($82|0)!=(0|0);
  $or$cond = $81 & $83;
  if ($or$cond) {
   $84 = $17;
   $85 = ((($84)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $11;
   $88 = ($86|0)==($87|0);
   if ($88) {
    $89 = $16;
    $90 = $15;
    $91 = $17;
    $92 = $13;
    _textDumpDbg($89,$90,$91,$92,0);
   }
  }
  $93 = $13;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 16384;
  $97 = ($96|0)!=(0);
  if ($97) {
   $19 = 0;
   $98 = $16;
   $99 = $15;
   $100 = $9;
   HEAP32[$vararg_buffer9>>2] = $100;
   _printFmt($98,$99,27921,$vararg_buffer9);
   $101 = $9;
   $102 = ($101>>>0)>(25);
   if ($102) {
    $103 = $16;
    $104 = $15;
    _printFmt($103,$104,27939,$vararg_buffer12);
    $105 = $9;
    $106 = (($105) - 25)|0;
    $19 = $106;
   }
   while(1) {
    $107 = $19;
    $108 = $9;
    $109 = ($107>>>0)<($108>>>0);
    if (!($109)) {
     break;
    }
    $110 = $19;
    $111 = ($110>>>0)>(0);
    if ($111) {
     $112 = $16;
     $113 = $15;
     _printFmt($112,$113,27944,$vararg_buffer14);
    }
    $20 = 0;
    $114 = $10;
    $115 = $9;
    $116 = $19;
    $117 = (($115) - ($116))|0;
    $118 = (($117) - 1)|0;
    $119 = (($114) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $21 = $120;
    $121 = $21;
    $122 = ($121>>>0)>(0);
    if ($122) {
     $123 = $21;
     $124 = $14;
     $125 = ((($124)) + 24|0);
     $126 = ((($125)) + 16|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($123>>>0)<=($127>>>0);
     if ($128) {
      $129 = $14;
      $130 = $21;
      $131 = (_rtLookup($129,$130,0)|0);
      $20 = $131;
      $132 = $20;
      $133 = ($132|0)!=(0|0);
      if ($133) {
       $134 = $20;
       $135 = (_isFunction_839($134)|0);
       $136 = ($135|0)!=(0);
       if (!($136)) {
        $137 = $20;
        $138 = ((($137)) + 20|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $21;
        $141 = ($139|0)!=($140|0);
        if ($141) {
         $20 = 0;
        }
       }
      }
     }
    }
    $142 = $20;
    $143 = ($142|0)!=(0|0);
    if ($143) {
     $144 = $21;
     $145 = $20;
     $146 = ((($145)) + 20|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($144) - ($147))|0;
     $22 = $148;
     $149 = $16;
     $150 = $15;
     $151 = $20;
     $152 = $22;
     HEAP32[$vararg_buffer16>>2] = $151;
     $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
     HEAP32[$vararg_ptr19>>2] = $152;
     _printFmt($149,$150,27947,$vararg_buffer16);
    } else {
     $153 = $16;
     $154 = $15;
     $155 = $21;
     HEAP32[$vararg_buffer20>>2] = $155;
     _printFmt($153,$154,27958,$vararg_buffer20);
    }
    $156 = $19;
    $157 = (($156) + 1)|0;
    $19 = $157;
   }
   $158 = $16;
   $159 = $15;
   _printFmt($158,$159,25916,$vararg_buffer23);
  }
  $160 = $13;
  $161 = ((($160)) + 32|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $162 & 32768;
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = (_clock()|0);
   $166 = (+($165|0));
   $167 = $166 * 1000.0;
   $168 = $167 / 1.0E+6;
   $23 = $168;
   $169 = $16;
   $170 = $15;
   $171 = $23;
   HEAPF64[$vararg_buffer25>>3] = $171;
   _printFmt($169,$170,27961,$vararg_buffer25);
  }
  $172 = $16;
  $173 = $15;
  $174 = $11;
  $175 = $13;
  _textDumpAsm($172,$173,$174,$175,0);
 }
 $176 = $17;
 $6 = $176;
 $177 = $6;
 STACKTOP = sp;return ($177|0);
}
function _jsonPostProfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer44 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer54 = 0, $vararg_buffer59 = 0, $vararg_buffer64 = 0, $vararg_buffer69 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer87 = 0, $vararg_buffer92 = 0, $vararg_buffer97 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr4 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0;
 var $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, $vararg_ptr90 = 0, $vararg_ptr91 = 0, $vararg_ptr95 = 0, $vararg_ptr96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $vararg_buffer97 = sp + 296|0;
 $vararg_buffer92 = sp + 280|0;
 $vararg_buffer87 = sp + 264|0;
 $vararg_buffer82 = sp + 248|0;
 $vararg_buffer79 = sp + 240|0;
 $vararg_buffer74 = sp + 224|0;
 $vararg_buffer69 = sp + 208|0;
 $vararg_buffer64 = sp + 192|0;
 $vararg_buffer59 = sp + 176|0;
 $vararg_buffer54 = sp + 160|0;
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $18;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $3 = $21;
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $6 = 0;
 $28 = $1;
 $29 = ((($28)) + 12|0);
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $7 = $31;
 $8 = 0;
 $32 = $1;
 $33 = ((($32)) + 28|0);
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $9 = $35;
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $10 = $38;
 $39 = $3;
 $40 = $5;
 $41 = $4;
 $42 = (($41) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $42;
 _printFmt($39,$40,27559,$vararg_buffer);
 $43 = $3;
 $44 = $5;
 $45 = $4;
 $46 = (($45) + 1)|0;
 HEAP32[$vararg_buffer1>>2] = $46;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 27564;
 _printFmt($43,$44,27067,$vararg_buffer1);
 $11 = 0;
 while(1) {
  $47 = $11;
  $48 = $7;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $10;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $12 = $52;
  $53 = $10;
  $54 = ((($53)) + 48|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)==(0);
  $62 = ($60|0)==(0);
  $63 = $61 & $62;
  if (!($63)) {
   $64 = $6;
   $65 = (($64) + 1)|0;
   $6 = $65;
   $66 = $12;
   $67 = ($66|0)==(0|0);
   if ($67) {
    $68 = $1;
    $69 = HEAP32[$68>>2]|0;
    $70 = $10;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (_rtLookup($69,$72,0)|0);
    $12 = $73;
   }
   $74 = $6;
   $75 = ($74>>>0)>(1);
   if ($75) {
    $76 = $3;
    $77 = $5;
    $78 = $4;
    $79 = (($78) + 1)|0;
    HEAP32[$vararg_buffer5>>2] = $79;
    _printFmt($76,$77,27574,$vararg_buffer5);
   }
   $80 = $3;
   $81 = $5;
   $82 = $12;
   $83 = $4;
   $84 = (($83) + 2)|0;
   _jsonDumpSym($80,$81,$82,0,$84);
   $85 = $3;
   $86 = $5;
   $87 = $4;
   $88 = (($87) + 2)|0;
   $89 = $10;
   $90 = ((($89)) + 40|0);
   $91 = $90;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + 4)|0;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $88;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 27596;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   $97 = $vararg_ptr12;
   $98 = $97;
   HEAP32[$98>>2] = $93;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = $96;
   _printFmt($85,$86,27582,$vararg_buffer8);
   $101 = $3;
   $102 = $5;
   $103 = $4;
   $104 = (($103) + 2)|0;
   $105 = $10;
   $106 = ((($105)) + 32|0);
   $107 = $106;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $104;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 27601;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   $113 = $vararg_ptr17;
   $114 = $113;
   HEAP32[$114>>2] = $109;
   $115 = (($113) + 4)|0;
   $116 = $115;
   HEAP32[$116>>2] = $112;
   _printFmt($101,$102,27582,$vararg_buffer13);
   $117 = $3;
   $118 = $5;
   $119 = $4;
   $120 = (($119) + 2)|0;
   $121 = $10;
   $122 = ((($121)) + 48|0);
   $123 = $122;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = (($123) + 4)|0;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $120;
   $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
   HEAP32[$vararg_ptr21>>2] = 27607;
   $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
   $129 = $vararg_ptr22;
   $130 = $129;
   HEAP32[$130>>2] = $125;
   $131 = (($129) + 4)|0;
   $132 = $131;
   HEAP32[$132>>2] = $128;
   _printFmt($117,$118,27582,$vararg_buffer18);
   $133 = $3;
   $134 = $5;
   $135 = $4;
   $136 = (($135) + 2)|0;
   $137 = $10;
   $138 = ((($137)) + 56|0);
   $139 = $138;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = $10;
   $146 = ((($145)) + 48|0);
   $147 = $146;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (_i64Subtract(($141|0),($144|0),($149|0),($152|0))|0);
   $154 = (getTempRet0() | 0);
   HEAP32[$vararg_buffer23>>2] = $136;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 27612;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   $155 = $vararg_ptr27;
   $156 = $155;
   HEAP32[$156>>2] = $153;
   $157 = (($155) + 4)|0;
   $158 = $157;
   HEAP32[$158>>2] = $154;
   _printFmt($133,$134,27582,$vararg_buffer23);
  }
  $159 = $11;
  $160 = (($159) + 1)|0;
  $11 = $160;
  $161 = $10;
  $162 = ((($161)) + 64|0);
  $10 = $162;
 }
 $163 = $3;
 $164 = $5;
 $165 = $4;
 $166 = (($165) + 1)|0;
 HEAP32[$vararg_buffer28>>2] = $166;
 _printFmt($163,$164,27089,$vararg_buffer28);
 $167 = $3;
 $168 = $5;
 $169 = $4;
 $170 = (($169) + 1)|0;
 HEAP32[$vararg_buffer31>>2] = $170;
 $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
 HEAP32[$vararg_ptr34>>2] = 27618;
 _printFmt($167,$168,27067,$vararg_buffer31);
 $171 = $1;
 $172 = ((($171)) + 28|0);
 $173 = HEAP32[$172>>2]|0;
 $10 = $173;
 $13 = 0;
 while(1) {
  $174 = $13;
  $175 = $9;
  $176 = ($174>>>0)<($175>>>0);
  if (!($176)) {
   break;
  }
  $14 = 0;
  $177 = $10;
  $178 = ((($177)) + 4|0);
  $179 = HEAP32[$178>>2]|0;
  $15 = $179;
  $180 = $10;
  $181 = ((($180)) + 48|0);
  $182 = $181;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($182) + 4)|0;
  $186 = $185;
  $187 = HEAP32[$186>>2]|0;
  $188 = ($184|0)==(0);
  $189 = ($187|0)==(0);
  $190 = $188 & $189;
  if (!($190)) {
   $191 = $8;
   $192 = (($191) + 1)|0;
   $8 = $192;
   $193 = $15;
   $194 = ($193|0)==(0|0);
   if ($194) {
    $195 = $1;
    $196 = HEAP32[$195>>2]|0;
    $197 = $10;
    $198 = ((($197)) + 16|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (_rtLookup($196,$199,0)|0);
    $15 = $200;
   }
   $201 = $15;
   $202 = ($201|0)!=(0|0);
   if ($202) {
    $203 = $10;
    $204 = ((($203)) + 16|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $15;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($205) - ($208))|0;
    $14 = $209;
   }
   $210 = $8;
   $211 = ($210>>>0)>(1);
   if ($211) {
    $212 = $3;
    $213 = $5;
    $214 = $4;
    $215 = (($214) + 1)|0;
    HEAP32[$vararg_buffer35>>2] = $215;
    _printFmt($212,$213,27574,$vararg_buffer35);
   }
   $216 = $3;
   $217 = $5;
   $218 = $4;
   $219 = (($218) + 2)|0;
   $220 = $15;
   $221 = $14;
   HEAP32[$vararg_buffer38>>2] = $219;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = 39249;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $220;
   $vararg_ptr43 = ((($vararg_buffer38)) + 12|0);
   HEAP32[$vararg_ptr43>>2] = $221;
   _printFmt($216,$217,27629,$vararg_buffer38);
   $222 = $3;
   $223 = $5;
   $224 = $4;
   $225 = (($224) + 2)|0;
   $226 = $10;
   $227 = ((($226)) + 16|0);
   $228 = HEAP32[$227>>2]|0;
   HEAP32[$vararg_buffer44>>2] = $225;
   $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
   HEAP32[$vararg_ptr47>>2] = 27647;
   $vararg_ptr48 = ((($vararg_buffer44)) + 8|0);
   HEAP32[$vararg_ptr48>>2] = $228;
   _printFmt($222,$223,27582,$vararg_buffer44);
   $229 = $3;
   $230 = $5;
   $231 = $4;
   $232 = (($231) + 2)|0;
   $233 = $10;
   $234 = ((($233)) + 40|0);
   $235 = $234;
   $236 = $235;
   $237 = HEAP32[$236>>2]|0;
   $238 = (($235) + 4)|0;
   $239 = $238;
   $240 = HEAP32[$239>>2]|0;
   HEAP32[$vararg_buffer49>>2] = $232;
   $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
   HEAP32[$vararg_ptr52>>2] = 27596;
   $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
   $241 = $vararg_ptr53;
   $242 = $241;
   HEAP32[$242>>2] = $237;
   $243 = (($241) + 4)|0;
   $244 = $243;
   HEAP32[$244>>2] = $240;
   _printFmt($229,$230,27582,$vararg_buffer49);
   $245 = $3;
   $246 = $5;
   $247 = $4;
   $248 = (($247) + 2)|0;
   $249 = $10;
   $250 = ((($249)) + 32|0);
   $251 = $250;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = (($251) + 4)|0;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   HEAP32[$vararg_buffer54>>2] = $248;
   $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
   HEAP32[$vararg_ptr57>>2] = 27601;
   $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
   $257 = $vararg_ptr58;
   $258 = $257;
   HEAP32[$258>>2] = $253;
   $259 = (($257) + 4)|0;
   $260 = $259;
   HEAP32[$260>>2] = $256;
   _printFmt($245,$246,27582,$vararg_buffer54);
   $261 = $3;
   $262 = $5;
   $263 = $4;
   $264 = (($263) + 2)|0;
   $265 = $10;
   $266 = ((($265)) + 48|0);
   $267 = $266;
   $268 = $267;
   $269 = HEAP32[$268>>2]|0;
   $270 = (($267) + 4)|0;
   $271 = $270;
   $272 = HEAP32[$271>>2]|0;
   HEAP32[$vararg_buffer59>>2] = $264;
   $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
   HEAP32[$vararg_ptr62>>2] = 27607;
   $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
   $273 = $vararg_ptr63;
   $274 = $273;
   HEAP32[$274>>2] = $269;
   $275 = (($273) + 4)|0;
   $276 = $275;
   HEAP32[$276>>2] = $272;
   _printFmt($261,$262,27582,$vararg_buffer59);
   $277 = $3;
   $278 = $5;
   $279 = $4;
   $280 = (($279) + 2)|0;
   $281 = $10;
   $282 = ((($281)) + 56|0);
   $283 = $282;
   $284 = $283;
   $285 = HEAP32[$284>>2]|0;
   $286 = (($283) + 4)|0;
   $287 = $286;
   $288 = HEAP32[$287>>2]|0;
   $289 = $10;
   $290 = ((($289)) + 48|0);
   $291 = $290;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = (_i64Subtract(($285|0),($288|0),($293|0),($296|0))|0);
   $298 = (getTempRet0() | 0);
   HEAP32[$vararg_buffer64>>2] = $280;
   $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
   HEAP32[$vararg_ptr67>>2] = 27612;
   $vararg_ptr68 = ((($vararg_buffer64)) + 8|0);
   $299 = $vararg_ptr68;
   $300 = $299;
   HEAP32[$300>>2] = $297;
   $301 = (($299) + 4)|0;
   $302 = $301;
   HEAP32[$302>>2] = $298;
   _printFmt($277,$278,27582,$vararg_buffer64);
   $303 = $10;
   $304 = ((($303)) + 8|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($305|0)!=(0|0);
   if ($306) {
    $307 = $10;
    $308 = ((($307)) + 12|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = ($309|0)>(0);
    if ($310) {
     $311 = $3;
     $312 = $5;
     $313 = $4;
     $314 = (($313) + 2)|0;
     $315 = $10;
     $316 = ((($315)) + 8|0);
     $317 = HEAP32[$316>>2]|0;
     HEAP32[$vararg_buffer69>>2] = $314;
     $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
     HEAP32[$vararg_ptr72>>2] = 27668;
     $vararg_ptr73 = ((($vararg_buffer69)) + 8|0);
     HEAP32[$vararg_ptr73>>2] = $317;
     _printFmt($311,$312,27652,$vararg_buffer69);
     $318 = $3;
     $319 = $5;
     $320 = $4;
     $321 = (($320) + 2)|0;
     $322 = $10;
     $323 = ((($322)) + 12|0);
     $324 = HEAP32[$323>>2]|0;
     HEAP32[$vararg_buffer74>>2] = $321;
     $vararg_ptr77 = ((($vararg_buffer74)) + 4|0);
     HEAP32[$vararg_ptr77>>2] = 27673;
     $vararg_ptr78 = ((($vararg_buffer74)) + 8|0);
     HEAP32[$vararg_ptr78>>2] = $324;
     _printFmt($318,$319,27582,$vararg_buffer74);
    }
   }
  }
  $325 = $13;
  $326 = (($325) + 1)|0;
  $13 = $326;
  $327 = $10;
  $328 = ((($327)) + 64|0);
  $10 = $328;
 }
 $329 = $3;
 $330 = $5;
 $331 = $4;
 $332 = (($331) + 1)|0;
 HEAP32[$vararg_buffer79>>2] = $332;
 _printFmt($329,$330,27089,$vararg_buffer79);
 $333 = $3;
 $334 = $5;
 $335 = $4;
 $336 = (($335) + 1)|0;
 HEAP32[$vararg_buffer82>>2] = $336;
 $vararg_ptr85 = ((($vararg_buffer82)) + 4|0);
 HEAP32[$vararg_ptr85>>2] = 27678;
 $vararg_ptr86 = ((($vararg_buffer82)) + 8|0);
 HEAP32[$vararg_ptr86>>2] = 1000000;
 _printFmt($333,$334,27582,$vararg_buffer82);
 $337 = $3;
 $338 = $5;
 $339 = $4;
 $340 = (($339) + 1)|0;
 $341 = $1;
 $342 = ((($341)) + 12|0);
 $343 = ((($342)) + 12|0);
 $344 = HEAP32[$343>>2]|0;
 HEAP32[$vararg_buffer87>>2] = $340;
 $vararg_ptr90 = ((($vararg_buffer87)) + 4|0);
 HEAP32[$vararg_ptr90>>2] = 27690;
 $vararg_ptr91 = ((($vararg_buffer87)) + 8|0);
 HEAP32[$vararg_ptr91>>2] = $344;
 _printFmt($337,$338,27582,$vararg_buffer87);
 $345 = $3;
 $346 = $5;
 $347 = $4;
 $348 = (($347) + 1)|0;
 $349 = $1;
 $350 = ((($349)) + 28|0);
 $351 = ((($350)) + 12|0);
 $352 = HEAP32[$351>>2]|0;
 HEAP32[$vararg_buffer92>>2] = $348;
 $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
 HEAP32[$vararg_ptr95>>2] = 27704;
 $vararg_ptr96 = ((($vararg_buffer92)) + 8|0);
 HEAP32[$vararg_ptr96>>2] = $352;
 _printFmt($345,$346,27582,$vararg_buffer92);
 $353 = $3;
 $354 = $5;
 $355 = $4;
 HEAP32[$vararg_buffer97>>2] = $355;
 _printFmt($353,$354,27719,$vararg_buffer97);
 STACKTOP = sp;return;
}
function _textPostProfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer19 = 0, $vararg_buffer32 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0;
 var $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 296|0;
 $1 = $0;
 $25 = $1;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $2 = $27;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $3 = $30;
 $31 = $1;
 $32 = HEAP32[$31>>2]|0;
 $4 = $32;
 $33 = $1;
 $34 = ((($33)) + 64|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $1;
  $38 = ((($37)) + 64|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39;
 } else {
  $40 = 26370;
 }
 $5 = $40;
 $41 = $1;
 $42 = ((($41)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 240;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $3;
  $47 = $2;
  $48 = $5;
  HEAP32[$vararg_buffer>>2] = $48;
  _printFmt($46,$47,27160,$vararg_buffer);
  $49 = $3;
  $50 = $2;
  $51 = $4;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $1;
  _printFields($49,$50,$53,$54);
 }
 $55 = $1;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 & 3;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $4;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $7 = $62;
  $63 = $7;
  $64 = ($63|0)==(0|0);
  if ($64) {
   dest=$6; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $65 = $1;
   $66 = ((($6)) + 4|0);
   HEAP32[$66>>2] = $65;
   $67 = $4;
   HEAP32[$6>>2] = $67;
   $7 = $6;
  }
  $68 = $3;
  $69 = $2;
  $70 = $5;
  HEAP32[$vararg_buffer4>>2] = $70;
  _printFmt($68,$69,27173,$vararg_buffer4);
  $71 = $7;
  $72 = $4;
  $73 = ((($72)) + 144|0);
  $74 = $4;
  $75 = ((($74)) + 140|0);
  $76 = HEAP32[$75>>2]|0;
  _textDumpMem($71,$73,$76,27191);
  $77 = $7;
  $78 = $4;
  $79 = ((($78)) + 144|0);
  $80 = $4;
  $81 = ((($80)) + 24|0);
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 4)|0;
  _textDumpMem($77,$79,$84,27195);
  $85 = $7;
  $86 = $4;
  $87 = ((($86)) + 132|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  $90 = ((($89)) + 136|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $4;
  $93 = ((($92)) + 132|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $91;
  $96 = $94;
  $97 = (($95) - ($96))|0;
  _textDumpMem($85,$88,$97,27200);
  $98 = $7;
  $99 = $4;
  $100 = ((($99)) + 136|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $4;
  $103 = ((($102)) + 24|0);
  $104 = ((($103)) + 32|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (0 - ($105))|0;
  $107 = (($101) + ($106)|0);
  $108 = $4;
  $109 = ((($108)) + 24|0);
  $110 = ((($109)) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  _textDumpMem($98,$107,$111,27205);
  $112 = $3;
  $113 = $2;
  $114 = $5;
  HEAP32[$vararg_buffer7>>2] = $114;
  _printFmt($112,$113,27211,$vararg_buffer7);
  $115 = $7;
  $116 = $4;
  $117 = ((($116)) + 144|0);
  $118 = $4;
  $119 = ((($118)) + 24|0);
  $120 = ((($119)) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  _textDumpMem($115,$117,$121,27228);
  $122 = $7;
  $123 = $4;
  $124 = ((($123)) + 144|0);
  $125 = $4;
  $126 = ((($125)) + 24|0);
  $127 = ((($126)) + 24|0);
  $128 = HEAP32[$127>>2]|0;
  _textDumpMem($122,$124,$128,27233);
  $129 = $7;
  $130 = $4;
  $131 = ((($130)) + 144|0);
  $132 = $4;
  $133 = ((($132)) + 24|0);
  $134 = ((($133)) + 28|0);
  $135 = HEAP32[$134>>2]|0;
  _textDumpMem($129,$131,$135,27238);
  $136 = $1;
  $137 = ((($136)) + 32|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 & 2;
  $140 = ($139|0)!=(0);
  if ($140) {
   $141 = $3;
   $142 = $2;
   $143 = $5;
   HEAP32[$vararg_buffer10>>2] = $143;
   _printFmt($141,$142,27243,$vararg_buffer10);
   $144 = $4;
   (_rtAlloc($144,0,0,76)|0);
  }
 }
 $145 = $4;
 $146 = ((($145)) + 20|0);
 $147 = HEAP32[$146>>2]|0;
 $8 = $147;
 $148 = $8;
 $149 = ($148|0)==(0|0);
 if ($149) {
  STACKTOP = sp;return;
 }
 $150 = $8;
 $151 = ((($150)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)==(0|0);
 if ($153) {
  STACKTOP = sp;return;
 }
 $154 = $8;
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $1;
 $158 = ($156|0)!=($157|0);
 if ($158) {
  $159 = $1;
  $160 = $8;
  $161 = ((($160)) + 4|0);
  HEAP32[$161>>2] = $159;
 }
 $162 = $1;
 $163 = ((($162)) + 32|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & 1792;
 $166 = ($165|0)!=(0);
 if (!($166)) {
  STACKTOP = sp;return;
 }
 $167 = $1;
 $168 = ((($167)) + 32|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $169 & 1024;
 $9 = $170;
 $171 = $1;
 $172 = ((($171)) + 32|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $173 & 256;
 $175 = ($174|0)!=(0);
 L26: do {
  if ($175) {
   $10 = 0;
   $176 = $8;
   $177 = ((($176)) + 12|0);
   $178 = ((($177)) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $11 = $179;
   $180 = $8;
   $181 = ((($180)) + 12|0);
   $182 = HEAP32[$181>>2]|0;
   $12 = $182;
   $13 = 0;
   while(1) {
    $183 = $13;
    $184 = $11;
    $185 = ($183>>>0)<($184>>>0);
    if (!($185)) {
     break;
    }
    $186 = $12;
    $187 = ((($186)) + 48|0);
    $188 = $187;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)>(0);
    $195 = ($190>>>0)>(0);
    $196 = ($193|0)==(0);
    $197 = $196 & $195;
    $198 = $194 | $197;
    $199 = $198&1;
    $200 = $10;
    $201 = (($200) + ($199))|0;
    $10 = $201;
    $202 = $13;
    $203 = (($202) + 1)|0;
    $13 = $203;
    $204 = $12;
    $205 = ((($204)) + 64|0);
    $12 = $205;
   }
   $206 = $3;
   $207 = $2;
   $208 = $5;
   $209 = $10;
   $210 = $11;
   $211 = $10;
   $212 = (+($211>>>0));
   $213 = $212 * 100.0;
   $214 = $11;
   $215 = ($214|0)!=(0);
   $216 = $11;
   $217 = $215 ? $216 : 1;
   $218 = (+($217>>>0));
   $219 = $213 / $218;
   HEAP32[$vararg_buffer13>>2] = $208;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $209;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $210;
   $vararg_ptr18 = ((($vararg_buffer13)) + 16|0);
   HEAPF64[$vararg_ptr18>>3] = $219;
   _printFmt($206,$207,27260,$vararg_buffer13);
   $14 = 0;
   while(1) {
    $220 = $14;
    $221 = $11;
    $222 = ($220>>>0)<($221>>>0);
    if (!($222)) {
     break L26;
    }
    $223 = $8;
    $224 = ((($223)) + 12|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $14;
    $227 = (($225) + ($226<<6)|0);
    $15 = $227;
    $228 = $15;
    $229 = ((($228)) + 48|0);
    $230 = $229;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = (($230) + 4)|0;
    $234 = $233;
    $235 = HEAP32[$234>>2]|0;
    $236 = ($232|0)!=(0);
    $237 = ($235|0)!=(0);
    $238 = $236 | $237;
    $239 = $9;
    $240 = ($239|0)!=(0);
    $or$cond = $238 | $240;
    if ($or$cond) {
     $241 = $15;
     $242 = ((($241)) + 4|0);
     $243 = HEAP32[$242>>2]|0;
     $16 = $243;
     $244 = $16;
     $245 = ($244|0)==(0|0);
     if ($245) {
      $246 = $4;
      $247 = $15;
      $248 = ((($247)) + 16|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (_rtLookup($246,$249,0)|0);
      $16 = $250;
     }
     $251 = $3;
     $252 = $2;
     $253 = $15;
     $254 = ((($253)) + 8|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $15;
     $257 = ((($256)) + 12|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $15;
     $260 = ((($259)) + 16|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $15;
     $263 = ((($262)) + 20|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $15;
     $266 = ((($265)) + 48|0);
     $267 = $266;
     $268 = $267;
     $269 = HEAP32[$268>>2]|0;
     $270 = (($267) + 4)|0;
     $271 = $270;
     $272 = HEAP32[$271>>2]|0;
     $273 = $15;
     $274 = ((($273)) + 56|0);
     $275 = $274;
     $276 = $275;
     $277 = HEAP32[$276>>2]|0;
     $278 = (($275) + 4)|0;
     $279 = $278;
     $280 = HEAP32[$279>>2]|0;
     $281 = $15;
     $282 = ((($281)) + 48|0);
     $283 = $282;
     $284 = $283;
     $285 = HEAP32[$284>>2]|0;
     $286 = (($283) + 4)|0;
     $287 = $286;
     $288 = HEAP32[$287>>2]|0;
     $289 = (_i64Subtract(($277|0),($280|0),($285|0),($288|0))|0);
     $290 = (getTempRet0() | 0);
     $291 = $15;
     $292 = ((($291)) + 32|0);
     $293 = $292;
     $294 = $293;
     $295 = HEAP32[$294>>2]|0;
     $296 = (($293) + 4)|0;
     $297 = $296;
     $298 = HEAP32[$297>>2]|0;
     $299 = $15;
     $300 = ((($299)) + 32|0);
     $301 = $300;
     $302 = $301;
     $303 = HEAP32[$302>>2]|0;
     $304 = (($301) + 4)|0;
     $305 = $304;
     $306 = HEAP32[$305>>2]|0;
     $307 = $15;
     $308 = ((($307)) + 40|0);
     $309 = $308;
     $310 = $309;
     $311 = HEAP32[$310>>2]|0;
     $312 = (($309) + 4)|0;
     $313 = $312;
     $314 = HEAP32[$313>>2]|0;
     $315 = (_i64Subtract(($303|0),($306|0),($311|0),($314|0))|0);
     $316 = (getTempRet0() | 0);
     $317 = (_i64Subtract(0,0,($315|0),($316|0))|0);
     $318 = (getTempRet0() | 0);
     $319 = $15;
     $320 = ((($319)) + 32|0);
     $321 = $320;
     $322 = $321;
     $323 = HEAP32[$322>>2]|0;
     $324 = (($321) + 4)|0;
     $325 = $324;
     $326 = HEAP32[$325>>2]|0;
     $327 = (+($323>>>0)) + (4294967296.0*(+($326|0)));
     $328 = $327 / 1000.0;
     $329 = $15;
     $330 = ((($329)) + 32|0);
     $331 = $330;
     $332 = $331;
     $333 = HEAP32[$332>>2]|0;
     $334 = (($331) + 4)|0;
     $335 = $334;
     $336 = HEAP32[$335>>2]|0;
     $337 = $15;
     $338 = ((($337)) + 40|0);
     $339 = $338;
     $340 = $339;
     $341 = HEAP32[$340>>2]|0;
     $342 = (($339) + 4)|0;
     $343 = $342;
     $344 = HEAP32[$343>>2]|0;
     $345 = (_i64Subtract(($333|0),($336|0),($341|0),($344|0))|0);
     $346 = (getTempRet0() | 0);
     $347 = (_i64Subtract(0,0,($345|0),($346|0))|0);
     $348 = (getTempRet0() | 0);
     $349 = (+($347>>>0)) + (4294967296.0*(+($348|0)));
     $350 = $349 / 1000.0;
     $351 = $16;
     HEAP32[$vararg_buffer19>>2] = $255;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $258;
     $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
     HEAP32[$vararg_ptr23>>2] = $261;
     $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
     HEAP32[$vararg_ptr24>>2] = $264;
     $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
     $352 = $vararg_ptr25;
     $353 = $352;
     HEAP32[$353>>2] = $269;
     $354 = (($352) + 4)|0;
     $355 = $354;
     HEAP32[$355>>2] = $272;
     $vararg_ptr26 = ((($vararg_buffer19)) + 24|0);
     $356 = $vararg_ptr26;
     $357 = $356;
     HEAP32[$357>>2] = $289;
     $358 = (($356) + 4)|0;
     $359 = $358;
     HEAP32[$359>>2] = $290;
     $vararg_ptr27 = ((($vararg_buffer19)) + 32|0);
     $360 = $vararg_ptr27;
     $361 = $360;
     HEAP32[$361>>2] = $295;
     $362 = (($360) + 4)|0;
     $363 = $362;
     HEAP32[$363>>2] = $298;
     $vararg_ptr28 = ((($vararg_buffer19)) + 40|0);
     $364 = $vararg_ptr28;
     $365 = $364;
     HEAP32[$365>>2] = $317;
     $366 = (($364) + 4)|0;
     $367 = $366;
     HEAP32[$367>>2] = $318;
     $vararg_ptr29 = ((($vararg_buffer19)) + 48|0);
     HEAPF64[$vararg_ptr29>>3] = $328;
     $vararg_ptr30 = ((($vararg_buffer19)) + 56|0);
     HEAPF64[$vararg_ptr30>>3] = $350;
     $vararg_ptr31 = ((($vararg_buffer19)) + 64|0);
     HEAP32[$vararg_ptr31>>2] = $351;
     _printFmt($251,$252,27307,$vararg_buffer19);
    }
    $368 = $14;
    $369 = (($368) + 1)|0;
    $14 = $369;
   }
  }
 } while(0);
 $370 = $1;
 $371 = ((($370)) + 32|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = $372 & 512;
 $374 = ($373|0)!=(0);
 if (!($374)) {
  STACKTOP = sp;return;
 }
 $17 = 0;
 $375 = $8;
 $376 = ((($375)) + 28|0);
 $377 = ((($376)) + 12|0);
 $378 = HEAP32[$377>>2]|0;
 $18 = $378;
 $379 = $8;
 $380 = ((($379)) + 28|0);
 $381 = HEAP32[$380>>2]|0;
 $19 = $381;
 $20 = 0;
 while(1) {
  $382 = $20;
  $383 = $18;
  $384 = ($382>>>0)<($383>>>0);
  if (!($384)) {
   break;
  }
  $385 = $19;
  $386 = ((($385)) + 48|0);
  $387 = $386;
  $388 = $387;
  $389 = HEAP32[$388>>2]|0;
  $390 = (($387) + 4)|0;
  $391 = $390;
  $392 = HEAP32[$391>>2]|0;
  $393 = ($392|0)>(0);
  $394 = ($389>>>0)>(0);
  $395 = ($392|0)==(0);
  $396 = $395 & $394;
  $397 = $393 | $396;
  $398 = $397&1;
  $399 = $17;
  $400 = (($399) + ($398))|0;
  $17 = $400;
  $401 = $20;
  $402 = (($401) + 1)|0;
  $20 = $402;
  $403 = $19;
  $404 = ((($403)) + 64|0);
  $19 = $404;
 }
 $405 = $3;
 $406 = $2;
 $407 = $5;
 $408 = $17;
 $409 = $18;
 $410 = $17;
 $411 = (+($410>>>0));
 $412 = $411 * 100.0;
 $413 = $18;
 $414 = ($413|0)!=(0);
 $415 = $18;
 $416 = $414 ? $415 : 1;
 $417 = (+($416>>>0));
 $418 = $412 / $417;
 HEAP32[$vararg_buffer32>>2] = $407;
 $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
 HEAP32[$vararg_ptr35>>2] = $408;
 $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
 HEAP32[$vararg_ptr36>>2] = $409;
 $vararg_ptr37 = ((($vararg_buffer32)) + 16|0);
 HEAPF64[$vararg_ptr37>>3] = $418;
 _printFmt($405,$406,27380,$vararg_buffer32);
 $21 = 0;
 while(1) {
  $419 = $21;
  $420 = $18;
  $421 = ($419>>>0)<($420>>>0);
  if (!($421)) {
   break;
  }
  $422 = $8;
  $423 = ((($422)) + 28|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = $21;
  $426 = (($424) + ($425<<6)|0);
  $22 = $426;
  $23 = 0;
  $427 = $22;
  $428 = ((($427)) + 4|0);
  $429 = HEAP32[$428>>2]|0;
  $24 = $429;
  $430 = $22;
  $431 = ((($430)) + 48|0);
  $432 = $431;
  $433 = $432;
  $434 = HEAP32[$433>>2]|0;
  $435 = (($432) + 4)|0;
  $436 = $435;
  $437 = HEAP32[$436>>2]|0;
  $438 = ($434|0)!=(0);
  $439 = ($437|0)!=(0);
  $440 = $438 | $439;
  $441 = $9;
  $442 = ($441|0)!=(0);
  $or$cond3 = $440 | $442;
  if ($or$cond3) {
   $443 = $24;
   $444 = ($443|0)==(0|0);
   if ($444) {
    $445 = $4;
    $446 = $22;
    $447 = ((($446)) + 16|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = (_rtLookup($445,$448,0)|0);
    $24 = $449;
   }
   $450 = $24;
   $451 = ($450|0)!=(0|0);
   if ($451) {
    $452 = $22;
    $453 = ((($452)) + 16|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = $24;
    $456 = ((($455)) + 20|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = (($454) - ($457))|0;
    $23 = $458;
   }
   $459 = $3;
   $460 = $2;
   $461 = $22;
   $462 = ((($461)) + 8|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = $22;
   $465 = ((($464)) + 12|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = $22;
   $468 = ((($467)) + 16|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = $22;
   $471 = ((($470)) + 20|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $22;
   $474 = ((($473)) + 48|0);
   $475 = $474;
   $476 = $475;
   $477 = HEAP32[$476>>2]|0;
   $478 = (($475) + 4)|0;
   $479 = $478;
   $480 = HEAP32[$479>>2]|0;
   $481 = $22;
   $482 = ((($481)) + 56|0);
   $483 = $482;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $486 = (($483) + 4)|0;
   $487 = $486;
   $488 = HEAP32[$487>>2]|0;
   $489 = $22;
   $490 = ((($489)) + 48|0);
   $491 = $490;
   $492 = $491;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($491) + 4)|0;
   $495 = $494;
   $496 = HEAP32[$495>>2]|0;
   $497 = (_i64Subtract(($485|0),($488|0),($493|0),($496|0))|0);
   $498 = (getTempRet0() | 0);
   $499 = $22;
   $500 = ((($499)) + 32|0);
   $501 = $500;
   $502 = $501;
   $503 = HEAP32[$502>>2]|0;
   $504 = (($501) + 4)|0;
   $505 = $504;
   $506 = HEAP32[$505>>2]|0;
   $507 = $22;
   $508 = ((($507)) + 32|0);
   $509 = $508;
   $510 = $509;
   $511 = HEAP32[$510>>2]|0;
   $512 = (($509) + 4)|0;
   $513 = $512;
   $514 = HEAP32[$513>>2]|0;
   $515 = $22;
   $516 = ((($515)) + 40|0);
   $517 = $516;
   $518 = $517;
   $519 = HEAP32[$518>>2]|0;
   $520 = (($517) + 4)|0;
   $521 = $520;
   $522 = HEAP32[$521>>2]|0;
   $523 = (_i64Subtract(($511|0),($514|0),($519|0),($522|0))|0);
   $524 = (getTempRet0() | 0);
   $525 = (_i64Subtract(0,0,($523|0),($524|0))|0);
   $526 = (getTempRet0() | 0);
   $527 = $22;
   $528 = ((($527)) + 32|0);
   $529 = $528;
   $530 = $529;
   $531 = HEAP32[$530>>2]|0;
   $532 = (($529) + 4)|0;
   $533 = $532;
   $534 = HEAP32[$533>>2]|0;
   $535 = (+($531>>>0)) + (4294967296.0*(+($534|0)));
   $536 = $535 / 1000.0;
   $537 = $22;
   $538 = ((($537)) + 32|0);
   $539 = $538;
   $540 = $539;
   $541 = HEAP32[$540>>2]|0;
   $542 = (($539) + 4)|0;
   $543 = $542;
   $544 = HEAP32[$543>>2]|0;
   $545 = $22;
   $546 = ((($545)) + 40|0);
   $547 = $546;
   $548 = $547;
   $549 = HEAP32[$548>>2]|0;
   $550 = (($547) + 4)|0;
   $551 = $550;
   $552 = HEAP32[$551>>2]|0;
   $553 = (_i64Subtract(($541|0),($544|0),($549|0),($552|0))|0);
   $554 = (getTempRet0() | 0);
   $555 = (_i64Subtract(0,0,($553|0),($554|0))|0);
   $556 = (getTempRet0() | 0);
   $557 = (+($555>>>0)) + (4294967296.0*(+($556|0)));
   $558 = $557 / 1000.0;
   $559 = $24;
   $560 = $23;
   HEAP32[$vararg_buffer38>>2] = $463;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $466;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $469;
   $vararg_ptr43 = ((($vararg_buffer38)) + 12|0);
   HEAP32[$vararg_ptr43>>2] = $472;
   $vararg_ptr44 = ((($vararg_buffer38)) + 16|0);
   $561 = $vararg_ptr44;
   $562 = $561;
   HEAP32[$562>>2] = $477;
   $563 = (($561) + 4)|0;
   $564 = $563;
   HEAP32[$564>>2] = $480;
   $vararg_ptr45 = ((($vararg_buffer38)) + 24|0);
   $565 = $vararg_ptr45;
   $566 = $565;
   HEAP32[$566>>2] = $497;
   $567 = (($565) + 4)|0;
   $568 = $567;
   HEAP32[$568>>2] = $498;
   $vararg_ptr46 = ((($vararg_buffer38)) + 32|0);
   $569 = $vararg_ptr46;
   $570 = $569;
   HEAP32[$570>>2] = $503;
   $571 = (($569) + 4)|0;
   $572 = $571;
   HEAP32[$572>>2] = $506;
   $vararg_ptr47 = ((($vararg_buffer38)) + 40|0);
   $573 = $vararg_ptr47;
   $574 = $573;
   HEAP32[$574>>2] = $525;
   $575 = (($573) + 4)|0;
   $576 = $575;
   HEAP32[$576>>2] = $526;
   $vararg_ptr48 = ((($vararg_buffer38)) + 48|0);
   HEAPF64[$vararg_ptr48>>3] = $536;
   $vararg_ptr49 = ((($vararg_buffer38)) + 56|0);
   HEAPF64[$vararg_ptr49>>3] = $558;
   $vararg_ptr50 = ((($vararg_buffer38)) + 64|0);
   HEAP32[$vararg_ptr50>>2] = $559;
   $vararg_ptr51 = ((($vararg_buffer38)) + 68|0);
   HEAP32[$vararg_ptr51>>2] = $560;
   _printFmt($459,$460,27428,$vararg_buffer38);
  }
  $577 = $21;
  $578 = (($577) + 1)|0;
  $21 = $578;
 }
 STACKTOP = sp;return;
}
function _textDumpMem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $8;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $18;
 $19 = $8;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $11 = 27506;
 $22 = $6;
 $23 = (+($22>>>0));
 $12 = $23;
 $24 = $6;
 $25 = ($24>>>0)>(1073741824);
 do {
  if ($25) {
   $11 = 27512;
   $26 = $12;
   $27 = $26 / 1073741824.0;
   $12 = $27;
  } else {
   $28 = $6;
   $29 = ($28>>>0)>(1048576);
   if ($29) {
    $11 = 27515;
    $30 = $12;
    $31 = $30 / 1048576.0;
    $12 = $31;
    break;
   }
   $32 = $6;
   $33 = ($32>>>0)>(1024);
   if ($33) {
    $11 = 27518;
    $34 = $12;
    $35 = $34 / 1024.0;
    $12 = $35;
   }
  }
 } while(0);
 $36 = $10;
 $37 = $9;
 $38 = $7;
 $39 = $8;
 $40 = HEAP32[$39>>2]|0;
 $41 = $5;
 $42 = (_vmOffset_923($40,$41)|0);
 $43 = $6;
 $44 = $12;
 $45 = $11;
 HEAP32[$vararg_buffer>>2] = $38;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $42;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $43;
 $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr3>>3] = $44;
 $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr4>>2] = $45;
 _printFmt($36,$37,27521,$vararg_buffer);
 STACKTOP = sp;return;
}
function _vmOffset_923($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 144|0);
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>=($17>>>0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = $5;
 $2 = $19;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _jsonDumpSym($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer58 = 0, $vararg_buffer63 = 0, $vararg_buffer68 = 0, $vararg_buffer73 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr6 = 0, $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr7 = 0, $vararg_ptr71 = 0;
 var $vararg_ptr72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer73 = sp + 232|0;
 $vararg_buffer68 = sp + 216|0;
 $vararg_buffer63 = sp + 200|0;
 $vararg_buffer58 = sp + 184|0;
 $vararg_buffer53 = sp + 168|0;
 $vararg_buffer50 = sp + 160|0;
 $vararg_buffer47 = sp + 152|0;
 $vararg_buffer43 = sp + 144|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $8;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $5;
  $16 = $6;
  $17 = $9;
  $18 = (($17) - 1)|0;
  $19 = $8;
  $20 = $7;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $20;
  _printFmt($15,$16,27724,$vararg_buffer);
 }
 $21 = $5;
 $22 = $6;
 $23 = $9;
 $24 = $7;
 HEAP32[$vararg_buffer3>>2] = $23;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = 39249;
 $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $24;
 _printFmt($21,$22,27737,$vararg_buffer3);
 $25 = $5;
 $26 = $6;
 $27 = $9;
 $28 = $7;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 48;
 HEAP32[$vararg_buffer8>>2] = $27;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = 27767;
 $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
 HEAP32[$vararg_ptr12>>2] = $31;
 _printFmt($25,$26,27751,$vararg_buffer8);
 $32 = $5;
 $33 = $6;
 $34 = $9;
 $35 = $7;
 $36 = ((($35)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 15;
 HEAP32[$vararg_buffer13>>2] = $34;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = 27772;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = $38;
 _printFmt($32,$33,27751,$vararg_buffer13);
 $39 = $5;
 $40 = $6;
 $41 = $9;
 $42 = $7;
 HEAP32[$vararg_buffer18>>2] = $41;
 $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
 HEAP32[$vararg_ptr21>>2] = 27794;
 $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
 HEAP32[$vararg_ptr22>>2] = $42;
 _printFmt($39,$40,27777,$vararg_buffer18);
 $43 = $7;
 $44 = ((($43)) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $5;
  $48 = $6;
  $49 = $9;
  $50 = $7;
  $51 = ((($50)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $49;
  $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
  HEAP32[$vararg_ptr26>>2] = 27815;
  $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
  HEAP32[$vararg_ptr27>>2] = $52;
  _printFmt($47,$48,27799,$vararg_buffer23);
 }
 $53 = $7;
 $54 = ((($53)) + 28|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = $5;
  $58 = $6;
  $59 = $9;
  $60 = $7;
  $61 = ((($60)) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  HEAP32[$vararg_buffer28>>2] = $59;
  $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
  HEAP32[$vararg_ptr31>>2] = 27821;
  $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
  HEAP32[$vararg_ptr32>>2] = $62;
  _printFmt($57,$58,27799,$vararg_buffer28);
 }
 $63 = $7;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = $7;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $5;
   $72 = $6;
   $73 = $9;
   $74 = $7;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$vararg_buffer33>>2] = $73;
   $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
   HEAP32[$vararg_ptr36>>2] = 27668;
   $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
   HEAP32[$vararg_ptr37>>2] = $76;
   _printFmt($71,$72,27652,$vararg_buffer33);
   $77 = $5;
   $78 = $6;
   $79 = $9;
   $80 = $7;
   $81 = ((($80)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP32[$vararg_buffer38>>2] = $79;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = 27673;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $82;
   _printFmt($77,$78,27826,$vararg_buffer38);
  }
 }
 $83 = $7;
 $84 = (_isInvokable_954($83)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $5;
  $87 = $9;
  HEAP32[$vararg_buffer43>>2] = $87;
  $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
  HEAP32[$vararg_ptr46>>2] = 27840;
  _printFmt($86,0,27067,$vararg_buffer43);
  $88 = $7;
  $89 = ((($88)) + 40|0);
  $90 = HEAP32[$89>>2]|0;
  $10 = $90;
  while(1) {
   $91 = $10;
   $92 = ($91|0)!=(0|0);
   if (!($92)) {
    break;
   }
   $93 = $10;
   $94 = $7;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($93|0)!=($96|0);
   if ($97) {
    $98 = $5;
    $99 = $9;
    HEAP32[$vararg_buffer47>>2] = $99;
    _printFmt($98,0,27574,$vararg_buffer47);
   }
   $100 = $5;
   $101 = $6;
   $102 = $10;
   $103 = $9;
   $104 = (($103) + 1)|0;
   _jsonDumpSym($100,$101,$102,0,$104);
   $105 = $10;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $10 = $107;
  }
  $108 = $5;
  $109 = $9;
  HEAP32[$vararg_buffer50>>2] = $109;
  _printFmt($108,0,27089,$vararg_buffer50);
 }
 $110 = $5;
 $111 = $6;
 $112 = $9;
 $113 = $7;
 $114 = ((($113)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 HEAP32[$vararg_buffer53>>2] = $112;
 $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
 HEAP32[$vararg_ptr56>>2] = 27845;
 $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
 HEAP32[$vararg_ptr57>>2] = $115;
 _printFmt($110,$111,27826,$vararg_buffer53);
 $116 = $5;
 $117 = $6;
 $118 = $9;
 $119 = $7;
 $120 = ((($119)) + 20|0);
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$vararg_buffer58>>2] = $118;
 $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
 HEAP32[$vararg_ptr61>>2] = 27647;
 $vararg_ptr62 = ((($vararg_buffer58)) + 8|0);
 HEAP32[$vararg_ptr62>>2] = $121;
 _printFmt($116,$117,27826,$vararg_buffer58);
 $122 = $5;
 $123 = $6;
 $124 = $9;
 $125 = $7;
 $126 = (_isStatic_835($125)|0);
 $127 = ($126|0)!=(0);
 $128 = $127 ? 27850 : 27855;
 HEAP32[$vararg_buffer63>>2] = $124;
 $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
 HEAP32[$vararg_ptr66>>2] = 27875;
 $vararg_ptr67 = ((($vararg_buffer63)) + 8|0);
 HEAP32[$vararg_ptr67>>2] = $128;
 _printFmt($122,$123,27861,$vararg_buffer63);
 $129 = $5;
 $130 = $6;
 $131 = $9;
 $132 = $7;
 $133 = (_isConst_961($132)|0);
 $134 = ($133|0)!=(0);
 $135 = $134 ? 27850 : 27855;
 HEAP32[$vararg_buffer68>>2] = $131;
 $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
 HEAP32[$vararg_ptr71>>2] = 27882;
 $vararg_ptr72 = ((($vararg_buffer68)) + 8|0);
 HEAP32[$vararg_ptr72>>2] = $135;
 _printFmt($129,$130,27861,$vararg_buffer68);
 $136 = $8;
 $137 = ($136|0)!=(0|0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = $5;
 $139 = $6;
 $140 = $9;
 $141 = (($140) - 1)|0;
 HEAP32[$vararg_buffer73>>2] = $141;
 _printFmt($138,$139,27719,$vararg_buffer73);
 STACKTOP = sp;return;
}
function _isInvokable_954($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _isConst_961($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _textDumpDbg($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $9;
 $13 = $7;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $18;
 _printFmt($10,$11,27975,$vararg_buffer);
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $7;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) - ($26))|0;
 HEAP32[$vararg_buffer3>>2] = $27;
 _printFmt($19,$20,27985,$vararg_buffer3);
 $28 = $8;
 $29 = ((($28)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 16;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $8;
  $34 = ((($33)) + 60|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $37 = $5;
   $38 = $6;
   $39 = $7;
   $40 = ((($39)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $7;
   $43 = ((($42)) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $41;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $44;
   _printFmt($37,$38,27997,$vararg_buffer6);
  }
 }
 $45 = $5;
 $46 = $6;
 _printFmt($45,$46,28011,$vararg_buffer10);
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  $64 = $5;
  $65 = $6;
  _printFmt($64,$65,25916,$vararg_buffer16);
  STACKTOP = sp;return;
 }
 $50 = $8;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  $64 = $5;
  $65 = $6;
  _printFmt($64,$65,25916,$vararg_buffer16);
  STACKTOP = sp;return;
 }
 $55 = $5;
 $56 = $6;
 $57 = $8;
 $58 = ((($57)) + 24|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 | 7936;
 $61 = $60 | 128;
 $62 = $7;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$vararg_buffer12>>2] = $61;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $63;
 _printFmt($55,$56,28013,$vararg_buffer12);
 $64 = $5;
 $65 = $6;
 _printFmt($64,$65,25916,$vararg_buffer16);
 STACKTOP = sp;return;
}
function _textDumpAsm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $9;
 HEAP32[$vararg_buffer>>2] = $12;
 _printFmt($10,$11,27972,$vararg_buffer);
 $13 = $5;
 $14 = $6;
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $17 = $8;
 $18 = HEAP32[$17>>2]|0;
 $19 = $7;
 $20 = (_vmPointer_973($18,$19)|0);
 $21 = $8;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 _printAsm($13,$14,$16,$20,$23);
 $24 = $5;
 $25 = $6;
 _printFmt($24,$25,25916,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _vmPointer_973($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $3;
  $8 = ((($7)) + 144|0);
  $9 = $4;
  $10 = (($8) + ($9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _isVariable_1000($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 48;
 $6 = ($5|0)==(48);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _chainArgs_1022($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(41);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 24|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_chainArgs_1022($13)|0);
  $3 = $14;
  $15 = $2;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_chainArgs_1022($17)|0);
  $4 = $18;
  $19 = $3;
  $2 = $19;
  while(1) {
   $20 = $3;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    break;
   }
   $24 = $3;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
  }
  $27 = $4;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
 } else {
  $30 = ((($10)) + 8|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $2;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _jsonDumpAst($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer58 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr46 = 0, $vararg_ptr5 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer58 = sp + 168|0;
 $vararg_buffer53 = sp + 152|0;
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $7;
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $8;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $5;
  $17 = $6;
  $18 = $9;
  $19 = $8;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  _printFmt($16,$17,27724,$vararg_buffer);
 }
 $20 = $5;
 $21 = $6;
 $22 = $9;
 $23 = (($22) + 1)|0;
 $24 = $7;
 HEAP32[$vararg_buffer2>>2] = $23;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = 39249;
 $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $24;
 _printFmt($20,$21,28693,$vararg_buffer2);
 $25 = $5;
 $26 = $6;
 $27 = $9;
 $28 = (($27) + 1)|0;
 $29 = $7;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $28;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = 27767;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $30;
 _printFmt($25,$26,28707,$vararg_buffer7);
 $31 = $7;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $5;
  $36 = $6;
  $37 = $9;
  $38 = (($37) + 1)|0;
  $39 = $7;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $38;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = 27821;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $41;
  _printFmt($35,$36,27799,$vararg_buffer12);
 }
 $42 = $7;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $5;
  $47 = $6;
  $48 = $9;
  $49 = (($48) + 1)|0;
  $50 = $7;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $49;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 27668;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $52;
  _printFmt($46,$47,27652,$vararg_buffer17);
 }
 $53 = $7;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $5;
  $58 = $6;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $61 = $7;
  $62 = ((($61)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $60;
  $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
  HEAP32[$vararg_ptr25>>2] = 27673;
  $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
  HEAP32[$vararg_ptr26>>2] = $63;
  _printFmt($57,$58,27826,$vararg_buffer22);
 }
 $64 = $7;
 $65 = HEAP32[$64>>2]|0;
 switch ($65|0) {
 case 42:  {
  $67 = $5;
  $68 = $6;
  $69 = $9;
  $70 = (($69) + 1)|0;
  HEAP32[$vararg_buffer32>>2] = $70;
  $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
  HEAP32[$vararg_ptr35>>2] = 28481;
  _printFmt($67,$68,27067,$vararg_buffer32);
  $71 = $7;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $10 = $73;
  while(1) {
   $74 = $10;
   $75 = ($74|0)!=(0|0);
   if (!($75)) {
    break;
   }
   $76 = $10;
   $77 = $7;
   $78 = ((($77)) + 24|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76|0)!=($79|0);
   if ($80) {
    $81 = $5;
    $82 = $6;
    $83 = $9;
    $84 = (($83) + 1)|0;
    $85 = $10;
    HEAP32[$vararg_buffer36>>2] = $84;
    $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
    HEAP32[$vararg_ptr39>>2] = $85;
    _printFmt($81,$82,27574,$vararg_buffer36);
   }
   $86 = $5;
   $87 = $6;
   $88 = $10;
   $89 = $9;
   $90 = (($89) + 1)|0;
   _jsonDumpAst($86,$87,$88,0,$90);
   $91 = $10;
   $92 = ((($91)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $10 = $93;
  }
  $94 = $5;
  $95 = $6;
  $96 = $9;
  $97 = (($96) + 1)|0;
  HEAP32[$vararg_buffer40>>2] = $97;
  _printFmt($94,$95,27089,$vararg_buffer40);
  break;
 }
 case 45: case 44:  {
  $98 = $5;
  $99 = $6;
  $100 = $7;
  $101 = ((($100)) + 24|0);
  $102 = ((($101)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $9;
  $105 = (($104) + 1)|0;
  _jsonDumpAst($98,$99,$103,28514,$105);
  $106 = $5;
  $107 = $6;
  $108 = $7;
  $109 = ((($108)) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $9;
  $112 = (($111) + 1)|0;
  _jsonDumpAst($106,$107,$110,28519,$112);
  $113 = $5;
  $114 = $6;
  $115 = $7;
  $116 = ((($115)) + 24|0);
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $9;
  $120 = (($119) + 1)|0;
  _jsonDumpAst($113,$114,$118,28524,$120);
  break;
 }
 case 46:  {
  $121 = $5;
  $122 = $6;
  $123 = $7;
  $124 = ((($123)) + 24|0);
  $125 = ((($124)) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $9;
  $128 = (($127) + 1)|0;
  _jsonDumpAst($121,$122,$126,28529,$128);
  $129 = $5;
  $130 = $6;
  $131 = $7;
  $132 = ((($131)) + 24|0);
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $9;
  $136 = (($135) + 1)|0;
  _jsonDumpAst($129,$130,$134,28514,$136);
  $137 = $5;
  $138 = $6;
  $139 = $7;
  $140 = ((($139)) + 24|0);
  $141 = ((($140)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $9;
  $144 = (($143) + 1)|0;
  _jsonDumpAst($137,$138,$142,28534,$144);
  $145 = $5;
  $146 = $6;
  $147 = $7;
  $148 = ((($147)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $9;
  $151 = (($150) + 1)|0;
  _jsonDumpAst($145,$146,$149,28481,$151);
  break;
 }
 case 50: case 49:  {
  break;
 }
 case 51: case 52:  {
  $152 = $5;
  $153 = $6;
  $154 = $7;
  $155 = ((($154)) + 24|0);
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $9;
  $159 = (($158) + 1)|0;
  _jsonDumpAst($152,$153,$157,28481,$159);
  break;
 }
 case 3:  {
  $160 = $7;
  $161 = ((($160)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (_chainArgs_1022($162)|0);
  $11 = $163;
  $164 = $5;
  $165 = $6;
  $166 = $9;
  $167 = (($166) + 1)|0;
  HEAP32[$vararg_buffer43>>2] = $167;
  $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
  HEAP32[$vararg_ptr46>>2] = 27840;
  _printFmt($164,$165,27067,$vararg_buffer43);
  while(1) {
   $168 = $11;
   $169 = ($168|0)!=(0|0);
   if (!($169)) {
    break;
   }
   $170 = $11;
   $171 = $7;
   $172 = ((($171)) + 24|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($170|0)!=($173|0);
   if ($174) {
    $175 = $5;
    $176 = $6;
    $177 = $9;
    $178 = (($177) + 1)|0;
    HEAP32[$vararg_buffer47>>2] = $178;
    _printFmt($175,$176,27574,$vararg_buffer47);
   }
   $179 = $5;
   $180 = $6;
   $181 = $11;
   $182 = $9;
   $183 = (($182) + 1)|0;
   _jsonDumpAst($179,$180,$181,0,$183);
   $184 = $11;
   $185 = ((($184)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $11 = $186;
  }
  $187 = $5;
  $188 = $6;
  $189 = $9;
  $190 = (($189) + 1)|0;
  HEAP32[$vararg_buffer50>>2] = $190;
  _printFmt($187,$188,27089,$vararg_buffer50);
  break;
 }
 case 30: case 29: case 41: case 28: case 27: case 26: case 18: case 17: case 20: case 19: case 22: case 21: case 24: case 25: case 23: case 15: case 16: case 12: case 11: case 10: case 14: case 13: case 9: case 8: case 7: case 6: case 4: case 5:  {
  $191 = $5;
  $192 = $6;
  $193 = $7;
  $194 = ((($193)) + 24|0);
  $195 = ((($194)) + 8|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $9;
  $198 = (($197) + 1)|0;
  _jsonDumpAst($191,$192,$196,28514,$198);
  $199 = $5;
  $200 = $6;
  $201 = $7;
  $202 = ((($201)) + 24|0);
  $203 = ((($202)) + 4|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $9;
  $206 = (($205) + 1)|0;
  _jsonDumpAst($199,$200,$204,28580,$206);
  $207 = $5;
  $208 = $6;
  $209 = $7;
  $210 = ((($209)) + 24|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $9;
  $213 = (($212) + 1)|0;
  _jsonDumpAst($207,$208,$211,28585,$213);
  break;
 }
 case 2: case 1: case 67:  {
  $214 = $5;
  $215 = $6;
  $216 = $9;
  $217 = (($216) + 1)|0;
  $218 = $7;
  HEAP32[$vararg_buffer53>>2] = $217;
  $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
  HEAP32[$vararg_ptr56>>2] = 28751;
  $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
  HEAP32[$vararg_ptr57>>2] = $218;
  _printFmt($214,$215,28735,$vararg_buffer53);
  break;
 }
 default: {
  $66 = HEAP32[3314]|0;
  HEAP32[$vararg_buffer27>>2] = 25885;
  $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
  HEAP32[$vararg_ptr30>>2] = 461;
  $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
  HEAP32[$vararg_ptr31>>2] = 28723;
  _printFmt($66,0,28431,$vararg_buffer27);
  __abort_838();
  STACKTOP = sp;return;
 }
 }
 $219 = $8;
 $220 = ($219|0)!=(0|0);
 if (!($220)) {
  STACKTOP = sp;return;
 }
 $221 = $5;
 $222 = $6;
 $223 = $9;
 HEAP32[$vararg_buffer58>>2] = $223;
 _printFmt($221,$222,27719,$vararg_buffer58);
 STACKTOP = sp;return;
}
function _jsonDumpAsm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $7;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15) + ($18))|0;
 $10 = $19;
 $20 = $7;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $11 = $22;
 while(1) {
  $23 = $11;
  $24 = $10;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   label = 7;
   break;
  }
  $26 = $8;
  $27 = $11;
  $28 = (_vmPointer_973($26,$27)|0);
  $12 = $28;
  $29 = $11;
  $30 = $7;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)!=($32|0);
  if ($33) {
   $34 = $5;
   $35 = $6;
   $36 = $9;
   $37 = $9;
   HEAP32[$vararg_buffer>>2] = $36;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   _printFmt($34,$35,27574,$vararg_buffer);
  }
  $38 = $5;
  $39 = $6;
  $40 = $9;
  $41 = (($40) + 1)|0;
  $42 = $12;
  HEAP32[$vararg_buffer2>>2] = $41;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 28661;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $42;
  _printFmt($38,$39,28646,$vararg_buffer2);
  $43 = $5;
  $44 = $6;
  $45 = $9;
  $46 = (($45) + 1)|0;
  $47 = $12;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (16 + (($49*20)|0)|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $46;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = 27794;
  $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $52;
  _printFmt($43,$44,27652,$vararg_buffer7);
  $53 = $5;
  $54 = $6;
  $55 = $9;
  $56 = (($55) + 1)|0;
  $57 = $12;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (16 + (($59*20)|0)|0);
  $61 = HEAP32[$60>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $56;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = 27233;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $61;
  _printFmt($53,$54,28673,$vararg_buffer12);
  $62 = $5;
  $63 = $6;
  $64 = $9;
  $65 = (($64) + 1)|0;
  $66 = $11;
  HEAP32[$vararg_buffer17>>2] = $65;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 27647;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $66;
  _printFmt($62,$63,27826,$vararg_buffer17);
  $67 = $5;
  $68 = $6;
  $69 = $9;
  $70 = (($69) + 1)|0;
  $71 = $12;
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (16 + (($73*20)|0)|0);
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $70;
  $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
  HEAP32[$vararg_ptr25>>2] = 27845;
  $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
  HEAP32[$vararg_ptr26>>2] = $76;
  _printFmt($67,$68,27826,$vararg_buffer22);
  $77 = $12;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (16 + (($79*20)|0)|0);
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $11;
  $84 = (($83) + ($82))|0;
  $11 = $84;
  $85 = $12;
  $86 = $8;
  $87 = $11;
  $88 = (_vmPointer_973($86,$87)|0);
  $89 = ($85|0)==($88|0);
  if ($89) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0;
 var $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i17$i = 0, $$pre$i208 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink325 = 0, $$sink326 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i207 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i213 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i214 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0;
 var $spec$select$i = 0, $spec$select$i205 = 0, $spec$select1$i = 0, $spec$select3$i = 0, $spec$select49$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[9668]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (38712 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[9668] = $24;
     } else {
      $25 = HEAP32[(38688)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(38680)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (38712 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[9668] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(38688)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(38692)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (38712 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[9668] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(38688)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(38680)>>2] = $84;
     HEAP32[(38692)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(38676)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (38976 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $spec$select$i = $150 ? $149 : $$0191$i;
      $spec$select1$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $151 = HEAP32[(38688)>>2]|0;
     $152 = ($151>>>0)>($$0190$i>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($153>>>0)>($$0190$i>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $173;$$1196$i$ph = $172;
        }
       } else {
        $$1194$i$ph = $170;$$1196$i$ph = $169;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$1194$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          break;
         } else {
          $$1194$i$be = $179;$$1196$i$be = $178;
         }
        } else {
         $$1194$i$be = $176;$$1196$i$be = $175;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $181 = ($151>>>0)>($$1196$i>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($151>>>0)>($161>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     L78: do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (38976 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       do {
        if ($187) {
         HEAP32[$185>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $188 = 1 << $184;
          $189 = $188 ^ -1;
          $190 = $108 & $189;
          HEAP32[(38676)>>2] = $190;
          break L78;
         }
        } else {
         $191 = HEAP32[(38688)>>2]|0;
         $192 = ($191>>>0)>($156>>>0);
         if ($192) {
          _abort();
          // unreachable;
         } else {
          $193 = ((($156)) + 16|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==($$0190$i|0);
          $196 = ((($156)) + 20|0);
          $$sink = $195 ? $193 : $196;
          HEAP32[$$sink>>2] = $$3$i;
          $197 = ($$3$i|0)==(0|0);
          if ($197) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[(38688)>>2]|0;
       $199 = ($198>>>0)>($$3$i>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($198>>>0)>($202>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(38688)>>2]|0;
        $211 = ($210>>>0)>($208>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(38692)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (38712 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $232 & $8;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $232 | $8;
        HEAP32[9668] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(38688)>>2]|0;
        $239 = ($238>>>0)>($237>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(38680)>>2] = $$0191$i;
      HEAP32[(38692)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(38676)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0357$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0357$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0357$i = $274;
      }
     }
     $275 = (38976 + ($$0357$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L122: do {
      if ($277) {
       $$2353$i = 0;$$3$i203 = 0;$$3348$i = $249;
       label = 85;
      } else {
       $278 = ($$0357$i|0)==(31);
       $279 = $$0357$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0358$i = $282;$$0361$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 89;
          break L122;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0358$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond2$i = $294 | $295;
        $$1362$i = $or$cond2$i ? $$0361$i : $290;
        $296 = ($293|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($296) {
         $$2353$i = $$1362$i;$$3$i203 = $$1341$i;$$3348$i = $$1346$i;
         label = 85;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $297 = ($$2353$i|0)==(0|0);
      $298 = ($$3$i203|0)==(0|0);
      $or$cond$i = $297 & $298;
      if ($or$cond$i) {
       $299 = 2 << $$0357$i;
       $300 = (0 - ($299))|0;
       $301 = $299 | $300;
       $302 = $301 & $247;
       $303 = ($302|0)==(0);
       if ($303) {
        $$0197 = $246;
        break;
       }
       $304 = (0 - ($302))|0;
       $305 = $302 & $304;
       $306 = (($305) + -1)|0;
       $307 = $306 >>> 12;
       $308 = $307 & 16;
       $309 = $306 >>> $308;
       $310 = $309 >>> 5;
       $311 = $310 & 8;
       $312 = $311 | $308;
       $313 = $309 >>> $311;
       $314 = $313 >>> 2;
       $315 = $314 & 4;
       $316 = $312 | $315;
       $317 = $313 >>> $315;
       $318 = $317 >>> 1;
       $319 = $318 & 2;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 1;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = (($324) + ($325))|0;
       $327 = (38976 + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $$3$i203218 = 0;$$4355$i = $328;
      } else {
       $$3$i203218 = $$3$i203;$$4355$i = $$2353$i;
      }
      $329 = ($$4355$i|0)==(0|0);
      if ($329) {
       $$4$lcssa$i = $$3$i203218;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i203218;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $330 = ((($$535618$i)) + 4|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & -8;
       $333 = (($332) - ($246))|0;
       $334 = ($333>>>0)<($$434919$i>>>0);
       $spec$select$i205 = $334 ? $333 : $$434919$i;
       $spec$select3$i = $334 ? $$535618$i : $$420$i;
       $335 = ((($$535618$i)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0|0);
       if ($337) {
        $338 = ((($$535618$i)) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339;
       } else {
        $340 = $336;
       }
       $341 = ($340|0)==(0|0);
       if ($341) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i205;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i205;$$535618$i = $340;
       }
      }
     }
     $342 = ($$4$lcssa$i|0)==(0|0);
     if ($342) {
      $$0197 = $246;
     } else {
      $343 = HEAP32[(38680)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($$4349$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(38688)>>2]|0;
       $347 = ($346>>>0)>($$4$lcssa$i>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($$4$lcssa$i) + ($246)|0);
       $349 = ($348>>>0)>($$4$lcssa$i>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($$4$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($$4$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($$4$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($$4$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($$4$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $368;$$1373$i$ph = $367;
          }
         } else {
          $$1369$i$ph = $365;$$1373$i$ph = $364;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $370 = ((($$1369$i)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = ((($$1369$i)) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            break;
           } else {
            $$1369$i$be = $374;$$1373$i$be = $373;
           }
          } else {
           $$1369$i$be = $371;$$1373$i$be = $370;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $376 = ($346>>>0)>($$1373$i>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1373$i>>2] = 0;
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $355 = ((($$4$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($346>>>0)>($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($$4$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($$4$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $$3371$i = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       L176: do {
        if ($377) {
         $469 = $247;
        } else {
         $378 = ((($$4$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (38976 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($$4$lcssa$i|0)==($381|0);
         do {
          if ($382) {
           HEAP32[$380>>2] = $$3371$i;
           $cond$i207 = ($$3371$i|0)==(0|0);
           if ($cond$i207) {
            $383 = 1 << $379;
            $384 = $383 ^ -1;
            $385 = $247 & $384;
            HEAP32[(38676)>>2] = $385;
            $469 = $385;
            break L176;
           }
          } else {
           $386 = HEAP32[(38688)>>2]|0;
           $387 = ($386>>>0)>($351>>>0);
           if ($387) {
            _abort();
            // unreachable;
           } else {
            $388 = ((($351)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ($389|0)==($$4$lcssa$i|0);
            $391 = ((($351)) + 20|0);
            $$sink325 = $390 ? $388 : $391;
            HEAP32[$$sink325>>2] = $$3371$i;
            $392 = ($$3371$i|0)==(0|0);
            if ($392) {
             $469 = $247;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $393 = HEAP32[(38688)>>2]|0;
         $394 = ($393>>>0)>($$3371$i>>>0);
         if ($394) {
          _abort();
          // unreachable;
         }
         $395 = ((($$3371$i)) + 24|0);
         HEAP32[$395>>2] = $351;
         $396 = ((($$4$lcssa$i)) + 16|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = ($397|0)==(0|0);
         do {
          if (!($398)) {
           $399 = ($393>>>0)>($397>>>0);
           if ($399) {
            _abort();
            // unreachable;
           } else {
            $400 = ((($$3371$i)) + 16|0);
            HEAP32[$400>>2] = $397;
            $401 = ((($397)) + 24|0);
            HEAP32[$401>>2] = $$3371$i;
            break;
           }
          }
         } while(0);
         $402 = ((($$4$lcssa$i)) + 20|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         if ($404) {
          $469 = $247;
         } else {
          $405 = HEAP32[(38688)>>2]|0;
          $406 = ($405>>>0)>($403>>>0);
          if ($406) {
           _abort();
           // unreachable;
          } else {
           $407 = ((($$3371$i)) + 20|0);
           HEAP32[$407>>2] = $403;
           $408 = ((($403)) + 24|0);
           HEAP32[$408>>2] = $$3371$i;
           $469 = $247;
           break;
          }
         }
        }
       } while(0);
       $409 = ($$4349$lcssa$i>>>0)<(16);
       L200: do {
        if ($409) {
         $410 = (($$4349$lcssa$i) + ($246))|0;
         $411 = $410 | 3;
         $412 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$412>>2] = $411;
         $413 = (($$4$lcssa$i) + ($410)|0);
         $414 = ((($413)) + 4|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $$4349$lcssa$i | 1;
         $420 = ((($348)) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = (($348) + ($$4349$lcssa$i)|0);
         HEAP32[$421>>2] = $$4349$lcssa$i;
         $422 = $$4349$lcssa$i >>> 3;
         $423 = ($$4349$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (38712 + ($424<<2)|0);
          $426 = HEAP32[9668]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[9668] = $430;
           $$pre$i208 = ((($425)) + 8|0);
           $$0367$i = $425;$$pre$phi$i209Z2D = $$pre$i208;
          } else {
           $431 = ((($425)) + 8|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(38688)>>2]|0;
           $434 = ($433>>>0)>($432>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$0367$i = $432;$$pre$phi$i209Z2D = $431;
           }
          }
          HEAP32[$$pre$phi$i209Z2D>>2] = $348;
          $435 = ((($$0367$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $436 = ((($348)) + 8|0);
          HEAP32[$436>>2] = $$0367$i;
          $437 = ((($348)) + 12|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $$4349$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $$0360$i = 0;
         } else {
          $440 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($440) {
           $$0360$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $$4349$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $$0360$i = $462;
          }
         }
         $463 = (38976 + ($$0360$i<<2)|0);
         $464 = ((($348)) + 28|0);
         HEAP32[$464>>2] = $$0360$i;
         $465 = ((($348)) + 16|0);
         $466 = ((($465)) + 4|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = 1 << $$0360$i;
         $468 = $469 & $467;
         $470 = ($468|0)==(0);
         if ($470) {
          $471 = $469 | $467;
          HEAP32[(38676)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $472 = ((($348)) + 24|0);
          HEAP32[$472>>2] = $463;
          $473 = ((($348)) + 12|0);
          HEAP32[$473>>2] = $348;
          $474 = ((($348)) + 8|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($$4349$lcssa$i|0);
         L218: do {
          if ($479) {
           $$0343$lcssa$i = $475;
          } else {
           $480 = ($$0360$i|0)==(31);
           $481 = $$0360$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $$4349$lcssa$i << $483;
           $$034217$i = $484;$$034316$i = $475;
           while(1) {
            $491 = $$034217$i >>> 31;
            $492 = (((($$034316$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $$034217$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($$4349$lcssa$i|0);
            if ($490) {
             $$0343$lcssa$i = $487;
             break L218;
            } else {
             $$034217$i = $485;$$034316$i = $487;
            }
           }
           $494 = HEAP32[(38688)>>2]|0;
           $495 = ($494>>>0)>($492>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $496 = ((($348)) + 24|0);
            HEAP32[$496>>2] = $$034316$i;
            $497 = ((($348)) + 12|0);
            HEAP32[$497>>2] = $348;
            $498 = ((($348)) + 8|0);
            HEAP32[$498>>2] = $348;
            break L200;
           }
          }
         } while(0);
         $499 = ((($$0343$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(38688)>>2]|0;
         $502 = ($501>>>0)<=($$0343$lcssa$i>>>0);
         $503 = ($501>>>0)<=($500>>>0);
         $504 = $503 & $502;
         if ($504) {
          $505 = ((($500)) + 12|0);
          HEAP32[$505>>2] = $348;
          HEAP32[$499>>2] = $348;
          $506 = ((($348)) + 8|0);
          HEAP32[$506>>2] = $500;
          $507 = ((($348)) + 12|0);
          HEAP32[$507>>2] = $$0343$lcssa$i;
          $508 = ((($348)) + 24|0);
          HEAP32[$508>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $509 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $509;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $510 = HEAP32[(38680)>>2]|0;
 $511 = ($510>>>0)<($$0197>>>0);
 if (!($511)) {
  $512 = (($510) - ($$0197))|0;
  $513 = HEAP32[(38692)>>2]|0;
  $514 = ($512>>>0)>(15);
  if ($514) {
   $515 = (($513) + ($$0197)|0);
   HEAP32[(38692)>>2] = $515;
   HEAP32[(38680)>>2] = $512;
   $516 = $512 | 1;
   $517 = ((($515)) + 4|0);
   HEAP32[$517>>2] = $516;
   $518 = (($513) + ($510)|0);
   HEAP32[$518>>2] = $512;
   $519 = $$0197 | 3;
   $520 = ((($513)) + 4|0);
   HEAP32[$520>>2] = $519;
  } else {
   HEAP32[(38680)>>2] = 0;
   HEAP32[(38692)>>2] = 0;
   $521 = $510 | 3;
   $522 = ((($513)) + 4|0);
   HEAP32[$522>>2] = $521;
   $523 = (($513) + ($510)|0);
   $524 = ((($523)) + 4|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = ((($513)) + 8|0);
  $$0 = $527;
  STACKTOP = sp;return ($$0|0);
 }
 $528 = HEAP32[(38684)>>2]|0;
 $529 = ($528>>>0)>($$0197>>>0);
 if ($529) {
  $530 = (($528) - ($$0197))|0;
  HEAP32[(38684)>>2] = $530;
  $531 = HEAP32[(38696)>>2]|0;
  $532 = (($531) + ($$0197)|0);
  HEAP32[(38696)>>2] = $532;
  $533 = $530 | 1;
  $534 = ((($532)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = $$0197 | 3;
  $536 = ((($531)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = ((($531)) + 8|0);
  $$0 = $537;
  STACKTOP = sp;return ($$0|0);
 }
 $538 = HEAP32[9786]|0;
 $539 = ($538|0)==(0);
 if ($539) {
  HEAP32[(39152)>>2] = 4096;
  HEAP32[(39148)>>2] = 4096;
  HEAP32[(39156)>>2] = -1;
  HEAP32[(39160)>>2] = -1;
  HEAP32[(39164)>>2] = 0;
  HEAP32[(39116)>>2] = 0;
  $540 = $1;
  $541 = $540 & -16;
  $542 = $541 ^ 1431655768;
  HEAP32[9786] = $542;
  $546 = 4096;
 } else {
  $$pre$i210 = HEAP32[(39152)>>2]|0;
  $546 = $$pre$i210;
 }
 $543 = (($$0197) + 48)|0;
 $544 = (($$0197) + 47)|0;
 $545 = (($546) + ($544))|0;
 $547 = (0 - ($546))|0;
 $548 = $545 & $547;
 $549 = ($548>>>0)>($$0197>>>0);
 if (!($549)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $550 = HEAP32[(39112)>>2]|0;
 $551 = ($550|0)==(0);
 if (!($551)) {
  $552 = HEAP32[(39104)>>2]|0;
  $553 = (($552) + ($548))|0;
  $554 = ($553>>>0)<=($552>>>0);
  $555 = ($553>>>0)>($550>>>0);
  $or$cond1$i = $554 | $555;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $556 = HEAP32[(39116)>>2]|0;
 $557 = $556 & 4;
 $558 = ($557|0)==(0);
 L257: do {
  if ($558) {
   $559 = HEAP32[(38696)>>2]|0;
   $560 = ($559|0)==(0|0);
   L259: do {
    if ($560) {
     label = 173;
    } else {
     $$0$i$i = (39120);
     while(1) {
      $561 = HEAP32[$$0$i$i>>2]|0;
      $562 = ($561>>>0)>($559>>>0);
      if (!($562)) {
       $563 = ((($$0$i$i)) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($561) + ($564)|0);
       $566 = ($565>>>0)>($559>>>0);
       if ($566) {
        break;
       }
      }
      $567 = ((($$0$i$i)) + 8|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 173;
       break L259;
      } else {
       $$0$i$i = $568;
      }
     }
     $592 = (($545) - ($528))|0;
     $593 = $592 & $547;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = ((($$0$i$i)) + 4|0);
      $596 = (_sbrk(($593|0))|0);
      $597 = HEAP32[$$0$i$i>>2]|0;
      $598 = HEAP32[$595>>2]|0;
      $599 = (($597) + ($598)|0);
      $600 = ($596|0)==($599|0);
      if ($600) {
       $601 = ($596|0)==((-1)|0);
       if ($601) {
        $$2234243136$i = $593;
       } else {
        $$723947$i = $593;$$748$i = $596;
        label = 190;
        break L257;
       }
      } else {
       $$2247$ph$i = $596;$$2253$ph$i = $593;
       label = 181;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $570 = (_sbrk(0)|0);
     $571 = ($570|0)==((-1)|0);
     if ($571) {
      $$2234243136$i = 0;
     } else {
      $572 = $570;
      $573 = HEAP32[(39148)>>2]|0;
      $574 = (($573) + -1)|0;
      $575 = $574 & $572;
      $576 = ($575|0)==(0);
      $577 = (($574) + ($572))|0;
      $578 = (0 - ($573))|0;
      $579 = $577 & $578;
      $580 = (($579) - ($572))|0;
      $581 = $576 ? 0 : $580;
      $spec$select49$i = (($581) + ($548))|0;
      $582 = HEAP32[(39104)>>2]|0;
      $583 = (($spec$select49$i) + ($582))|0;
      $584 = ($spec$select49$i>>>0)>($$0197>>>0);
      $585 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i213 = $584 & $585;
      if ($or$cond$i213) {
       $586 = HEAP32[(39112)>>2]|0;
       $587 = ($586|0)==(0);
       if (!($587)) {
        $588 = ($583>>>0)<=($582>>>0);
        $589 = ($583>>>0)>($586>>>0);
        $or$cond2$i214 = $588 | $589;
        if ($or$cond2$i214) {
         $$2234243136$i = 0;
         break;
        }
       }
       $590 = (_sbrk(($spec$select49$i|0))|0);
       $591 = ($590|0)==($570|0);
       if ($591) {
        $$723947$i = $spec$select49$i;$$748$i = $570;
        label = 190;
        break L257;
       } else {
        $$2247$ph$i = $590;$$2253$ph$i = $spec$select49$i;
        label = 181;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $602 = (0 - ($$2253$ph$i))|0;
     $603 = ($$2247$ph$i|0)!=((-1)|0);
     $604 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $604 & $603;
     $605 = ($543>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $605 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $615 = ($$2247$ph$i|0)==((-1)|0);
      if ($615) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 190;
       break L257;
      }
     }
     $606 = HEAP32[(39152)>>2]|0;
     $607 = (($544) - ($$2253$ph$i))|0;
     $608 = (($607) + ($606))|0;
     $609 = (0 - ($606))|0;
     $610 = $608 & $609;
     $611 = ($610>>>0)<(2147483647);
     if (!($611)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
     $612 = (_sbrk(($610|0))|0);
     $613 = ($612|0)==((-1)|0);
     if ($613) {
      (_sbrk(($602|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $614 = (($610) + ($$2253$ph$i))|0;
      $$723947$i = $614;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $616 = HEAP32[(39116)>>2]|0;
   $617 = $616 | 4;
   HEAP32[(39116)>>2] = $617;
   $$4236$i = $$2234243136$i;
   label = 188;
  } else {
   $$4236$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $618 = ($548>>>0)<(2147483647);
  if ($618) {
   $619 = (_sbrk(($548|0))|0);
   $620 = (_sbrk(0)|0);
   $621 = ($619|0)!=((-1)|0);
   $622 = ($620|0)!=((-1)|0);
   $or$cond5$i = $621 & $622;
   $623 = ($619>>>0)<($620>>>0);
   $or$cond8$i = $623 & $or$cond5$i;
   $624 = $620;
   $625 = $619;
   $626 = (($624) - ($625))|0;
   $627 = (($$0197) + 40)|0;
   $628 = ($626>>>0)>($627>>>0);
   $spec$select9$i = $628 ? $626 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $629 = ($619|0)==((-1)|0);
   $not$$i = $628 ^ 1;
   $630 = $629 | $not$$i;
   $or$cond50$i = $630 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $619;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $631 = HEAP32[(39104)>>2]|0;
  $632 = (($631) + ($$723947$i))|0;
  HEAP32[(39104)>>2] = $632;
  $633 = HEAP32[(39108)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(39108)>>2] = $632;
  }
  $635 = HEAP32[(38696)>>2]|0;
  $636 = ($635|0)==(0|0);
  L294: do {
   if ($636) {
    $637 = HEAP32[(38688)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($$748$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(38688)>>2] = $$748$i;
    }
    HEAP32[(39120)>>2] = $$748$i;
    HEAP32[(39124)>>2] = $$723947$i;
    HEAP32[(39132)>>2] = 0;
    $640 = HEAP32[9786]|0;
    HEAP32[(38708)>>2] = $640;
    HEAP32[(38704)>>2] = -1;
    HEAP32[(38724)>>2] = (38712);
    HEAP32[(38720)>>2] = (38712);
    HEAP32[(38732)>>2] = (38720);
    HEAP32[(38728)>>2] = (38720);
    HEAP32[(38740)>>2] = (38728);
    HEAP32[(38736)>>2] = (38728);
    HEAP32[(38748)>>2] = (38736);
    HEAP32[(38744)>>2] = (38736);
    HEAP32[(38756)>>2] = (38744);
    HEAP32[(38752)>>2] = (38744);
    HEAP32[(38764)>>2] = (38752);
    HEAP32[(38760)>>2] = (38752);
    HEAP32[(38772)>>2] = (38760);
    HEAP32[(38768)>>2] = (38760);
    HEAP32[(38780)>>2] = (38768);
    HEAP32[(38776)>>2] = (38768);
    HEAP32[(38788)>>2] = (38776);
    HEAP32[(38784)>>2] = (38776);
    HEAP32[(38796)>>2] = (38784);
    HEAP32[(38792)>>2] = (38784);
    HEAP32[(38804)>>2] = (38792);
    HEAP32[(38800)>>2] = (38792);
    HEAP32[(38812)>>2] = (38800);
    HEAP32[(38808)>>2] = (38800);
    HEAP32[(38820)>>2] = (38808);
    HEAP32[(38816)>>2] = (38808);
    HEAP32[(38828)>>2] = (38816);
    HEAP32[(38824)>>2] = (38816);
    HEAP32[(38836)>>2] = (38824);
    HEAP32[(38832)>>2] = (38824);
    HEAP32[(38844)>>2] = (38832);
    HEAP32[(38840)>>2] = (38832);
    HEAP32[(38852)>>2] = (38840);
    HEAP32[(38848)>>2] = (38840);
    HEAP32[(38860)>>2] = (38848);
    HEAP32[(38856)>>2] = (38848);
    HEAP32[(38868)>>2] = (38856);
    HEAP32[(38864)>>2] = (38856);
    HEAP32[(38876)>>2] = (38864);
    HEAP32[(38872)>>2] = (38864);
    HEAP32[(38884)>>2] = (38872);
    HEAP32[(38880)>>2] = (38872);
    HEAP32[(38892)>>2] = (38880);
    HEAP32[(38888)>>2] = (38880);
    HEAP32[(38900)>>2] = (38888);
    HEAP32[(38896)>>2] = (38888);
    HEAP32[(38908)>>2] = (38896);
    HEAP32[(38904)>>2] = (38896);
    HEAP32[(38916)>>2] = (38904);
    HEAP32[(38912)>>2] = (38904);
    HEAP32[(38924)>>2] = (38912);
    HEAP32[(38920)>>2] = (38912);
    HEAP32[(38932)>>2] = (38920);
    HEAP32[(38928)>>2] = (38920);
    HEAP32[(38940)>>2] = (38928);
    HEAP32[(38936)>>2] = (38928);
    HEAP32[(38948)>>2] = (38936);
    HEAP32[(38944)>>2] = (38936);
    HEAP32[(38956)>>2] = (38944);
    HEAP32[(38952)>>2] = (38944);
    HEAP32[(38964)>>2] = (38952);
    HEAP32[(38960)>>2] = (38952);
    HEAP32[(38972)>>2] = (38960);
    HEAP32[(38968)>>2] = (38960);
    $641 = (($$723947$i) + -40)|0;
    $642 = ((($$748$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$748$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(38696)>>2] = $649;
    HEAP32[(38684)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($$748$i) + ($641)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(39160)>>2]|0;
    HEAP32[(38700)>>2] = $655;
   } else {
    $$024372$i = (39120);
    while(1) {
     $656 = HEAP32[$$024372$i>>2]|0;
     $657 = ((($$024372$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$748$i|0)==($659|0);
     if ($660) {
      label = 199;
      break;
     }
     $661 = ((($$024372$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024372$i = $662;
     }
    }
    if ((label|0) == 199) {
     $664 = ((($$024372$i)) + 4|0);
     $665 = ((($$024372$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($656>>>0)<=($635>>>0);
      $670 = ($$748$i>>>0)>($635>>>0);
      $or$cond51$i = $670 & $669;
      if ($or$cond51$i) {
       $671 = (($658) + ($$723947$i))|0;
       HEAP32[$664>>2] = $671;
       $672 = HEAP32[(38684)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($635)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($635) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(38696)>>2] = $681;
       HEAP32[(38684)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($635) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(39160)>>2]|0;
       HEAP32[(38700)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(38688)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(38688)>>2] = $$748$i;
     $752 = $$748$i;
    } else {
     $752 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (39120);
    while(1) {
     $691 = HEAP32[$$124471$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 207;
      break;
     }
     $693 = ((($$124471$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      break;
     } else {
      $$124471$i = $694;
     }
    }
    if ((label|0) == 207) {
     $696 = ((($$124471$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $700 = ((($$124471$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($635|0)==($718|0);
      L317: do {
       if ($726) {
        $727 = HEAP32[(38684)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(38684)>>2] = $728;
        HEAP32[(38696)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(38692)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(38680)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(38680)>>2] = $734;
         HEAP32[(38692)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L325: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (38712 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $753 = ($752>>>0)>($746>>>0);
             if ($753) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[9668]|0;
            $761 = $760 & $759;
            HEAP32[9668] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre16$i$i = ((($748)) + 8|0);
             $$pre$phi17$i$iZ2D = $$pre16$i$i;
            } else {
             $763 = ($752>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi17$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi17$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i$ph = $786;$$1292$i$i$ph = $782;
              }
             } else {
              $$1290$i$i$ph = $784;$$1292$i$i$ph = $783;
             }
             $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
             while(1) {
              $788 = ((($$1290$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $791 = ((($$1290$i$i)) + 16|0);
               $792 = HEAP32[$791>>2]|0;
               $793 = ($792|0)==(0|0);
               if ($793) {
                break;
               } else {
                $$1290$i$i$be = $792;$$1292$i$i$be = $791;
               }
              } else {
               $$1290$i$i$be = $789;$$1292$i$i$be = $788;
              }
              $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
             }
             $794 = ($752>>>0)>($$1292$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($752>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (38976 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(38676)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(38676)>>2] = $804;
             break L325;
            } else {
             $805 = HEAP32[(38688)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)==($718|0);
              $810 = ((($769)) + 20|0);
              $$sink326 = $809 ? $807 : $810;
              HEAP32[$$sink326>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(38688)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(38688)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i16$i = $828;$$0286$i$i = $829;
        } else {
         $$0$i16$i = $718;$$0286$i$i = $723;
        }
        $830 = ((($$0$i16$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0286$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0286$i$i)|0);
        HEAP32[$835>>2] = $$0286$i$i;
        $836 = $$0286$i$i >>> 3;
        $837 = ($$0286$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (38712 + ($838<<2)|0);
         $840 = HEAP32[9668]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[9668] = $844;
           $$pre$i17$i = ((($839)) + 8|0);
           $$0294$i$i = $839;$$pre$phi$i18$iZ2D = $$pre$i17$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(38688)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0294$i$i = $846;$$pre$phi$i18$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $722;
         $849 = ((($$0294$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0294$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $$0286$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0295$i$i = 0;
         } else {
          $854 = ($$0286$i$i>>>0)>(16777215);
          if ($854) {
           $$0295$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $$0286$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0295$i$i = $876;
         }
        } while(0);
        $877 = (38976 + ($$0295$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0295$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(38676)>>2]|0;
        $882 = 1 << $$0295$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(38676)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ((($889)) + 4|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = $891 & -8;
        $893 = ($892|0)==($$0286$i$i|0);
        L410: do {
         if ($893) {
          $$0288$lcssa$i$i = $889;
         } else {
          $894 = ($$0295$i$i|0)==(31);
          $895 = $$0295$i$i >>> 1;
          $896 = (25 - ($895))|0;
          $897 = $894 ? 0 : $896;
          $898 = $$0286$i$i << $897;
          $$028711$i$i = $898;$$028810$i$i = $889;
          while(1) {
           $905 = $$028711$i$i >>> 31;
           $906 = (((($$028810$i$i)) + 16|0) + ($905<<2)|0);
           $901 = HEAP32[$906>>2]|0;
           $907 = ($901|0)==(0|0);
           if ($907) {
            break;
           }
           $899 = $$028711$i$i << 1;
           $900 = ((($901)) + 4|0);
           $902 = HEAP32[$900>>2]|0;
           $903 = $902 & -8;
           $904 = ($903|0)==($$0286$i$i|0);
           if ($904) {
            $$0288$lcssa$i$i = $901;
            break L410;
           } else {
            $$028711$i$i = $899;$$028810$i$i = $901;
           }
          }
          $908 = HEAP32[(38688)>>2]|0;
          $909 = ($908>>>0)>($906>>>0);
          if ($909) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$906>>2] = $722;
           $910 = ((($722)) + 24|0);
           HEAP32[$910>>2] = $$028810$i$i;
           $911 = ((($722)) + 12|0);
           HEAP32[$911>>2] = $722;
           $912 = ((($722)) + 8|0);
           HEAP32[$912>>2] = $722;
           break L317;
          }
         }
        } while(0);
        $913 = ((($$0288$lcssa$i$i)) + 8|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = HEAP32[(38688)>>2]|0;
        $916 = ($915>>>0)<=($$0288$lcssa$i$i>>>0);
        $917 = ($915>>>0)<=($914>>>0);
        $918 = $917 & $916;
        if ($918) {
         $919 = ((($914)) + 12|0);
         HEAP32[$919>>2] = $722;
         HEAP32[$913>>2] = $722;
         $920 = ((($722)) + 8|0);
         HEAP32[$920>>2] = $914;
         $921 = ((($722)) + 12|0);
         HEAP32[$921>>2] = $$0288$lcssa$i$i;
         $922 = ((($722)) + 24|0);
         HEAP32[$922>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $1059 = ((($710)) + 8|0);
      $$0 = $1059;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (39120);
    while(1) {
     $923 = HEAP32[$$0$i$i$i>>2]|0;
     $924 = ($923>>>0)>($635>>>0);
     if (!($924)) {
      $925 = ((($$0$i$i$i)) + 4|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = (($923) + ($926)|0);
      $928 = ($927>>>0)>($635>>>0);
      if ($928) {
       break;
      }
     }
     $929 = ((($$0$i$i$i)) + 8|0);
     $930 = HEAP32[$929>>2]|0;
     $$0$i$i$i = $930;
    }
    $931 = ((($927)) + -47|0);
    $932 = ((($931)) + 8|0);
    $933 = $932;
    $934 = $933 & 7;
    $935 = ($934|0)==(0);
    $936 = (0 - ($933))|0;
    $937 = $936 & 7;
    $938 = $935 ? 0 : $937;
    $939 = (($931) + ($938)|0);
    $940 = ((($635)) + 16|0);
    $941 = ($939>>>0)<($940>>>0);
    $942 = $941 ? $635 : $939;
    $943 = ((($942)) + 8|0);
    $944 = ((($942)) + 24|0);
    $945 = (($$723947$i) + -40)|0;
    $946 = ((($$748$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($$748$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(38696)>>2] = $953;
    HEAP32[(38684)>>2] = $954;
    $955 = $954 | 1;
    $956 = ((($953)) + 4|0);
    HEAP32[$956>>2] = $955;
    $957 = (($$748$i) + ($945)|0);
    $958 = ((($957)) + 4|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[(39160)>>2]|0;
    HEAP32[(38700)>>2] = $959;
    $960 = ((($942)) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$943>>2]=HEAP32[(39120)>>2]|0;HEAP32[$943+4>>2]=HEAP32[(39120)+4>>2]|0;HEAP32[$943+8>>2]=HEAP32[(39120)+8>>2]|0;HEAP32[$943+12>>2]=HEAP32[(39120)+12>>2]|0;
    HEAP32[(39120)>>2] = $$748$i;
    HEAP32[(39124)>>2] = $$723947$i;
    HEAP32[(39132)>>2] = 0;
    HEAP32[(39128)>>2] = $943;
    $962 = $944;
    while(1) {
     $961 = ((($962)) + 4|0);
     HEAP32[$961>>2] = 7;
     $963 = ((($962)) + 8|0);
     $964 = ($963>>>0)<($927>>>0);
     if ($964) {
      $962 = $961;
     } else {
      break;
     }
    }
    $965 = ($942|0)==($635|0);
    if (!($965)) {
     $966 = $942;
     $967 = $635;
     $968 = (($966) - ($967))|0;
     $969 = HEAP32[$960>>2]|0;
     $970 = $969 & -2;
     HEAP32[$960>>2] = $970;
     $971 = $968 | 1;
     $972 = ((($635)) + 4|0);
     HEAP32[$972>>2] = $971;
     HEAP32[$942>>2] = $968;
     $973 = $968 >>> 3;
     $974 = ($968>>>0)<(256);
     if ($974) {
      $975 = $973 << 1;
      $976 = (38712 + ($975<<2)|0);
      $977 = HEAP32[9668]|0;
      $978 = 1 << $973;
      $979 = $977 & $978;
      $980 = ($979|0)==(0);
      if ($980) {
       $981 = $977 | $978;
       HEAP32[9668] = $981;
       $$pre$i$i = ((($976)) + 8|0);
       $$0211$i$i = $976;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $982 = ((($976)) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = HEAP32[(38688)>>2]|0;
       $985 = ($984>>>0)>($983>>>0);
       if ($985) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $983;$$pre$phi$i$iZ2D = $982;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $986 = ((($$0211$i$i)) + 12|0);
      HEAP32[$986>>2] = $635;
      $987 = ((($635)) + 8|0);
      HEAP32[$987>>2] = $$0211$i$i;
      $988 = ((($635)) + 12|0);
      HEAP32[$988>>2] = $976;
      break;
     }
     $989 = $968 >>> 8;
     $990 = ($989|0)==(0);
     if ($990) {
      $$0212$i$i = 0;
     } else {
      $991 = ($968>>>0)>(16777215);
      if ($991) {
       $$0212$i$i = 31;
      } else {
       $992 = (($989) + 1048320)|0;
       $993 = $992 >>> 16;
       $994 = $993 & 8;
       $995 = $989 << $994;
       $996 = (($995) + 520192)|0;
       $997 = $996 >>> 16;
       $998 = $997 & 4;
       $999 = $998 | $994;
       $1000 = $995 << $998;
       $1001 = (($1000) + 245760)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 2;
       $1004 = $999 | $1003;
       $1005 = (14 - ($1004))|0;
       $1006 = $1000 << $1003;
       $1007 = $1006 >>> 15;
       $1008 = (($1005) + ($1007))|0;
       $1009 = $1008 << 1;
       $1010 = (($1008) + 7)|0;
       $1011 = $968 >>> $1010;
       $1012 = $1011 & 1;
       $1013 = $1012 | $1009;
       $$0212$i$i = $1013;
      }
     }
     $1014 = (38976 + ($$0212$i$i<<2)|0);
     $1015 = ((($635)) + 28|0);
     HEAP32[$1015>>2] = $$0212$i$i;
     $1016 = ((($635)) + 20|0);
     HEAP32[$1016>>2] = 0;
     HEAP32[$940>>2] = 0;
     $1017 = HEAP32[(38676)>>2]|0;
     $1018 = 1 << $$0212$i$i;
     $1019 = $1017 & $1018;
     $1020 = ($1019|0)==(0);
     if ($1020) {
      $1021 = $1017 | $1018;
      HEAP32[(38676)>>2] = $1021;
      HEAP32[$1014>>2] = $635;
      $1022 = ((($635)) + 24|0);
      HEAP32[$1022>>2] = $1014;
      $1023 = ((($635)) + 12|0);
      HEAP32[$1023>>2] = $635;
      $1024 = ((($635)) + 8|0);
      HEAP32[$1024>>2] = $635;
      break;
     }
     $1025 = HEAP32[$1014>>2]|0;
     $1026 = ((($1025)) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 & -8;
     $1029 = ($1028|0)==($968|0);
     L451: do {
      if ($1029) {
       $$0207$lcssa$i$i = $1025;
      } else {
       $1030 = ($$0212$i$i|0)==(31);
       $1031 = $$0212$i$i >>> 1;
       $1032 = (25 - ($1031))|0;
       $1033 = $1030 ? 0 : $1032;
       $1034 = $968 << $1033;
       $$02065$i$i = $1034;$$02074$i$i = $1025;
       while(1) {
        $1041 = $$02065$i$i >>> 31;
        $1042 = (((($$02074$i$i)) + 16|0) + ($1041<<2)|0);
        $1037 = HEAP32[$1042>>2]|0;
        $1043 = ($1037|0)==(0|0);
        if ($1043) {
         break;
        }
        $1035 = $$02065$i$i << 1;
        $1036 = ((($1037)) + 4|0);
        $1038 = HEAP32[$1036>>2]|0;
        $1039 = $1038 & -8;
        $1040 = ($1039|0)==($968|0);
        if ($1040) {
         $$0207$lcssa$i$i = $1037;
         break L451;
        } else {
         $$02065$i$i = $1035;$$02074$i$i = $1037;
        }
       }
       $1044 = HEAP32[(38688)>>2]|0;
       $1045 = ($1044>>>0)>($1042>>>0);
       if ($1045) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1042>>2] = $635;
        $1046 = ((($635)) + 24|0);
        HEAP32[$1046>>2] = $$02074$i$i;
        $1047 = ((($635)) + 12|0);
        HEAP32[$1047>>2] = $635;
        $1048 = ((($635)) + 8|0);
        HEAP32[$1048>>2] = $635;
        break L294;
       }
      }
     } while(0);
     $1049 = ((($$0207$lcssa$i$i)) + 8|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = HEAP32[(38688)>>2]|0;
     $1052 = ($1051>>>0)<=($$0207$lcssa$i$i>>>0);
     $1053 = ($1051>>>0)<=($1050>>>0);
     $1054 = $1053 & $1052;
     if ($1054) {
      $1055 = ((($1050)) + 12|0);
      HEAP32[$1055>>2] = $635;
      HEAP32[$1049>>2] = $635;
      $1056 = ((($635)) + 8|0);
      HEAP32[$1056>>2] = $1050;
      $1057 = ((($635)) + 12|0);
      HEAP32[$1057>>2] = $$0207$lcssa$i$i;
      $1058 = ((($635)) + 24|0);
      HEAP32[$1058>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(38684)>>2]|0;
  $1061 = ($1060>>>0)>($$0197>>>0);
  if ($1061) {
   $1062 = (($1060) - ($$0197))|0;
   HEAP32[(38684)>>2] = $1062;
   $1063 = HEAP32[(38696)>>2]|0;
   $1064 = (($1063) + ($$0197)|0);
   HEAP32[(38696)>>2] = $1064;
   $1065 = $1062 | 1;
   $1066 = ((($1064)) + 4|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $$0197 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $$0 = $1069;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(38688)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(38692)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $109 = (($16) + ($17)|0);
    $110 = ((($16)) + 4|0);
    $111 = $17 | 1;
    $112 = $106 & -2;
    HEAP32[(38680)>>2] = $17;
    HEAP32[$105>>2] = $112;
    HEAP32[$110>>2] = $111;
    HEAP32[$109>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (38712 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[9668]|0;
     $38 = $37 & $36;
     HEAP32[9668] = $38;
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre445 = ((($26)) + 8|0);
     $$pre$phi446Z2D = $$pre445;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi446Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi446Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385$ph = $63;$$1388$ph = $59;
      }
     } else {
      $$1385$ph = $61;$$1388$ph = $60;
     }
     $$1385 = $$1385$ph;$$1388 = $$1388$ph;
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = ((($$1385)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        break;
       } else {
        $$1385$be = $69;$$1388$be = $68;
       }
      } else {
       $$1385$be = $66;$$1388$be = $65;
      }
      $$1385 = $$1385$be;$$1388 = $$1388$be;
     }
     $71 = ($3>>>0)>($$1388>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (38976 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond419 = ($$3|0)==(0|0);
      if ($cond419) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(38676)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(38676)>>2] = $81;
       $$1 = $16;$$1380 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(38688)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==($16|0);
       $87 = ((($46)) + 20|0);
       $$sink = $86 ? $84 : $87;
       HEAP32[$$sink>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1380 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(38688)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;$113 = $16;
    } else {
     $101 = HEAP32[(38688)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;$113 = $2;
  }
 } while(0);
 $114 = ($113>>>0)<($10>>>0);
 if (!($114)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(38696)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(38684)>>2]|0;
   $124 = (($123) + ($$1380))|0;
   HEAP32[(38684)>>2] = $124;
   HEAP32[(38696)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(38692)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(38692)>>2] = 0;
   HEAP32[(38680)>>2] = 0;
   return;
  }
  $129 = HEAP32[(38692)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(38680)>>2]|0;
   $132 = (($131) + ($$1380))|0;
   HEAP32[(38680)>>2] = $132;
   HEAP32[(38692)>>2] = $113;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($113) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1380))|0;
  $138 = $116 >>> 3;
  $139 = ($116>>>0)<(256);
  L111: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (38712 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(38688)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[9668]|0;
     $156 = $155 & $154;
     HEAP32[9668] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre443 = ((($143)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $158 = HEAP32[(38688)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi444Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi444Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3398 = 0;
        break;
       } else {
        $$1396$ph = $183;$$1400$ph = $179;
       }
      } else {
       $$1396$ph = $181;$$1400$ph = $180;
      }
      $$1396 = $$1396$ph;$$1400 = $$1400$ph;
      while(1) {
       $185 = ((($$1396)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if ($187) {
        $188 = ((($$1396)) + 16|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ($189|0)==(0|0);
        if ($190) {
         break;
        } else {
         $$1396$be = $189;$$1400$be = $188;
        }
       } else {
        $$1396$be = $186;$$1400$be = $185;
       }
       $$1396 = $$1396$be;$$1400 = $$1400$be;
      }
      $191 = HEAP32[(38688)>>2]|0;
      $192 = ($191>>>0)>($$1400>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(38688)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3398 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (38976 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3398;
       $cond420 = ($$3398|0)==(0|0);
       if ($cond420) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(38676)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(38676)>>2] = $202;
        break L111;
       }
      } else {
       $203 = HEAP32[(38688)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)==($10|0);
        $208 = ((($165)) + 20|0);
        $$sink456 = $207 ? $205 : $208;
        HEAP32[$$sink456>>2] = $$3398;
        $209 = ($$3398|0)==(0|0);
        if ($209) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(38688)>>2]|0;
     $211 = ($210>>>0)>($$3398>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3398)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3398)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(38688)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3398)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($113) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(38692)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(38680)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1380 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($113) + ($$1380)|0);
  HEAP32[$234>>2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (38712 + ($237<<2)|0);
  $239 = HEAP32[9668]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[9668] = $243;
   $$pre = ((($238)) + 8|0);
   $$0401 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(38688)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0401)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0401;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 $252 = ($251|0)==(0);
 if ($252) {
  $$0394 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0394 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = $258 >>> 16;
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = $263 >>> 16;
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = $268 >>> 15;
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = $$2 >>> $272;
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0394 = $275;
  }
 }
 $276 = (38976 + ($$0394<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0394;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(38676)>>2]|0;
 $281 = 1 << $$0394;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 L197: do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(38676)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 & -8;
   $292 = ($291|0)==($$2|0);
   L200: do {
    if ($292) {
     $$0382$lcssa = $288;
    } else {
     $293 = ($$0394|0)==(31);
     $294 = $$0394 >>> 1;
     $295 = (25 - ($294))|0;
     $296 = $293 ? 0 : $295;
     $297 = $$2 << $296;
     $$0381438 = $297;$$0382437 = $288;
     while(1) {
      $304 = $$0381438 >>> 31;
      $305 = (((($$0382437)) + 16|0) + ($304<<2)|0);
      $300 = HEAP32[$305>>2]|0;
      $306 = ($300|0)==(0|0);
      if ($306) {
       break;
      }
      $298 = $$0381438 << 1;
      $299 = ((($300)) + 4|0);
      $301 = HEAP32[$299>>2]|0;
      $302 = $301 & -8;
      $303 = ($302|0)==($$2|0);
      if ($303) {
       $$0382$lcssa = $300;
       break L200;
      } else {
       $$0381438 = $298;$$0382437 = $300;
      }
     }
     $307 = HEAP32[(38688)>>2]|0;
     $308 = ($307>>>0)>($305>>>0);
     if ($308) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$305>>2] = $$1;
      $309 = ((($$1)) + 24|0);
      HEAP32[$309>>2] = $$0382437;
      $310 = ((($$1)) + 12|0);
      HEAP32[$310>>2] = $$1;
      $311 = ((($$1)) + 8|0);
      HEAP32[$311>>2] = $$1;
      break L197;
     }
    }
   } while(0);
   $312 = ((($$0382$lcssa)) + 8|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = HEAP32[(38688)>>2]|0;
   $315 = ($314>>>0)<=($$0382$lcssa>>>0);
   $316 = ($314>>>0)<=($313>>>0);
   $317 = $316 & $315;
   if ($317) {
    $318 = ((($313)) + 12|0);
    HEAP32[$318>>2] = $$1;
    HEAP32[$312>>2] = $$1;
    $319 = ((($$1)) + 8|0);
    HEAP32[$319>>2] = $313;
    $320 = ((($$1)) + 12|0);
    HEAP32[$320>>2] = $$0382$lcssa;
    $321 = ((($$1)) + 24|0);
    HEAP32[$321>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $322 = HEAP32[(38704)>>2]|0;
 $323 = (($322) + -1)|0;
 HEAP32[(38704)>>2] = $323;
 $324 = ($323|0)==(0);
 if (!($324)) {
  return;
 }
 $$0211$in$i = (39128);
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $325 = ($$0211$i|0)==(0|0);
  $326 = ((($$0211$i)) + 8|0);
  if ($325) {
   break;
  } else {
   $$0211$in$i = $326;
  }
 }
 HEAP32[(38704)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond$not = 0, $or$cond5 = 0, $storemerge = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(38688)>>2]|0;
 $7 = ($6>>>0)<=($0>>>0);
 $8 = $3 & 3;
 $9 = ($8|0)!=(1);
 $or$cond$not = $9 & $7;
 $10 = ($5>>>0)>($0>>>0);
 $or$cond5 = $or$cond$not & $10;
 if (!($or$cond5)) {
  _abort();
  // unreachable;
 }
 $11 = ((($5)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  _abort();
  // unreachable;
 }
 $15 = ($8|0)==(0);
 if ($15) {
  $16 = ($1>>>0)<(256);
  if ($16) {
   $$2 = 0;
   return ($$2|0);
  }
  $17 = (($1) + 4)|0;
  $18 = ($4>>>0)<($17>>>0);
  if (!($18)) {
   $19 = (($4) - ($1))|0;
   $20 = HEAP32[(39152)>>2]|0;
   $21 = $20 << 1;
   $22 = ($19>>>0)>($21>>>0);
   if (!($22)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $23 = ($4>>>0)<($1>>>0);
 if (!($23)) {
  $24 = (($4) - ($1))|0;
  $25 = ($24>>>0)>(15);
  if (!($25)) {
   $$2 = $0;
   return ($$2|0);
  }
  $26 = (($0) + ($1)|0);
  $27 = $3 & 1;
  $28 = $27 | $1;
  $29 = $28 | 2;
  HEAP32[$2>>2] = $29;
  $30 = ((($26)) + 4|0);
  $31 = $24 | 3;
  HEAP32[$30>>2] = $31;
  $32 = HEAP32[$11>>2]|0;
  $33 = $32 | 1;
  HEAP32[$11>>2] = $33;
  _dispose_chunk($26,$24);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(38696)>>2]|0;
 $35 = ($34|0)==($5|0);
 if ($35) {
  $36 = HEAP32[(38684)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(38696)>>2] = $40;
  HEAP32[(38684)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(38692)>>2]|0;
 $47 = ($46|0)==($5|0);
 if ($47) {
  $48 = HEAP32[(38680)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($0) + ($49)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge3 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(38680)>>2] = $storemerge3;
  HEAP32[(38692)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $12 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $12 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $12 >>> 3;
 $77 = ($12>>>0)<(256);
 L49: do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (38712 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($6>>>0)>($79>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[9668]|0;
    $93 = $92 & $91;
    HEAP32[9668] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($6>>>0)>($81>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271$ph = $118;$$1274$ph = $114;
      }
     } else {
      $$1271$ph = $116;$$1274$ph = $115;
     }
     $$1271 = $$1271$ph;$$1274 = $$1274$ph;
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $123 = ((($$1271)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        break;
       } else {
        $$1271$be = $124;$$1274$be = $123;
       }
      } else {
       $$1271$be = $121;$$1274$be = $120;
      }
      $$1271 = $$1271$be;$$1274 = $$1274$be;
     }
     $126 = ($6>>>0)>($$1274>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($6>>>0)>($106>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (38976 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==($5|0);
    do {
     if ($132) {
      HEAP32[$130>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $133 = 1 << $129;
       $134 = $133 ^ -1;
       $135 = HEAP32[(38676)>>2]|0;
       $136 = $135 & $134;
       HEAP32[(38676)>>2] = $136;
       break L49;
      }
     } else {
      $137 = HEAP32[(38688)>>2]|0;
      $138 = ($137>>>0)>($101>>>0);
      if ($138) {
       _abort();
       // unreachable;
      } else {
       $139 = ((($101)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==($5|0);
       $142 = ((($101)) + 20|0);
       $$sink = $141 ? $139 : $142;
       HEAP32[$$sink>>2] = $$3;
       $143 = ($$3|0)==(0|0);
       if ($143) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $144 = HEAP32[(38688)>>2]|0;
    $145 = ($144>>>0)>($$3>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($144>>>0)>($148>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(38688)>>2]|0;
     $157 = ($156>>>0)>($154>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $161 | $73;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($0) + ($73)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0;
 var $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $$pre29 = 0, $$sink = 0, $$sink41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0;
 var $cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(38688)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(38692)>>2]|0;
   $16 = ($15|0)==($11|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $102 & -2;
    HEAP32[(38680)>>2] = $12;
    HEAP32[$101>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$2>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (38712 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($13>>>0)>($20>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[9668]|0;
     $34 = $33 & $32;
     HEAP32[9668] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre29 = ((($22)) + 8|0);
     $$pre$phi30Z2D = $$pre29;
    } else {
     $36 = ($13>>>0)>($22>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi30Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi30Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424$ph = $59;$$1427$ph = $55;
      }
     } else {
      $$1424$ph = $57;$$1427$ph = $56;
     }
     $$1424 = $$1424$ph;$$1427 = $$1427$ph;
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = ((($$1424)) + 16|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if ($66) {
        break;
       } else {
        $$1424$be = $65;$$1427$be = $64;
       }
      } else {
       $$1424$be = $62;$$1427$be = $61;
      }
      $$1424 = $$1424$be;$$1427 = $$1427$be;
     }
     $67 = ($13>>>0)>($$1427>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($13>>>0)>($47>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (38976 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($11|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(38676)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(38676)>>2] = $77;
       $$1 = $11;$$1416 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(38688)>>2]|0;
      $79 = ($78>>>0)>($42>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($11|0);
       $83 = ((($42)) + 20|0);
       $$sink = $82 ? $80 : $83;
       HEAP32[$$sink>>2] = $$3;
       $84 = ($$3|0)==(0|0);
       if ($84) {
        $$1 = $11;$$1416 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $85 = HEAP32[(38688)>>2]|0;
    $86 = ($85>>>0)>($$3>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($85>>>0)>($89>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(38688)>>2]|0;
     $98 = ($97>>>0)>($95>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $108 = HEAP32[(38688)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(38696)>>2]|0;
  $115 = ($114|0)==($2|0);
  if ($115) {
   $116 = HEAP32[(38684)>>2]|0;
   $117 = (($116) + ($$1416))|0;
   HEAP32[(38684)>>2] = $117;
   HEAP32[(38696)>>2] = $$1;
   $118 = $117 | 1;
   $119 = ((($$1)) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[(38692)>>2]|0;
   $121 = ($$1|0)==($120|0);
   if (!($121)) {
    return;
   }
   HEAP32[(38692)>>2] = 0;
   HEAP32[(38680)>>2] = 0;
   return;
  }
  $122 = HEAP32[(38692)>>2]|0;
  $123 = ($122|0)==($2|0);
  if ($123) {
   $124 = HEAP32[(38680)>>2]|0;
   $125 = (($124) + ($$1416))|0;
   HEAP32[(38680)>>2] = $125;
   HEAP32[(38692)>>2] = $$1;
   $126 = $125 | 1;
   $127 = ((($$1)) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$1) + ($125)|0);
   HEAP32[$128>>2] = $125;
   return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$1416))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  L99: do {
   if ($132) {
    $133 = ((($2)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($2)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = (38712 + ($137<<2)|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($108>>>0)>($134>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = ((($134)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($2|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[9668]|0;
     $148 = $147 & $146;
     HEAP32[9668] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre27 = ((($136)) + 8|0);
     $$pre$phi28Z2D = $$pre27;
    } else {
     $150 = ($108>>>0)>($136>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = ((($136)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($2|0);
     if ($153) {
      $$pre$phi28Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = ((($134)) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi28Z2D>>2] = $134;
   } else {
    $155 = ((($2)) + 24|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($2|0);
    do {
     if ($159) {
      $169 = ((($2)) + 16|0);
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $173 = HEAP32[$169>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $$3433 = 0;
        break;
       } else {
        $$1431$ph = $173;$$1435$ph = $169;
       }
      } else {
       $$1431$ph = $171;$$1435$ph = $170;
      }
      $$1431 = $$1431$ph;$$1435 = $$1435$ph;
      while(1) {
       $175 = ((($$1431)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$1431)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1431$be = $179;$$1435$be = $178;
        }
       } else {
        $$1431$be = $176;$$1435$be = $175;
       }
       $$1431 = $$1431$be;$$1435 = $$1435$be;
      }
      $181 = ($108>>>0)>($$1435>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $160 = ((($2)) + 8|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($108>>>0)>($161>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = ((($161)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($2|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = ((($158)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($2|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $$3433 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $183 = ((($2)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (38976 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($2|0);
     do {
      if ($187) {
       HEAP32[$185>>2] = $$3433;
       $cond17 = ($$3433|0)==(0|0);
       if ($cond17) {
        $188 = 1 << $184;
        $189 = $188 ^ -1;
        $190 = HEAP32[(38676)>>2]|0;
        $191 = $190 & $189;
        HEAP32[(38676)>>2] = $191;
        break L99;
       }
      } else {
       $192 = HEAP32[(38688)>>2]|0;
       $193 = ($192>>>0)>($156>>>0);
       if ($193) {
        _abort();
        // unreachable;
       } else {
        $194 = ((($156)) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==($2|0);
        $197 = ((($156)) + 20|0);
        $$sink41 = $196 ? $194 : $197;
        HEAP32[$$sink41>>2] = $$3433;
        $198 = ($$3433|0)==(0|0);
        if ($198) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $199 = HEAP32[(38688)>>2]|0;
     $200 = ($199>>>0)>($$3433>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = ((($$3433)) + 24|0);
     HEAP32[$201>>2] = $156;
     $202 = ((($2)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = ($199>>>0)>($203>>>0);
       if ($205) {
        _abort();
        // unreachable;
       } else {
        $206 = ((($$3433)) + 16|0);
        HEAP32[$206>>2] = $203;
        $207 = ((($203)) + 24|0);
        HEAP32[$207>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $208 = ((($202)) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(0|0);
     if (!($210)) {
      $211 = HEAP32[(38688)>>2]|0;
      $212 = ($211>>>0)>($209>>>0);
      if ($212) {
       _abort();
       // unreachable;
      } else {
       $213 = ((($$3433)) + 20|0);
       HEAP32[$213>>2] = $209;
       $214 = ((($209)) + 24|0);
       HEAP32[$214>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $215 = $130 | 1;
  $216 = ((($$1)) + 4|0);
  HEAP32[$216>>2] = $215;
  $217 = (($$1) + ($130)|0);
  HEAP32[$217>>2] = $130;
  $218 = HEAP32[(38692)>>2]|0;
  $219 = ($$1|0)==($218|0);
  if ($219) {
   HEAP32[(38680)>>2] = $130;
   return;
  } else {
   $$2 = $130;
  }
 } else {
  $220 = $111 & -2;
  HEAP32[$110>>2] = $220;
  $221 = $$1416 | 1;
  $222 = ((($$1)) + 4|0);
  HEAP32[$222>>2] = $221;
  $223 = (($$1) + ($$1416)|0);
  HEAP32[$223>>2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 $225 = ($$2>>>0)<(256);
 if ($225) {
  $226 = $224 << 1;
  $227 = (38712 + ($226<<2)|0);
  $228 = HEAP32[9668]|0;
  $229 = 1 << $224;
  $230 = $228 & $229;
  $231 = ($230|0)==(0);
  if ($231) {
   $232 = $228 | $229;
   HEAP32[9668] = $232;
   $$pre = ((($227)) + 8|0);
   $$0436 = $227;$$pre$phiZ2D = $$pre;
  } else {
   $233 = ((($227)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[(38688)>>2]|0;
   $236 = ($235>>>0)>($234>>>0);
   if ($236) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $234;$$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $237 = ((($$0436)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$0436;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 $241 = ($240|0)==(0);
 if ($241) {
  $$0429 = 0;
 } else {
  $242 = ($$2>>>0)>(16777215);
  if ($242) {
   $$0429 = 31;
  } else {
   $243 = (($240) + 1048320)|0;
   $244 = $243 >>> 16;
   $245 = $244 & 8;
   $246 = $240 << $245;
   $247 = (($246) + 520192)|0;
   $248 = $247 >>> 16;
   $249 = $248 & 4;
   $250 = $249 | $245;
   $251 = $246 << $249;
   $252 = (($251) + 245760)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 2;
   $255 = $250 | $254;
   $256 = (14 - ($255))|0;
   $257 = $251 << $254;
   $258 = $257 >>> 15;
   $259 = (($256) + ($258))|0;
   $260 = $259 << 1;
   $261 = (($259) + 7)|0;
   $262 = $$2 >>> $261;
   $263 = $262 & 1;
   $264 = $263 | $260;
   $$0429 = $264;
  }
 }
 $265 = (38976 + ($$0429<<2)|0);
 $266 = ((($$1)) + 28|0);
 HEAP32[$266>>2] = $$0429;
 $267 = ((($$1)) + 16|0);
 $268 = ((($$1)) + 20|0);
 HEAP32[$268>>2] = 0;
 HEAP32[$267>>2] = 0;
 $269 = HEAP32[(38676)>>2]|0;
 $270 = 1 << $$0429;
 $271 = $269 & $270;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $269 | $270;
  HEAP32[(38676)>>2] = $273;
  HEAP32[$265>>2] = $$1;
  $274 = ((($$1)) + 24|0);
  HEAP32[$274>>2] = $265;
  $275 = ((($$1)) + 12|0);
  HEAP32[$275>>2] = $$1;
  $276 = ((($$1)) + 8|0);
  HEAP32[$276>>2] = $$1;
  return;
 }
 $277 = HEAP32[$265>>2]|0;
 $278 = ((($277)) + 4|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $279 & -8;
 $281 = ($280|0)==($$2|0);
 L189: do {
  if ($281) {
   $$0418$lcssa = $277;
  } else {
   $282 = ($$0429|0)==(31);
   $283 = $$0429 >>> 1;
   $284 = (25 - ($283))|0;
   $285 = $282 ? 0 : $284;
   $286 = $$2 << $285;
   $$041722 = $286;$$041821 = $277;
   while(1) {
    $293 = $$041722 >>> 31;
    $294 = (((($$041821)) + 16|0) + ($293<<2)|0);
    $289 = HEAP32[$294>>2]|0;
    $295 = ($289|0)==(0|0);
    if ($295) {
     break;
    }
    $287 = $$041722 << 1;
    $288 = ((($289)) + 4|0);
    $290 = HEAP32[$288>>2]|0;
    $291 = $290 & -8;
    $292 = ($291|0)==($$2|0);
    if ($292) {
     $$0418$lcssa = $289;
     break L189;
    } else {
     $$041722 = $287;$$041821 = $289;
    }
   }
   $296 = HEAP32[(38688)>>2]|0;
   $297 = ($296>>>0)>($294>>>0);
   if ($297) {
    _abort();
    // unreachable;
   }
   HEAP32[$294>>2] = $$1;
   $298 = ((($$1)) + 24|0);
   HEAP32[$298>>2] = $$041821;
   $299 = ((($$1)) + 12|0);
   HEAP32[$299>>2] = $$1;
   $300 = ((($$1)) + 8|0);
   HEAP32[$300>>2] = $$1;
   return;
  }
 } while(0);
 $301 = ((($$0418$lcssa)) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = HEAP32[(38688)>>2]|0;
 $304 = ($303>>>0)<=($$0418$lcssa>>>0);
 $305 = ($303>>>0)<=($302>>>0);
 $306 = $305 & $304;
 if (!($306)) {
  _abort();
  // unreachable;
 }
 $307 = ((($302)) + 12|0);
 HEAP32[$307>>2] = $$1;
 HEAP32[$301>>2] = $$1;
 $308 = ((($$1)) + 8|0);
 HEAP32[$308>>2] = $302;
 $309 = ((($$1)) + 12|0);
 HEAP32[$309>>2] = $$0418$lcssa;
 $310 = ((($$1)) + 24|0);
 HEAP32[$310>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_232($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 38;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39232|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy_232($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=33424; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 14|0);
  HEAP8[$3>>0] = 48;
  $4 = ((($0)) + 15|0);
  HEAP8[$4>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $5 = (($$027>>>0) / 10)&-1;
   $6 = (($$126) + 1)|0;
   $7 = ($$027>>>0)<(10);
   if ($7) {
    break;
   } else {
    $$027 = $5;$$126 = $6;
   }
  }
  $8 = (($0) + ($6)|0);
  HEAP8[$8>>0] = 0;
  $$02324 = $1;$$225 = $6;
  while(1) {
   $9 = (($$02324>>>0) / 10)&-1;
   $10 = ($9*10)|0;
   $11 = (($$02324) - ($10))|0;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($$225) + -1)|0;
   $15 = (($0) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = ($$02324>>>0)<(10);
   if ($16) {
    break;
   } else {
    $$02324 = $9;$$225 = $14;
   }
  }
 }
 return;
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=13644; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out_826($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint_827($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint_827($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((10800 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_829($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 33439;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 33439;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 33439 : (33441);
       $spec$select296 = $266 ? $$ : (33440);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 33439;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 33439;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 33449 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_832($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 33439;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (33439 + ($236)|0);
      $spec$select293 = $or$cond278 ? 33439 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 33439;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_832($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out_826($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_832($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_832($0,32,$$2261,$341,$$6268);
    _out_826($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_832($0,48,$$2261,$341,$343);
    _pad_832($0,48,$spec$select284,$339,0);
    _out_826($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_832($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg_829($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out_826($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_827($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_829($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (11264 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_688()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_832($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_826($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_826($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_833($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_833($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 33456;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (33457) : (33462);
  $spec$select565 = $19 ? $$ : (33459);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 33475 : 33479;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 33483 : 33487;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_832($0,32,$2,$34,$35);
   _out_826($0,$$0523,$$0522);
   _out_826($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_832($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (11264 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_832($0,32,$2,$113,$4);
    _out_826($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_832($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out_826($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_832($0,48,$118,0,0);
    _out_826($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_832($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_832($0,32,$2,$339,$4);
   _out_826($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_832($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out_826($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out_826($0,33491,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out_826($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_832($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out_826($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out_826($0,33491,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out_826($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_832($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out_826($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_832($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_833($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_90()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_90() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13768|0);
}
function ___pthread_self_688() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (11280 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 11376;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 11376;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 63]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_232($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $spec$store$select = $3 ? 0 : $2;
 $4 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $18 = ($7|0)==(0);
  L11: do {
   if ($18) {
    $$1 = $0;
    label = 17;
   } else {
    $19 = ((($2)) + 4|0);
    $20 = ((($2)) + 8|0);
    $$06065 = $7;$$06164 = $0;
    while(1) {
     $21 = HEAP32[$19>>2]|0;
     $22 = HEAP32[$20>>2]|0;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = (_memchr($21,10,$24)|0);
     $26 = ($25|0)==(0|0);
     $27 = $25;
     $28 = (1 - ($23))|0;
     $29 = (($28) + ($27))|0;
     $30 = $26 ? $24 : $29;
     $31 = ($30>>>0)<($$06065>>>0);
     $32 = $31 ? $30 : $$06065;
     (_memcpy(($$06164|0),($21|0),($32|0))|0);
     $33 = HEAP32[$19>>2]|0;
     $34 = (($33) + ($32)|0);
     HEAP32[$19>>2] = $34;
     $35 = (($$06164) + ($32)|0);
     $36 = (($$06065) - ($32))|0;
     $37 = ($36|0)!=(0);
     $or$cond = $26 & $37;
     if (!($or$cond)) {
      $$1 = $35;
      label = 17;
      break L11;
     }
     $38 = HEAP32[$20>>2]|0;
     $39 = ($34>>>0)<($38>>>0);
     if ($39) {
      $40 = ((($34)) + 1|0);
      HEAP32[$19>>2] = $40;
      $41 = HEAP8[$34>>0]|0;
      $42 = $41&255;
      $50 = $42;
     } else {
      $43 = (___uflow($2)|0);
      $44 = ($43|0)<(0);
      if ($44) {
       break;
      } else {
       $50 = $43;
      }
     }
     $49 = $50&255;
     $51 = ((($35)) + 1|0);
     HEAP8[$35>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)==(10);
     $53 = (($36) + -1)|0;
     $54 = ($53|0)==(0);
     $or$cond72 = $52 | $54;
     if ($or$cond72) {
      $$1 = $51;
      label = 17;
      break L11;
     } else {
      $$06065 = $53;$$06164 = $51;
     }
    }
    $45 = ($35|0)==($0|0);
    if ($45) {
     $$05963 = 0;
    } else {
     $46 = HEAP32[$2>>2]|0;
     $47 = $46 & 16;
     $48 = ($47|0)==(0);
     if ($48) {
      $$05963 = 0;
     } else {
      $$1 = $35;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $55 = ($0|0)==(0|0);
   if ($55) {
    $$05963 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$05963 = $0;
   }
  }
  $56 = ($15|0)==(0);
  if ($56) {
   $$0 = $$05963;
  } else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return ($$0|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$in = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = $1&255;
   $$in = $2;
   while(1) {
    $5 = (($$in) + -1)|0;
    $7 = (($0) + ($5)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==($4<<24>>24);
    if ($9) {
     break;
    }
    $6 = ($5|0)==(0);
    if ($6) {
     $$0 = 0;
     break L1;
    } else {
     $$in = $5;
    }
   }
   $10 = (($0) + ($5)|0);
   $$0 = $10;
  }
 } while(0);
 return ($$0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _strncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($0)|0);
 $4 = (($0) + ($3)|0);
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0$lcssa = $4;
  } else {
   $$01013 = $2;$$01112 = $1;$$014 = $4;
   while(1) {
    $6 = HEAP8[$$01112>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$014;
     break L1;
    }
    $8 = (($$01013) + -1)|0;
    $9 = ((($$01112)) + 1|0);
    $10 = ((($$014)) + 1|0);
    HEAP8[$$014>>0] = $6;
    $11 = ($8|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01013 = $8;$$01112 = $9;$$014 = $10;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 38656;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 38656;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = (getTempRet0() | 0);
 $10 = 38656;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = (getTempRet0() | 0);
 return ($14|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $2 = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _readlink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $5 = (___syscall85(85,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _getcwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $$07 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $vararg_buffer = sp + 4096|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 4096;$$06 = $2;
  label = 4;
 } else {
  $4 = ($1|0)==(0);
  if ($4) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $$07 = 0;
  } else {
   $$0 = $1;$$06 = $0;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = $$06;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $7 = (___syscall183(183,($vararg_buffer|0))|0);
  $8 = (___syscall_ret($7)|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $$07 = 0;
  } else {
   $10 = ($$06|0)==($2|0);
   if ($10) {
    $11 = (___strdup($2)|0);
    $$07 = $11;
   } else {
    $$07 = $$06;
   }
  }
 }
 STACKTOP = sp;return ($$07|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $spec$select;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_699()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_699() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(33493,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(33493,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 37;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 38;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 36;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 34;
   $40 = HEAP32[(39172)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((39236|0));
 return (39244|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((39236|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 127]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[3346]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[3346]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _realpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4304|0);
 $vararg_buffer5 = sp + 4144|0;
 $vararg_buffer2 = sp + 4136|0;
 $vararg_buffer = sp + 4128|0;
 $2 = sp + 4224|0;
 $3 = sp + 4148|0;
 $4 = sp + 4096|0;
 $5 = sp;
 $6 = ($0|0)==(0|0);
 do {
  if ($6) {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = 0;
  } else {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $9 = (___syscall5(5,($vararg_buffer|0))|0);
   $10 = (___syscall_ret($9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $$0 = 0;
   } else {
    ___procfdname($4,$10);
    $12 = (_readlink($4,$5,4095)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     $14 = (($5) + ($12)|0);
     HEAP8[$14>>0] = 0;
     (_fstat($10,$2)|0);
     $15 = (_stat($5,$3)|0);
     $16 = ($15|0)<(0);
     if (!($16)) {
      $17 = HEAP32[$2>>2]|0;
      $18 = HEAP32[$3>>2]|0;
      $19 = ($17|0)==($18|0);
      if ($19) {
       $20 = ((($2)) + 72|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ((($3)) + 72|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($21|0)==($23|0);
       if ($24) {
        HEAP32[$vararg_buffer2>>2] = $10;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $27 = ($1|0)==(0|0);
        if ($27) {
         $29 = (___strdup($5)|0);
         $$0 = $29;
         break;
        } else {
         $28 = (_strcpy($1,$5)|0);
         $$0 = $1;
         break;
        }
       }
      }
      $25 = ($15|0)==(0);
      if ($25) {
       $26 = (___errno_location()|0);
       HEAP32[$26>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $10;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _setvbuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 75|0);
 HEAP8[$4>>0] = -1;
 switch ($2|0) {
 case 2:  {
  $5 = ((($0)) + 48|0);
  HEAP32[$5>>2] = 0;
  break;
 }
 case 1:  {
  HEAP8[$4>>0] = 10;
  break;
 }
 default: {
 }
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 | 64;
 HEAP32[$0>>2] = $7;
 return 0;
}
function _setbuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 $3 = $2 ? 2 : 0;
 (_setvbuf($0,$1,$3,1024)|0);
 return;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = (getTempRet0() | 0);
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = (getTempRet0() | 0);
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), $rem) | 0;
    $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $10$1 = (getTempRet0() | 0);
    STACKTOP = __stackBase__;
    return (setTempRet0(($10$1) | 0), $10$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (setTempRet0((HEAP32[$rem + 4 >> 2] | 0) | 0), HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&63](a1|0,a2|0,+a3)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&0]();
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(5);return 0;
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9);
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,_b32zxt,_b32sxt,_b32pop,_b32swp,_b32sr,_b32sf,_b32hi,_b32lo,_b64zxt,_b64sxt,_f32sin,_f32cos,_f32tan,_f32log,_f32exp,_f32pow,_f32sqrt,_f32atan2,_f64sin,_f64cos,_f64tan,_f64log,_f64exp,_f64pow,_f64sqrt,_f64atan2,_sysExit,_sysSRand
,_sysRand,_sysTime,_sysClock,_sysMillis,_sysMSleep,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_nfcFirstArg,_nfcNextArg,b0
,_haltDummy,_typenameGetField,_sysRaise,_sysTryExec,_sysMemMgr,_sysMemSet,_sysMemCpy,_sysMemMove,b0,b0,b0,b0,b0,_ccLibStd,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_ccExtend,_ccBegin,_ccEnd,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_rtLookupApi,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_ccDefFlt,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,___stdout_write,___stdio_seek,___stdio_read,___stdio_write,_sn_write,b3,b3,b3,b3,b3,b3,_ccDefStr,_ccDefVar,b3,_ccAddCall,b3,_ccLookup,b3,b3,_rtAllocApi,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_ccDefInt,b4,b4,b4,_ccAddType,b4,_ccAddUnit,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_invoke,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_dbgDummy,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_conDebug,_jsonProfile,_conProfile,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7];
var FUNCTION_TABLE_vii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,_testVmOpc,_dumpVmOpc,_dumpApiText,_dumpApiJSON,_dumpApiSciTE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_nfcReadArg
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_raiseApi,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_textDumpMem,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];

  return { ___divdi3: ___divdi3, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___remdi3: ___remdi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiid: dynCall_iiid, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____divdi3 = asm["___divdi3"]; asm["___divdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____divdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____remdi3 = asm["___remdi3"]; asm["___remdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____remdi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}




{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 152
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24600
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25112
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25624
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(4)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(5)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 176
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 336
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 496
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 656
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 816
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 976
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1136
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1296
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1616
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38840
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39656
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40680
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41192
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(26)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42216
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(27)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(28)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1776
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43536
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(29)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44344
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(30)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1936
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(31)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45368
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46904
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47568
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(36)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48080
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(37)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48744
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(38)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 2096
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49248
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(39)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49752
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50256
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50760
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(44)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(44)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(45)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(45)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53080
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(46)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(46)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2256
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32400
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(10)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(11)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(12)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34864
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(13)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2416
	, "static": true
	, "const": true
}, {
	"": "variant.as(var: variant, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(1)"
	}
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2576
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2744
	, "static": true
	, "const": true
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(6)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3384
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3544
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x32 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x32 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4504
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4664
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x32 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x32 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x64 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x64 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x128 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x128 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5304
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 6744
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7664
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8144
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8608
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9072
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9536
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10000
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10768
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11872
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12944
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14016
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 15392
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16768
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17840
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18912
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19984
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21056
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21520
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "emit.swz"
	, "kind": "typename"
	, "cast": "void"
	, "name": "swz"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21984
	, "static": true
	, "const": true
}, {
	"": "emit.swz.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.swz"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "swz.p4x zwxy(4e)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "swz.p4x zwxy(4e)"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 29456
	, "static": true
	, "const": true
	, "doc": "Report messages or raise errors."
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(9)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 34912
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35544
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(14)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36064
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(15)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(16)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36784
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(17)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37144
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37504
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(19)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38016
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(20)"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "val"
	, "name": "true"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 4
	, "size": 1
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "true"
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "val"
	, "name": "false"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "false"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 8
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 9
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 10
		, "value": "float64"
	}
}, {
	"": "signed(value: uint8): int8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 13
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int8(value)"
		, "kind": "()"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 13
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint16): int16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int16(value)"
		, "kind": "()"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 16
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int32(value)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 19
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int64(value)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 22
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int8): uint8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint8(value)"
		, "kind": "()"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 25
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int16): uint16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint16(value)"
		, "kind": "()"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 28
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint32(value)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 31
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint64(value)"
		, "kind": "()"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 34
			, "value": "value"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the size of the given type"
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 37
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "size"
			}
		}]
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 41
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 43
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 45
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 48
	, "size": 24
	, "offs": 71064
	, "static": true
	, "const": true
	, "doc": "@public"
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 50
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "Value of the expected result"
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 53
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "Value of the actual result"
}, {
	"": "NotEquals.extras"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "extras"
	, "owner": "NotEquals"
	, "type": "variant[]"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 56
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "doc": "Extra argument to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 56
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 103
	, "offs": 365072
	, "static": true
	, "const": true
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 62
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 63
				}]
			}
		}, {
			"": "extras"
			, "kind": ".variable"
			, "type": "variant[1]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 65
			, "value": "extras"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 66
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 71
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365072
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365074
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 365076
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365077
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365081
		, "size": 1
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365082
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365086
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365091
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365093
		, "size": 2
	}, {
		"instruction": "inc.sp(+24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365095
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365099
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365104
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365108
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365110
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365115
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365119
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365121
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365126
		, "size": 4
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365130
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365132
		, "size": 5
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365137
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365142
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365147
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365152
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365157
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365162
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365166
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365170
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365174
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 74
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "null"
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "cmplStd/lib/math.ci"
	, "line": 2
	, "size": 0
	, "offs": 75672
	, "static": true
	, "const": true
	, "doc": "Mathematical utility functions and constants"
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 6
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "pi"
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 6
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "e"
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 7
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 8
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln2"
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 8
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 9
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log2E"
	, "ast": {
		"": "1.442695"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "1.442695"
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln10"
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 10
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 11
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log10E"
	, "ast": {
		"": "0.434294"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "0.434294"
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 12
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "phi"
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 12
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 13
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrt2"
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 13
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 14
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtE"
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 14
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPi"
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 15
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPhi"
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 16
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 17
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "nan"
	, "ast": {
		"": "-nan"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "-nan"
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 18
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "inf"
	, "ast": {
		"": "inf"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "inf"
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 365176
	, "static": true
	, "const": true
	, "doc": "Decompose a value into integer and fractional parts"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365176
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365178
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365187
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365188
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365192
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365194
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365195
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365196
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365200
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365201
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 365203
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365204
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365206
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365211
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365212
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 365216
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365217
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365219
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 365220
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365221
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 365223
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365224
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365226
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365227
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365231
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365232
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 365234
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365235
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365238
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365239
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365241
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 365250
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365251
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365253
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 365255
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365256
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 365258
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365259
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365261
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 365264
	, "static": true
	, "const": true
	, "doc": "Computes the largest integer value not greater than the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 48
			, "value": "result"
		}, {
			"": "modf(x, &result);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 49
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 50
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 50
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 365264
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365265
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365267
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365271
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365276
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365277
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365281
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365285
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365287
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the smallest integer not less than the input"
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 54
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 54
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 54
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the nearest integer to the input"
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 57
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 64
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 64
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 77
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 77
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 365288
	, "static": true
	, "const": true
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 77
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 78
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 78
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 78
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 78
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 78
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 78
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 79
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 79
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 81
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 81
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365288
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365290
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365291
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365292
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365296
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 365298
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365299
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365301
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365302
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365305
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 85
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 85
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 365312
	, "static": true
	, "const": true
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 85
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 86
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 86
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 86
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 86
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 86
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 86
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 87
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 87
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 87
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 89
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 89
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365312
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365314
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365315
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365316
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365320
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 365322
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365323
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365325
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365326
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365329
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 365336
	, "static": true
	, "const": true
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 93
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 94
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 94
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 94
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 94
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 94
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 94
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 94
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 94
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 94
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 94
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 94
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 95
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 95
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 95
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 95
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 97
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 97
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365336
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365338
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 365340
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365341
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365343
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365345
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365346
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365347
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365351
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365353
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 365355
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365356
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365358
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365359
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365362
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 365368
	, "static": true
	, "const": true
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 102
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 102
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 102
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 102
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 102
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 102
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 102
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 102
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 102
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 102
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 102
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 103
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 103
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 103
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 103
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 105
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 105
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365368
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365370
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 365372
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365373
		, "size": 2
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365375
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365377
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365378
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365379
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365383
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365385
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 365387
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365388
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365390
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365391
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365394
		, "size": 1
	}]
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 115
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 365400
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 115
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 116
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 116
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 117
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 117
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 119
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365400
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365402
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365404
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365405
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365409
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365412
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365413
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365416
		, "size": 1
	}]
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 123
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 365424
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 123
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 124
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 124
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 124
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 124
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 124
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 125
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 125
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 127
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 127
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365424
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365426
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365428
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365429
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365433
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365436
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365437
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365440
		, "size": 1
	}]
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 365448
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 138
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 138
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 138
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 138
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 138
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 139
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 139
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 141
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 141
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365448
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365450
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 365452
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365453
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365457
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365460
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365461
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365464
		, "size": 1
	}]
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 145
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 365472
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 145
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 146
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 146
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 147
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 147
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 149
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365472
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365474
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 365476
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365477
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365481
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365484
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365485
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365488
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 159
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 365496
	, "static": true
	, "const": true
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 160
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 160
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 160
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 160
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 160
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 161
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 161
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 163
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 163
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 163
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 163
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 163
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 164
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 164
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 166
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 166
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365496
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365498
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365500
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365501
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365505
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365508
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365509
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365511
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 365513
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365514
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365518
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365521
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(4, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365522
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365525
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 170
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 365528
	, "static": true
	, "const": true
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 171
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 171
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 171
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 171
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 171
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 172
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 172
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 174
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 174
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 174
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 174
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 174
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 175
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 175
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 177
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 177
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365528
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365530
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365532
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365533
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365537
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365540
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365541
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365543
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 365545
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365546
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365550
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365553
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(7, 5)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 365554
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365557
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 186
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 186
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 186
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 186
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 186
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 186
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 186
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 186
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 186
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 189
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 189
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 189
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 189
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 189
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 189
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 189
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 189
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 191
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 191
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 192
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 192
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 192
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 192
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 192
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 192
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 192
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 192
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 192
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 192
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 192
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 192
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 192
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 192
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 192
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 195
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float32(0), float32(1)))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 195
		, "args": [{
			"": "clamp((t - a) / (b - a), float32(0), float32(1))"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 195
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 195
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 195
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 195
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 195
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 195
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 195
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 195
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float32(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 195
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "value": "0"
				}]
			}, {
				"": "float32(1)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 195
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 198
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float64(0), float64(1)))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 198
		, "args": [{
			"": "clamp((t - a) / (b - a), float64(0), float64(1))"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 198
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 198
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 198
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 198
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 198
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 198
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 198
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 198
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 198
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 198
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float64(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 198
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 198
					, "value": "0"
				}]
			}, {
				"": "float64(1)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 198
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 198
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 201
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 201
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 201
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 365560
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 201
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 202
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 202
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 202
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 202
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 202
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 202
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 202
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 202
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 203
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 205
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 206
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 206
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 206
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 206
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 206
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 206
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 206
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 206
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 206
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 206
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 206
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 206
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 206
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 206
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 207
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 207
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 207
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 207
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 207
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 208
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 211
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365560
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365562
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 365563
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365564
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365568
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365577
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365579
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365580
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365582
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365583
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365588
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365592
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365594
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365596
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365598
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365602
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 365603
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365604
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365608
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365610
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365612
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365616
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365617
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365619
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365623
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365625
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 365627
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 365628
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365632
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365636
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365638
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 215
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 215
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 215
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 365640
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 215
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 216
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 216
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 216
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 216
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 216
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 216
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 216
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 216
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 217
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 217
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 219
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 220
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 220
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 220
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 220
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 220
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 220
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 220
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 220
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 220
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 220
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 220
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 220
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 220
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 220
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 221
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 221
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 221
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 221
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 221
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 222
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 225
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365640
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365642
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 365643
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365644
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365648
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365657
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365659
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365660
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365662
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365663
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365668
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365672
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365674
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365676
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365678
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365682
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365683
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365684
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365688
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365690
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365692
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365696
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365697
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365699
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365703
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365705
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 365707
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 365708
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365712
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365716
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365718
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 229
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 229
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 229
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 365720
	, "static": true
	, "const": true
	, "doc": "Returns the sum of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 229
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 230
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 231
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 231
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 231
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 231
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 231
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 231
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 231
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 231
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 231
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 231
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 231
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 231
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 231
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 231
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 232
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 234
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 234
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 365720
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 365721
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365722
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365726
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365728
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365730
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365732
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365736
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 365737
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365738
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365740
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365744
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365746
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 365748
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 365749
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365753
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365757
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365759
		, "size": 1
	}]
}, {
	"": "Math.mean(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mean"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 238
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 238
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 238
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 20
	, "offs": 365760
	, "static": true
	, "const": true
	, "doc": "Returns the mean of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 238
		, "stmt": [{
			"": "return .result := sum(...data) / (signed(data.length));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 239
			, "stmt": {
				"": ".result := sum(...data) / (signed(data.length))"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sum(...data) / (signed(data.length))"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 239
					, "left": {
						"": "sum(...data)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 239
						, "args": [{
							"": "...data"
							, "kind": "..."
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 239
							, "right": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 239
								, "value": "data"
							}
						}]
					}
					, "right": {
						"": "(signed(data.length))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 239
						, "args": [{
							"": "signed(data.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 239
							, "args": [{
								"": "data.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 239
								, "left": {
									"": "data"
									, "kind": ".variable"
									, "type": "float64[]"
									, "file": "cmplStd/lib/math.ci"
									, "line": 239
									, "value": "data"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 239
									, "value": "length"
								}
							}]
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365760
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365761
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365763
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365768
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365769
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365773
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 365775
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 365776
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365777
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365779
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 243
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 243
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 246
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 246
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 246
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 246
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 246
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 246
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 246
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 249
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 249
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 249
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 249
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 249
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 249
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 249
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 249
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 249
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 249
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 252
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 252
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 252
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 252
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 252
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 252
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 252
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 252
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 252
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 252
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 252
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 255
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 365784
	, "static": true
	, "const": true
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 255
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 256
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 258
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 260
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365784
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365785
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365787
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365791
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365795
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365797
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 365799
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365800
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365802
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365804
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 365808
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 365809
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365810
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365812
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365816
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365818
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 365819
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365820
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365824
		, "size": 4
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365828
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365830
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 264
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 365832
	, "static": true
	, "const": true
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 265
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 265
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 265
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 265
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 265
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 266
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 266
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 266
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 266
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 266
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 266
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 266
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 266
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 267
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 267
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 267
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 270
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 271
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 271
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 272
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 272
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 272
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 275
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 275
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365832
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365834
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365836
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365837
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365841
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365843
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365845
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 365847
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365848
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365849
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365853
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365858
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365860
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365861
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365865
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365867
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365869
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 365871
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 365872
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365873
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365877
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365882
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365884
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365885
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365886
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365888
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 279
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 365896
	, "static": true
	, "const": true
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 280
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 280
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 280
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 280
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 280
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 281
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 281
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 281
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 281
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 281
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 281
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 281
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 281
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 282
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 282
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 282
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 285
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 286
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 286
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 287
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 287
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 287
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 290
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 290
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365896
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365898
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365900
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365901
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365905
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365907
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365909
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 365911
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365912
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365913
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365917
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365922
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365924
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 365925
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365929
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365931
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365933
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 365935
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365936
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365937
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365941
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365946
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365948
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365949
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365950
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365952
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 294
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 294
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 294
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 294
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 365960
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 294
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 308
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 309
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 309
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 309
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 309
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 309
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 309
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 310
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 311
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 314
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 315
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 316
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 316
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 316
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 316
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 316
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 316
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 317
					, "value": "e"
				}, {
					"": "y := modf(x, &e);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 318
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 319
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, &f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 322
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 323
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 325
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 326
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 327
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 328
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 329
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 331
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 331
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 331
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 331
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 331
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 332
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 334
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 334
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 334
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 334
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 334
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 335
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 338
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 339
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 340
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 341
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 341
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 341
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 341
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365960
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365962
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365964
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 365965
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 365966
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 365970
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365971
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 365973
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365977
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 365979
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 365980
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365982
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 365991
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366000
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366001
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366002
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366004
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366006
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 366015
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366016
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 366020
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366021
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366023
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 366027
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 366032
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366033
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366037
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366039
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 366041
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366042
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 366043
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366044
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366053
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366055
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366056
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 366060
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 366065
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366066
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366070
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366074
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366076
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366085
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366087
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366088
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 366089
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 366090
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366092
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 366096
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366100
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 366102
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366103
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366105
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 366107
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366108
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366109
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366111
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366113
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 366115
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 366116
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366118
		, "size": 2
	}, {
		"instruction": "b32.and 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 366120
		, "size": 2
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 366122
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366124
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366128
		, "size": 2
	}, {
		"instruction": "b32.and 0x001"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 366130
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366132
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366136
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366145
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366147
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366148
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366150
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366152
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 366157
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366158
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366162
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366163
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366165
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366167
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366168
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366177
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366179
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366180
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366189
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366190
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366192
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366193
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366202
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366203
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366205
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366206
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366215
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366216
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366218
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366219
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366228
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366229
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366231
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366232
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366234
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366243
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366244
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366246
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366247
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366256
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366257
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366259
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366260
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366269
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366270
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366272
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366273
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366282
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366283
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366285
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366287
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366288
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366290
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366294
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 345
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 345
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 345
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the sine of the input"
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 345
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 345
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 345
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 348
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 348
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 348
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the cosine of the input"
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 348
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 348
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 348
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 348
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 351
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 351
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 351
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 378
	, "offs": 366296
	, "static": true
	, "const": true
	, "doc": "Returns the tangent of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 351
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 364
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 365
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 367
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 367
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 367
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 367
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 367
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 367
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 368
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 369
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 371
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 373
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 374
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 375
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 377
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 377
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 377
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 377
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 378
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 378
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 378
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 378
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 378
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 378
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 379
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 380
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 382
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 382
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/math.ci"
								, "line": 382
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 382
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 382
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 382
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 383
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 384
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 386
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 386
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/lib/math.ci"
										, "line": 386
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 386
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 386
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/math.ci"
										, "line": 386
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 387
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 388
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 391
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 392
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 393
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 395
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 395
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 395
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 396
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 396
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 396
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 396
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 396
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 396
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 397
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 397
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 399
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 401
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 401
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 401
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 402
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 402
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 402
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 404
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 404
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 366296
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 366297
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366298
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 366300
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 366301
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366302
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366306
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366308
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366309
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366311
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366316
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366320
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366321
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366330
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366332
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366333
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366342
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366343
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 366345
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366346
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366348
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 366352
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 366357
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366358
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366362
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 366364
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366365
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 366370
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366371
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 366373
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 366374
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 366375
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366379
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366381
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 366386
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366387
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366391
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366400
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366402
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366403
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366405
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366410
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366414
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 366415
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366419
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366421
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 366426
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366427
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366431
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 366435
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 366436
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366437
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366441
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366442
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366447
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366451
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 366452
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 366456
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366458
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 366463
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366464
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366468
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366477
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366479
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366480
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366482
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 366486
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 366487
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366488
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366492
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366493
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366495
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366497
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366498
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366507
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366509
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366510
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366519
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366520
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366522
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366523
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366532
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366533
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366535
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366536
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366545
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366546
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366548
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366549
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366558
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366559
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366561
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366562
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366564
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366573
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366574
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366576
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366577
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366586
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366587
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366589
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366590
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366599
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366600
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366601
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 366605
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366606
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366610
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 366612
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 366613
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366614
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366618
		, "size": 9
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366627
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366629
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366633
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366634
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366643
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366645
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366646
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366648
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 366652
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366653
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366657
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366659
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366660
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366662
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366666
		, "size": 1
	}, {
		"instruction": "set.x64 sp(14)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366667
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366669
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366673
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 408
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 408
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 408
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 366680
	, "static": true
	, "const": true
	, "doc": "Returns the hyperbolic sine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 408
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 420
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 421
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 421
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 421
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 421
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 421
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 421
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 422
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 423
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 426
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 426
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 427
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 427
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 427
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 427
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 427
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 427
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 430
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 431
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 432
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 434
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 435
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 437
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 440
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 440
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 440
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 441
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 441
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 441
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 443
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 443
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 366680
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366681
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 366683
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 366684
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366685
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366689
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366691
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366692
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 366694
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366699
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 366703
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366704
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366706
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 366715
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366716
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366720
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366722
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366726
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366735
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366736
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366738
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366742
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 366743
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366744
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366746
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 366755
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366756
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366760
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366762
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366766
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366768
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366769
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 366773
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366774
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366783
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366784
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 366786
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366790
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366792
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366794
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366795
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366804
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366806
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366807
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366816
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366817
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366819
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366820
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366829
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366830
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366832
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366833
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366842
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366843
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366845
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366846
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366848
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366850
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366852
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366861
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366862
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366864
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366865
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366874
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366875
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 366877
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366878
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366887
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366888
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366889
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366891
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 366895
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 366899
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366900
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366904
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366906
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366907
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366909
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366913
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366914
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 366916
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366920
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 447
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 447
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 447
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 366928
	, "static": true
	, "const": true
	, "doc": "Returns the hyperbolic cosine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 447
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 448
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 448
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 448
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 448
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 448
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 448
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 449
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 451
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 451
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 451
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 451
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 451
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 451
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 452
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 452
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 452
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 452
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 452
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 452
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 454
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 454
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 454
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 454
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 454
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 454
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 454
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 454
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/math.ci"
										, "line": 454
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 454
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 454
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366928
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 366930
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 366931
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366932
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366936
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366938
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366939
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366941
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366943
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 366952
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 366953
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366957
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366959
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366963
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366972
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 366973
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 366975
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366976
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366978
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 366982
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 366984
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 366985
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 366989
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 366990
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 366999
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367000
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367002
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 462
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 462
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 462
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 173
	, "offs": 367008
	, "static": true
	, "const": true
	, "doc": "Returns the arc sine of the input\n Special cases are:\n   Asin(±0) = ±0\n   Asin(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 462
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 463
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 463
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 463
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 463
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 463
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 463
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 465
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 465
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 468
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 469
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 469
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 469
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 469
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 469
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 469
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 470
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 471
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 474
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 474
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 476
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 476
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 479
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 480
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 480
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 480
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 480
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 480
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 481
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 483
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 484
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 487
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 487
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 487
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 488
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 488
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 488
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 490
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 490
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367008
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 367010
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 367011
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367012
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 367016
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367019
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367020
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367021
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 367023
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 367024
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367025
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 367029
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367034
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 367038
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367039
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 367041
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367042
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367044
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367046
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 367055
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367056
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367060
		, "size": 9
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367069
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367071
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367075
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367076
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367085
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367087
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367089
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 367090
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367091
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367095
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367097
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 367106
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367107
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367111
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367120
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367129
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367130
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367132
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367134
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 367138
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367139
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 367141
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367145
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367147
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367149
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367153
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367155
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 367159
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367160
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367164
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 367166
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367167
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367169
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367173
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367174
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367176
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367180
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 497
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 497
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 497
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the arc cosine of the input\n Special case is:\n   Acos(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 497
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 497
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 497
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 497
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 497
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 497
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 497
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 497
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.radians(degrees: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "radians"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 521
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 521
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "degrees"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "degrees"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 521
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to radians from degrees."
	, "ast": {
		"": "float64(degrees * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 521
		, "args": [{
			"": "degrees * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 521
			, "left": {
				"": "degrees * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 521
				, "left": {
					"": "degrees"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 521
					, "value": "degrees"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 521
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 521
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 521
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.degrees(radians: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "degrees"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 524
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 524
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "radians"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "radians"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 524
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to degrees from radians."
	, "ast": {
		"": "float64(radians * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 524
		, "args": [{
			"": "radians * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 524
			, "left": {
				"": "radians * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 524
				, "left": {
					"": "radians"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 524
					, "value": "radians"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 524
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 524
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 524
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 2
	, "size": 16
	, "offs": 112600
	, "static": true
	, "const": true
	, "doc": "Complex number"
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "The real component of a complex number."
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 8
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "The imaginary component of a complex number."
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 8
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 367184
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 25
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 26
					}, {
						"": ".result.im := (0);"
						, "kind": ";"
						, "type": "void"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 367184
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 367187
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367188
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367190
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 367192
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 32
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 33
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 34
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 367192
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 367195
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367198
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(-a.re, -a.im);"
	, "ast": {
		"": "Complex(emit(struct(a), neg.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(a), neg.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "a"
				}]
			}, {
				"": "neg.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "neg"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re + b.re, a.im + b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re - b.re, a.im - b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "args": [{
			"": "emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 76
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "b"
				}]
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "x2"
				}
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "p2d"
				}
			}, {
				"": "add.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "add"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "f64"
				}
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "p2d"
				}
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "x2"
				}
			}, {
				"": "sub.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "sub"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "f64"
				}
			}]
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 81
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 123
	, "offs": 367200
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 90
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 91
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 92
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 93
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 94
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 95
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 98
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 99
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 100
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 101
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 102
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 367200
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367201
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367203
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 367208
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367209
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 367213
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367214
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367216
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 367221
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367222
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 367226
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 367227
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367231
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367233
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367235
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367236
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367238
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367240
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367242
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367243
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367244
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367246
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367248
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367250
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367251
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367252
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367254
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367255
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367257
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367259
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367261
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367263
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 367264
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367265
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367267
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367268
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367270
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367274
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367275
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367279
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367281
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367283
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367284
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367286
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367288
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367290
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367291
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367292
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367294
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367296
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367297
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367299
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367300
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367302
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367303
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367305
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367307
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367309
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367310
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 367312
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367313
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367315
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367316
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367318
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367322
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 112
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 367328
	, "static": true
	, "const": true
	, "doc": "Reciprocal of a complex number (1 / a)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 118
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 119
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 120
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 121
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367328
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367330
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367332
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367333
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367335
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367337
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367338
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367339
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367341
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367343
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367344
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367346
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 367348
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367349
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 367351
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367352
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367354
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367358
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 132
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 367360
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 136
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 137
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 138
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 139
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 140
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 141
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 142
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x128 sp(5)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 367360
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367362
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367364
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367366
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367367
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367369
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367371
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367372
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367373
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367377
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367379
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(7)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 367383
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367385
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367387
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367389
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367393
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367395
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367399
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367401
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367403
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367404
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367406
		, "size": 2
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367408
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367412
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 367413
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367414
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367416
		, "size": 2
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367418
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367422
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 367424
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367425
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367427
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367428
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367432
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367433
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367435
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367437
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367441
		, "size": 1
	}, {
		"instruction": "set.x64 sp(19)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367442
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367444
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 367446
		, "size": 2
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367448
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 367452
		, "size": 1
	}, {
		"instruction": "set.x64 sp(21)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 367453
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367455
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367459
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 166
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 169
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 169
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 171
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 171
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 178
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 180
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 180
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 182
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 184
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 187
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}]
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 2
	, "size": 16
	, "offs": 134704
	, "static": true
	, "const": true
	, "doc": "A 4d vector (4x float32)"
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 4
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec4f"
	, "type": "vec4f.<?>"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 130
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f.<?>.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec4f.<?>.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec4f.<?>.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
}, {
	"": "vec4f.<?>.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 13
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 7
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 9
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 11
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 13
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 13
		, "value": "w"
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y, z, w components"
	, "ast": {
		"": "vec4f(emit(struct(w), struct(z), struct(y), struct(x)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "args": [{
			"": "emit(struct(w), struct(z), struct(y), struct(x))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 26
			, "args": [{
			}, {
				"": "struct(w)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "w"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "w"
				}]
			}, {
				"": "struct(z)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "z"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "z"
				}]
			}, {
				"": "struct(y)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "y"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "y"
				}]
			}, {
				"": "struct(x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with  (x: x, y: y, z: z, w: 1)"
	, "ast": {
		"": "vec4f(x, y, z, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "z"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with (x: x, y: y, z: 0, w: 1)"
	, "ast": {
		"": "vec4f(x, y, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "y"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z components using the components form the given vector, and w with the given value"
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z, w components with the given scalar value"
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns a negated copy of the vector."
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 71
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 75
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 77
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise minimum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), min.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 80
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 80
					, "value": "rhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 80
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 80
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise maximum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), max.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 82
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 82
					, "value": "rhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 82
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 82
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "val"
		, "name": "min"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "val"
		, "name": "max"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp the vector component wise to the range [min ... max]"
	, "ast": {
		"": "min(max(vec, min), max)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "max(vec, min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "args": [{
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "vec"
			}, {
				"": "min"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "min"
			}]
		}, {
			"": "max"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "value": "max"
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 88
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 88
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "min"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 88
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "max"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 88
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp each component of the vector to the range [min ... max]"
	, "ast": {
		"": "clamp(vec, vec4f(min), vec4f(max))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "vec"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 88
			, "value": "vec"
		}, {
			"": "vec4f(min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 88
			, "args": [{
				"": "min"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 88
				, "value": "min"
			}]
		}, {
			"": "vec4f(max)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 88
			, "args": [{
				"": "max"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 88
				, "value": "max"
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of the first 3 elements"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 92
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 92
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 92
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 92
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 96
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 96
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 96
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Homogeneous dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 96
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 96
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 96
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 96
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 96
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 96
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 96
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 96
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 96
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 100
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 103
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 103
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Cross product of the first 3 elements"
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 103
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 103
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 103
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 103
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 103
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 103
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "length(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 106
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 106
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 106
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Length of the vector(xyz)"
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 106
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 106
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 106
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 106
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 108
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Normalize the vector(xyz)"
	, "ast": {
		"": "div(v, vec4f(length(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "value": "v"
		}, {
			"": "vec4f(length(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "length(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 108
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Evaluate as a polynomial in point x"
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 111
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 111
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 111
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 111
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 111
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math/Vector4f.ci"
							, "line": 111
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 111
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 111
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "cmplStd/lib/math/Vector4f.ci"
										, "line": 111
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 111
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 111
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 111
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 111
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 111
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 111
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 111
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 111
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 111
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 111
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 111
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 111
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 111
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 111
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 111
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 111
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 2
	, "size": 64
	, "offs": 150456
	, "static": true
	, "const": true
	, "doc": "A 4x4 matrix"
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as a flatten array: data[4] => m[1][0]"
}, {
	"": "mat4f.m"
	, "kind": "variable"
	, "cast": "val"
	, "name": "m"
	, "owner": "mat4f"
	, "type": "float32[4][4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 7
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array: m[1][0]"
}, {
	"": "mat4f.v"
	, "kind": "variable"
	, "cast": "val"
	, "name": "v"
	, "owner": "mat4f"
	, "type": "vec4f[4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 10
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array of vectors: v[1].x => m[1][0]"
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 14
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 16
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 18
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 20
		, "value": "w"
	}
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.xx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 4
	, "offs": 52
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 4
	, "offs": 56
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.ww"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "ww"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 4
	, "offs": 60
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.xx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 24
		, "value": "xx"
	}
}, {
	"": "mat4f.xy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 26
		, "value": "xy"
	}
}, {
	"": "mat4f.xz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 28
		, "value": "xz"
	}
}, {
	"": "mat4f.xw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 30
		, "value": "xw"
	}
}, {
	"": "mat4f.yx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 33
		, "value": "yx"
	}
}, {
	"": "mat4f.yy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 35
		, "value": "yy"
	}
}, {
	"": "mat4f.yz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 37
		, "value": "yz"
	}
}, {
	"": "mat4f.yw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 39
		, "value": "yw"
	}
}, {
	"": "mat4f.zx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 42
		, "value": "zx"
	}
}, {
	"": "mat4f.zy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 44
		, "value": "zy"
	}
}, {
	"": "mat4f.zz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 46
		, "value": "zz"
	}
}, {
	"": "mat4f.zw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 48
		, "value": "zw"
	}
}, {
	"": "mat4f.wx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 51
		, "value": "wx"
	}
}, {
	"": "mat4f.wy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 53
		, "value": "wy"
	}
}, {
	"": "mat4f.wz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 55
		, "value": "wz"
	}
}, {
	"": "mat4f.ww"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ww"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "ww"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 57
		, "value": "ww"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 367464
	, "static": true
	, "const": true
	, "doc": "Initialize all elements with the given values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 66
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xy := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xz := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xw := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.yx := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yy := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yz := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yw := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.zx := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zy := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zz := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zw := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.wx := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wy := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wz := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.ww := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367464
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367467
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367470
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367473
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367476
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367479
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367482
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367485
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367488
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367491
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367494
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367497
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367500
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367503
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367506
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367509
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367512
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 367520
	, "static": true
	, "const": true
	, "doc": "Initialize matrix with row vectors"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 76
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367520
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367522
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367523
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367525
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367527
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367528
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367530
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367532
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367533
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367535
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367537
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367538
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367540
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product of the first 3 elements"
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "value": "1.000000"
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: homogeneous dot product"
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product"
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "transpose(mat: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "transpose"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "val"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 128
		, "static": false
		, "const": true
	}]
	, "size": 49
	, "offs": 367544
	, "static": true
	, "const": true
	, "doc": "Transpose the matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 88
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := mat.xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xy := mat.yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xz := mat.zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xw := mat.wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.yx := mat.xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yy := mat.yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yz := mat.zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yw := mat.wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.zx := mat.xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zy := mat.yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zz := mat.zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zw := mat.wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.wx := mat.xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wy := mat.yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wz := mat.zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.ww := mat.ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367544
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367547
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367550
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367553
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367556
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367559
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367562
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367565
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367568
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367571
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367574
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367577
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367580
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367583
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367586
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 367589
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367592
		, "size": 1
	}]
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 245
	, "offs": 367600
	, "static": true
	, "const": true
	, "doc": "Multiply two matrices (rows * cols)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 98
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 99
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 100
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 101
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 102
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 103
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367600
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367604
		, "size": 2
	}, {
		"instruction": "load.sp(-60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367606
		, "size": 4
	}, {
		"instruction": "copy.mem -64"
		, "name": "copy.mem"
		, "code": "0x1e"
		, "offs": 367610
		, "size": 4
	}, {
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367614
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367618
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 367623
		, "size": 1
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367624
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367628
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367632
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367634
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367636
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367640
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367641
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367643
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367644
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367645
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367647
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367651
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367652
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367654
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367655
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367656
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367658
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367662
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367663
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367665
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367666
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367667
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367669
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367670
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367672
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367673
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367674
		, "size": 2
	}, {
		"instruction": "set.x128 sp(23)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367676
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367678
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367682
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367684
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367688
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367690
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367694
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367695
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367697
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367698
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367699
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367701
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367705
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367706
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367708
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367709
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367710
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367712
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367716
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367717
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367719
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367720
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367721
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367723
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367724
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367726
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367727
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367728
		, "size": 2
	}, {
		"instruction": "set.x128 sp(27)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367730
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367732
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367736
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367738
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367742
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367744
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367748
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367749
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367751
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367752
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367753
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367755
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367759
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367760
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367762
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367763
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367764
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367766
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367770
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367771
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367773
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367774
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367775
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367777
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367778
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367780
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367781
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367782
		, "size": 2
	}, {
		"instruction": "set.x128 sp(31)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367784
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 367786
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367790
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367792
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367796
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367798
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367802
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367803
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367805
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367806
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367807
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367809
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367813
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367814
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367816
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367817
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367818
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367820
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367824
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367825
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367827
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367828
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367829
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367831
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367832
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367834
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 367835
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367836
		, "size": 2
	}, {
		"instruction": "set.x128 sp(35)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367838
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367840
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367844
		, "size": 1
	}]
}, {
	"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "center"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "center"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}]
	, "size": 454
	, "offs": 367848
	, "static": true
	, "const": true
	, "doc": "Build a rotation matrix\nadapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "stmt": [{
			"": "len"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 112
			, "value": "len"
		}, {
			"": "if ((len) < 0.000000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 113
			, "test": {
				"": "(len) < 0.000000"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "left": {
					"": "(len)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "args": [{
						"": "len"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 113
						, "value": "len"
					}]
				}
				, "right": {
					"": "0.000000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "value": "0.000000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "stmt": [{
					"": "trace(\"invalid direction of rotation\", direction);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 114
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 115
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "mat4f"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.x := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 116
							}, {
								"": ".result.y := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 117
							}, {
								"": ".result.z := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 118
							}, {
								"": ".result.w := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 119
							}]
						}
					}
				}]
			}
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 122
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 123
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 124
			, "value": "z"
		}, {
			"": "cx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 125
			, "value": "cx"
		}, {
			"": "cy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 126
			, "value": "cy"
		}, {
			"": "cz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 127
			, "value": "cz"
		}, {
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 128
			, "value": "xx"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 129
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 130
			, "value": "xz"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 131
			, "value": "yy"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 132
			, "value": "yz"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 133
			, "value": "zz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 135
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 136
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 137
			, "value": "k"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 139
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx + (yy + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 140
					}, {
						"": ".result.xy := xy * k - z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 141
					}, {
						"": ".result.xz := xz * k + y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 142
					}, {
						"": ".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 143
					}, {
						"": ".result.yx := xy * k + z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 145
					}, {
						"": ".result.yy := yy + (xx + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 146
					}, {
						"": ".result.yz := yz * k - x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 147
					}, {
						"": ".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 148
					}, {
						"": ".result.zx := xz * k - y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 150
					}, {
						"": ".result.zy := yz * k + x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 151
					}, {
						"": ".result.zz := zz + (xx + yy) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 152
					}, {
						"": ".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 153
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 155
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367848
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 367850
		, "size": 1
	}, {
		"instruction": "dup.x128 sp(0)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 367851
		, "size": 2
	}, {
		"instruction": "dup.x128 sp(4)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 367853
		, "size": 2
	}, {
		"instruction": "dp3.v4f"
		, "name": "dp3.v4f"
		, "code": "0x9a"
		, "offs": 367855
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367856
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 367860
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367862
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367866
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 367868
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 367869
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 367878
		, "size": 1
	}, {
		"instruction": "jz +69"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 367879
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367883
		, "size": 5
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 367888
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 367893
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 367898
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367903
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 367908
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367913
		, "size": 2
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 367915
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367919
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367920
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367921
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367922
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367923
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367925
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367926
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367927
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367928
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367929
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367931
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367932
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367933
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367934
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367935
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367937
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367938
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367939
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 367940
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 367941
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 367943
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 367947
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367948
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367950
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367951
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 367953
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367954
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367956
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367960
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367961
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 367963
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367964
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367966
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367970
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367971
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 367973
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367974
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367976
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367977
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367979
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367983
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367984
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 367986
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 367990
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367991
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367993
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 367995
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367996
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 367998
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368000
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368001
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368003
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368005
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368006
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368008
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368010
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368011
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368013
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368015
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368016
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368018
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368020
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368021
		, "size": 2
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 368023
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368027
		, "size": 2
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 368029
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368033
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368038
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368040
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368041
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368043
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368045
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368047
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368048
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368050
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368051
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368052
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368054
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368056
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368058
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368059
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368061
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368063
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368064
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368065
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368067
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368069
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368071
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368072
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368074
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368076
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368077
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368078
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368080
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368082
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368084
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368086
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368087
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368088
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368090
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368092
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368094
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368095
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368097
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368099
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368100
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368101
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368102
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368103
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368105
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368106
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368108
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368110
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368111
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368113
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368115
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368116
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368117
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368119
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368120
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368121
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368123
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368125
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368127
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368128
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368130
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368132
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368133
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368134
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368136
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368138
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368140
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368142
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368143
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368145
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368146
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368147
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368149
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368151
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368153
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368154
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368156
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368158
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368159
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368160
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368162
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368164
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368166
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368168
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368169
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368170
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368172
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368174
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368176
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368177
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368179
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368181
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368182
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368183
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368184
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368185
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368187
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368188
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368190
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368192
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368193
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368195
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368197
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368198
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368199
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368201
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368202
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368203
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368205
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368207
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368209
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368210
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368212
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368214
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368215
		, "size": 1
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368216
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368218
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368220
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368222
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368223
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368225
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368227
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368228
		, "size": 1
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368229
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368231
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368233
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368235
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368237
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368238
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368240
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368241
		, "size": 1
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368242
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368244
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368246
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368248
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368250
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368251
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368252
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368254
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368256
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368258
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368259
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368261
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368263
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368264
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368265
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368266
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368267
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368269
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368270
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368272
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368274
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368275
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368277
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368279
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 368280
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368281
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368283
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 368284
		, "size": 1
	}, {
		"instruction": "set.x32 sp(32)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368285
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368287
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368292
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368293
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368294
		, "size": 1
	}, {
		"instruction": "set.x128 sp(36)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 368295
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368297
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368301
		, "size": 1
	}]
}, {
	"": "rotation(direction: vec4f, angle: float32): mat4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 160
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 64
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix"
	, "ast": {
		"": "rotation(vec4f(0), direction, angle)"
		, "kind": "()"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "args": [{
		}, {
			"": "vec4f(0)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "0"
			}]
		}, {
			"": "direction"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "direction"
		}, {
			"": "angle"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "angle"
		}]
	}
}, {
	"": "translation(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "translation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 163
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 88
	, "offs": 368304
	, "static": true
	, "const": true
	, "doc": "Build a translation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 164
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xw := direction.x * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yy := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yw := direction.y * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zz := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zw := direction.z * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368304
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368309
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368311
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368312
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368314
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368315
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368317
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368319
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368320
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368322
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368323
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368325
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368326
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368328
		, "size": 5
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368333
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368335
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368336
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368338
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368340
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368344
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368345
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368347
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368348
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368350
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368351
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368353
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368354
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368356
		, "size": 5
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368361
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368363
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368365
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368369
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368370
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368372
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368373
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368375
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368376
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368378
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368379
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368381
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368382
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368384
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368389
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368391
		, "size": 1
	}]
}, {
	"": "scale(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "scale"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 217
	, "offs": 368392
	, "static": true
	, "const": true
	, "doc": "Build a scaling matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "stmt": [{
			"": "rcp(val: float32): float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 174
			, "value": "rcp(val: float32): float32"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 175
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := rcp(direction.x * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yy := rcp(direction.y * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zz := rcp(direction.z * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368392
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368394
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368395
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368397
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368398
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368400
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 368401
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368402
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368406
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 368408
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368409
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368413
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 368415
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 368416
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 368425
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368426
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368430
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368431
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368435
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368440
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 368442
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368443
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368445
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368447
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368448
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368450
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368451
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368453
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368454
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368456
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368457
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368459
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368461
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368465
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368466
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368468
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368469
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368471
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 368472
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368473
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368477
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 368479
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368480
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368484
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 368486
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 368487
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 368496
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368497
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368501
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368502
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368506
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368511
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 368513
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368514
		, "size": 2
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368516
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368518
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368519
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368521
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368522
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368524
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368525
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368527
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368528
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368530
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368532
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 368536
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368537
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 368539
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368540
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368542
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 368543
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368544
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368548
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 368550
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368551
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368555
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 368557
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 368558
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 368567
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368568
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368572
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368573
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368577
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368582
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 368584
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368585
		, "size": 2
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368587
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368589
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368590
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368592
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368593
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368595
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368596
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368598
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368599
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368601
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368606
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368608
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 2
	, "size": 16
	, "offs": 171112
	, "static": true
	, "const": true
	, "doc": "A 2d vector (2x float64)"
}, {
	"": "vec2d.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec2d"
	, "type": "float64[2]"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 4
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec2d.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec2d"
	, "type": "vec2d.<?>"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 44
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.<?>.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec2d.<?>.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 9
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec2d.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 7
		, "value": "x"
	}
}, {
	"": "vec2d.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 9
		, "value": "y"
	}
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 368616
	, "static": true
	, "const": true
	, "doc": "Initialize with given x, y components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 15
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 16
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 17
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 368616
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 368619
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368622
		, "size": 1
	}]
}, {
	"": "add(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 22
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "mul(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), mul.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "args": [{
			"": "emit(struct(a), struct(b), mul.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 28
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "div(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), div.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "args": [{
			"": "emit(struct(a), struct(b), div.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "b"
				}]
			}, {
				"": "div.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "div"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "min(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the minimum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), min.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "args": [{
			"": "emit(struct(a), struct(b), min.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 34
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "b"
				}]
			}, {
				"": "min.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "min"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "max(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the maximum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), max.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "args": [{
			"": "emit(struct(a), struct(b), max.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "b"
				}]
			}, {
				"": "max.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "max"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "ceq(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceq"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Compare the two vectors for equality."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), ceq.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "args": [{
			"": "emit(struct(a), struct(b), ceq.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "ceq.p2d"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "left": {
					"": "ceq"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "ceq"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of thw two vectors"
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 38
	, "offs": 368624
	, "static": true
	, "const": true
	, "doc": "Computes the length of the string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 5
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 5
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/lib/string.ci"
					, "line": 5
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "cmplStd/lib/string.ci"
						, "line": 5
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/lib/string.ci"
					, "line": 5
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 5
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 6
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 6
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 8
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 9
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 9
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 9
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 9
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 9
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 11
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 11
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368624
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368626
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368631
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368632
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368636
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368637
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368639
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368640
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368641
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368645
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368649
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368651
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368653
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368654
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368655
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368659
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368661
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 368664
	, "static": true
	, "const": true
	, "doc": "Returns the index of the first occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 16
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 16
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 16
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 17
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 17
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 17
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/string.ci"
								, "line": 17
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 17
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 17
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 17
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 18
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 18
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 21
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 21
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 21
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368664
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368665
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368669
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368671
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368673
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368674
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368675
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368679
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368680
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368681
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368685
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368687
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368688
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368692
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368694
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368696
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368697
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368698
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368702
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368706
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368711
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368713
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 368720
	, "static": true
	, "const": true
	, "doc": "Returns the index of the last occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 26
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 27
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 27
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 27
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 28
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 28
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 28
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/string.ci"
								, "line": 28
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 28
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 28
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 28
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 29
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 32
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 32
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368720
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368725
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368726
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368730
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368732
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368734
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368735
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368736
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368740
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368741
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368742
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(1, 0)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 368746
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368749
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368753
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368755
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368757
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368758
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368759
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368763
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368767
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368769
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 368776
	, "static": true
	, "const": true
	, "doc": "Check if a string begins with a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 37
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 37
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 37
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 38
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 38
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 38
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 38
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 38
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 38
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 38
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 39
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/string.ci"
									, "line": 39
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 42
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 42
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368776
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368777
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368781
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368782
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368784
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368786
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368787
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368788
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368790
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368792
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368793
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368794
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 368796
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368797
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368801
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368802
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368803
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368807
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368808
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 368812
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368813
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368817
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368818
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368822
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368824
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368826
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368827
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368828
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368829
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368830
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368834
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368838
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368843
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 368847
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368848
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 368856
	, "static": true
	, "const": true
	, "doc": "Check if a string ends in a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 47
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 48
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 49
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 49
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 49
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 49
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 49
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 50
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "cmplStd/lib/string.ci"
							, "line": 50
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 52
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 52
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 52
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 53
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 53
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 53
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 53
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 53
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/string.ci"
											, "line": 53
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/string.ci"
											, "line": 53
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 53
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 53
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 53
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 53
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 54
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/string.ci"
									, "line": 54
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 57
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 57
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368856
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368857
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368859
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 368864
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368865
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368869
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368870
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368872
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 368877
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368878
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368882
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368884
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 368886
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368887
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368891
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368892
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 368896
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368897
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368901
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368902
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368903
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368907
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368908
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368910
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368912
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 368914
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368915
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368917
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368918
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368919
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368920
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368922
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368924
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368925
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368926
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 368928
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368929
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368933
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 368934
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368935
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368939
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368940
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 368944
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368945
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368949
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368950
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368954
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368956
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 368958
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 368959
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368963
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368967
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 368972
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 368976
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368977
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 368981
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 368984
	, "static": true
	, "const": true
	, "doc": "Check if the two strings are equal, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 62
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 63
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 63
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 63
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 64
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 65
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 65
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 65
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 65
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 65
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 65
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 65
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 65
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 66
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 69
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 69
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368984
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368985
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368986
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368990
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368991
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368993
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368995
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 368996
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368997
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368999
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369001
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369002
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369003
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 369005
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369006
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369010
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369012
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369014
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369016
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369017
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369018
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369019
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369020
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369024
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369028
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369032
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369034
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369035
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369036
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369040
		, "size": 4
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369044
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 369046
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 369120
	, "static": true
	, "const": true
	, "doc": "ignore case character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 74
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 84
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 84
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 84
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 84
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 84
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 84
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369120
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369121
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369125
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369126
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 369131
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369132
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369136
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369137
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369141
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369142
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 369147
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369148
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 369152
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369153
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 369155
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 369160
	, "static": true
	, "const": true
	, "doc": "default character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 89
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 89
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 89
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 89
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369160
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369164
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369165
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369169
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 369170
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369171
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 369173
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 92
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 92
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 92
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 92
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 93
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 93
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 93
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 94
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 94
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 94
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 94
			, "value": "caseCmp"
		}]
	}
}, {
	"": "equals(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "equals"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 95
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 95
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 95
		, "left": {
			"": "compare(str, with, caseCmp)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 95
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 95
				, "value": "str"
			}, {
				"": "with"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 95
				, "value": "with"
			}, {
				"": "caseCmp"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 95
				, "value": "caseCmp"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 95
			, "value": "0"
		}
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string contains the given character"
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 98
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 98
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 98
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 98
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "cmplStd/lib/string.ci"
	, "line": 112
	, "size": 16
	, "offs": 193296
	, "static": true
	, "const": true
	, "doc": "Flags to convert numbers to string"
}, {
	"": "FormatFlags.showSign"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "showSign"
	, "owner": "FormatFlags"
	, "type": "bool"
	, "file": "cmplStd/lib/string.ci"
	, "line": 114
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "forced show sign"
	, "ast": {
		"": "false"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 114
		, "value": "false"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/string.ci"
	, "line": 117
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
	, "doc": "precision or radix"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 117
		, "value": "0"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "cmplStd/lib/string.ci"
	, "line": 120
	, "size": 1
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "padding character"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 120
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/string.ci"
	, "line": 123
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "doc": "padding length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 123
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 127
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 84
	, "offs": 369176
	, "static": true
	, "const": true
	, "doc": "Append a string to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 128
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 128
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 128
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 128
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 128
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 128
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 128
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 128
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 128
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 128
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 128
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 129
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 129
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 129
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 129
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 129
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 129
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 129
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 129
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 130
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 132
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 133
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 136
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 136
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 136
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 136
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 136
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 136
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 136
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 136
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 137
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 139
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 140
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 140
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369176
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369177
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369181
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369183
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369185
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369186
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369190
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369194
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369196
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369198
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369199
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369200
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369202
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369204
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369205
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369206
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369208
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369212
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369214
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369218
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369220
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369222
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369223
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369224
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369228
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369232
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369234
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369236
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369237
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369241
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369243
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369247
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369249
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369250
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369252
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369254
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369255
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(5, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 369256
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 369259
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 144
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "sign"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "sign"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 707
	, "offs": 369280
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 144
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 145
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 146
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 148
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 149
			, "value": "digits"
		}, {
			"": "if (format.showSign)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 151
			, "test": {
				"": "format.showSign"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 151
				, "left": {
					"": "format"
					, "kind": ".variable"
					, "type": "FormatFlags"
					, "file": "cmplStd/lib/string.ci"
					, "line": 151
					, "value": "format"
				}
				, "right": {
					"": "showSign"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 151
					, "value": "showSign"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 151
				, "stmt": [{
					"": "if ((sign) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 152
					, "test": {
						"": "(sign) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 152
						, "left": {
							"": "(sign)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 152
							, "args": [{
								"": "sign"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 152
								, "value": "sign"
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 152
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 152
						, "stmt": [{
							"": "sign := '+';"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 153
						}]
					}
				}]
			}
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 157
			, "value": "radix"
		}, {
			"": "if (radix == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 158
			, "test": {
				"": "radix == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 158
				, "left": {
					"": "radix"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 158
					, "value": "radix"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 158
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 158
				, "stmt": [{
					"": "radix := 10;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 159
				}]
			}
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 161
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 162
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 165
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 165
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 165
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 165
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 165
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 165
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 166
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 168
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 168
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 168
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 168
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 168
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 169
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 172
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 174
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 175
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 175
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 175
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 175
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 175
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 176
				}]
			}
		}, {
			"": "if ((sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 180
			, "test": {
				"": "(sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 180
				, "left": {
					"": "(sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 180
					, "args": [{
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 180
						, "value": "sign"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 180
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 180
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 181
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 182
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 182
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 182
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 182
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 182
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 184
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "cmplStd/lib/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 184
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 184
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 184
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 184
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/string.ci"
								, "line": 184
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 185
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 186
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 187
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 190
				}, {
					"": "output[pos] := sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 191
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 192
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 196
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 196
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 196
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 196
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 196
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 196
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 197
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 198
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 199
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 203
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 203
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 203
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 204
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 205
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 206
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 209
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 209
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 209
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 209
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 209
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 209
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 209
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 209
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 210
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 212
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 213
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 213
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369280
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369281
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369285
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369287
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369288
		, "size": 4
	}, {
		"instruction": "load.sp(+100)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369292
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369296
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369297
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369298
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369299
		, "size": 4
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369303
		, "size": 5
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369308
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369312
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369313
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369315
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 369319
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369320
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369322
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369323
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369324
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369328
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369333
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369335
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369337
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369342
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369343
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369347
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369351
		, "size": 5
	}, {
		"instruction": "load.c32 161"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369356
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369361
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369366
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369371
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369376
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369381
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369385
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369389
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 369391
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369395
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369396
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369400
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369404
		, "size": 5
	}, {
		"instruction": "load.c32 162"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369409
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369414
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369419
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369424
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369429
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369434
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369438
		, "size": 4
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369442
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 369446
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(25)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 369450
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369452
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 369454
		, "size": 1
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 369455
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 369456
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369457
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369458
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369459
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369463
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369465
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369469
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369471
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369473
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369474
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 369475
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369477
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 369479
		, "size": 1
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 369480
		, "size": 1
	}, {
		"instruction": "set.x64 sp(26)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 369481
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 369483
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 369485
		, "size": 1
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 369486
		, "size": 1
	}, {
		"instruction": "jnz -41"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369487
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(21)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369491
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369493
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369494
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369495
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369499
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369504
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369508
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369510
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369514
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369516
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369518
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369519
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369520
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369522
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 369526
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369527
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 369529
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369530
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369532
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369536
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369537
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369541
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369542
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369543
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369544
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369548
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369553
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369557
		, "size": 1
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369558
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369562
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369563
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 369564
		, "size": 1
	}, {
		"instruction": "jnz +200"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369565
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369569
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369571
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369575
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369577
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 369578
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369582
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369586
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369587
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 369592
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369593
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369597
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369598
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369599
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369603
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369607
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369609
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369611
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369612
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369616
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369620
		, "size": 5
	}, {
		"instruction": "load.c32 185"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369625
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369630
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369635
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369640
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369645
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369650
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369655
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369659
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369663
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369664
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369666
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369668
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369669
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369670
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369672
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369676
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369678
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369680
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369684
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369686
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369688
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369689
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369690
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369694
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369696
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369698
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369699
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369703
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369707
		, "size": 5
	}, {
		"instruction": "load.c32 190"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369712
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369717
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369722
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369727
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369732
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369737
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369742
		, "size": 4
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369746
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369750
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369751
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369753
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369755
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369756
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369757
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369759
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369763
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369765
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369769
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369771
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369773
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369774
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369778
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369782
		, "size": 5
	}, {
		"instruction": "load.c32 197"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369787
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369792
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369797
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369802
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369807
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369812
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369817
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369821
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369825
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369826
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369828
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369830
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369831
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369832
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369834
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369838
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369840
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369842
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369846
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369848
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369850
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369851
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369852
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369856
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369857
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369861
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(33)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369863
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369865
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369866
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369870
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369874
		, "size": 5
	}, {
		"instruction": "load.c32 204"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369879
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369884
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369894
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369899
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 369904
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 369909
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369913
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369917
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369919
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 369921
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369922
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369923
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369924
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369926
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369928
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369929
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369930
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369932
		, "size": 4
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369936
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369938
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369942
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369944
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369946
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369947
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369951
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369955
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369957
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369959
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 369960
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369964
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369966
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369970
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 369972
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369973
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369975
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369977
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 369978
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(32, 29)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 369979
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369982
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 369986
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 217
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 217
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 217
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 217
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 217
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 217
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 217
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 217
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 219
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 219
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 219
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 221
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 221
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 221
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 221
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 221
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 221
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/lib/string.ci"
				, "line": 221
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 221
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 223
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 223
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 223
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 223
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 223
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 223
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/lib/string.ci"
				, "line": 223
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 223
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 225
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < (0) ? ('-') : 0, uint64(value < (0) ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 225
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 225
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 225
			, "value": "pos"
		}, {
			"": "value < (0) ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 225
			, "test": {
				"": "value < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 225
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 225
						, "value": "0"
					}]
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 225
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 225
				, "value": "0"
			}
		}, {
			"": "uint64(value < (0) ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 225
			, "args": [{
				"": "value < (0) ? -value : value"
				, "kind": "?:"
				, "type": "int64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 225
				, "test": {
					"": "value < (0)"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 225
						, "value": "value"
					}
					, "right": {
						"": "(0)"
						, "kind": "()"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 225
						, "args": [{
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 225
							, "value": "0"
						}]
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 225
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 225
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 225
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 227
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < 0 ? ('-') : 0, uint64(value < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 227
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 227
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 227
			, "value": "pos"
		}, {
			"": "value < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 227
			, "test": {
				"": "value < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 227
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "value": "value"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 227
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 227
				, "value": "0"
			}
		}, {
			"": "uint64(value < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 227
			, "args": [{
				"": "value < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 227
				, "test": {
					"": "value < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 227
						, "value": "value"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 227
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 227
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 227
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 227
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 229
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 229
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 229
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 229
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 229
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 229
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/string.ci"
						, "line": 229
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 229
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 229
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 229
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int16"
				, "file": "cmplStd/lib/string.ci"
				, "line": 229
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 229
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int16"
							, "file": "cmplStd/lib/string.ci"
							, "line": 229
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 229
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int16"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/string.ci"
						, "line": 229
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int16"
					, "file": "cmplStd/lib/string.ci"
					, "line": 229
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 229
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 231
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 231
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 231
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 231
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 231
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 231
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/string.ci"
						, "line": 231
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 231
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 231
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 231
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int8"
				, "file": "cmplStd/lib/string.ci"
				, "line": 231
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 231
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int8"
							, "file": "cmplStd/lib/string.ci"
							, "line": 231
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 231
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int8"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/string.ci"
						, "line": 231
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int8"
					, "file": "cmplStd/lib/string.ci"
					, "line": 231
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 231
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 227
	, "offs": 369992
	, "static": true
	, "const": true
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "stmt": [{
			"": "formatInt"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 235
			, "value": "formatInt"
		}, {
			"": "formatDec"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 241
			, "value": "formatDec"
		}, {
			"": "sign"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 248
			, "value": "sign"
		}, {
			"": "fract"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 249
			, "value": "fract"
		}, {
			"": "pos := append(output, pos, sign, uint64(int64(value)), formatInt);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 250
		}, {
			"": "pos := append(output, pos, \".\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 252
		}, {
			"": "fract := fract * float64.pow(10, format.precision);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 253
		}, {
			"": "pos := append(output, pos, 0, uint64(int64(fract)), formatDec);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 254
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 255
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 255
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369992
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369996
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 369998
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 369999
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 370003
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370004
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370005
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370007
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370009
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 370013
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370014
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 370018
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370019
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370021
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 370025
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370026
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370028
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 370032
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 370033
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370034
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370036
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370040
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370041
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 370045
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370046
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370047
		, "size": 2
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370049
		, "size": 5
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370054
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 370058
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370059
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370061
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 370065
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370066
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(10)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370068
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 370070
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 370071
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370072
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370076
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370081
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370085
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 370086
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370087
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370089
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370094
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370095
		, "size": 4
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370099
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370103
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370108
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370109
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370113
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370114
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370116
		, "size": 2
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370118
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 370122
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(18)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370123
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 370125
		, "size": 1
	}, {
		"instruction": "load.sp(+56)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370126
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370130
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370135
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370136
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370140
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370142
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370143
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370145
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370147
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370152
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370157
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370158
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370162
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 370164
		, "size": 9
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370173
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370175
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 370179
		, "size": 1
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 370180
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 370181
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 370185
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370186
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370187
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370189
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370191
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370192
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 370194
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 370195
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370199
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370204
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370205
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370209
		, "size": 2
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 370211
		, "size": 3
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370214
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 370218
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 259
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, float64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 259
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 259
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 259
			, "value": "pos"
		}, {
			"": "float64(value)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 259
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 259
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 259
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 262
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 262
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 370240
	, "static": true
	, "const": true
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 262
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 263
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 264
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 264
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "cmplStd/lib/string.ci"
						, "line": 264
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 264
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 264
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/string.ci"
						, "line": 264
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370240
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370242
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 370243
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370245
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370247
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370249
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370250
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370251
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370255
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370260
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370264
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370265
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 370267
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370268
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370269
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370273
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 370275
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370276
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370280
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 370282
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370283
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 370288
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 370293
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370294
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370298
		, "size": 2
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370300
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 370302
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "cmplStd/test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 370304
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 370312
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 370320
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 370328
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 370336
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `emitA + emitB`"
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 13
	, "size": 4
	, "offs": 370344
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `10 / 5`"
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 16
	, "size": 4
	, "offs": 370352
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `float32.sin(3.14f / 2)`"
	, "ast": {
		"": "emit(float32(3.140000), float32(2), div.f32, float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "float32(3.140000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "3.140000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "3.140000"
			}]
		}, {
			"": "float32(2)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "2"
			}]
		}, {
			"": "div.f32"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "div"
			}
			, "right": {
				"": "f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "f32"
			}
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "function"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 32 bit floating point number as an 32 bit integer"
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 19
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 19
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 64 bit floating point number as an 64 bit integer"
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 23
	, "size": 4
	, "offs": 370360
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 23
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 23
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 24
	, "size": 8
	, "offs": 370368
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 24
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 24
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 25
	, "size": 4
	, "offs": 370376
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 25
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 25
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 26
	, "size": 8
	, "offs": 370384
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 26
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 26
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 29
	, "size": 8
	, "offs": 370392
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 370400
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 370408
	, "static": true
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 370416
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 370424
	, "static": true
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 370432
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 370440
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 370448
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 370456
	, "static": true
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 370464
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 370472
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 370480
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 370488
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 370496
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 370504
	, "static": true
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 370512
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 370520
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 370528
	, "static": true
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 370536
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 370544
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 370552
	, "static": true
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 370560
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 370568
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 370576
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 370584
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 370592
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 370600
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 370608
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 370616
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 370624
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 370632
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 370640
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 370648
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 370656
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 370664
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 370672
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 370680
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 370688
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 370696
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 370704
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 370712
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 370720
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 370728
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 370736
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 370744
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 370752
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 370760
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 370768
	, "static": true
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 370776
	, "static": true
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 370784
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 370792
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 370800
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 235760
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 236064
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 370808
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 370816
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 370824
	, "static": true
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 370832
	, "static": true
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 370840
	, "static": true
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 370848
	, "static": true
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R8G8B8 color format"
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R5G6B5 color format"
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 370856
	, "static": true
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 370864
	, "static": true
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 370872
	, "static": true
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 370880
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 370888
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 370896
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 370904
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 370912
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 370920
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 370928
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 370936
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 370944
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 370952
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 370960
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 370968
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 370976
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 370984
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 370992
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 371000
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 371008
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 371016
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 371024
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 371032
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 371040
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 371048
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 371056
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 371064
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 371072
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 371080
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 371088
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 371096
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 371104
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 371112
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 371120
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 371128
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 371136
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 371144
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 371152
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 371160
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 371168
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 371176
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 371184
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 371192
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 371200
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 371208
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 371216
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 371224
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 371232
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 371240
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 371248
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371248
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 371256
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 16
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 17
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371256
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 371260
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 371264
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371265
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 371270
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371271
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371275
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371279
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 371280
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 21
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371280
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371285
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 371286
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371287
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371291
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 371296
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 25
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 30
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 35
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371296
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371300
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 371305
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371307
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 371312
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371314
		, "size": 5
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 371319
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371321
		, "size": 5
	}, {
		"instruction": "load.c32 35"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371326
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371331
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371336
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371341
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371346
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 371351
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 371355
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371359
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371363
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 371368
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 39
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 40
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371368
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 371373
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 371375
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371376
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371380
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 371384
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 44
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371384
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 371385
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 371392
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 371400
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 371408
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 371416
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 371424
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 371432
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 53
	, "size": 4
	, "offs": 371440
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "abortExecution"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 7
	, "size": 8
	, "offs": 371448
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 8
	, "size": 4
	, "offs": 371456
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 9
	, "size": 4
	, "offs": 371464
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 10
	, "size": 8
	, "offs": 371472
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 12
	, "size": 8
	, "offs": 371480
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 13
	, "size": 4
	, "offs": 371488
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 14
	, "size": 4
	, "offs": 371496
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 16
	, "size": 4
	, "offs": 371504
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 17
	, "size": 4
	, "offs": 371512
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 18
	, "size": 8
	, "offs": 371520
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 19
	, "size": 4
	, "offs": 371528
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 20
	, "size": 4
	, "offs": 371536
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 21
	, "size": 4
	, "offs": 371544
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 23
	, "size": 4
	, "offs": 371552
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 24
	, "size": 8
	, "offs": 371560
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 25
	, "size": 4
	, "offs": 371568
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 27
	, "size": 8
	, "offs": 371576
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 28
	, "size": 8
	, "offs": 371584
	, "static": true
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 29
	, "size": 4
	, "offs": 371592
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 30
	, "size": 4
	, "offs": 371600
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 31
	, "size": 8
	, "offs": 371608
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 32
	, "size": 4
	, "offs": 371616
	, "static": true
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 35
	, "size": 4
	, "offs": 371624
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 36
	, "size": 4
	, "offs": 371632
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 37
	, "size": 4
	, "offs": 371640
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 38
	, "size": 4
	, "offs": 371648
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 39
	, "size": 4
	, "offs": 371656
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 40
	, "size": 4
	, "offs": 371664
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 41
	, "size": 4
	, "offs": 371672
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 42
	, "size": 4
	, "offs": 371680
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 43
	, "size": 4
	, "offs": 371688
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 44
	, "size": 4
	, "offs": 371696
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 45
	, "size": 4
	, "offs": 371704
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 46
	, "size": 4
	, "offs": 371712
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 47
	, "size": 4
	, "offs": 371720
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 48
	, "size": 4
	, "offs": 371728
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 49
	, "size": 4
	, "offs": 371736
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 50
	, "size": 4
	, "offs": 371744
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 51
	, "size": 4
	, "offs": 371752
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 52
	, "size": 4
	, "offs": 371760
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 55
	, "size": 8
	, "offs": 371768
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 56
	, "size": 8
	, "offs": 371776
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 57
	, "size": 8
	, "offs": 371784
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 58
	, "size": 8
	, "offs": 371792
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 59
	, "size": 8
	, "offs": 371800
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 60
	, "size": 8
	, "offs": 371808
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 61
	, "size": 8
	, "offs": 371816
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 62
	, "size": 8
	, "offs": 371824
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 63
	, "size": 8
	, "offs": 371832
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 64
	, "size": 8
	, "offs": 371840
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 65
	, "size": 8
	, "offs": 371848
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 66
	, "size": 8
	, "offs": 371856
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 67
	, "size": 8
	, "offs": 371864
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 68
	, "size": 8
	, "offs": 371872
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 69
	, "size": 8
	, "offs": 371880
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 70
	, "size": 8
	, "offs": 371888
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 71
	, "size": 8
	, "offs": 371896
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 72
	, "size": 8
	, "offs": 371904
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 75
	, "size": 4
	, "offs": 371912
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 76
	, "size": 4
	, "offs": 371920
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 77
	, "size": 4
	, "offs": 371928
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 78
	, "size": 4
	, "offs": 371936
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 79
	, "size": 4
	, "offs": 371944
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 80
	, "size": 4
	, "offs": 371952
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 81
	, "size": 4
	, "offs": 371960
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 82
	, "size": 4
	, "offs": 371968
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 83
	, "size": 4
	, "offs": 371976
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 84
	, "size": 4
	, "offs": 371984
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 85
	, "size": 4
	, "offs": 371992
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 86
	, "size": 4
	, "offs": 372000
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 87
	, "size": 4
	, "offs": 372008
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 88
	, "size": 4
	, "offs": 372016
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 89
	, "size": 4
	, "offs": 372024
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 90
	, "size": 4
	, "offs": 372032
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 91
	, "size": 4
	, "offs": 372040
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 92
	, "size": 4
	, "offs": 372048
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 95
	, "size": 4
	, "offs": 372056
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 96
	, "size": 8
	, "offs": 372064
	, "static": true
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 97
	, "size": 4
	, "offs": 372072
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 99
	, "size": 4
	, "offs": 372080
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 105
	, "size": 8
	, "offs": 372088
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 108
	, "size": 4
	, "offs": 372096
	, "static": true
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "variable"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "variable"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 3
	, "size": 4
	, "offs": 372104
	, "static": true
	, "const": false
	, "doc": "Uninitialized variables will be initialized with default type initializer: 0"
}, {
	"": "constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 7
	, "size": 4
	, "offs": 372112
	, "static": true
	, "const": true
	, "doc": "Constant variables must be explicitly initialized"
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "ComplexVal"
	, "kind": "typename"
	, "cast": "val"
	, "name": "ComplexVal"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 9
	, "size": 16
	, "offs": 270744
	, "static": true
	, "const": true
}, {
	"": "ComplexVal.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "ComplexVal.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 11
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 11
		, "value": "0"
	}
}, {
	"": "ComplexObj"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "ComplexObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 13
	, "size": 20
	, "offs": 271200
	, "static": true
	, "const": true
}, {
	"": "ComplexObj.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 14
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "ComplexObj.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 15
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 15
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(6)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "valInitImplicit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "valInitImplicit"
	, "type": "ComplexVal"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 24
	, "size": 16
	, "offs": 372120
	, "static": true
	, "const": false
	, "doc": "Value types must be explicitly initialized\nthe initializer will be extended with implicit field initializers\n{re: 8} => {\nvalInitImplicit.re := 8;\nvalInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexVal"
		, "stmt": [{
			"": "valInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 24
		}, {
			"": "valInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitImplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitImplicit"
	, "type": "ComplexObj"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 33
	, "size": 4
	, "offs": 372136
	, "static": true
	, "const": false
	, "doc": "Reference types must be explicitly initialized\nthe initializer will be extended with instance creation\n{re: 8} => {\nobjInitImplicit := Object.create(ComplexObj);\nobjInitImplicit.re := 8;\nobjInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexObj"
		, "stmt": [{
			"": "objInitImplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitExplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitExplicit"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 41
	, "size": 4
	, "offs": 372144
	, "static": true
	, "const": false
	, "doc": "variable type can be base type of the explicit initializer type\nComplexObj {re: 8} => {\nobjInitExplicit := Object.create(ComplexObj);\nobjInitExplicit.re := 8;\nobjInitExplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "object"
		, "stmt": [{
			"": "objInitExplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}]
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 372152
	, "static": true
	, "const": true
	, "doc": "function with empty implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372152
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 372160
	, "static": true
	, "const": true
	, "doc": "function with implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 8
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 8
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372160
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372162
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 372164
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 372165
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372167
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 12
	, "size": 4
	, "offs": 372168
	, "static": true
	, "const": false
	, "doc": "function invocation"
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 372176
	, "static": true
	, "const": false
	, "doc": "initialized function reference"
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 18
	, "size": 4
	, "offs": 372184
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 372192
	, "static": true
	, "const": false
	, "doc": "forward function reference (must be implemented somewhere)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 24
	, "size": 4
	, "offs": 372200
	, "static": true
	, "const": false
	, "doc": "forward function invocation"
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 372208
	, "static": true
	, "const": false
	, "doc": "initialized function reference (copy address)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 30
	, "size": 4
	, "offs": 372216
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 372224
	, "static": true
	, "const": true
	, "doc": "forward function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 34
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 34
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372224
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372226
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 372228
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 372229
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372231
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 372232
	, "static": true
	, "const": true
	, "doc": "recursive function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 39
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 39
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 40
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 40
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 42
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 42
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372232
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372234
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 372239
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 372240
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 372244
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372247
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372248
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372249
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372251
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372255
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372260
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372261
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372265
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372266
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372268
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372272
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372277
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372278
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 372282
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 372283
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372285
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 46
	, "size": 4
	, "offs": 372288
	, "static": true
	, "const": false
	, "doc": "recursive function invocation"
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 46
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 46
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 372296
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 372304
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 372312
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 372320
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 372328
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 372336
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 372344
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 372352
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 372360
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 372368
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 372376
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 372384
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 372392
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 372400
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 372408
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 372416
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 372424
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 372432
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 280448
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(6)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 280752
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(6)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 372440
	, "static": true
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 372448
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 372456
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 372464
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 372472
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 372480
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 372488
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 372496
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 372504
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 372512
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 372520
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 372528
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 372536
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 372544
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 372552
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 372560
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 372568
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 372576
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 2
	, "size": 32
	, "offs": 284656
	, "static": true
	, "const": true
	, "doc": "test and documentation of member initializations"
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 4
	, "size": 8
	, "offs": 284808
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 10
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 13
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 16
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 16
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 19
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 19
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 22
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 25
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 34
	, "size": 4
	, "offs": 372584
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 37
	, "size": 4
	, "offs": 372592
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 37
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 40
	, "size": 4
	, "offs": 372600
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 40
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 43
	, "size": 8
	, "offs": 372608
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRec.constant := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 43
		}, {
			"": "globalRec.member := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 46
	, "size": 8
	, "offs": 372616
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 49
	, "size": 8
	, "offs": 372624
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 52
	, "size": 32
	, "offs": 372632
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 53
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 59
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 64
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 65
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 4
	, "size": 16
	, "offs": 288384
	, "static": true
	, "const": true
	, "doc": "static, virtual and abstract methods"
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 372664
	, "static": true
	, "const": true
	, "doc": "static method is like a `global function` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 11
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372664
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372669
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372674
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372679
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372684
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372689
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372694
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372698
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372702
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 372704
	, "static": true
	, "const": false
	, "doc": "static forward method is like a `forward function reference` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "abstract methods must be overridden when inheriting or instantiating\nthe compiler sees it as a `constant function reference` without `default type initializer`\n@see lang/member.ci"
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "virtual method (use to delegate)\nthe compiler sees it as a `constant function reference` with `default field initializer`\n@see lang/member.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 372712
	, "static": true
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372712
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372717
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372722
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372727
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372732
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372737
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372742
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372746
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372750
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 372752
	, "static": true
	, "const": true
	, "doc": "static forward method implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372752
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372757
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372762
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372767
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372772
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372777
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372782
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372786
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372790
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 372792
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 58
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372792
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372797
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372802
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372807
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372812
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372817
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372822
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372826
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372830
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 62
	, "size": 16
	, "offs": 372832
	, "static": true
	, "const": false
	, "doc": "create an instance of the type "
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 64
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod;"
			, "kind": ";"
			, "type": "void"
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod;"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 372848
	, "static": true
	, "const": true
	, "doc": "extension function is defined, it has the highest priority."
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 85
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 86
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 86
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 87
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372848
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372853
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372858
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372863
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372864
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372869
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372874
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372879
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372883
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372887
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 372892
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 372893
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 372897
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372899
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 372901
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372903
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372908
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372909
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372913
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 372920
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 91
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 92
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 92
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 93
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372920
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372925
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372930
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372935
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372936
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372941
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372946
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372951
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 372955
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372959
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 372964
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 372965
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 372969
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372971
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 372973
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 372975
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372977
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372978
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 372982
		, "size": 1
	}]
}, {
	"": "arrFixedInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedInit"
	, "type": "int64[7]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 11
	, "size": 56
	, "offs": 372984
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "int64[7]"
		, "stmt": [{
			"": "arrFixedInit[0] := (42);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[1] := (43);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[2] := (44);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[3] := (45);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[4] := (46);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[5] := (47);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}, {
			"": "arrFixedInit[6] := (48);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 11
		}]
	}
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 18
	, "size": 4
	, "offs": 373040
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 19
	, "size": 8
	, "offs": 373048
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 22
	, "size": 4
	, "offs": 373056
	, "static": true
	, "const": false
	, "ast": {
		"": "arrFixedInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 22
		, "value": "arrFixedInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 23
	, "size": 8
	, "offs": 373064
	, "static": true
	, "const": false
	, "ast": {
		"": "arrFixedInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 23
		, "value": "arrFixedInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 26
	, "size": 4
	, "offs": 373072
	, "static": true
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 26
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 27
	, "size": 8
	, "offs": 373080
	, "static": true
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 27
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 30
	, "size": 4
	, "offs": 373088
	, "static": true
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 30
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 34
	, "size": 7
	, "offs": 373096
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "char[7]"
		, "stmt": [{
			"": "strFixed[0] := 's';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[1] := 't';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[2] := 'r';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[3] := 'i';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[4] := 'n';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[5] := 'g';"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}, {
			"": "strFixed[6] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 34
		}]
	}
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 37
	, "size": 4
	, "offs": 373104
	, "static": true
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 37
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 40
	, "size": 8
	, "offs": 373112
	, "static": true
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 40
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 51
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 51
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 51
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 4
	, "offs": 373120
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 51
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 51
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 51
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 51
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 51
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 373120
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 373123
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 52
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 52
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 52
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 373128
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 52
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 52
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 52
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 52
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 52
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373128
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373130
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 373132
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 373136
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 373137
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 373139
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 53
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 53
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 53
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 53
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 373144
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 53
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 53
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 53
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 53
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 53
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373144
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373146
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 373148
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 373152
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 373153
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 373155
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.array.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 54
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 54
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 373160
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 54
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 54
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 54
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 54
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 54
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373160
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 373162
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 373164
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 373168
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 373169
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 373171
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 301816
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 302424
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 303032
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 303488
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(6)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 373176
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 373184
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 373192
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 373200
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 373208
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 304680
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 305744
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 306808
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 307872
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 308936
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 310000
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 373216
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 373224
	, "static": true
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 373232
	, "static": true
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 373240
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 373248
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 373256
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 373264
	, "static": true
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 373272
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 373280
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 373288
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 373296
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 373304
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 373312
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 373320
	, "static": true
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 373328
	, "static": true
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 373336
	, "static": true
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 373344
	, "static": true
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 373352
	, "static": true
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 373360
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 373368
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 373376
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 373384
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 373392
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 373400
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 373408
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 373416
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 373424
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 373432
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 373440
	, "static": true
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 373448
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 373456
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 373464
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 373472
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 373480
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 373488
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 373496
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 373504
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 373512
	, "static": true
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 373520
	, "static": true
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 373528
	, "static": true
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 373536
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 373544
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 373552
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 373560
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 373568
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 373576
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 373584
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 373592
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 373600
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 373608
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 373616
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 373624
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 373632
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 373640
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 373648
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 373656
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 373664
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 373672
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 373680
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 373688
	, "static": true
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 373696
	, "static": true
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 373704
	, "static": true
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 373712
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 373720
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 373728
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 373736
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 373744
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 373752
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 373760
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 373768
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 373776
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 373784
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 373792
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 373800
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 373808
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 373816
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 373824
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 373832
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 373840
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 373848
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 373856
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 373864
	, "static": true
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 373872
	, "static": true
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 373880
	, "static": true
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 373888
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 373896
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 373904
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 373912
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 373920
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 373928
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 373936
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 373944
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 373952
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 373960
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 373968
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 373976
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 373984
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 373992
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 374000
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 374008
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 374016
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 374024
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 374032
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 374040
	, "static": true
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 374048
	, "static": true
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 374056
	, "static": true
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 374064
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 374072
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 374080
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 374088
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 374096
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 374104
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 374112
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 374120
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 374128
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 374136
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 374144
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 374152
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 374160
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 374168
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 374176
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 374184
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 374192
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 374200
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 374208
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 374216
	, "static": true
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 374224
	, "static": true
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 374232
	, "static": true
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 374240
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 374248
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 374256
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 374264
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 374272
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 374280
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 374288
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 374296
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 374304
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 374312
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 374320
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 374328
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 374336
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 374344
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 374352
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 374360
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 374368
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 374376
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 374384
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 374392
	, "static": true
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 374400
	, "static": true
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 374408
	, "static": true
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 374416
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 374424
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 374432
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 374440
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 374448
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 374456
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 374464
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 374472
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 374480
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 374488
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 374496
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 374504
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 374512
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 374520
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 374528
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 374536
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 374544
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 374552
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 374560
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 374568
	, "static": true
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 374576
	, "static": true
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 374584
	, "static": true
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 374592
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 374600
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 374608
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 374616
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 374624
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 374632
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 374640
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 374648
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 374656
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 374664
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 374672
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 374680
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 374688
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 374696
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 374704
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 374712
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 374720
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 374728
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 374736
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 374744
	, "static": true
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 374752
	, "static": true
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 374760
	, "static": true
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 374768
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 374776
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 374784
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 374792
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 374800
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 374808
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 374816
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 374824
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 374832
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 374840
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 374848
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 374856
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 374864
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 374872
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 374880
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 374888
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 374896
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 374904
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 374912
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 374920
	, "static": true
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 374928
	, "static": true
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 374936
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 374944
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 374952
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 374960
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 374968
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 374976
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 374984
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 374992
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 375000
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 375008
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 375016
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 375024
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 375032
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 375040
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 375048
	, "static": true
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 375056
	, "static": true
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 375064
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 375072
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 375080
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 375088
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 375096
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 375104
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 375112
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 375120
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 375128
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 375136
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 375144
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 375152
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 375160
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 375168
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 375176
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 375184
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.if.ci"
	, "line": 26
	, "size": 4
	, "offs": 375192
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/stmt.if.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.for.ci"
	, "line": 12
	, "size": 4
	, "offs": 375200
	, "static": true
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 375208
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 375216
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 375224
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 375232
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 375240
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 375248
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 375256
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 375264
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 375272
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 375280
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 375288
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 375296
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 375304
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 375312
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 375320
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 375328
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 375336
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 375344
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 375352
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 375360
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 375368
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 375376
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 375384
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 375392
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 375400
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 375408
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 375416
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 375424
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 375432
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 38
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 39
	, "size": 8
	, "offs": 375440
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 375448
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 375456
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 375464
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 43
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 44
	, "size": 8
	, "offs": 375472
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 44
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 44
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 375480
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 375488
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 375496
	, "static": true
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 48
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 49
	, "size": 8
	, "offs": 375504
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 49
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 49
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 375512
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 375520
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 375528
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 375536
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 375544
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 375552
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 375560
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 57
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 57
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 58
	, "size": 8
	, "offs": 375568
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 58
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 58
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 375576
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 375584
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 375592
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 375600
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 63
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 63
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 64
	, "size": 8
	, "offs": 375608
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 64
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 64
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 67
	, "size": 1
	, "offs": 375616
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 67
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 68
	, "size": 1
	, "offs": 375624
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 68
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 70
	, "size": 8
	, "offs": 375632
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 71
	, "size": 8
	, "offs": 375640
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 375648
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 375656
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 75
	, "size": 8
	, "offs": 375664
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 375672
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 375680
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 375688
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 80
	, "size": 8
	, "offs": 375696
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 375704
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 375712
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 84
	, "size": 4
	, "offs": 375720
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 85
	, "size": 4
	, "offs": 375728
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 375736
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 375744
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 89
	, "size": 4
	, "offs": 375752
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 375760
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 375768
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 375776
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 94
	, "size": 4
	, "offs": 375784
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 375792
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 375800
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 14710
	, "offs": 375804
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/stdlib.ci"
			, "line": 8
			, "stmt": [{
				"": "byte"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 8
				, "value": "byte"
			}, {
				"": "float"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 9
				, "value": "float"
			}, {
				"": "double"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 10
				, "value": "double"
			}, {
				"": "signed(value: uint8): int8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 13
				, "value": "signed(value: uint8): int8"
			}, {
				"": "signed(value: uint16): int16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 16
				, "value": "signed(value: uint16): int16"
			}, {
				"": "signed(value: uint32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 19
				, "value": "signed(value: uint32): int32"
			}, {
				"": "signed(value: uint64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 22
				, "value": "signed(value: uint64): int64"
			}, {
				"": "unsigned(value: int8): uint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 25
				, "value": "unsigned(value: int8): uint8"
			}, {
				"": "unsigned(value: int16): uint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 28
				, "value": "unsigned(value: int16): uint16"
			}, {
				"": "unsigned(value: int32): uint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 31
				, "value": "unsigned(value: int32): uint32"
			}, {
				"": "unsigned(value: int64): uint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 34
				, "value": "unsigned(value: int64): uint64"
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/stdlib.ci"
				, "line": 39
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "cmplStd/stdlib.ci"
							, "line": 39
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 4
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 9
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 11
						, "value": "debug(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 14
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 16
						, "value": "trace(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 19
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 21
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 24
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 26
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 29
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 31
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 34
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 36
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 38
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 41
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 43
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 45
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 48
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 61
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 74
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math.ci"
				, "line": 2
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 2
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 24
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 31
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 76
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 117
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 135
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 2
				, "value": "vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 29
				, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 32
				, "value": "vec4f(x: float32, y: float32): vec4f"
			}, {
				"": "vec4f(xyz: vec4f, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
			}, {
				"": "vec4f(val: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 38
				, "value": "vec4f(val: float32): vec4f"
			}, {
				"": "neg(rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "value": "neg(rhs: vec4f): vec4f"
			}, {
				"": "add(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "div(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "min(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "min(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "max(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "max(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 88
				, "value": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
			}, {
				"": "dp3(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dph(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 96
				, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp4(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "cross(a: vec4f, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 103
				, "value": "cross(a: vec4f, b: vec4f): vec4f"
			}, {
				"": "length(v: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 106
				, "value": "length(v: vec4f): float32"
			}, {
				"": "normalize(v: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "normalize(v: vec4f): vec4f"
			}, {
				"": "eval(v: vec4f, x: float32): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 111
				, "value": "eval(v: vec4f, x: float32): float32"
			}, {
				"": "mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 2
				, "value": "mat4f"
			}, {
				"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 62
				, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
			}, {
				"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 75
				, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
			}, {
				"": "dp3(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dph(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dp4(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "transpose(mat: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 87
				, "value": "transpose(mat: mat4f): mat4f"
			}, {
				"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 97
				, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
			}, {
				"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 111
				, "value": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
			}, {
				"": "rotation(direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "rotation(direction: vec4f, angle: float32): mat4f"
			}, {
				"": "translation(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 163
				, "value": "translation(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "scale(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 173
				, "value": "scale(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 2
				, "value": "vec2d"
			}, {
				"": "vec2d(x: float64, y: float64): vec2d"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 14
				, "value": "vec2d(x: float64, y: float64): vec2d"
			}, {
				"": "add(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "value": "add(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "sub(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "value": "sub(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "mul(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "value": "mul(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "div(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "value": "div(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "min(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "value": "min(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "max(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "value": "max(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "ceq(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "value": "ceq(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "dot(a: vec2d, b: vec2d): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "value": "dot(a: vec2d, b: vec2d): float64"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 4
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 15
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 25
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 36
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 46
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 61
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 73
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 88
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 92
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 93
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 94
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "equals(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 95
				, "value": "equals(str: char[*], with: char[*]): bool"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 98
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 112
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 127
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 144
				, "value": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 217
				, "value": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 219
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 221
				, "value": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 223
				, "value": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 225
				, "value": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 227
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 229
				, "value": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 231
				, "value": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "value": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 259
				, "value": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 262
				, "value": "append(output: char[], pos: int32, value: int32): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 23
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 24
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 25
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 26
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 20
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 24
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 38
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 43
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 53
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/init.reference.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/init.reference.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "variable"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 3
				, "value": "variable"
			}, {
				"": "constant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 7
				, "value": "constant"
			}, {
				"": "ComplexVal"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 9
				, "value": "ComplexVal"
			}, {
				"": "ComplexObj"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 13
				, "value": "ComplexObj"
			}, {
				"": "valInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexVal"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 24
				, "value": "valInitImplicit"
			}, {
				"": "objInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexObj"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 33
				, "value": "objInitImplicit"
			}, {
				"": "objInitExplicit"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 41
				, "value": "objInitExplicit"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 4
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 7
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 12
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 15
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 18
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 21
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 24
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 27
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 30
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 33
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 38
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 46
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 2
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 52
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 4
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 57
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 62
				, "value": "recordMethodTest"
			}, {
				"": "recordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 78
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 79
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 84
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 90
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 97
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 98
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 101
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 102
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 103
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 2
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 2
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 2
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/init.array.ci"
							, "line": 2
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/init.array.ci"
								, "line": 2
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 2
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 2
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 3
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 11
				, "value": "arrFixedInit"
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 18
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 19
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 22
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 23
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 26
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 27
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 30
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 34
				, "value": "strFixed"
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 35
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 37
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 38
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 40
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 41
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 48
			}, {
				"": "assert(arrFixedInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 49
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 51
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 52
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 53
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 54
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 56
			}, {
				"": "assertEq(arrFixedInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 57
			}, {
				"": "assertEq(arrFixedInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 58
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 60
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 61
			}, {
				"": "assertEq(arrFixedInit.length, lenSlice(arrFixedInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 62
			}, {
				"": "assertEq(arrFixedInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 63
			}, {
				"": "assertEq(arrFixedInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 64
			}, {
				"": "for (i; i < arrFixedInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.array.ci"
				, "line": 66
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 66
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 66
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 66
						, "value": "i"
					}
					, "right": {
						"": "arrFixedInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 66
						, "left": {
							"": "arrFixedInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "cmplStd/test/lang/init.array.ci"
							, "line": 66
							, "value": "arrFixedInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/init.array.ci"
							, "line": 66
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 66
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 66
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 66
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/init.array.ci"
							, "line": 66
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/init.array.ci"
							, "line": 66
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.array.ci"
					, "line": 66
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 67
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 68
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 69
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 70
					}, {
						"": "assert(expected == nthFixed(i, arrFixedInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 72
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 73
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 74
					}, {
						"": "assert(expected == nthArray(i, arrFixedInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 76
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 77
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 78
					}, {
						"": "assert(expected == nthSlice(i, arrFixedInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 80
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 82
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/init.array.ci"
						, "line": 84
					}]
				}
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 38
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 39
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 40
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 41
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 43
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 44
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 45
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 46
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 48
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 49
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 50
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 51
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 52
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 53
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 54
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 55
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 63
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 64
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 70
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 71
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 75
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 80
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 85
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 89
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 94
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375809
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375814
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375818
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375823
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375828
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 375832
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375833
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 375838
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 375839
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375840
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 375844
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375845
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 375850
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 375851
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375852
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 375856
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375857
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 375861
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375862
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375866
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375871
		, "size": 4
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375875
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375880
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 375884
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 375888
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 375892
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375893
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375897
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375902
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 375907
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375908
		, "size": 4
	}, {
		"instruction": "load.f32 3.140000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 375912
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 375917
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 375922
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 375923
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375927
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 375931
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375936
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 375940
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 375945
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375946
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 375950
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 375959
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375960
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 375964
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375973
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375977
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375982
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 375987
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375991
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 375996
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376000
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376005
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376009
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376014
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376018
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376023
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 376027
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376028
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 376032
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376033
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 376037
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376038
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376042
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376047
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376051
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376055
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376059
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376063
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376067
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376071
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376075
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376080
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376084
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376088
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376092
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376096
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376097
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376101
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376105
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376109
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376113
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376117
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376118
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376122
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376126
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376131
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376133
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376137
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376139
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376143
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376148
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376150
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376154
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376158
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376160
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376164
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376166
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376170
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376174
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376176
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376180
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376184
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376188
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376190
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376194
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376196
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376200
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376204
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376208
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376210
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376214
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376218
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376223
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376228
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376230
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 376232
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376233
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376237
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376239
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376243
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376245
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376247
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376251
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376255
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376259
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376263
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376265
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 376267
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376268
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376272
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376274
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376278
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376280
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376282
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376286
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376290
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376294
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376298
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376302
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376306
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376308
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 376310
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376311
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376315
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376317
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376321
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376323
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376325
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376329
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376333
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376337
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376342
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376347
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376349
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 376351
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376352
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376356
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376358
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376362
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376364
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376366
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376370
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376374
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376378
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376382
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376384
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 376386
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376387
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376391
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376393
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376397
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376399
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376401
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376405
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376409
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376413
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376417
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376421
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376425
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376427
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 376429
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376430
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376434
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376436
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376440
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376442
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 376444
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376448
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376452
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376456
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376461
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376466
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376471
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376475
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376476
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376477
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376481
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376486
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376490
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376494
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376498
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376502
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376506
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376510
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376514
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376518
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376519
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376520
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376521
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376525
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376529
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376533
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376534
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376538
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376539
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376543
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376544
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376548
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376552
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376556
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376560
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376564
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376568
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376572
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376576
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376580
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376581
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376582
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376583
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376587
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376591
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376595
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376599
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376603
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376607
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376608
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376612
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376616
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376617
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376621
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376625
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376626
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376630
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376634
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376639
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376641
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376645
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376647
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376651
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376656
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376658
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376662
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376664
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376668
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376673
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376675
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376679
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376681
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376685
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376690
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376692
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376694
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376696
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376700
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376705
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376707
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376711
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376713
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376717
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376722
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376724
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376726
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376730
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376732
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376736
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376741
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376743
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376745
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376749
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376751
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376755
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376760
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376762
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376766
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376770
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376772
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376776
		, "size": 2
	}, {
		"instruction": "jmp +44"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376778
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376782
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376786
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376788
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376792
		, "size": 2
	}, {
		"instruction": "jmp +26"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376794
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376798
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376802
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376804
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376808
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376810
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376814
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376818
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376820
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376822
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376824
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376828
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376832
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376834
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376838
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376840
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376844
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376848
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376850
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376852
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376856
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376858
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376862
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376866
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376868
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376870
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376874
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376876
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376880
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376884
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376886
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376890
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376894
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376898
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376900
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376904
		, "size": 2
	}, {
		"instruction": "jmp +56"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376906
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376910
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376914
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376918
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376920
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376924
		, "size": 2
	}, {
		"instruction": "jmp +34"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376926
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376930
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376934
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376938
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376940
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376944
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376946
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376950
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376954
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376958
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376960
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 376962
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376964
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 376968
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376972
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376976
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376980
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 376982
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 376986
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 376988
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 376992
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 376996
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377000
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377002
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377004
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377008
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377010
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377014
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377018
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377022
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377024
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377026
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377030
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377032
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377036
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377040
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377044
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377046
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377050
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377054
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377059
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377064
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377069
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377074
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377076
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377078
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377079
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377083
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377085
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377089
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377091
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377093
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377097
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377099
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377101
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377102
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377106
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377108
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377112
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377114
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377116
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377120
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377122
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377124
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377125
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377129
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377131
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377135
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377137
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377139
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377143
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377147
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377152
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377157
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377159
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377161
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377162
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377166
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377168
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377172
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377174
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377176
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377180
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377185
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377187
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377189
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377190
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377194
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377196
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377200
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377202
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377204
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377208
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377213
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377215
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377217
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377218
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377222
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377224
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377228
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377230
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377232
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377236
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377240
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377244
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377248
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377252
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377256
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377258
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377260
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377261
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377265
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377267
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377271
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377273
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377275
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377279
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377281
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377283
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377284
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377288
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377290
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377294
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377296
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377298
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377302
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377304
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377306
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377307
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377311
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377313
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377317
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377319
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377321
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377325
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377329
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377333
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377337
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377339
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377341
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377342
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377346
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377348
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377352
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377354
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377356
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377360
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377364
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377366
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377368
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377369
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377373
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377375
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377379
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377381
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377383
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377387
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377391
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377393
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377395
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377396
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377400
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377402
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377406
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377408
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377410
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377414
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377418
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377422
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377426
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377430
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377434
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377438
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377442
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377446
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377450
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377452
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377454
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377455
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377459
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377461
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377465
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377467
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377469
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377473
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377475
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377477
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377478
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377482
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377484
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377488
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377490
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377492
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377496
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377498
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377500
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377501
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377505
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377507
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377511
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377513
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377515
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377519
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377523
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377527
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377531
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377535
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377539
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377543
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377545
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377547
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377548
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377552
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377554
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377558
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377560
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377562
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377566
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377570
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377574
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377576
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377578
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377579
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377583
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377585
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377589
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377591
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377593
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377597
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377601
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377605
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377607
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 377609
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377610
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377614
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377616
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377620
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377622
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377624
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 377628
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377632
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377636
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377641
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377646
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377651
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377656
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377658
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377660
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377661
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377665
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377667
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377671
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377673
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377675
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377679
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377681
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377683
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377684
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377688
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377690
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377694
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377696
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377698
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377702
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377704
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377706
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377707
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377711
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377713
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377717
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377719
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377721
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377725
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377729
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377734
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377739
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377741
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377743
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377744
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377748
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377750
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377754
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377756
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377758
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377762
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377767
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377769
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377771
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377772
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377776
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377778
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377782
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377784
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377786
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 377790
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377795
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377797
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377799
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377800
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377804
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377806
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377810
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377812
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377814
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377818
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377822
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377826
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377830
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377834
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377838
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377840
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377842
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377843
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377847
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377849
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377853
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377855
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377857
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377861
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377863
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377865
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377866
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377870
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377872
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377876
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377878
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377880
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377884
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377886
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377888
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377889
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377893
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377895
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377899
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377901
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377903
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377907
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377911
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377915
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377919
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377921
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377923
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377924
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377928
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377930
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377934
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377936
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377938
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377942
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377946
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377948
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377950
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377951
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377955
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377957
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377961
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377963
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377965
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 377969
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377973
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377975
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 377977
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 377978
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377982
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 377984
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377988
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377990
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377992
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 377996
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378000
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378004
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378008
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378012
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378016
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378020
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378024
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378028
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378032
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378034
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378036
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378037
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378041
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378043
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378047
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378049
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378051
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378055
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378057
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378059
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378060
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378064
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378066
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378070
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378072
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378074
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378078
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378080
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378082
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378083
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378087
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378089
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378093
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378095
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378097
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378101
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378105
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378109
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378113
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378117
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378121
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378125
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378127
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378129
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378130
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378134
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378136
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378140
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378142
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378144
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378148
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378152
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378156
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378158
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378160
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378161
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378165
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378167
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378171
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378173
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378175
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378179
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378183
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378187
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378189
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 378191
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 378192
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378196
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 378198
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378202
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378204
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378206
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 378210
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378214
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378218
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378223
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378227
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378232
		, "size": 4
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378236
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378241
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378245
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378250
		, "size": 4
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378254
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378259
		, "size": 4
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378263
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378272
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378276
		, "size": 4
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378280
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378289
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378290
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 378299
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378300
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378304
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378313
		, "size": 4
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378317
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378326
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378330
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 378334
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378335
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378339
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 378343
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378344
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378348
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378353
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378355
		, "size": 4
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378359
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378364
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378366
		, "size": 4
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378370
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378375
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378377
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378381
		, "size": 4
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378385
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378387
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 378392
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378393
		, "size": 4
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378397
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378399
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 378404
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 378405
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378406
		, "size": 4
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378410
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378412
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 378414
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378415
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378419
		, "size": 4
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378423
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378425
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 378430
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378431
		, "size": 4
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378435
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378437
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 378442
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 378443
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378444
		, "size": 4
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 378448
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 378450
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378451
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378455
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378459
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378464
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378469
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378473
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378477
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378481
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378486
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378491
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378495
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378499
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378503
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378504
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378509
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378513
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378517
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378521
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378526
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378531
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378535
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378539
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378543
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378548
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378553
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378557
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378561
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378565
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378566
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378571
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378575
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378579
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378583
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378588
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378593
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378597
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378601
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378605
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378610
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378615
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378619
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378623
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378627
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378628
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378633
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378637
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378641
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378645
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378650
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378655
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378659
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378663
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378667
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378672
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378677
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378681
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378685
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378689
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378690
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378695
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378699
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378703
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378707
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 378716
		, "size": 1
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378717
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378721
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378725
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378729
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 378738
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378739
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378743
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378747
		, "size": 4
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378751
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 378760
		, "size": 1
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378761
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378765
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378769
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378773
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378777
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378778
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378782
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378783
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378787
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378791
		, "size": 9
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378800
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378804
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378808
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378812
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378816
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378817
		, "size": 9
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378826
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378830
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378834
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378838
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378842
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378843
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378847
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 378851
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378855
		, "size": 9
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378864
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 378868
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378872
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378876
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 378881
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378882
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378886
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378890
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378894
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 378899
		, "size": 1
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378900
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378904
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378908
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378912
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 378917
		, "size": 1
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378918
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378922
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378926
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378930
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378934
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378935
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378939
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378940
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378944
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378948
		, "size": 5
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378953
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378957
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378961
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378965
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378969
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378970
		, "size": 5
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378975
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378979
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378983
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 378987
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378991
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 378992
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 378996
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379000
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379004
		, "size": 5
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379009
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379013
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379017
		, "size": 4
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379021
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379025
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379029
		, "size": 4
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379033
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379037
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379041
		, "size": 4
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379045
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379049
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379053
		, "size": 4
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379057
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379061
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379065
		, "size": 4
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379069
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379073
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379077
		, "size": 4
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379081
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379085
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379089
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379093
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379094
		, "size": 5
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379099
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379103
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379107
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379111
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379112
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379117
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379121
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379125
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 379129
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379130
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379131
		, "size": 5
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379136
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 379140
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379141
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379145
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 379149
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379150
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379151
		, "size": 5
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379156
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 379160
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379161
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379165
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379170
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379175
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379179
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379183
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379188
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379193
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379197
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379201
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379206
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379211
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379215
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379219
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379224
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379229
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379233
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 379237
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379246
		, "size": 4
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 379250
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379259
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379263
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379268
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379273
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379277
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379281
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379286
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379291
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379295
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379299
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379304
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379309
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379313
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379317
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379322
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379327
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379331
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379335
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379340
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379345
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379349
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379353
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379358
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379363
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379367
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379371
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379376
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 379381
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379385
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 379389
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379398
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379402
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379407
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379411
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379416
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379420
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379425
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379430
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379434
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 379438
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379439
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379443
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379447
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379451
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379455
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379459
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379464
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379468
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379473
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379477
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379482
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379487
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379491
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379496
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379500
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379505
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379509
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379514
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379518
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379523
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379527
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379532
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379537
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379541
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379546
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 379550
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379554
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 379558
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379562
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379566
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379570
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379574
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379578
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 379582
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379586
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 379590
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379594
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379598
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379603
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379607
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379612
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379616
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379621
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379625
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379630
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379634
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379639
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379643
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379648
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379652
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379657
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379661
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379666
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379670
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379675
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379679
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379684
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379688
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379693
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379697
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379702
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379706
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379711
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379715
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379720
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379724
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379729
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379733
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379738
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379742
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379747
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379751
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 379756
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379760
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379765
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379770
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379774
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379779
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379784
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379788
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379793
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379798
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379802
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379807
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379812
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379816
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379821
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379826
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379830
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379835
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379840
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379844
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379849
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379854
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379858
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379863
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379868
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379872
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379877
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379882
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379886
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379891
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379896
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379900
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379905
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379910
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379914
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379919
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379924
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379928
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379933
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379938
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379942
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379947
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379952
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379956
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379961
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379966
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379970
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379975
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379980
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379984
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379989
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 379994
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379998
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380003
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 380008
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380012
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380017
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380021
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380026
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380030
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380035
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380039
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380044
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380048
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380053
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380057
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380062
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380066
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380071
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380075
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380080
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380084
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380089
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380093
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380098
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380102
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380107
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380111
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380116
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380120
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380125
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380129
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380134
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380138
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380143
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380147
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380152
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380156
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380161
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380165
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380170
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380174
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380179
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380183
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380188
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 380193
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380197
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380202
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380206
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380211
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380215
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380220
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 380224
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380228
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380232
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380236
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380237
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380241
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380246
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 380250
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 380259
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 380263
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 380264
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380268
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380273
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380277
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 380281
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380290
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380294
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 380298
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 380299
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380300
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380304
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 380308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380309
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380314
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380318
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 380322
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380331
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380335
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 380339
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380340
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380341
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380346
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380351
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380356
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380357
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380361
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380365
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380370
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380374
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380375
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380380
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380385
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380389
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380390
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380394
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380398
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380403
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380407
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380408
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380413
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380418
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380422
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380423
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380427
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380431
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380435
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380439
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380440
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380445
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380450
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380454
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380455
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380459
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380463
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380464
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380469
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380474
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380475
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380479
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380483
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380487
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380491
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380495
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380499
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380503
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380507
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380511
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380515
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380519
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380523
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380527
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380531
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380535
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380539
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380543
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380547
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380551
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380555
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380559
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380563
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380567
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380571
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380575
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380579
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380583
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380587
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380591
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380595
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380599
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380603
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380607
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380611
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380615
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380619
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380623
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380627
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380632
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380636
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380640
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380644
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380648
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380652
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380656
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380657
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380661
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380665
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380669
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380670
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380674
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380678
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380682
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380686
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380690
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380694
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380698
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380702
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380706
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380710
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380714
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380718
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380722
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380726
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380730
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380731
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380735
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380739
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380743
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380744
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380748
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380752
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380756
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380760
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380764
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380768
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380772
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380776
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380780
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380784
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380788
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380792
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380793
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380797
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380801
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380805
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380806
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380810
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380814
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380818
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380822
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380826
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380830
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380831
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 380835
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380839
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 380843
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380844
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380848
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380849
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380853
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380858
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380862
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380867
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380871
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380876
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380880
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380881
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380885
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380890
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380894
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380899
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380903
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380908
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380912
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380917
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380921
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380926
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380930
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380935
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380939
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380944
		, "size": 4
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380948
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380953
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380957
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380962
		, "size": 4
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380966
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380971
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380975
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380980
		, "size": 4
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380984
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380989
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380993
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 380998
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381002
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381007
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 381011
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381015
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381019
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381024
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381028
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381037
		, "size": 4
	}, {
		"instruction": "load.c64 43"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381041
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381050
		, "size": 4
	}, {
		"instruction": "load.c64 44"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381054
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381063
		, "size": 4
	}, {
		"instruction": "load.c64 45"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381067
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381076
		, "size": 4
	}, {
		"instruction": "load.c64 46"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381080
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381089
		, "size": 4
	}, {
		"instruction": "load.c64 47"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381093
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381102
		, "size": 4
	}, {
		"instruction": "load.c64 48"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 381106
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381115
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381119
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381124
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381128
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381129
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381134
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381138
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381143
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381147
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381152
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381157
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 381161
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381165
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 381169
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381173
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 381177
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381181
		, "size": 4
	}, {
		"instruction": "load.c32 115"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381185
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381190
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381195
		, "size": 1
	}, {
		"instruction": "load.c32 116"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381196
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381201
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381206
		, "size": 1
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381207
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381212
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381217
		, "size": 1
	}, {
		"instruction": "load.c32 105"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381218
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381223
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381228
		, "size": 1
	}, {
		"instruction": "load.c32 110"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381229
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381234
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381239
		, "size": 1
	}, {
		"instruction": "load.c32 103"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381240
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381245
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381250
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381251
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381252
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381257
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381258
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381263
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381267
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381272
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 381277
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381281
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381282
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381287
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381288
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381289
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381294
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381295
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381296
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381301
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381302
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381303
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381308
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381309
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381314
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381319
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381320
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381321
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381326
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381327
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381332
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381337
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381338
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381343
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381348
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381349
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381354
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381359
		, "size": 1
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381360
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381365
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381369
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381370
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381375
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381376
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381377
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381382
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381383
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381388
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381393
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381394
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 381399
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381403
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381408
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381413
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381414
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381419
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381424
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381425
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381430
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381431
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381436
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 381437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381438
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381443
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381444
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381449
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381450
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381455
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 381456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381457
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381462
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381463
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381468
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381469
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381474
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 381475
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381476
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381481
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381482
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381487
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381488
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381489
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381494
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381495
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381500
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381501
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381506
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 381507
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381508
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381513
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381514
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381519
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381520
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381525
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 381526
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381527
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381528
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381533
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381534
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381539
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381540
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381545
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 381546
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381547
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381552
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381553
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381558
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381559
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381564
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 381565
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381566
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381567
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381572
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381573
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381578
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381579
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381584
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 381585
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381586
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381591
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381592
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381597
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381598
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381603
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 381604
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381605
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381606
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381611
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381612
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381617
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381622
		, "size": 1
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381623
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381628
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381633
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381634
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381639
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381640
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381645
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381646
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381651
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 381652
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381653
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381658
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381659
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381664
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 381665
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381666
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381671
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381672
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381677
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381678
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381683
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 381684
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381685
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381690
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381691
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381696
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381697
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381702
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 381703
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381704
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381710
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381715
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381716
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381721
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 381722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381723
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381729
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381734
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381735
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381740
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 381741
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381742
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381747
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381748
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381753
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381754
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381759
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 381760
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381761
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381766
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381767
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381772
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381773
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381778
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 381779
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381780
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381785
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381786
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381791
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381792
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381797
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 381798
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381799
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381804
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381805
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381810
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381811
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381816
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 381817
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381818
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381823
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381824
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381829
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 381830
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 381834
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381835
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381840
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381841
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381846
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 381847
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 381851
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381852
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381857
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381858
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381863
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 381864
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381865
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381866
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381871
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381872
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381877
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381878
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381883
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 381884
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381885
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381890
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381891
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381896
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381897
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381902
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 381903
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381904
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381905
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381910
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381911
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381916
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381917
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381922
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 381923
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381924
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381929
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381930
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381935
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381936
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381941
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 381942
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381944
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381950
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381955
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381956
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381961
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 381962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381963
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381968
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381969
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381974
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381975
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 381980
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 381981
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 381982
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381983
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381988
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381989
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381994
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 381999
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382000
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382005
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382010
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382011
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382016
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382017
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382022
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382023
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382028
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 382029
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382030
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382035
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382036
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382041
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 382042
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382043
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382048
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382049
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382054
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382055
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382060
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 382061
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382062
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382067
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382068
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382074
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382079
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 382080
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382081
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382086
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382087
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382092
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382093
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382098
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 382099
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382100
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382105
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382106
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382111
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382112
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382117
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 382118
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382119
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382124
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382125
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382130
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382131
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382136
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 382137
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382138
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382143
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382144
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382149
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382150
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382155
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 382156
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382157
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382162
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382163
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382168
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382169
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382174
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 382175
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382176
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382181
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382182
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382187
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382188
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382193
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 382194
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382195
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382200
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382201
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382206
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382207
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 382211
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382212
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382217
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382218
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382223
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382224
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 382228
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382229
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382234
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382235
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382240
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 382241
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382242
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382243
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382248
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382249
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382254
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382255
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382260
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382261
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382262
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382267
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382268
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382273
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382274
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382279
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382280
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382281
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382282
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382287
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382288
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382293
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382294
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382299
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 382300
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382301
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382306
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382307
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382312
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382313
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382318
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 382319
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382320
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382321
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382326
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382327
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382332
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382333
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382338
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 382339
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382340
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382345
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382346
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382351
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382352
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382357
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 382358
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382359
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382360
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382365
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382366
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382371
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382376
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382377
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382382
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382387
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382388
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382393
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382394
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382399
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382400
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382405
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 382406
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382407
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382412
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382413
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382418
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 382419
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382420
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382426
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382431
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382432
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382437
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 382438
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382439
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382444
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382445
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382450
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382451
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382456
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 382457
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382458
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382463
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382464
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382469
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382470
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382475
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 382476
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382477
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382482
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382483
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382488
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382489
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382494
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 382495
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382496
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382501
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382502
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382507
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382508
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382513
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 382514
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382515
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382520
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382521
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382526
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382527
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382532
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 382533
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382534
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382539
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382540
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382545
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382546
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382551
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 382552
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382553
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382558
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382559
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382564
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382565
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382570
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 382571
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382572
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382577
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382578
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382583
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382584
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 382588
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382589
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382594
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382595
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382600
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382601
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 382605
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382606
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382611
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382612
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382617
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 382618
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382619
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382620
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382625
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382626
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382631
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382632
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382637
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382638
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382639
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382644
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382645
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382650
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382651
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382656
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382657
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382658
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382659
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382664
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382665
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382670
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382671
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382676
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 382677
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382678
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382683
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382684
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382689
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382690
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382695
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 382696
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382697
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382698
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382703
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382704
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382710
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382715
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 382716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382717
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382723
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382729
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 382734
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 382735
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382736
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382737
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 382742
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382743
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382748
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382753
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382754
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382759
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382764
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382765
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382770
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382771
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382776
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382777
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382782
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 382783
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382784
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382789
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382790
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382795
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 382796
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382797
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382802
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382803
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382808
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382809
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382814
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 382815
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382816
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382821
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382822
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382827
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382828
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382833
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 382834
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382835
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382840
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382841
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382846
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382847
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382852
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 382853
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382854
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382859
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382860
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382865
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382866
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382871
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 382872
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382873
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382878
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382879
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382884
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382885
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382890
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 382891
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382892
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382897
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382898
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382903
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382904
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382909
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 382910
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382911
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382916
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382917
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382922
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382923
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382928
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 382929
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382930
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382935
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382936
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382941
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382942
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382947
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 382948
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382949
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382954
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382955
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382960
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382961
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 382965
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382966
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382971
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382972
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382977
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 382978
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 382982
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382983
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 382988
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382989
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 382994
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 382995
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 382996
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382997
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383002
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383003
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383008
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383009
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383014
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383015
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383016
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383021
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383022
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383027
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383028
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383033
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383034
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383035
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383036
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383041
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383042
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383047
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383048
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383053
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383054
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383055
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383060
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383061
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383066
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383067
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383072
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 383073
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383074
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383075
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383080
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383081
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383086
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383087
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383092
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 383093
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383094
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383099
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383100
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383105
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383106
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383111
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383112
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383113
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383114
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383119
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383120
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383125
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383130
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383131
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383136
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383141
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383142
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383147
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383148
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383153
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383154
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383159
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 383160
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383161
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383166
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383167
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383172
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 383173
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383174
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383179
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383180
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383185
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383186
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383191
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 383192
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383193
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383198
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383199
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383204
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383205
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383210
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 383211
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383212
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383217
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383218
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383223
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383224
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383229
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 383230
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383231
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383236
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383237
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383242
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383243
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383248
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 383249
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383250
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383255
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383256
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383261
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383262
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383267
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 383268
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383269
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383274
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383275
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383280
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383281
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383286
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 383287
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383288
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383293
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383294
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383299
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383300
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383305
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 383306
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383307
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383312
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383313
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383318
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383319
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383324
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 383325
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383326
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383331
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383332
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383337
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383338
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 383342
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383343
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383348
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383349
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383354
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383355
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 383359
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383360
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 383365
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383366
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383371
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 383372
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383373
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383374
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383379
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383380
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383385
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383386
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383391
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383392
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383393
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383398
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383399
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383404
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383405
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383410
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383411
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383412
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383413
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383418
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383419
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383424
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383425
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383430
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 383431
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383432
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383438
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383443
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383444
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383449
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 383450
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383451
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383452
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383457
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383458
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383463
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383464
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383469
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 383470
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383471
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383476
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383477
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383482
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383483
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 383488
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 383489
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383490
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383491
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383496
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383497
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383502
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383506
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383511
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383515
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383519
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383523
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 383527
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383528
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383532
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 383536
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383537
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383541
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383545
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 383549
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383550
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383554
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383558
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 383562
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383563
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383567
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383571
		, "size": 4
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 383575
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383576
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383580
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383584
		, "size": 4
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 383588
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383589
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383593
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383597
		, "size": 4
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 383601
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383602
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383606
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383610
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 383614
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383615
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383619
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383623
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 383627
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383628
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383632
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383636
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 383640
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383641
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383645
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383649
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 383653
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383654
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383658
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383662
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 383666
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383667
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383671
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 383675
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383676
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383677
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383682
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383683
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383687
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383691
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383692
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383697
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383698
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383702
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383706
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383707
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383708
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383713
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383714
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383718
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383723
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383728
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383729
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383733
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 383737
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383738
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383739
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383744
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383745
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383749
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 383753
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383754
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383759
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383760
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383764
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383768
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383769
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383770
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383775
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383776
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383781
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383785
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383790
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383794
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383798
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383802
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 383806
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383807
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383811
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 383815
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383816
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383820
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383824
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 383828
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383829
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383833
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383837
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 383841
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383842
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383846
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383850
		, "size": 4
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 383854
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383855
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383859
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383863
		, "size": 4
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 383867
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383868
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383872
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383876
		, "size": 4
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 383880
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383881
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383885
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383889
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 383893
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383894
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383898
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383902
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 383906
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383907
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383911
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383915
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 383919
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383920
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383924
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383928
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 383932
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383933
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383937
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383941
		, "size": 4
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 383945
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 383946
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383950
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 383954
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383955
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383956
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383961
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383962
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383966
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383970
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383971
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383976
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383977
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383981
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 383985
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 383986
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383987
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 383992
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383993
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 383997
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 384001
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384002
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384007
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384008
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384012
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 384016
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384017
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384018
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384023
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384024
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384028
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 384032
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384033
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384038
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384039
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384043
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 384047
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384048
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384049
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384054
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 384055
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384064
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 384068
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384077
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384081
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384085
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384089
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 384093
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384094
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384098
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 384102
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384103
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384107
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384111
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 384115
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384116
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384120
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384124
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 384128
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384129
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384133
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384137
		, "size": 4
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 384141
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384142
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384146
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384150
		, "size": 4
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 384154
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384155
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384159
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384163
		, "size": 4
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 384167
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384168
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384172
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384176
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 384180
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384181
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384185
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384189
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 384193
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384194
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384198
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384202
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 384206
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384207
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384211
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384215
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 384219
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384220
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384224
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384228
		, "size": 4
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 384232
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384233
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384237
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 384241
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384242
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384243
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384248
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384249
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384253
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 384257
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384258
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384263
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384264
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384268
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 384272
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384273
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384274
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384279
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384280
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384284
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 384288
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384289
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384294
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384295
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384299
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 384303
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384304
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384305
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384310
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384311
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384315
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 384319
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384320
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384325
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384326
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384330
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 384334
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384335
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384336
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384341
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 384342
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384351
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 384355
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384364
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384368
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384372
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384376
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 384380
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384381
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384385
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 384389
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384390
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384394
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384398
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 384402
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384403
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384407
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384411
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 384415
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384416
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384420
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384424
		, "size": 4
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 384428
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384429
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384433
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384437
		, "size": 4
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 384441
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384442
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384446
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384450
		, "size": 4
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 384454
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384455
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384459
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384463
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 384467
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384468
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384472
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384476
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 384480
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384481
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384485
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384489
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 384493
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384494
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384498
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384502
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 384506
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384507
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384511
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384515
		, "size": 4
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 384519
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384520
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384524
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 384528
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384529
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384530
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384535
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384536
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384540
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 384544
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384545
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384550
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384551
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384555
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 384559
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384561
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384566
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384567
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384571
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 384575
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384576
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384581
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384582
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384586
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 384590
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384591
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384592
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384597
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384598
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384602
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 384606
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384607
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384612
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384613
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384617
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 384621
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384622
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384623
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384628
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 384629
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384634
		, "size": 4
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 384638
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384643
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384647
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384651
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384655
		, "size": 4
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 384659
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384660
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384664
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384668
		, "size": 4
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 384672
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384673
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384677
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384681
		, "size": 4
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 384685
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384686
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384690
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384694
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 384698
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384699
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384703
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384707
		, "size": 4
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 384711
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384712
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384716
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384720
		, "size": 4
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 384724
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 384725
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384729
		, "size": 4
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7c"
		, "offs": 384733
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384734
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384735
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384740
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384741
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384745
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 384749
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384750
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384755
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384756
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384760
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 384764
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384765
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384766
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384771
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384772
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384776
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 384780
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384781
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384786
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384787
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384791
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 384795
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384796
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384797
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384802
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384803
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384807
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 384811
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384812
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384817
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384818
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 384822
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 384826
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384827
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384828
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384833
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 384834
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384843
		, "size": 4
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 384847
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384856
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384860
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384864
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384868
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 384872
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384873
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384877
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384881
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 384885
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384886
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384890
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384894
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 384898
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384899
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384903
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384907
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 384911
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384912
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384916
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384920
		, "size": 4
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 384924
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384925
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384929
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384933
		, "size": 4
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 384937
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 384938
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384942
		, "size": 4
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 384946
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384947
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384948
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384953
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384954
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384958
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 384962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384963
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384968
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384969
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384973
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 384977
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 384978
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384979
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384984
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384985
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 384989
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 384993
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 384994
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 384999
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385000
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385004
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 385008
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 385009
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385010
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 385015
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385016
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385020
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 385024
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385025
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 385030
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385031
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 385035
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 385039
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 385040
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385041
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 385046
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385047
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 385052
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385056
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 385061
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 385065
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 385069
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 385073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 385079
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 385080
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 385084
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 385088
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 385089
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385090
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 385095
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385096
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 385097
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385101
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 385102
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385106
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385107
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385116
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385121
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385122
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385126
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385130
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385131
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385140
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385145
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385146
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385150
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385154
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385155
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385164
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385169
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385170
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385174
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385178
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385179
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385188
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385193
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385194
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385198
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385202
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385203
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385212
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385217
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385218
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385222
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385226
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385227
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385236
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385241
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385242
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385246
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385250
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385259
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385261
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 385262
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385263
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385265
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 385266
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385267
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385268
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385270
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385274
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385275
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385279
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385280
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385282
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 385283
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385284
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385286
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 385287
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385288
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385289
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385291
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385295
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385296
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385300
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385309
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385311
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 385312
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385313
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385315
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 385316
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385317
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385318
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385320
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385324
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385325
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385329
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385334
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385336
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 385337
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385338
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385340
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 385341
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385342
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385343
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385345
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385346
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385350
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385351
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385353
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 385354
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385355
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385357
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 385358
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385359
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385360
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385362
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385363
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385367
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385372
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385374
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 385375
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385376
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385378
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 385379
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 385380
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385381
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 385383
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385384
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385388
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385389
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385398
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385403
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385404
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385408
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 385412
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385413
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385418
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385419
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385423
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385427
		, "size": 1
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385428
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385437
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385442
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385443
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385447
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385451
		, "size": 1
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385452
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385457
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385462
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385463
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385467
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385468
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385472
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385473
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385474
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385479
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385480
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385484
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385485
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385489
		, "size": 1
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385490
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385495
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385500
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385501
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385505
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385506
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385510
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385511
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385516
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385521
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385526
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385527
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385531
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385532
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385536
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385537
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385542
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385547
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385552
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385553
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385557
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385558
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385562
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385563
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385572
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385581
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385586
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385587
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385591
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385595
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385596
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385605
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385614
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385619
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385620
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385624
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385628
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385629
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385634
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385635
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385640
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385645
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385646
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385650
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385651
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385655
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385656
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385665
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385666
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385675
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385680
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385681
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385685
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385689
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385690
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385692
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385697
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385702
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 385704
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 385705
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 385706
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385707
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385709
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385710
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385714
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385715
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385717
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385726
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385735
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 385737
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 385738
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 385739
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 385740
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385742
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385746
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385747
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385748
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385753
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 385755
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385756
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385761
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 385763
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 385764
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385765
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385766
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385771
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385776
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385777
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385781
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385783
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 385785
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385786
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 385791
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 385796
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 385798
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 385799
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 385800
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385801
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 385803
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 385805
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385806
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 385810
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385811
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385820
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 385822
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385823
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385832
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 385834
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 385835
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385836
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385837
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385846
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385851
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385852
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385856
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385858
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 385860
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385861
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385870
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385879
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 385881
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 385882
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 385883
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 385884
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 385886
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385888
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 385892
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 385893
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 385897
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 385898
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 385900
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 385905
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 385906
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 385909
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 385913
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385917
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385926
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385935
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385944
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385953
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385962
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385971
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385980
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 385989
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 385998
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386003
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386007
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386008
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386010
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386015
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386016
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386019
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386023
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 386027
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386028
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386032
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386033
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386035
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386040
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386041
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386044
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386048
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386052
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386061
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386070
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386079
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386088
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386097
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386106
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386115
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386124
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386133
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386138
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386142
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386143
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386145
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386150
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386151
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386154
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386158
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 386162
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386163
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386167
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386168
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386170
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386175
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386176
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386179
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386183
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386187
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386196
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386201
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386205
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386206
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386208
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386213
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386214
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386217
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386221
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386225
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386234
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386243
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386248
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386252
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386253
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386255
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386260
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(8, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386261
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386264
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386268
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386272
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386281
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386290
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386299
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386308
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386317
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386326
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386335
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386344
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386353
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386362
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386367
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386371
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386372
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386374
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386379
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(24, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386380
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386383
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386387
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386391
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386400
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 386404
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386405
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386409
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386410
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386414
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386416
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386421
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386422
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386425
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386429
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386433
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386442
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386446
		, "size": 9
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386455
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386459
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386468
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386469
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386470
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386474
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386478
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386487
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386489
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386498
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386500
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386509
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386510
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386511
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386512
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 386513
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386515
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386519
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386523
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386532
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386534
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386536
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386545
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386547
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386556
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386558
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386567
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386568
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386569
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386570
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 386571
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 386573
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 386574
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 386575
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386577
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386581
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386590
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386599
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386608
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386617
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386626
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386631
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386635
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386636
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386640
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386642
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386647
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(16, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386648
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386651
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386655
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386659
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386668
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386677
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386686
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386695
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386704
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386713
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 386718
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386722
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 386723
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 386727
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386729
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386734
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(18, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 386735
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386738
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386742
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386746
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386747
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386756
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386765
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 386766
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386767
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386772
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386773
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386777
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 386781
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386782
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386791
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386800
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386801
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386806
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386807
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 386811
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386816
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386821
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386822
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386826
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386830
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386831
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386840
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386849
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386850
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386855
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386856
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386860
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386864
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386865
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386874
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386883
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386884
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386889
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386890
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386894
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386898
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386899
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386908
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386917
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386918
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386923
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386924
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386928
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386932
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386933
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386942
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386947
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386948
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386952
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386956
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386965
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 386974
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 386975
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 386976
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 386985
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 386990
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 386991
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 386995
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 386996
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387000
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387001
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387006
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387011
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387016
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387021
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387022
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387026
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 387027
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387028
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 387033
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387034
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387035
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387044
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387053
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387062
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387067
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387068
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387072
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 387073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 387079
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387080
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387081
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387090
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387099
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387104
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387105
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387109
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 387113
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387114
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387123
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387128
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387129
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387133
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387137
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387138
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387147
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387156
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387161
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387162
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387166
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387170
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387171
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387180
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387189
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387194
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387195
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387199
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387203
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387204
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387213
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387222
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387227
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387228
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387232
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387236
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387237
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387246
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387255
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387260
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387261
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387265
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387269
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387270
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387279
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387288
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387293
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387294
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387298
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387302
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387303
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387312
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387321
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387326
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387327
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387331
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387335
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387336
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387345
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387354
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387359
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387360
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387364
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387368
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387369
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387378
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387387
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387392
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387393
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387397
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 387401
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387402
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 387411
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387420
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387425
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387426
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 387430
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387434
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387435
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387440
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387445
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387450
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387451
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387455
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387459
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387460
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387461
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387466
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387471
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387472
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387476
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387480
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387481
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387486
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387491
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387496
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387497
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387501
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387505
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387506
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387511
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387516
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387521
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387522
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387526
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387530
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387531
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387536
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387541
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387546
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387547
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387551
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387555
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387556
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387561
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387566
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387571
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387572
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387576
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387580
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387581
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387586
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387591
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387596
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387597
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387601
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387605
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387606
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387611
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387616
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387621
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387622
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387626
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387630
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387631
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387636
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387641
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387646
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387647
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387651
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387655
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387656
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387661
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387666
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387671
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387672
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387676
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387680
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387681
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 387686
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387691
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387696
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387697
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 387701
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387705
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387709
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387710
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387715
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387719
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387723
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387727
		, "size": 4
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387731
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387736
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387740
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387744
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387748
		, "size": 1
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387749
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387753
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387757
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387761
		, "size": 1
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387762
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387766
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387770
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387774
		, "size": 1
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387775
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387779
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387783
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387787
		, "size": 1
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387788
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387792
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387796
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387801
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387806
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387811
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387812
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387817
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387822
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387827
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387831
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387836
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387841
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387846
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387847
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387852
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387857
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387862
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387866
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387871
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387876
		, "size": 4
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387880
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387884
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387888
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387893
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 387894
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387898
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387902
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387906
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387911
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387916
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387921
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387922
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387927
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387932
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387937
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387941
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387946
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387951
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 387956
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387957
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387962
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387967
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 387972
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 387976
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 387980
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 387985
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 387987
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 387992
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 387993
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 387997
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388001
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 388006
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388008
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388012
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388013
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 388017
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388021
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388026
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388031
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388032
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 388036
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388040
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388045
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388050
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388051
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 388055
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388059
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 388064
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388066
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388071
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388072
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 388076
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388080
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 388085
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388087
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388092
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388093
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 388097
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388101
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 388106
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388108
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388112
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388113
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388117
		, "size": 5
	}, {
		"instruction": "load.c32 35"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388122
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388127
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388132
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388133
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388138
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388143
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388148
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388152
		, "size": 5
	}, {
		"instruction": "load.c32 38"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388157
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388162
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388167
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388168
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388173
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388178
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388182
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388186
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388191
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388196
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388201
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388202
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388207
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388212
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388216
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388220
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388224
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 388225
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388226
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388230
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388234
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388239
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388244
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388249
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388254
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388259
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388264
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388269
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 388273
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 388277
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388286
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388287
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388291
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388295
		, "size": 5
	}, {
		"instruction": "load.c32 49"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388300
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388305
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388310
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388315
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388320
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388325
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388330
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388334
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388339
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388344
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388349
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388354
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388355
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388359
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388364
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388368
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388373
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388378
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388379
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388383
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388388
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388392
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388397
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388402
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388403
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388407
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 388408
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388409
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388414
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388419
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388420
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388424
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388429
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388434
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388435
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388439
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388440
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 388441
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388445
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388450
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388451
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388455
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388460
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388465
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388466
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388470
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388475
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388476
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388481
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388486
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388491
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388492
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388496
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388501
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388506
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388507
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388511
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388516
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 388517
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388521
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388526
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388527
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388531
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388536
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388541
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388542
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388546
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388551
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 388552
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388556
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388561
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388562
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388566
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388571
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388576
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388577
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 388581
		, "size": 1
	}, {
		"instruction": "jmp +810"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388582
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388586
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388591
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 388593
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 388594
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388595
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388597
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388602
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 388604
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 388608
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388609
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388610
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388614
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388618
		, "size": 5
	}, {
		"instruction": "load.c32 68"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388623
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388628
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388633
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388638
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388643
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388648
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388653
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388657
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388659
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388663
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 388665
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 388669
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388670
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388671
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388675
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388679
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388684
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388689
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388694
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388699
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388704
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388709
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388714
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388718
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388720
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388724
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 388726
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 388730
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388731
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388732
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388736
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388740
		, "size": 5
	}, {
		"instruction": "load.c32 70"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388745
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388750
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388755
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388760
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388765
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388770
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388775
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388779
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 388781
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388782
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388784
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388789
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388794
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388795
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388799
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388800
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388804
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388808
		, "size": 5
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388813
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388818
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388823
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388828
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388833
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388838
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388843
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388847
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 388849
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388850
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388852
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388856
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388861
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388862
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388866
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388867
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388871
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388875
		, "size": 5
	}, {
		"instruction": "load.c32 73"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388880
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388885
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388890
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388895
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388900
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388905
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388910
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388914
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 388916
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388917
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 388919
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388923
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388928
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388929
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 388933
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 388934
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 388938
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388942
		, "size": 5
	}, {
		"instruction": "load.c32 74"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388947
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388952
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 388957
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388962
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388967
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388972
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 388977
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 388981
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 388983
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 388984
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388986
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 388991
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 388996
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 388997
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389001
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389002
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389006
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389010
		, "size": 5
	}, {
		"instruction": "load.c32 76"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389015
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389020
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389025
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389030
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389035
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389040
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389045
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 389049
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 389051
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389052
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389054
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389058
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 389063
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389064
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389068
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389069
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389073
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389077
		, "size": 5
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389082
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389087
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389092
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389097
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389102
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389107
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389112
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 389116
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 389118
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389119
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389121
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389125
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 389130
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389131
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389135
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389136
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389140
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389144
		, "size": 5
	}, {
		"instruction": "load.c32 78"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389149
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389154
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389159
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389164
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389169
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389174
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389179
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 389183
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 389185
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389186
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389188
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389193
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389198
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 389203
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389204
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389208
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389209
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389213
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389217
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389222
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389227
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389232
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389237
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389242
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389247
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389252
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 389256
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 389258
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389259
		, "size": 2
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 389261
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389265
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 389270
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389271
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389275
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389276
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389280
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389284
		, "size": 5
	}, {
		"instruction": "load.c32 82"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389289
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389294
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389299
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389304
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389309
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389314
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389319
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 389323
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389325
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389329
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 389331
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 389335
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 389336
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389337
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389341
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389345
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389350
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389355
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389360
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389365
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389370
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389375
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389380
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389384
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 389388
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 389392
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389394
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 389399
		, "size": 1
	}, {
		"instruction": "jnz -814"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 389400
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 389404
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389408
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389413
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389418
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389423
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389428
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389433
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389438
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389443
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389447
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389452
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389457
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389462
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389467
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389472
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389477
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389482
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389486
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389491
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389496
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389501
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389506
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389511
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389516
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389521
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389525
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 389529
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389530
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389531
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389535
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389540
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389545
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389550
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389555
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389560
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389565
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389570
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389574
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 389578
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389579
		, "size": 1
	}, {
		"instruction": "jnz +43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 389580
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389584
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389589
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389594
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389599
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389604
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389609
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389614
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389619
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389623
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 389627
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389628
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389629
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389633
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389638
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389643
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389648
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389653
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389658
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389663
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389668
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389672
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389676
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389681
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389686
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389691
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389696
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389701
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389706
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389711
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389715
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 389719
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389720
		, "size": 1
	}, {
		"instruction": "jnz +47"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 389721
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389725
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389730
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389735
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389740
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389745
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389750
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389755
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389760
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389764
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389768
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389773
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389778
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389783
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389788
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389793
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389798
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389803
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389807
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 389811
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389812
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389813
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389817
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389822
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389827
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389832
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389837
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389842
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389847
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389852
		, "size": 4
	}, {
		"instruction": "jmp +328"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389856
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389860
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389864
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389869
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389870
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389874
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389879
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389884
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389894
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389899
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389904
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389909
		, "size": 4
	}, {
		"instruction": "jmp +271"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389913
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389917
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389921
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389926
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389927
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389931
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389936
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389941
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389946
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389951
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389956
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389961
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 389966
		, "size": 4
	}, {
		"instruction": "jmp +214"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 389970
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 389974
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389978
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 389983
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 389984
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 389988
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389993
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 389998
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390003
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390008
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390013
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390018
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390023
		, "size": 4
	}, {
		"instruction": "jmp +157"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390027
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 390031
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390035
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 390040
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 390041
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390045
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390050
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390055
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390060
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390065
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390070
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390075
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390080
		, "size": 4
	}, {
		"instruction": "jmp +100"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390084
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 390088
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390092
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 390097
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 390098
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390102
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390107
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390112
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390122
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390127
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390132
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390137
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390141
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390145
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390150
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390155
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390160
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390165
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390170
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390175
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390180
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390184
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390188
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390193
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390198
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390203
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390204
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390209
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390214
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390219
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390223
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390227
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390231
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390232
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390236
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390241
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390246
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390251
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390252
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390257
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 390262
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390266
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 390270
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 390274
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390276
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 390281
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 390282
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 390286
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390290
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 390291
		, "size": 4
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390295
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390299
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390304
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390309
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390314
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390315
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390320
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390325
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390330
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 390334
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 390338
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 390342
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 390346
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390350
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 390355
		, "size": 1
	}, {
		"instruction": "jnz -57"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 390356
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390360
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390361
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 390365
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390367
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 390372
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 390373
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390377
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390381
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390386
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390391
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390396
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390397
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390402
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 390407
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390411
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 390415
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 390419
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390421
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 390426
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 390427
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 390431
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390435
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390436
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 390440
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390442
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 390447
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 390448
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 390452
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390456
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390461
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390466
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 390471
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390472
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 390477
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 390482
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390486
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 390490
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 390494
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 390496
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 390501
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 390502
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 390506
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 390510
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
132262,0,375804,
 132266,0,44856,
 132271,0,-1,
 132279,0,38840,
 132281,0,-1,
 132282,0,38840,
 132284,0,-1,
 132285,0,38840,
 132287,0,-1,
 132288,0,39656,
 132290,0,-1,
 132291,0,39656,
 132293,0,-1,
 132294,0,39656,
 132296,0,-1,
 132297,0,38840,
 132299,0,-1,
 132300,0,38840,
 132302,0,-1,
 132304,0,38840,
 132305,0,-1,
 132309,0,39656,
 132310,0,-1,
 132312,0,39656,
 132313,0,-1,
 132315,0,39656,
 132316,0,-1,
 132318,0,49248,
 132325,0,-1,
 132327,0,49752,
 132329,0,-1,
 132331,0,50256,
 132334,0,-1,
 132336,0,50760,
 132338,0,-1,
 132340,0,51264,
 132342,0,-1,
 132343,0,51920,
 132345,0,-1,
 132347,0,52424,
 132348,0,-1,
 132350,0,53080,
 132354,0,-1,
 132356,0,44856,
 132357,0,-1,
 132359,0,45368,
 132360,0,-1,
 132362,0,45880,
 132364,0,-1,
 132365,0,46392,
 132367,0,-1,
 132369,0,46904,
 132370,0,-1,
 132372,0,47568,
 132374,0,-1,
 132375,0,48080,
 132377,0,-1,
 132378,0,48744,
 132380,0,-1,
 132382,0,40168,
 132383,0,-1,
 132385,0,40680,
 132386,0,-1,
 132388,0,41192,
 132389,0,-1,
 132391,0,41704,
 132392,0,-1,
 132394,0,42216,
 132395,0,-1,
 132397,0,42728,
 132398,0,-1,
 132400,0,38840,
 132401,0,-1,
 132403,0,39656,
 132405,0,-1,
 132406,0,43536,
 132408,0,-1,
 132409,0,44344,
 132411,0,-1,
 132412,0,32400,
 132414,1024,-1,
 132416,1024,32400,
 132417,1104,-1,
 132419,1104,32400,
 132421,1264,-1,
 132422,1264,32400,
 132424,2096,-1,
 132425,2096,31728,
  132443,2096,371248,
  132445,2096,-1,
  132447,2096,23096,
  132448,2096,-1,
 132450,2096,-1,
 132451,2096,31728,
 132475,2096,-1,
 132477,2096,31728,
  132481,2096,371256,
   132483,2096,371256,
    132485,2096,371256,
     132486,2096,371256,
      132488,2096,371256,
       132489,2096,371256,
        132491,2096,371256,
         132492,2096,371256,
          132494,2096,371256,
           132495,2096,371256,
            132497,2096,371256,
             132499,2096,371256,
              132500,2096,371256,
               132501,2096,371256,
                132503,2096,371256,
                 132505,2096,371256,
                  132506,2096,371256,
                   132508,2096,371256,
                    132509,2096,371256,
                     132511,2096,371256,
                      132512,2096,371256,
                       132514,2096,371256,
                        132515,2096,371256,
                         132517,2096,371256,
                          132519,2096,371256,
                           132520,2096,371256,
                            132522,2096,371256,
                             132523,2096,371256,
                              132525,2096,371256,
                               132526,2096,371256,
                                132528,2096,371256,
                                 132530,2096,371256,
                                  132531,2096,371256,
                                   132533,2096,371256,
                                    132534,2096,371256,
                                     132536,2096,371256,
                                      132537,2096,371256,
                                       132539,2096,371256,
                                        132541,2096,371256,
                                         132542,2096,371256,
                                          132544,2096,371256,
                                           132545,2096,371256,
                                            132547,2096,371256,
                                             132549,2096,371256,
                                              132550,2096,371256,
                                               132552,2096,371256,
                                                132553,2096,371256,
                                                 132555,2096,371256,
                                                  132556,2096,371256,
                                                   132558,2096,371256,
                                                    132560,2096,371256,
                                                     132561,2096,371256,
                                                      132563,2096,371256,
                                                       132564,2096,371256,
                                                        132566,2096,371256,
                                                         132568,2096,371256,
                                                          132570,2096,371256,
                                                           132571,2096,371256,
                                                            132575,2096,371256,
                                                             132576,2096,371256,
                                                              132578,2096,371256,
                                                               132580,2096,371256,
                                                                132581,2096,371256,
                                                                 132583,2096,371256,
                                                                  132585,2096,371256,
                                                                   132587,2096,371256,
                                                                    132588,2096,371256,
                                                                     132590,2096,371256,
                                                                      132592,2096,371256,
                                                                       132593,2096,371256,
                                                                        132595,2096,371256,
                                                                         132597,2096,371256,
                                                                          132598,2096,371256,
                                                                           132600,2096,371256,
                                                                            132601,2096,371256,
                                                                             132603,2096,371256,
                                                                              132605,2096,371256,
                                                                               132607,2096,371256,
                                                                                132608,2096,371256,
                                                                                 132610,2096,371256,
                                                                                  132612,2096,371256,
                                                                                   132613,2096,371256,
                                                                                    132615,2096,371256,
                                                                                     132617,2096,371256,
                                                                                      132618,2096,371256,
                                                                                       132620,2096,371256,
                                                                                        132622,2096,371256,
                                                                                         132623,2096,371256,
                                                                                          132625,2096,371256,
                                                                                           132627,2096,371256,
                                                                                            132628,2096,371256,
                                                                                             132630,2096,371256,
                                                                                              132632,2096,371256,
                                                                                               132633,2096,371256,
                                                                                                132635,2096,371256,
                                                                                                 132637,2096,371256,
                                                                                                  132639,2096,371256,
                                                                                                   132640,2096,371256,
                                                                                                    132642,2096,371256,
                                                                                                     132645,2096,371256,
                                                                                                      132647,2096,371256,
                                                                                                       132649,2096,371256,
                                                                                                        132651,2096,371256,
                                                                                                         132653,2096,371256,
                                                                                                          132654,2096,371256,
                                                                                                           132656,2096,371256,
                                                                                                            132658,2096,371256,
                                                                                                             132660,2096,371256,
                                                                                                              132661,2096,371256,
                                                                                                               132663,2096,371256,
                                                                                                                132665,2096,371256,
                                                                                                                 132667,2096,371256,
                                                                                                                  132668,2096,371256,
                                                                                                                   132670,2096,371256,
                                                                                                                    132672,2096,371256,
                                                                                                                     132674,2096,371256,
                                                                                                                      132676,2096,371256,
                                                                                                                       132677,2096,371256,
                                                                                                                        132679,2096,371256,
                                                                                                                         132681,2096,371256,
                                                                                                                          132683,2096,371256,
                                                                                                                           132684,2096,371256,
                                                                                                                            132686,2096,371256,
                                                                                                                             132688,2096,371256,
                                                                                                                              132690,2096,371256,
                                                                                                                               132691,2096,371256,
                                                                                                                                132693,2096,371256,
                                                                                                                                 132695,2096,371256,
                                                                                                                                 132697,2096,-1,
                                                                                                                                132700,2096,-1,
                                                                                                                               132702,2096,-1,
                                                                                                                              132704,2096,-1,
                                                                                                                             132705,2096,-1,
                                                                                                                            132707,2096,-1,
                                                                                                                           132709,2096,-1,
                                                                                                                          132711,2096,-1,
                                                                                                                         132712,2096,-1,
                                                                                                                        132714,2096,-1,
                                                                                                                       132716,2096,-1,
                                                                                                                      132718,2096,-1,
                                                                                                                     132719,2096,-1,
                                                                                                                    132721,2096,-1,
                                                                                                                   132723,2096,-1,
                                                                                                                  132725,2096,-1,
                                                                                                                 132726,2096,-1,
                                                                                                                132728,2096,-1,
                                                                                                               132730,2096,-1,
                                                                                                              132732,2096,-1,
                                                                                                             132733,2096,-1,
                                                                                                            132735,2096,-1,
                                                                                                           132737,2096,-1,
                                                                                                          132738,2096,-1,
                                                                                                         132740,2096,-1,
                                                                                                        132742,2096,-1,
                                                                                                       132743,2096,-1,
                                                                                                      132745,2096,-1,
                                                                                                     132747,2096,-1,
                                                                                                    132749,2096,-1,
                                                                                                   132750,2096,-1,
                                                                                                  132752,2096,-1,
                                                                                                 132754,2096,-1,
                                                                                                132757,2096,-1,
                                                                                               132758,2096,-1,
                                                                                              132760,2096,-1,
                                                                                             132762,2096,-1,
                                                                                            132763,2096,-1,
                                                                                           132765,2096,-1,
                                                                                          132767,2096,-1,
                                                                                         132769,2096,-1,
                                                                                        132770,2096,-1,
                                                                                       132772,2096,-1,
                                                                                      132774,2096,-1,
                                                                                     132775,2096,-1,
                                                                                    132777,2096,-1,
                                                                                   132779,2096,-1,
                                                                                  132780,2096,-1,
                                                                                 132782,2096,-1,
                                                                                132784,2096,-1,
                                                                               132785,2096,-1,
                                                                              132787,2096,-1,
                                                                             132789,2096,-1,
                                                                            132790,2096,-1,
                                                                           132792,2096,-1,
                                                                          132793,2096,-1,
                                                                         132795,2096,-1,
                                                                        132797,2096,-1,
                                                                       132798,2096,-1,
                                                                      132800,2096,-1,
                                                                     132802,2096,-1,
                                                                    132803,2096,-1,
                                                                   132805,2096,-1,
                                                                  132807,2096,-1,
                                                                 132808,2096,-1,
                                                                132810,2096,-1,
                                                               132812,2096,-1,
                                                              132813,2096,-1,
                                                             132815,2096,-1,
                                                            132816,2096,-1,
                                                           132818,2096,-1,
                                                          132820,2096,-1,
                                                         132821,2096,-1,
                                                        132823,2096,-1,
                                                       132825,2096,-1,
                                                      132826,2096,-1,
                                                     132828,2096,-1,
                                                    132829,2096,-1,
                                                   132831,2096,-1,
                                                  132834,2096,-1,
                                                 132835,2096,-1,
                                                132837,2096,-1,
                                               132839,2096,-1,
                                              132840,2096,-1,
                                             132842,2096,-1,
                                            132843,2096,-1,
                                           132845,2096,-1,
                                          132847,2096,-1,
                                         132848,2096,-1,
                                        132850,2096,-1,
                                       132851,2096,-1,
                                      132853,2096,-1,
                                     132855,2096,-1,
                                    132856,2096,-1,
                                   132858,2096,-1,
                                  132859,2096,-1,
                                 132861,2096,-1,
                                132862,2096,-1,
                               132864,2096,-1,
                              132866,2096,-1,
                             132867,2096,-1,
                            132869,2096,-1,
                           132870,2096,-1,
                          132872,2096,-1,
                         132873,2096,-1,
                        132875,2096,-1,
                       132876,2096,-1,
                      132878,2096,-1,
                     132880,2096,-1,
                    132881,2096,-1,
                   132883,2096,-1,
                  132884,2096,-1,
                 132886,2096,-1,
                132887,2096,-1,
               132889,2096,-1,
              132891,2096,-1,
             132892,2096,-1,
            132893,2096,-1,
           132895,2096,-1,
          132896,2096,-1,
         132898,2096,-1,
        132900,2096,-1,
       132901,2096,-1,
      132903,2096,-1,
     132904,2096,-1,
    132906,2096,-1,
   132907,2096,-1,
  132909,2096,-1,
 132911,2096,-1,
 132912,2096,31728,
  132918,2096,371280,
  132920,2096,-1,
 132921,2096,-1,
 132923,2096,31728,
  132927,2096,371384,
  132929,2096,-1,
 132930,2096,-1,
 132932,2096,31728,
  132935,2096,371368,
  132937,2096,-1,
 132939,2096,-1,
 132940,2096,31728,
  132944,2096,371296,
   132945,2096,29456,
   133063,2096,-1,
  133065,2096,-1,
 133067,2096,-1,
 133070,2096,26808,
 133076,2128,-1,
 133078,2128,26808,
 133082,2160,-1,
 133083,2160,372160,
 133085,2160,-1,
 133087,2160,372160,
 133088,2160,-1,
 133090,2160,372224,
 133092,2160,-1,
 133093,2160,372224,
 133095,2160,-1,
 133096,2160,372232,
  133098,2160,372232,
   133099,2160,372232,
    133101,2160,372232,
     133102,2160,372232,
      133104,2160,372232,
       133105,2160,372232,
        133107,2160,372232,
         133108,2160,372232,
          133110,2160,372232,
           133112,2160,372232,
            133113,2160,372232,
             133115,2160,372232,
             133116,2160,-1,
             133118,2160,372232,
             133119,2160,-1,
            133121,2160,-1,
            133123,2160,372232,
            133124,2160,-1,
           133126,2160,-1,
           133127,2160,372232,
            133129,2160,372232,
            133130,2160,-1,
            133132,2160,372232,
            133133,2160,-1,
           133135,2160,-1,
          133137,2160,-1,
          133138,2160,372232,
           133140,2160,372232,
            133141,2160,372232,
            133143,2160,-1,
            133144,2160,372232,
            133146,2160,-1,
           133147,2160,-1,
           133149,2160,372232,
           133151,2160,-1,
          133152,2160,-1,
         133154,2160,-1,
         133155,2160,372232,
          133157,2160,372232,
           133158,2160,372232,
            133160,2160,372232,
            133161,2160,-1,
            133163,2160,372232,
            133164,2160,-1,
           133166,2160,-1,
           133168,2160,372232,
           133169,2160,-1,
          133171,2160,-1,
          133174,2160,372232,
           133176,2160,372232,
           133177,2160,-1,
           133179,2160,372232,
           133180,2160,-1,
          133182,2160,-1,
         133183,2160,-1,
        133185,2160,-1,
        133187,2160,372232,
         133188,2160,372232,
          133190,2160,372232,
           133191,2160,372232,
            133193,2160,372232,
            133194,2160,-1,
            133196,2160,372232,
            133197,2160,-1,
           133199,2160,-1,
           133200,2160,372232,
           133202,2160,-1,
          133204,2160,-1,
          133205,2160,372232,
           133207,2160,372232,
           133208,2160,-1,
           133210,2160,372232,
           133211,2160,-1,
          133213,2160,-1,
         133214,2160,-1,
         133216,2160,372232,
          133217,2160,372232,
           133219,2160,372232,
           133221,2160,-1,
           133222,2160,372232,
           133224,2160,-1,
          133225,2160,-1,
          133227,2160,372232,
          133229,2160,-1,
         133230,2160,-1,
        133232,2160,-1,
       133233,2160,-1,
       133235,2160,372232,
        133236,2160,372232,
         133238,2160,372232,
          133239,2160,372232,
           133241,2160,372232,
            133242,2160,372232,
            133244,2160,-1,
            133246,2160,372232,
            133247,2160,-1,
           133249,2160,-1,
           133250,2160,372232,
           133252,2160,-1,
          133253,2160,-1,
          133255,2160,372232,
           133257,2160,372232,
           133258,2160,-1,
           133260,2160,372232,
           133261,2160,-1,
          133263,2160,-1,
         133264,2160,-1,
         133266,2160,372232,
          133267,2160,372232,
           133269,2160,372232,
           133270,2160,-1,
           133272,2160,372232,
           133274,2160,-1,
          133275,2160,-1,
          133277,2160,372232,
          133278,2160,-1,
         133280,2160,-1,
        133281,2160,-1,
        133283,2160,372232,
         133284,2160,372232,
          133286,2160,372232,
           133288,2160,372232,
           133289,2160,-1,
           133291,2160,372232,
           133292,2160,-1,
          133294,2160,-1,
          133296,2160,372232,
          133297,2160,-1,
         133299,2160,-1,
         133300,2160,372232,
          133302,2160,372232,
          133304,2160,-1,
          133305,2160,372232,
          133307,2160,-1,
         133308,2160,-1,
        133310,2160,-1,
       133311,2160,-1,
      133313,2160,-1,
      133315,2160,372232,
       133316,2160,372232,
        133318,2160,372232,
         133319,2160,372232,
          133321,2160,372232,
           133322,2160,372232,
            133324,2160,372232,
            133325,2160,-1,
            133327,2160,372232,
            133328,2160,-1,
           133330,2160,-1,
           133332,2160,372232,
           133333,2160,-1,
          133335,2160,-1,
          133336,2160,372232,
           133338,2160,372232,
           133339,2160,-1,
           133341,2160,372232,
           133342,2160,-1,
          133344,2160,-1,
         133346,2160,-1,
         133347,2160,372232,
          133349,2160,372232,
           133350,2160,372232,
           133352,2160,-1,
           133353,2160,372232,
           133355,2160,-1,
          133356,2160,-1,
          133358,2160,372232,
          133360,2160,-1,
         133361,2160,-1,
        133363,2160,-1,
        133364,2160,372232,
         133366,2160,372232,
          133367,2160,372232,
           133369,2160,372232,
           133370,2160,-1,
           133372,2160,372232,
           133373,2160,-1,
          133375,2160,-1,
          133377,2160,372232,
          133378,2160,-1,
         133380,2160,-1,
         133381,2160,372232,
          133383,2160,372232,
          133384,2160,-1,
          133386,2160,372232,
          133388,2160,-1,
         133389,2160,-1,
        133391,2160,-1,
       133392,2160,-1,
       133394,2160,372232,
        133395,2160,372232,
         133397,2160,372232,
          133398,2160,372232,
           133400,2160,372232,
           133403,2160,-1,
           133404,2160,372232,
           133406,2160,-1,
          133408,2160,-1,
          133409,2160,372232,
          133411,2160,-1,
         133412,2160,-1,
         133414,2160,372232,
          133415,2160,372232,
          133417,2160,-1,
          133418,2160,372232,
          133420,2160,-1,
         133421,2160,-1,
        133423,2160,-1,
        133425,2160,372232,
         133426,2160,372232,
          133428,2160,372232,
          133429,2160,-1,
          133431,2160,372232,
          133432,2160,-1,
         133434,2160,-1,
         133435,2160,372232,
         133437,2160,-1,
        133439,2160,-1,
       133440,2160,-1,
      133442,2160,-1,
     133443,2160,-1,
     133445,2160,372232,
      133446,2160,372232,
       133448,2160,372232,
        133449,2160,372232,
         133451,2160,372232,
          133452,2160,372232,
           133454,2160,372232,
            133455,2160,372232,
            133457,2160,-1,
            133459,2160,372232,
            133460,2160,-1,
           133462,2160,-1,
           133463,2160,372232,
           133465,2160,-1,
          133466,2160,-1,
          133468,2160,372232,
           133470,2160,372232,
           133471,2160,-1,
           133473,2160,372232,
           133474,2160,-1,
          133476,2160,-1,
         133477,2160,-1,
         133479,2160,372232,
          133480,2160,372232,
           133482,2160,372232,
           133484,2160,-1,
           133485,2160,372232,
           133487,2160,-1,
          133488,2160,-1,
          133490,2160,372232,
          133491,2160,-1,
         133493,2160,-1,
        133494,2160,-1,
        133496,2160,372232,
         133497,2160,372232,
          133499,2160,372232,
           133501,2160,372232,
           133502,2160,-1,
           133504,2160,372232,
           133505,2160,-1,
          133507,2160,-1,
          133508,2160,372232,
          133510,2160,-1,
         133512,2160,-1,
         133513,2160,372232,
          133515,2160,372232,
          133516,2160,-1,
          133518,2160,372232,
          133519,2160,-1,
         133521,2160,-1,
        133522,2160,-1,
       133524,2160,-1,
       133526,2160,372232,
        133527,2160,372232,
         133529,2160,372232,
          133530,2160,372232,
           133532,2160,372232,
           133533,2160,-1,
           133535,2160,372232,
           133536,2160,-1,
          133538,2160,-1,
          133540,2160,372232,
          133541,2160,-1,
         133543,2160,-1,
         133544,2160,372232,
          133546,2160,372232,
          133547,2160,-1,
          133549,2160,372232,
          133550,2160,-1,
         133552,2160,-1,
        133554,2160,-1,
        133555,2160,372232,
         133557,2160,372232,
          133558,2160,372232,
          133560,2160,-1,
          133561,2160,372232,
          133563,2160,-1,
         133564,2160,-1,
         133566,2160,372232,
         133567,2160,-1,
        133569,2160,-1,
       133570,2160,-1,
      133572,2160,-1,
      133573,2160,372232,
       133575,2160,372232,
        133577,2160,372232,
         133578,2160,372232,
          133580,2160,372232,
           133581,2160,372232,
           133583,2160,-1,
           133584,2160,372232,
           133586,2160,-1,
          133587,2160,-1,
          133589,2160,372232,
          133591,2160,-1,
         133592,2160,-1,
         133594,2160,372232,
          133595,2160,372232,
          133597,2160,-1,
          133598,2160,372232,
          133600,2160,-1,
         133601,2160,-1,
        133603,2160,-1,
        133604,2160,372232,
         133606,2160,372232,
          133608,2160,372232,
          133609,2160,-1,
          133611,2160,372232,
          133612,2160,-1,
         133614,2160,-1,
         133615,2160,372232,
         133617,2160,-1,
        133619,2160,-1,
       133620,2160,-1,
       133622,2160,372232,
        133623,2160,372232,
         133625,2160,372232,
          133626,2160,372232,
          133628,2160,-1,
          133629,2160,372232,
          133631,2160,-1,
         133632,2160,-1,
         133635,2160,372232,
         133637,2160,-1,
        133639,2160,-1,
        133640,2160,372232,
         133642,2160,372232,
         133643,2160,-1,
         133645,2160,372232,
         133646,2160,-1,
        133648,2160,-1,
       133649,2160,-1,
      133651,2160,-1,
     133653,2160,-1,
    133654,2160,-1,
    133656,2160,372232,
     133657,2160,372232,
      133659,2160,372232,
       133660,2160,372232,
        133662,2160,372232,
         133663,2160,372232,
          133665,2160,372232,
           133666,2160,372232,
            133668,2160,372232,
            133669,2160,-1,
            133671,2160,372232,
            133672,2160,-1,
           133674,2160,-1,
           133676,2160,372232,
           133677,2160,-1,
          133679,2160,-1,
          133680,2160,372232,
           133682,2160,372232,
           133683,2160,-1,
           133685,2160,372232,
           133687,2160,-1,
          133688,2160,-1,
         133690,2160,-1,
         133691,2160,372232,
          133693,2160,372232,
           133694,2160,372232,
           133696,2160,-1,
           133697,2160,372232,
           133699,2160,-1,
          133701,2160,-1,
          133702,2160,372232,
          133704,2160,-1,
         133705,2160,-1,
        133707,2160,-1,
        133708,2160,372232,
         133710,2160,372232,
          133711,2160,372232,
           133713,2160,372232,
           133715,2160,-1,
           133716,2160,372232,
           133718,2160,-1,
          133719,2160,-1,
          133721,2160,372232,
          133722,2160,-1,
         133724,2160,-1,
         133726,2160,372232,
          133727,2160,372232,
          133729,2160,-1,
          133730,2160,372232,
          133732,2160,-1,
         133733,2160,-1,
        133735,2160,-1,
       133737,2160,-1,
       133738,2160,372232,
        133740,2160,372232,
         133741,2160,372232,
          133743,2160,372232,
           133744,2160,372232,
           133746,2160,-1,
           133747,2160,372232,
           133749,2160,-1,
          133751,2160,-1,
          133752,2160,372232,
          133754,2160,-1,
         133755,2160,-1,
         133757,2160,372232,
          133759,2160,372232,
          133760,2160,-1,
          133762,2160,372232,
          133763,2160,-1,
         133765,2160,-1,
        133766,2160,-1,
        133768,2160,372232,
         133769,2160,372232,
          133771,2160,372232,
          133773,2160,-1,
          133774,2160,372232,
          133776,2160,-1,
         133777,2160,-1,
         133779,2160,372232,
         133780,2160,-1,
        133782,2160,-1,
       133783,2160,-1,
      133785,2160,-1,
      133787,2160,372232,
       133788,2160,372232,
        133790,2160,372232,
         133791,2160,372232,
          133793,2160,372232,
           133794,2160,372232,
           133796,2160,-1,
           133797,2160,372232,
           133799,2160,-1,
          133800,2160,-1,
          133802,2160,372232,
          133804,2160,-1,
         133805,2160,-1,
         133807,2160,372232,
          133808,2160,372232,
          133810,2160,-1,
          133811,2160,372232,
          133813,2160,-1,
         133814,2160,-1,
        133816,2160,-1,
        133817,2160,372232,
         133819,2160,372232,
          133821,2160,372232,
          133822,2160,-1,
          133824,2160,372232,
          133825,2160,-1,
         133827,2160,-1,
         133828,2160,372232,
         133830,2160,-1,
        133831,2160,-1,
       133833,2160,-1,
       133834,2160,372232,
        133836,2160,372232,
         133838,2160,372232,
          133839,2160,372232,
          133841,2160,-1,
          133842,2160,372232,
          133844,2160,-1,
         133845,2160,-1,
         133847,2160,372232,
         133848,2160,-1,
        133850,2160,-1,
        133852,2160,372232,
         133853,2160,372232,
         133855,2160,-1,
         133856,2160,372232,
         133858,2160,-1,
        133859,2160,-1,
       133861,2160,-1,
      133863,2160,-1,
     133864,2160,-1,
     133866,2160,372232,
      133867,2160,372232,
       133869,2160,372232,
        133872,2160,372232,
         133873,2160,372232,
          133875,2160,372232,
           133876,2160,372232,
           133878,2160,-1,
           133879,2160,372232,
           133881,2160,-1,
          133883,2160,-1,
          133884,2160,372232,
          133886,2160,-1,
         133887,2160,-1,
         133889,2160,372232,
          133890,2160,372232,
          133892,2160,-1,
          133893,2160,372232,
          133895,2160,-1,
         133897,2160,-1,
        133898,2160,-1,
        133900,2160,372232,
         133901,2160,372232,
          133903,2160,372232,
          133905,2160,-1,
          133906,2160,372232,
          133908,2160,-1,
         133909,2160,-1,
         133911,2160,372232,
         133912,2160,-1,
        133914,2160,-1,
       133915,2160,-1,
       133917,2160,372232,
        133919,2160,372232,
         133920,2160,372232,
          133922,2160,372232,
          133923,2160,-1,
          133925,2160,372232,
          133926,2160,-1,
         133928,2160,-1,
         133929,2160,372232,
         133931,2160,-1,
        133933,2160,-1,
        133934,2160,372232,
         133936,2160,372232,
         133937,2160,-1,
         133939,2160,372232,
         133940,2160,-1,
        133942,2160,-1,
       133944,2160,-1,
      133945,2160,-1,
      133947,2160,372232,
       133948,2160,372232,
        133950,2160,372232,
         133951,2160,372232,
          133953,2160,372232,
          133954,2160,-1,
          133956,2160,372232,
          133958,2160,-1,
         133959,2160,-1,
         133961,2160,372232,
         133962,2160,-1,
        133964,2160,-1,
        133966,2160,372232,
         133967,2160,372232,
         133969,2160,-1,
         133970,2160,372232,
         133972,2160,-1,
        133973,2160,-1,
       133975,2160,-1,
       133976,2160,372232,
        133978,2160,372232,
         133980,2160,372232,
         133981,2160,-1,
         133983,2160,372232,
         133984,2160,-1,
        133986,2160,-1,
        133988,2160,372232,
        133989,2160,-1,
       133991,2160,-1,
      133992,2160,-1,
     133994,2160,-1,
    133996,2160,-1,
   133997,2160,-1,
   133998,2160,372232,
    134000,2160,372232,
     134002,2160,372232,
      134003,2160,372232,
       134005,2160,372232,
        134006,2160,372232,
         134008,2160,372232,
          134009,2160,372232,
           134011,2160,372232,
            134012,2160,372232,
            134014,2160,-1,
            134015,2160,372232,
            134017,2160,-1,
           134019,2160,-1,
           134020,2160,372232,
           134022,2160,-1,
          134023,2160,-1,
          134025,2160,372232,
           134026,2160,372232,
           134028,2160,-1,
           134029,2160,372232,
           134031,2160,-1,
          134033,2160,-1,
         134034,2160,-1,
         134036,2160,372232,
          134037,2160,372232,
           134039,2160,372232,
           134040,2160,-1,
           134042,2160,372232,
           134043,2160,-1,
          134045,2160,-1,
          134046,2160,372232,
          134048,2160,-1,
         134050,2160,-1,
        134051,2160,-1,
        134053,2160,372232,
         134054,2160,372232,
          134056,2160,372232,
           134057,2160,372232,
           134059,2160,-1,
           134060,2160,372232,
           134062,2160,-1,
          134064,2160,-1,
          134065,2160,372232,
          134067,2160,-1,
         134068,2160,-1,
         134070,2160,372232,
          134071,2160,372232,
          134073,2160,-1,
          134074,2160,372232,
          134076,2160,-1,
         134078,2160,-1,
        134079,2160,-1,
       134081,2160,-1,
       134082,2160,372232,
        134084,2160,372232,
         134085,2160,372232,
          134087,2160,372232,
           134088,2160,372232,
           134090,2160,-1,
           134091,2160,372232,
           134093,2160,-1,
          134095,2160,-1,
          134096,2160,372232,
          134098,2160,-1,
         134099,2160,-1,
         134101,2160,372232,
          134102,2160,372232,
          134104,2160,-1,
          134105,2160,372232,
          134108,2160,-1,
         134110,2160,-1,
        134111,2160,-1,
        134113,2160,372232,
         134114,2160,372232,
          134116,2160,372232,
          134118,2160,-1,
          134119,2160,372232,
          134121,2160,-1,
         134122,2160,-1,
         134124,2160,372232,
         134125,2160,-1,
        134127,2160,-1,
       134128,2160,-1,
      134130,2160,-1,
      134131,2160,372232,
       134133,2160,372232,
        134134,2160,372232,
         134136,2160,372232,
          134137,2160,372232,
           134139,2160,372232,
           134141,2160,-1,
           134142,2160,372232,
           134144,2160,-1,
          134145,2160,-1,
          134147,2160,372232,
          134148,2160,-1,
         134150,2160,-1,
         134151,2160,372232,
          134153,2160,372232,
          134155,2160,-1,
          134156,2160,372232,
          134158,2160,-1,
         134159,2160,-1,
        134161,2160,-1,
        134162,2160,372232,
         134164,2160,372232,
          134165,2160,372232,
          134167,2160,-1,
          134168,2160,372232,
          134170,2160,-1,
         134172,2160,-1,
         134173,2160,372232,
         134175,2160,-1,
        134176,2160,-1,
       134178,2160,-1,
       134179,2160,372232,
        134181,2160,372232,
         134182,2160,372232,
          134184,2160,372232,
          134185,2160,-1,
          134187,2160,372232,
          134189,2160,-1,
         134190,2160,-1,
         134192,2160,372232,
         134193,2160,-1,
        134195,2160,-1,
        134196,2160,372232,
         134198,2160,372232,
         134200,2160,-1,
         134201,2160,372232,
         134203,2160,-1,
        134204,2160,-1,
       134206,2160,-1,
      134207,2160,-1,
     134209,2160,-1,
     134210,2160,372232,
      134212,2160,372232,
       134214,2160,372232,
        134215,2160,372232,
         134217,2160,372232,
          134218,2160,372232,
           134220,2160,372232,
           134221,2160,-1,
           134223,2160,372232,
           134224,2160,-1,
          134226,2160,-1,
          134227,2160,372232,
          134229,2160,-1,
         134231,2160,-1,
         134232,2160,372232,
          134234,2160,372232,
          134235,2160,-1,
          134237,2160,372232,
          134238,2160,-1,
         134240,2160,-1,
        134241,2160,-1,
        134243,2160,372232,
         134245,2160,372232,
          134246,2160,372232,
          134248,2160,-1,
          134249,2160,372232,
          134251,2160,-1,
         134252,2160,-1,
         134254,2160,372232,
         134255,2160,-1,
        134257,2160,-1,
       134259,2160,-1,
       134260,2160,372232,
        134262,2160,372232,
         134263,2160,372232,
          134265,2160,372232,
          134267,2160,-1,
          134268,2160,372232,
          134270,2160,-1,
         134271,2160,-1,
         134273,2160,372232,
         134274,2160,-1,
        134276,2160,-1,
        134278,2160,372232,
         134279,2160,372232,
         134281,2160,-1,
         134282,2160,372232,
         134284,2160,-1,
        134285,2160,-1,
       134287,2160,-1,
      134289,2160,-1,
      134290,2160,372232,
       134292,2160,372232,
        134293,2160,372232,
         134295,2160,372232,
          134296,2160,372232,
          134298,2160,-1,
          134299,2160,372232,
          134301,2160,-1,
         134302,2160,-1,
         134304,2160,372232,
         134305,2160,-1,
        134307,2160,-1,
        134309,2160,372232,
         134310,2160,372232,
         134312,2160,-1,
         134313,2160,372232,
         134315,2160,-1,
        134316,2160,-1,
       134318,2160,-1,
       134319,2160,372232,
        134321,2160,372232,
         134322,2160,372232,
         134324,2160,-1,
         134326,2160,372232,
         134327,2160,-1,
        134329,2160,-1,
        134330,2160,372232,
        134332,2160,-1,
       134333,2160,-1,
      134335,2160,-1,
     134336,2160,-1,
    134338,2160,-1,
    134340,2160,372232,
     134341,2160,372232,
      134343,2160,372232,
       134344,2160,372232,
        134346,2160,372232,
         134348,2160,372232,
          134350,2160,372232,
           134352,2160,372232,
           134353,2160,-1,
           134355,2160,372232,
           134356,2160,-1,
          134358,2160,-1,
          134359,2160,372232,
          134361,2160,-1,
         134362,2160,-1,
         134364,2160,372232,
          134365,2160,372232,
          134367,2160,-1,
          134369,2160,372232,
          134370,2160,-1,
         134372,2160,-1,
        134373,2160,-1,
        134375,2160,372232,
         134376,2160,372232,
          134378,2160,372232,
          134380,2160,-1,
          134381,2160,372232,
          134383,2160,-1,
         134384,2160,-1,
         134386,2160,372232,
         134387,2160,-1,
        134389,2160,-1,
       134390,2160,-1,
       134392,2160,372232,
        134393,2160,372232,
         134395,2160,372232,
          134397,2160,372232,
          134398,2160,-1,
          134400,2160,372232,
          134401,2160,-1,
         134403,2160,-1,
         134404,2160,372232,
         134406,2160,-1,
        134408,2160,-1,
        134409,2160,372232,
         134410,2160,372232,
         134412,2160,-1,
         134414,2160,372232,
         134415,2160,-1,
        134417,2160,-1,
       134418,2160,-1,
      134420,2160,-1,
      134421,2160,372232,
       134423,2160,372232,
        134424,2160,372232,
         134426,2160,372232,
          134428,2160,372232,
          134429,2160,-1,
          134431,2160,372232,
          134432,2160,-1,
         134434,2160,-1,
         134435,2160,372232,
         134437,2160,-1,
        134438,2160,-1,
        134440,2160,372232,
         134441,2160,372232,
         134443,2160,-1,
         134445,2160,372232,
         134446,2160,-1,
        134448,2160,-1,
       134449,2160,-1,
       134451,2160,372232,
        134452,2160,372232,
         134454,2160,372232,
         134455,2160,-1,
         134457,2160,372232,
         134459,2160,-1,
        134460,2160,-1,
        134462,2160,372232,
        134463,2160,-1,
       134465,2160,-1,
      134466,2160,-1,
     134468,2160,-1,
     134470,2160,372232,
      134471,2160,372232,
       134472,2160,372232,
        134474,2160,372232,
         134475,2160,372232,
          134477,2160,372232,
          134479,2160,-1,
          134480,2160,372232,
          134482,2160,-1,
         134483,2160,-1,
         134485,2160,372232,
         134486,2160,-1,
        134488,2160,-1,
        134489,2160,372232,
         134491,2160,372232,
         134492,2160,-1,
         134494,2160,372232,
         134496,2160,-1,
        134497,2160,-1,
       134499,2160,-1,
       134501,2160,372232,
        134502,2160,372232,
         134504,2160,372232,
         134505,2160,-1,
         134507,2160,372232,
         134508,2160,-1,
        134510,2160,-1,
        134511,2160,372232,
        134513,2160,-1,
       134515,2160,-1,
      134516,2160,-1,
      134518,2160,372232,
       134519,2160,372232,
        134521,2160,372232,
         134522,2160,372232,
         134524,2160,-1,
         134526,2160,372232,
         134527,2160,-1,
        134529,2160,-1,
        134530,2160,372232,
        134532,2160,-1,
       134533,2160,-1,
       134535,2160,372232,
        134536,2160,372232,
        134538,2160,-1,
        134540,2160,372232,
        134541,2160,-1,
       134543,2160,-1,
      134544,2160,-1,
     134546,2160,-1,
    134547,2160,-1,
   134549,2160,-1,
  134551,2160,-1,
  134552,2160,372232,
   134554,2160,372232,
    134555,2160,372232,
     134557,2160,372232,
      134558,2160,372232,
       134560,2160,372232,
        134561,2160,372232,
         134563,2160,372232,
          134565,2160,372232,
           134566,2160,372232,
            134568,2160,372232,
            134569,2160,-1,
            134571,2160,372232,
            134572,2160,-1,
           134574,2160,-1,
           134575,2160,372232,
           134577,2160,-1,
          134579,2160,-1,
          134580,2160,372232,
           134582,2160,372232,
           134583,2160,-1,
           134585,2160,372232,
           134586,2160,-1,
          134590,2160,-1,
         134592,2160,-1,
         134593,2160,372232,
          134595,2160,372232,
           134597,2160,372232,
           134598,2160,-1,
           134600,2160,372232,
           134601,2160,-1,
          134603,2160,-1,
          134604,2160,372232,
          134606,2160,-1,
         134607,2160,-1,
        134609,2160,-1,
        134611,2160,372232,
         134612,2160,372232,
          134614,2160,372232,
           134615,2160,372232,
           134617,2160,-1,
           134618,2160,372232,
           134620,2160,-1,
          134622,2160,-1,
          134623,2160,372232,
          134624,2160,-1,
         134626,2160,-1,
         134628,2160,372232,
          134629,2160,372232,
          134631,2160,-1,
          134632,2160,372232,
          134634,2160,-1,
         134636,2160,-1,
        134637,2160,-1,
       134639,2160,-1,
       134640,2160,372232,
        134642,2160,372232,
         134643,2160,372232,
          134645,2160,372232,
           134646,2160,372232,
           134648,2160,-1,
           134649,2160,372232,
           134651,2160,-1,
          134652,2160,-1,
          134654,2160,372232,
          134656,2160,-1,
         134657,2160,-1,
         134659,2160,372232,
          134660,2160,372232,
          134662,2160,-1,
          134663,2160,372232,
          134665,2160,-1,
         134666,2160,-1,
        134668,2160,-1,
        134670,2160,372232,
         134671,2160,372232,
          134673,2160,372232,
          134674,2160,-1,
          134676,2160,372232,
          134677,2160,-1,
         134679,2160,-1,
         134680,2160,372232,
         134682,2160,-1,
        134684,2160,-1,
       134685,2160,-1,
      134687,2160,-1,
      134688,2160,372232,
       134690,2160,372232,
        134691,2160,372232,
         134693,2160,372232,
          134694,2160,372232,
           134696,2160,372232,
           134698,2160,-1,
           134699,2160,372232,
           134701,2160,-1,
          134702,2160,-1,
          134704,2160,372232,
          134705,2160,-1,
         134707,2160,-1,
         134708,2160,372232,
          134710,2160,372232,
          134711,2160,-1,
          134713,2160,372232,
          134715,2160,-1,
         134716,2160,-1,
        134718,2160,-1,
        134719,2160,372232,
         134721,2160,372232,
          134722,2160,372232,
          134724,2160,-1,
          134725,2160,372232,
          134727,2160,-1,
         134729,2160,-1,
         134730,2160,372232,
         134732,2160,-1,
        134733,2160,-1,
       134735,2160,-1,
       134736,2160,372232,
        134738,2160,372232,
         134740,2160,372232,
          134741,2160,372232,
          134743,2160,-1,
          134744,2160,372232,
          134746,2160,-1,
         134747,2160,-1,
         134749,2160,372232,
         134750,2160,-1,
        134752,2160,-1,
        134754,2160,372232,
         134755,2160,372232,
         134757,2160,-1,
         134758,2160,372232,
         134760,2160,-1,
        134761,2160,-1,
       134763,2160,-1,
      134765,2160,-1,
     134766,2160,-1,
     134768,2160,372232,
      134769,2160,372232,
       134771,2160,372232,
        134772,2160,372232,
         134774,2160,372232,
          134775,2160,372232,
           134777,2160,372232,
           134778,2160,-1,
           134780,2160,372232,
           134782,2160,-1,
          134783,2160,-1,
          134785,2160,372232,
          134786,2160,-1,
         134788,2160,-1,
         134789,2160,372232,
          134791,2160,372232,
          134792,2160,-1,
          134794,2160,372232,
          134796,2160,-1,
         134797,2160,-1,
        134799,2160,-1,
        134800,2160,372232,
         134802,2160,372232,
          134803,2160,372232,
          134805,2160,-1,
          134806,2160,372232,
          134808,2160,-1,
         134810,2160,-1,
         134811,2160,372232,
         134813,2160,-1,
        134814,2160,-1,
       134816,2160,-1,
       134817,2160,372232,
        134819,2160,372232,
         134821,2160,372232,
          134822,2160,372232,
          134824,2160,-1,
          134827,2160,372232,
          134828,2160,-1,
         134830,2160,-1,
         134831,2160,372232,
         134833,2160,-1,
        134835,2160,-1,
        134836,2160,372232,
         134837,2160,372232,
         134839,2160,-1,
         134841,2160,372232,
         134842,2160,-1,
        134844,2160,-1,
       134845,2160,-1,
      134847,2160,-1,
      134848,2160,372232,
       134850,2160,372232,
        134851,2160,372232,
         134853,2160,372232,
          134855,2160,372232,
          134856,2160,-1,
          134858,2160,372232,
          134859,2160,-1,
         134861,2160,-1,
         134862,2160,372232,
         134864,2160,-1,
        134865,2160,-1,
        134867,2160,372232,
         134869,2160,372232,
         134870,2160,-1,
         134872,2160,372232,
         134873,2160,-1,
        134875,2160,-1,
       134876,2160,-1,
       134878,2160,372232,
        134879,2160,372232,
         134881,2160,372232,
         134882,2160,-1,
         134884,2160,372232,
         134886,2160,-1,
        134887,2160,-1,
        134889,2160,372232,
        134890,2160,-1,
       134892,2160,-1,
      134893,2160,-1,
     134895,2160,-1,
    134897,2160,-1,
    134898,2160,372232,
     134899,2160,372232,
      134901,2160,372232,
       134903,2160,372232,
        134904,2160,372232,
         134906,2160,372232,
          134907,2160,372232,
           134909,2160,372232,
           134911,2160,-1,
           134912,2160,372232,
           134914,2160,-1,
          134915,2160,-1,
          134917,2160,372232,
          134918,2160,-1,
         134920,2160,-1,
         134922,2160,372232,
          134923,2160,372232,
          134925,2160,-1,
          134926,2160,372232,
          134928,2160,-1,
         134929,2160,-1,
        134931,2160,-1,
        134933,2160,372232,
         134934,2160,372232,
          134936,2160,372232,
          134937,2160,-1,
          134939,2160,372232,
          134940,2160,-1,
         134942,2160,-1,
         134943,2160,372232,
         134945,2160,-1,
        134947,2160,-1,
       134948,2160,-1,
       134949,2160,372232,
        134951,2160,372232,
         134953,2160,372232,
          134954,2160,372232,
          134956,2160,-1,
          134957,2160,372232,
          134959,2160,-1,
         134960,2160,-1,
         134962,2160,372232,
         134963,2160,-1,
        134965,2160,-1,
        134967,2160,372232,
         134968,2160,372232,
         134970,2160,-1,
         134971,2160,372232,
         134973,2160,-1,
        134974,2160,-1,
       134976,2160,-1,
      134977,2160,-1,
      134979,2160,372232,
       134981,2160,372232,
        134982,2160,372232,
         134984,2160,372232,
          134985,2160,372232,
          134987,2160,-1,
          134988,2160,372232,
          134990,2160,-1,
         134991,2160,-1,
         134993,2160,372232,
         134994,2160,-1,
        134996,2160,-1,
        134997,2160,372232,
         134999,2160,372232,
         135000,2160,-1,
         135002,2160,372232,
         135004,2160,-1,
        135005,2160,-1,
       135007,2160,-1,
       135008,2160,372232,
        135010,2160,372232,
         135011,2160,372232,
         135013,2160,-1,
         135014,2160,372232,
         135016,2160,-1,
        135018,2160,-1,
        135019,2160,372232,
        135021,2160,-1,
       135022,2160,-1,
      135024,2160,-1,
     135025,2160,-1,
     135027,2160,372232,
      135029,2160,372232,
       135030,2160,372232,
        135032,2160,372232,
         135033,2160,372232,
          135035,2160,372232,
          135036,2160,-1,
          135038,2160,372232,
          135039,2160,-1,
         135041,2160,-1,
         135043,2160,372232,
         135044,2160,-1,
        135046,2160,-1,
        135047,2160,372232,
         135049,2160,372232,
         135050,2160,-1,
         135052,2160,372232,
         135053,2160,-1,
        135055,2160,-1,
       135056,2160,-1,
       135058,2160,372232,
        135060,2160,372232,
         135061,2160,372232,
         135063,2160,-1,
         135064,2160,372232,
         135067,2160,-1,
        135069,2160,-1,
        135070,2160,372232,
        135072,2160,-1,
       135073,2160,-1,
      135075,2160,-1,
      135076,2160,372232,
       135078,2160,372232,
        135080,2160,372232,
         135081,2160,372232,
         135083,2160,-1,
         135084,2160,372232,
         135086,2160,-1,
        135087,2160,-1,
        135089,2160,372232,
        135091,2160,-1,
       135092,2160,-1,
       135094,2160,372232,
        135095,2160,372232,
        135097,2160,-1,
        135098,2160,372232,
        135100,2160,-1,
       135101,2160,-1,
      135103,2160,-1,
     135105,2160,-1,
    135106,2160,-1,
   135108,2160,-1,
   135109,2160,372232,
    135111,2160,372232,
     135112,2160,372232,
      135114,2160,372232,
       135115,2160,372232,
        135117,2160,372232,
         135118,2160,372232,
          135120,2160,372232,
           135122,2160,372232,
           135123,2160,-1,
           135125,2160,372232,
           135126,2160,-1,
          135128,2160,-1,
          135130,2160,372232,
          135131,2160,-1,
         135133,2160,-1,
         135134,2160,372232,
          135136,2160,372232,
          135137,2160,-1,
          135139,2160,372232,
          135141,2160,-1,
         135142,2160,-1,
        135144,2160,-1,
        135145,2160,372232,
         135147,2160,372232,
          135149,2160,372232,
          135150,2160,-1,
          135152,2160,372232,
          135153,2160,-1,
         135155,2160,-1,
         135157,2160,372232,
         135158,2160,-1,
        135160,2160,-1,
       135161,2160,-1,
       135163,2160,372232,
        135164,2160,372232,
         135166,2160,372232,
          135167,2160,372232,
          135169,2160,-1,
          135170,2160,372232,
          135172,2160,-1,
         135174,2160,-1,
         135175,2160,372232,
         135177,2160,-1,
        135178,2160,-1,
        135180,2160,372232,
         135182,2160,372232,
         135183,2160,-1,
         135185,2160,372232,
         135186,2160,-1,
        135188,2160,-1,
       135189,2160,-1,
      135191,2160,-1,
      135192,2160,372232,
       135194,2160,372232,
        135196,2160,372232,
         135197,2160,372232,
          135199,2160,372232,
          135200,2160,-1,
          135202,2160,372232,
          135203,2160,-1,
         135205,2160,-1,
         135207,2160,372232,
         135208,2160,-1,
        135210,2160,-1,
        135211,2160,372232,
         135213,2160,372232,
         135214,2160,-1,
         135216,2160,372232,
         135217,2160,-1,
        135219,2160,-1,
       135221,2160,-1,
       135222,2160,372232,
        135224,2160,372232,
         135225,2160,372232,
         135227,2160,-1,
         135228,2160,372232,
         135230,2160,-1,
        135232,2160,-1,
        135233,2160,372232,
        135235,2160,-1,
       135236,2160,-1,
      135238,2160,-1,
     135239,2160,-1,
     135241,2160,372232,
      135242,2160,372232,
       135244,2160,372232,
        135246,2160,372232,
         135247,2160,372232,
          135249,2160,372232,
          135250,2160,-1,
          135252,2160,372232,
          135253,2160,-1,
         135255,2160,-1,
         135257,2160,372232,
         135258,2160,-1,
        135260,2160,-1,
        135261,2160,372232,
         135263,2160,372232,
         135264,2160,-1,
         135266,2160,372232,
         135267,2160,-1,
        135269,2160,-1,
       135270,2160,-1,
       135272,2160,372232,
        135273,2160,372232,
         135275,2160,372232,
         135277,2160,-1,
         135278,2160,372232,
         135280,2160,-1,
        135281,2160,-1,
        135283,2160,372232,
        135284,2160,-1,
       135286,2160,-1,
      135287,2160,-1,
      135289,2160,372232,
       135291,2160,372232,
        135292,2160,372232,
         135294,2160,372232,
         135295,2160,-1,
         135297,2160,372232,
         135298,2160,-1,
        135300,2160,-1,
        135301,2160,372232,
        135303,2160,-1,
       135305,2160,-1,
       135306,2160,372232,
        135308,2160,372232,
        135309,2160,-1,
        135312,2160,372232,
        135314,2160,-1,
       135315,2160,-1,
      135317,2160,-1,
     135318,2160,-1,
    135320,2160,-1,
    135321,2160,372232,
     135323,2160,372232,
      135324,2160,372232,
       135326,2160,372232,
        135328,2160,372232,
         135329,2160,372232,
          135331,2160,372232,
          135332,2160,-1,
          135334,2160,372232,
          135336,2160,-1,
         135337,2160,-1,
         135339,2160,372232,
         135341,2160,-1,
        135342,2160,-1,
        135344,2160,372232,
         135345,2160,372232,
         135347,2160,-1,
         135349,2160,372232,
         135350,2160,-1,
        135352,2160,-1,
       135353,2160,-1,
       135355,2160,372232,
        135356,2160,372232,
         135358,2160,372232,
         135359,2160,-1,
         135361,2160,372232,
         135362,2160,-1,
        135364,2160,-1,
        135366,2160,372232,
        135367,2160,-1,
       135369,2160,-1,
      135370,2160,-1,
      135372,2160,372232,
       135373,2160,372232,
        135375,2160,372232,
         135376,2160,372232,
         135378,2160,-1,
         135379,2160,372232,
         135381,2160,-1,
        135383,2160,-1,
        135384,2160,372232,
        135386,2160,-1,
       135387,2160,-1,
       135389,2160,372232,
        135390,2160,372232,
        135392,2160,-1,
        135394,2160,372232,
        135395,2160,-1,
       135397,2160,-1,
      135398,2160,-1,
     135400,2160,-1,
     135401,2160,372232,
      135403,2160,372232,
       135404,2160,372232,
        135406,2160,372232,
         135407,2160,372232,
         135409,2160,-1,
         135411,2160,372232,
         135412,2160,-1,
        135414,2160,-1,
        135415,2160,372232,
        135417,2160,-1,
       135418,2160,-1,
       135420,2160,372232,
        135421,2160,372232,
        135423,2160,-1,
        135425,2160,372232,
        135426,2160,-1,
       135428,2160,-1,
      135429,2160,-1,
      135431,2160,372232,
       135432,2160,372232,
        135434,2160,372232,
        135435,2160,-1,
        135437,2160,372232,
        135438,2160,-1,
       135440,2160,-1,
       135442,2160,372232,
       135443,2160,-1,
      135445,2160,-1,
     135446,2160,-1,
    135448,2160,-1,
   135449,2160,-1,
  135451,2160,-1,
 135452,2160,-1,
 135455,2160,26136,
 135466,2160,-1,
 135469,2160,25112,
 135473,2160,-1,
 135475,2160,25624,
 135480,2160,-1,
 135481,2160,24600,
 135486,2160,-1,
 135487,2160,26136,
 135492,2160,-1,
 135494,2160,25112,
 135498,2160,-1,
 135500,2160,25624,
 135504,2160,-1,
 135505,2160,24600,
 135509,2160,-1,
 135511,2160,24600,
 135513,2160,-1,
 135526,2160,365264,
  135528,2160,365176,
  135529,2160,-1,
 135531,2160,-1,
 135532,2160,365264,
  135534,2160,365176,
  135535,2160,-1,
 135537,2160,-1,
 135539,2160,365264,
  135540,2160,365176,
  135542,2160,-1,
 135543,2160,-1,
 135545,2160,365264,
  135546,2160,365176,
   135548,2160,365176,
   135549,2160,-1,
  135551,2160,-1,
 135552,2160,-1,
 135554,2160,365264,
  135555,2160,365176,
   135557,2160,365176,
   135558,2160,-1,
  135560,2160,-1,
 135562,2160,-1,
 135563,2160,365264,
  135565,2160,365176,
   135566,2160,365176,
   135568,2160,-1,
  135569,2160,-1,
 135571,2160,-1,
 135573,2160,365312,
 135575,2160,-1,
 135576,2160,365312,
 135578,2160,-1,
 135579,2160,365312,
 135581,2160,-1,
 135582,2160,365288,
 135584,2160,-1,
 135585,2160,365288,
 135587,2160,-1,
 135588,2160,365288,
 135590,2160,-1,
 135592,2160,365400,
 135593,2160,-1,
 135595,2160,365448,
 135596,2160,-1,
 135598,2160,365424,
 135599,2160,-1,
 135601,2160,365472,
 135602,2160,-1,
 135604,2160,365496,
 135605,2160,-1,
 135607,2160,365528,
 135609,2160,-1,
 135611,2160,365496,
 135612,2160,-1,
 135614,2160,365528,
 135615,2160,-1,
 135617,2160,365560,
 135619,2160,-1,
 135620,2160,365560,
 135623,2160,-1,
 135624,2160,365640,
 135626,2160,-1,
 135627,2160,365640,
 135630,2160,-1,
 135631,2160,365720,
 135633,2160,-1,
 135634,2160,365720,
 135636,2160,-1,
 135638,2160,365720,
 135640,2160,-1,
 135641,2160,365720,
 135643,2160,-1,
 135645,2160,365784,
 135647,2160,-1,
 135650,2160,365784,
 135652,2160,-1,
 135654,2160,365784,
 135656,2160,-1,
 135657,2160,365960,
 135660,2160,-1,
 135661,2160,365312,
 135663,2160,-1,
 135664,2160,365960,
 135666,2160,-1,
 135668,2160,366296,
  135670,2160,365176,
  135671,2160,-1,
 135674,2160,-1,
 135675,2160,366680,
  135677,2160,51264,
  135679,2160,-1,
  135680,2160,51264,
  135682,2160,-1,
 135683,2160,-1,
 135685,2160,366928,
  135686,2160,51264,
  135688,2160,-1,
  135689,2160,51264,
  135691,2160,-1,
 135692,2160,-1,
 135694,2160,367008,
  135696,2160,52424,
  135697,2160,-1,
  135699,2160,53080,
  135701,2160,-1,
 135703,2160,-1,
 135704,2160,367008,
  135706,2160,52424,
  135707,2160,-1,
  135709,2160,53080,
  135710,2160,-1,
 135712,2160,-1,
 135714,2160,365832,
 135715,2160,-1,
 135717,2160,365896,
 135719,2160,-1,
 135720,2160,365368,
 135722,2160,-1,
 135724,2160,365368,
 135725,2160,-1,
 135727,2160,365368,
 135729,2160,-1,
 135730,2160,365368,
 135732,2160,-1,
 135733,2160,365368,
 135735,2160,-1,
 135736,2160,365368,
 135738,2160,-1,
 135739,2160,365368,
 135741,2160,-1,
 135742,2160,365368,
 135744,2160,-1,
 135746,2160,365368,
 135747,2160,-1,
 135749,2160,365368,
 135750,2160,-1,
 135752,2160,365368,
 135753,2160,-1,
 135755,2160,365336,
 135756,2160,-1,
 135758,2160,365336,
 135760,2160,-1,
 135761,2160,365336,
 135763,2160,-1,
 135764,2160,365336,
 135766,2160,-1,
 135767,2160,365336,
 135769,2160,-1,
 135770,2160,365336,
 135772,2160,-1,
 135773,2160,365336,
 135775,2160,-1,
 135777,2160,365336,
 135778,2160,-1,
 135780,2160,365336,
 135781,2160,-1,
 135783,2160,365336,
 135784,2160,-1,
 135786,2160,365336,
 135787,2160,-1,
 135789,2160,33224,
 135791,2160,-1,
 135792,2160,34048,
 135794,2160,-1,
 135796,2160,32400,
 135798,1136,-1,
 135799,1136,32400,
 135801,1056,-1,
 135802,1056,32400,
 135804,896,-1,
 135805,896,32400,
 135807,64,-1,
 135808,64,29456,
 135822,64,-1,
 135824,64,29456,
 135837,64,-1,
 135839,64,34864,
 135841,64,-1,
 135842,64,33224,
 135844,64,-1,
 135845,64,29456,
 135857,64,-1,
 135858,64,29456,
 135874,64,-1,
 135876,64,372664,
  135877,64,29456,
  135972,64,-1,
 135974,64,-1,
 135976,64,372712,
  135977,64,29456,
  136066,64,-1,
 136069,64,-1,
 136071,64,372848,
  136072,64,29456,
  136082,64,-1,
  136084,64,372664,
   136086,64,29456,
   136197,64,-1,
  136199,64,-1,
 136201,64,-1,
 136202,64,372920,
  136204,64,29456,
  136213,64,-1,
  136215,64,372712,
   136216,64,29456,
   136328,64,-1,
  136330,64,-1,
 136332,64,-1,
 136334,64,372664,
  136335,64,29456,
  136417,64,-1,
 136420,64,-1,
 136421,64,372712,
  136423,64,29456,
  136509,64,-1,
 136512,64,-1,
 136513,64,372712,
  136515,64,29456,
  136596,64,-1,
 136599,64,-1,
 136600,64,29456,
 136653,64,-1,
 136655,64,29456,
 136680,64,-1,
 136682,64,29456,
 136705,64,-1,
 136708,64,365072,
 136710,64,-1,
 136711,64,365072,
 136713,64,-1,
 136714,64,365072,
 136716,64,-1,
 136717,64,373120,
 136719,64,-1,
 136720,64,365072,
 136722,64,-1,
 136723,64,373120,
 136725,64,-1,
 136726,64,365072,
 136728,64,-1,
 136729,64,373120,
 136731,64,-1,
 136732,64,365072,
 136734,64,-1,
 136735,64,373120,
 136737,64,-1,
 136738,64,365072,
 136740,64,-1,
 136741,64,373120,
 136743,64,-1,
 136744,64,365072,
 136746,64,-1,
 136748,64,373128,
 136750,64,-1,
 136751,64,373128,
 136753,64,-1,
 136754,64,373128,
 136756,64,-1,
 136757,64,373144,
 136759,64,-1,
 136760,64,373144,
 136762,64,-1,
 136764,64,373144,
 136765,64,-1,
 136767,64,373160,
 136768,64,-1,
 136770,64,373160,
 136771,64,-1,
 136773,64,373128,
 136775,64,-1,
 136776,64,373128,
 136778,64,-1,
 136779,64,373128,
 136781,64,-1,
 136782,64,373144,
 136784,64,-1,
 136785,64,373144,
 136787,64,-1,
 136789,64,373144,
 136790,64,-1,
 136792,64,373160,
 136793,64,-1,
 136795,64,373160,
 136796,64,-1,
 136798,64,373128,
 136800,64,-1,
 136801,64,373128,
 136803,64,-1,
 136804,64,373128,
 136806,64,-1,
 136807,64,373144,
 136809,64,-1,
 136810,64,373144,
 136812,64,-1,
 136814,64,373144,
 136815,64,-1,
 136817,64,373160,
 136818,64,-1,
 136820,64,373160,
 136821,64,-1,
 136823,64,373128,
 136825,64,-1,
 136826,64,373128,
 136831,64,-1,
 136832,64,373128,
 136834,64,-1,
 136835,64,373144,
 136837,64,-1,
 136838,64,373144,
 136840,64,-1,
 136841,64,373144,
 136843,64,-1,
 136844,64,373160,
 136846,64,-1,
 136848,64,373160,
 136849,64,-1,
 136851,64,373128,
 136852,64,-1,
 136854,64,373128,
 136856,64,-1,
 136857,64,373128,
 136859,64,-1,
 136860,64,373144,
 136862,64,-1,
 136863,64,373144,
 136865,64,-1,
 136866,64,373144,
 136868,64,-1,
 136869,64,373160,
 136871,64,-1,
 136873,64,373160,
 136874,64,-1,
 136876,64,373128,
 136877,64,-1,
 136879,64,373128,
 136881,64,-1,
 136882,64,373128,
 136884,64,-1,
 136885,64,373144,
 136887,64,-1,
 136888,64,373144,
 136890,64,-1,
 136891,64,373144,
 136893,64,-1,
 136894,64,373160,
 136896,64,-1,
 136897,64,373160,
 136899,64,-1,
 136901,64,373128,
 136902,64,-1,
 136904,64,373128,
 136905,64,-1,
 136907,64,373128,
 136908,64,-1,
 136910,64,373144,
 136911,64,-1,
 136913,64,373144,
 136915,64,-1,
 136916,64,373144,
 136918,64,-1,
 136919,64,373160,
 136921,64,-1,
 136922,64,373160,
 136924,64,-1,
 136925,64,29456,
 136948,64,-1,
 136950,64,29456,
 136970,64,-1,
 136972,64,29456,
 136987,64,-1,
 136990,64,29456,
 137012,64,-1,
 137014,64,29456,
 137038,64,-1,
 137040,64,29456,
 137061,64,-1,
 137063,64,29456,
 137088,64,-1,
 137091,64,29456,
 137101,64,-1,
 137103,64,29456,
 137120,64,-1,
 137122,64,29456,
 137137,64,-1,
 137139,64,29456,
 137156,64,-1,
 137158,64,29456,
 137174,64,-1,
 137176,64,29456,
 137191,64,-1,
 137194,64,29456,
 137209,64,-1,
 137211,64,29456,
 137226,64,-1,
 137229,64,29456,
 137245,64,-1,
 137248,64,29456,
 137264,64,-1,
 137266,64,29456,
 137283,64,-1,
 137285,64,29456,
 137302,64,-1,
 137305,64,29456,
 137323,64,-1,
 137325,64,23096,
 137327,64,-1,
137329,64,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23096
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 24600
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25112
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25624
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26136
		, "static": true
		, "const": true
		, "time": 15
		, "total": 15
		, "hits": 2
		, "fails": 0
	}, {
		"": "object.create(type: typename): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "create"
		, "owner": "object"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26808
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": true
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": true
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": true
		}]
		, "size": 0
		, "offs": 29456
		, "static": true
		, "const": true
		, "time": 1294
		, "total": 1294
		, "hits": 37
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 31728
		, "static": true
		, "const": true
		, "time": 632
		, "total": 632
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 32400
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "value"
			, "type": "uint8"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33224
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34048
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34864
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 38840
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39656
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40168
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40680
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41192
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41704
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42216
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42728
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43536
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44344
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44856
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45368
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45880
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46392
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46904
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47568
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48080
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48744
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49248
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49752
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50256
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50760
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51264
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 5
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51920
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52424
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 3
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53080
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 3
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 61
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": true
		}]
		, "size": 103
		, "offs": 365072
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 8
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 365176
		, "static": true
		, "const": true
		, "time": 20
		, "total": 20
		, "hits": 10
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 365264
		, "static": true
		, "const": true
		, "time": 19
		, "total": 38
		, "hits": 6
		, "fails": 0
	}, {
		"": "Math.abs(x: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 77
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 77
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 77
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 365288
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.abs(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 85
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 85
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 85
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 365312
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 93
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 365336
		, "static": true
		, "const": true
		, "time": 19
		, "total": 19
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 365368
		, "static": true
		, "const": true
		, "time": 18
		, "total": 18
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.min(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 115
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 365400
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.min(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 123
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 365424
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 365448
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 145
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 365472
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 159
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 365496
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 170
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 365528
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 201
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 201
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 201
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 365560
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 215
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 215
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 215
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 365640
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 229
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 229
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 229
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 365720
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 255
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 365784
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 264
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 365832
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 279
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 279
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 365896
		, "static": true
		, "const": true
		, "time": 1
		, "total": 1
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 294
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 294
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 294
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 294
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 365960
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 351
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 351
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 351
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 378
		, "offs": 366296
		, "static": true
		, "const": true
		, "time": 4
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 408
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 408
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 408
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 366680
		, "static": true
		, "const": true
		, "time": 6
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 447
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 447
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 447
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 366928
		, "static": true
		, "const": true
		, "time": 3
		, "total": 7
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 462
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 462
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 462
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 173
		, "offs": 367008
		, "static": true
		, "const": true
		, "time": 10
		, "total": 16
		, "hits": 2
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 371248
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 371256
		, "static": true
		, "const": true
		, "time": 428
		, "total": 428
		, "hits": 128
		, "fails": -128
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 371280
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 371296
		, "static": true
		, "const": true
		, "time": 5
		, "total": 122
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 371368
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 371384
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": -1
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 372160
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 372224
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 372232
		, "static": true
		, "const": true
		, "time": 2356
		, "total": 2356
		, "hits": 753
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 372664
		, "static": true
		, "const": true
		, "time": 12
		, "total": 299
		, "hits": 3
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 372712
		, "static": true
		, "const": true
		, "time": 16
		, "total": 385
		, "hits": 4
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 372848
		, "static": true
		, "const": true
		, "time": 5
		, "total": 130
		, "hits": 1
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 372920
		, "static": true
		, "const": true
		, "time": 4
		, "total": 130
		, "hits": 1
		, "fails": 0
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 51
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 51
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 51
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": true
		}]
		, "size": 4
		, "offs": 373120
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 52
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 52
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 52
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 52
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 373128
		, "static": true
		, "const": true
		, "time": 30
		, "total": 30
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 53
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 53
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 53
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 53
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 373144
		, "static": true
		, "const": true
		, "time": 34
		, "total": 34
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.array.ci"
		, "line": 54
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 54
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 54
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "cmplStd/test/lang/init.array.ci"
			, "line": 54
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 373160
		, "static": true
		, "const": true
		, "time": 25
		, "total": 25
		, "hits": 14
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 14710
		, "offs": 375804
		, "static": true
		, "const": false
		, "time": 445
		, "total": 5067
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 119
	, "statementCount": 1254
}
}

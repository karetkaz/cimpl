{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 160
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(4)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(5)"
	}
}, {
	"": "typename.size(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27992
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 184
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 352
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 520
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 688
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 856
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1192
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1360
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1528
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1696
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42368
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43760
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(26)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44296
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(27)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(28)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45368
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(29)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45904
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(30)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46440
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(31)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1864
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47288
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(32)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(33)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48672
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49208
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49744
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(36)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50280
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(37)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50816
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(38)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51512
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(39)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(40)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52744
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(41)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 2200
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53272
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53800
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54328
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(44)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(44)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(45)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(45)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 55384
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(46)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(46)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56072
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(47)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(47)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56600
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(48)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(48)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 57288
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(49)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(49)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2368
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35624
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(13)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(14)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37352
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(15)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38208
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(16)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2536
	, "static": true
	, "const": true
}, {
	"": "variant.as(var: variant, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24984
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(1)"
	}
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2704
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2880
	, "static": true
	, "const": true
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3552
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3720
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x32 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x32 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4728
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4896
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x32 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x32 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x64 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x64 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x128 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x128 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5568
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7080
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8552
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9040
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9528
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10016
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10504
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11312
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12472
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 13600
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14728
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16176
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17624
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18752
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19880
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21008
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22136
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22624
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "emit.swz"
	, "kind": "typename"
	, "cast": "void"
	, "name": "swz"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 23112
	, "static": true
	, "const": true
}, {
	"": "emit.swz.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.swz"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "swz.p4x zwxy(4e)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "swz.p4x zwxy(4e)"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24280
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 32536
	, "static": true
	, "const": true
	, "doc": "Report messages or raise errors."
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(12)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 38256
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(18)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39840
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40216
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(20)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40592
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40968
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(22)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41504
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(23)"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "val"
	, "name": "true"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "true"
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "val"
	, "name": "false"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "false"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 8
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 9
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 10
		, "value": "float64"
	}
}, {
	"": "signed(value: uint8): int8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 13
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int8(value)"
		, "kind": "()"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 13
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint16): int16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int16(value)"
		, "kind": "()"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 16
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int32(value)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 19
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int64(value)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 22
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int8): uint8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint8(value)"
		, "kind": "()"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 25
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int16): uint16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint16(value)"
		, "kind": "()"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 28
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint32(value)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 31
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint64(value)"
		, "kind": "()"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 34
			, "value": "value"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the size of the given type"
	, "ast": {
		"": "typename.size(type)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "args": [{
			"": "type"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/stdlib.ci"
			, "line": 37
			, "value": "type"
		}]
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 41
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 43
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 45
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 48
	, "size": 24
	, "offs": 76160
	, "static": true
	, "const": true
	, "doc": "@public"
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 50
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "Value of the expected result"
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 53
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "Value of the actual result"
}, {
	"": "NotEquals.extras"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "extras"
	, "owner": "NotEquals"
	, "type": "variant[]"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 56
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "doc": "Extra argument to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 56
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 103
	, "offs": 392240
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 62
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 63
				}]
			}
		}, {
			"": "extras"
			, "kind": ".variable"
			, "type": "variant[1]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 65
			, "value": "extras"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 66
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 71
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392240
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392242
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 392244
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392245
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392249
		, "size": 1
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392250
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392254
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392259
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392261
		, "size": 2
	}, {
		"instruction": "inc.sp(+24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392263
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392267
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 392272
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392276
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392278
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 392283
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392287
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392289
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 392294
		, "size": 4
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392298
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392300
		, "size": 5
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392305
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392310
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392315
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392320
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392325
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 392330
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 392334
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392338
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392342
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 74
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "null"
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "cmplStd/lib/math.ci"
	, "line": 2
	, "size": 0
	, "offs": 80984
	, "static": true
	, "const": true
	, "doc": "Mathematical utility functions and constants"
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 6
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "pi"
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 6
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "e"
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 7
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln2"
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 8
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log2E"
	, "ast": {
		"": "1.442695"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "1.442695"
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln10"
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 10
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log10E"
	, "ast": {
		"": "0.434294"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "0.434294"
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 12
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "phi"
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 12
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 13
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrt2"
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 13
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtE"
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 14
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 15
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPi"
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 15
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPhi"
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 16
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 17
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "nan"
	, "ast": {
		"": "-nan"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "-nan"
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "inf"
	, "ast": {
		"": "inf"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "inf"
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 392344
	, "static": true
	, "const": false
	, "doc": "Decompose a value into integer and fractional parts"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392344
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 392346
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392355
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392356
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392360
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392362
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392363
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392364
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392368
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392369
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 392371
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392372
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392374
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 392379
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392380
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 392384
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392385
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392387
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 392388
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392389
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 392391
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392392
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392394
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392395
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392399
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392400
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 392402
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 392403
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392406
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392407
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 392409
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 392418
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392419
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392421
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 392423
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392424
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 392426
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392427
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392429
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 392432
	, "static": true
	, "const": false
	, "doc": "Computes the largest integer value not greater than the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 48
			, "value": "result"
		}, {
			"": "modf(x, &result);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 49
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 50
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 50
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 392432
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392433
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 392435
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392439
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 392444
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392445
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392449
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392453
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392455
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the smallest integer not less than the input"
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 54
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 54
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 54
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the nearest integer to the input"
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 57
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > 0) - int32(x < 0)"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "left": {
			"": "int32(x > 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
		, "right": {
			"": "int32(x < 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: int64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 70
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 70
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: uint64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 73
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 73
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 79
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 392456
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 83
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 84
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 84
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 86
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 86
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392456
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392458
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 392460
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392461
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392463
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392465
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 392466
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392467
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392471
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392473
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 392475
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392476
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392478
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 392479
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392482
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 392488
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 91
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 92
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 92
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 94
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 94
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392488
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392490
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 392492
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392493
		, "size": 2
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392495
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392497
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392498
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392499
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392503
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392505
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 392507
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392508
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392510
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 392511
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392514
		, "size": 1
	}]
}, {
	"": "Math.abs(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < 0 ? -x : x"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "test": {
			"": "x < 0"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "0"
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 101
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "value": "x"
	}
}, {
	"": "Math.abs(x: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "value": "x"
	}
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 110
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 110
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 113
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 113
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "value": "x"
		}
	}
}, {
	"": "Math.min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 119
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 122
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 125
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 140
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 143
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "b"
		}
	}
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 152
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 392520
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 153
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 153
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 153
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 153
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 153
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 154
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 154
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 156
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 156
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 156
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 156
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 156
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 157
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 157
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 159
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 159
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392520
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392522
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 392524
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392525
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 392529
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392532
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392533
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392535
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 392537
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392538
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 392542
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392545
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(4, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 392546
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392549
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 163
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 392552
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 164
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 164
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 164
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 164
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 165
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 165
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 167
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 167
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 167
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 167
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 167
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 168
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 168
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 170
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 170
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392552
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392554
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392556
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392557
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 392561
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392564
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392565
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392567
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 392569
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392570
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 392574
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392577
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(7, 5)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 392578
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392581
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 179
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 179
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 179
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 179
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 179
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 179
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 179
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 179
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 179
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 179
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 179
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 182
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 182
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 182
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 182
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 182
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 182
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 182
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 182
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 182
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 182
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 182
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 182
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 184
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 184
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 184
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 184
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 184
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 184
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 184
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 184
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 184
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 184
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 184
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 184
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 184
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 184
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 185
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 185
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 185
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 185
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 185
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 185
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 185
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 185
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 185
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 185
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 185
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 185
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 185
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 185
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 185
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 188
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 188
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 188
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 188
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 188
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 188
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 188
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 188
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 188
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 188
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 188
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 188
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 188
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 188
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 188
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 188
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 188
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 188
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 191
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 191
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 191
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 191
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 191
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 194
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 392584
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 195
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 195
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 195
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 195
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 195
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 195
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 195
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 196
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 196
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 198
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 199
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 199
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 199
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 199
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 199
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 199
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 199
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 199
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 199
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 199
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 199
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 199
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 199
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 199
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 200
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 200
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 200
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 201
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 204
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 204
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392584
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 392587
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392588
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 392592
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392601
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392603
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392604
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392606
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392607
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392612
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392616
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392618
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392620
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392622
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392626
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 392627
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392628
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392632
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392634
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392636
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392640
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392641
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392643
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392647
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392649
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 392651
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 392652
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392656
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392660
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392662
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 208
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 208
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 208
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 392664
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 208
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 209
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 209
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 209
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 209
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 209
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 209
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 209
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 209
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 210
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 210
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 212
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 213
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 213
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 213
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 213
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 213
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 213
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 213
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 213
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 213
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 213
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 213
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 213
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 213
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 213
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 214
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 214
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 214
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 214
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 214
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 214
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 214
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 215
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 218
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 218
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392664
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392666
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 392667
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392668
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 392672
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392681
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392683
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392684
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392686
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392687
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392692
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392696
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392698
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392700
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392702
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392706
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392707
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392708
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392712
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392714
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392716
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392720
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392721
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392723
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392727
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392729
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 392731
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 392732
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392736
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392740
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392742
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 222
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 222
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 222
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 392744
	, "static": true
	, "const": false
	, "doc": "Returns the sum of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 222
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 223
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 224
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 224
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 224
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 224
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 224
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 224
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 224
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 224
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 224
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 224
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 224
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 224
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 224
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 224
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 227
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 227
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 392744
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 392745
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392746
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392750
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392752
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392754
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392756
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392760
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 392761
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392762
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392764
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392768
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392770
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 392772
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 392773
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392777
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392781
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392783
		, "size": 1
	}]
}, {
	"": "Math.mean(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mean"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 231
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 231
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 231
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 20
	, "offs": 392784
	, "static": true
	, "const": false
	, "doc": "Returns the mean of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 231
		, "stmt": [{
			"": "return .result := sum(...data) / (signed(data.length));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 232
			, "stmt": {
				"": ".result := sum(...data) / (signed(data.length))"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sum(...data) / (signed(data.length))"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 232
					, "left": {
						"": "sum(...data)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 232
						, "args": [{
							"": "...data"
							, "kind": "..."
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 232
							, "right": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 232
								, "value": "data"
							}
						}]
					}
					, "right": {
						"": "(signed(data.length))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 232
						, "args": [{
							"": "signed(data.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 232
							, "args": [{
								"": "data.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 232
								, "left": {
									"": "data"
									, "kind": ".variable"
									, "type": "float64[]"
									, "file": "cmplStd/lib/math.ci"
									, "line": 232
									, "value": "data"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 232
									, "value": "length"
								}
							}]
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392784
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392785
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 392787
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 392792
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392793
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392797
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 392799
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 392800
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392801
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392803
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 236
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 236
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 236
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 236
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 236
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 236
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 239
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 239
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 239
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 239
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 239
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 239
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 239
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 239
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 239
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 239
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 239
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 242
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 242
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 242
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 242
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 242
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 242
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 242
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 242
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 242
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 242
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 245
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 245
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 245
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 245
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 245
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 245
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 245
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 245
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 245
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 245
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 245
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 248
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 392808
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 249
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 250
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 250
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 250
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 250
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 250
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 250
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 250
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 250
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 250
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 250
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 250
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 251
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 253
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 253
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392808
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392809
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392811
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392815
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392819
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392821
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 392823
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392824
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392826
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 392828
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 392832
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 392833
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392834
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392836
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392840
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392842
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 392843
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392844
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 392848
		, "size": 4
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 392852
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392854
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 257
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 392856
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 258
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 258
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 258
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 258
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 258
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 259
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 259
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 259
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 259
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 259
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 259
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 259
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 259
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 260
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 260
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 260
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 263
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 264
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 264
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 264
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 264
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 264
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 264
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 264
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 264
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 265
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 265
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 265
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 268
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 268
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392856
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392858
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 392860
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392861
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392865
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392867
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392869
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 392871
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 392872
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392873
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392877
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392882
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392884
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392885
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392889
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392891
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392893
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 392895
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 392896
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392897
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392901
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392906
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392908
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392909
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392910
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392912
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 272
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 392920
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 273
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 273
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 273
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 273
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 273
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 274
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 274
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 274
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 274
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 274
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 274
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 274
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 274
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 275
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 275
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 275
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 278
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 279
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 279
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 279
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 279
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 279
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 279
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 279
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 279
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 280
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 280
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 280
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 283
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 283
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392920
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392922
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392924
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392925
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392929
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392931
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392933
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 392935
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392936
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392937
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392941
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392946
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392948
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 392949
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392953
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392955
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392957
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 392959
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392960
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392961
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 392965
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392970
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392972
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 392973
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 392974
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 392976
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 287
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 287
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 287
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 287
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 392984
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 287
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 301
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 302
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 302
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 302
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 302
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 302
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 302
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 303
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 304
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 307
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 308
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 309
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 309
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 309
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 309
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 309
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 309
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 310
					, "value": "e"
				}, {
					"": "y := modf(x, &e);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 311
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 312
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 314
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, &f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 315
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 316
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 318
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 319
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 320
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 322
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 324
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 324
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 324
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 324
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 324
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 325
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 327
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 327
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 327
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 327
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 327
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 328
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 331
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 332
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 333
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 334
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 334
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 334
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 334
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392984
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 392986
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 392988
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 392989
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 392990
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 392994
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 392995
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 392997
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 393001
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393003
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393004
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393006
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393015
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393024
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393025
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393026
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393028
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393030
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 393039
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393040
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 393044
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393045
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393047
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 393051
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 393056
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393057
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393061
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393063
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 393065
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393066
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 393067
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393068
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393077
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393079
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393080
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 393084
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 393089
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393090
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393094
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393098
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393100
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393109
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393111
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393112
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 393113
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 393114
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393116
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 393120
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393124
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 393126
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393127
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393129
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 393131
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393132
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393133
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393135
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393137
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 393139
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 393140
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393142
		, "size": 2
	}, {
		"instruction": "b32.and 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 393144
		, "size": 2
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 393146
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393148
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393152
		, "size": 2
	}, {
		"instruction": "b32.and 0x01"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 393154
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393156
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393160
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393169
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393171
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393172
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393174
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393176
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 393181
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393182
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393186
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393187
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393189
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393191
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393192
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393201
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393203
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393204
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393213
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393214
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393216
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393217
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393226
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393227
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393229
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393230
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393239
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393240
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393242
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393243
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393252
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393253
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393255
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393256
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393258
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393267
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393268
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393270
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393271
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393280
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393281
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393283
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393284
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393293
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393294
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393296
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393297
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393306
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393307
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393309
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393311
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393312
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393314
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393318
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 338
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 338
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 338
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the sine of the input"
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 338
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 338
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 338
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 341
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 341
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 341
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the cosine of the input"
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 341
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 341
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 341
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 341
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 344
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 344
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 344
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 378
	, "offs": 393320
	, "static": true
	, "const": false
	, "doc": "Returns the tangent of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 344
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 357
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 358
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 360
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 360
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 360
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 360
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 360
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 360
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 361
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 362
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 364
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 366
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 367
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 368
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 370
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 370
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 370
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 370
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 371
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 371
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 371
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 371
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 371
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 371
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 372
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 373
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 375
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 375
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/math.ci"
								, "line": 375
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 375
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 375
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 375
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 376
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 377
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 379
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 379
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/lib/math.ci"
										, "line": 379
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 379
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 379
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/math.ci"
										, "line": 379
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 380
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 381
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 384
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 385
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 386
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 388
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 388
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 388
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 389
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 389
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 389
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 389
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 389
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 389
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 390
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 390
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 392
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 394
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 394
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 394
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 395
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 395
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 395
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 397
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 397
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 393320
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 393321
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393322
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393324
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 393325
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393326
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393330
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393332
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393333
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393335
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393340
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393344
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393345
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393354
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393356
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393357
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393366
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393367
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 393369
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393370
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393372
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 393376
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 393381
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393382
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393386
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 393388
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393389
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 393394
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393395
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 393397
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 393398
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 393399
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393403
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393405
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 393410
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393411
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393415
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393424
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393426
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393427
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393429
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393434
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393438
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 393439
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393443
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393445
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 393450
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393451
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393455
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 393459
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 393460
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393461
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393465
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393466
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393471
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393475
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 393476
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 393480
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393482
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 393487
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393488
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393492
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393501
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393503
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393504
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393506
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 393510
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 393511
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393512
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393516
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393517
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393519
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393521
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393522
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393531
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393533
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393534
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393543
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393544
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393546
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393547
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393556
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393557
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393559
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393560
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393569
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393570
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393572
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393573
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393582
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393583
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393585
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393586
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393588
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393597
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393598
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393600
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393601
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393610
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393611
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393613
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393614
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393623
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393624
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393625
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 393629
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393630
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393634
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393636
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 393637
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393638
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393642
		, "size": 9
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393651
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393653
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393657
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393658
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393667
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393669
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393670
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393672
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 393676
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393677
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393681
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393683
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393684
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393686
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393690
		, "size": 1
	}, {
		"instruction": "set.x64 sp(14)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393691
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393693
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393697
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 401
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 401
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 401
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 393704
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic sine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 401
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 413
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 414
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 414
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 414
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 414
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 414
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 414
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 415
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 416
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 419
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 419
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 419
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 419
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 419
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 419
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 420
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 420
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 420
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 420
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 420
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 420
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 423
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 424
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 424
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 424
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 424
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 424
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 425
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 427
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 428
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 429
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 430
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 433
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 433
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 433
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 434
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 434
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 434
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 436
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 393704
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393705
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393707
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 393708
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393709
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393713
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393715
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393716
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 393718
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393723
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 393727
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393728
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393730
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 393739
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393740
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393744
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 393746
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393750
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393759
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393760
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393762
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393766
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393767
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393768
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393770
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 393779
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393780
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393784
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 393786
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393790
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393792
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 393793
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 393797
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393798
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393807
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393808
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 393810
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393814
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393816
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393818
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393819
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393828
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393830
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393831
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393840
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393841
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393843
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393844
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393853
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393854
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393856
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393857
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393866
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393867
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393869
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393870
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393872
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393874
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393876
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393885
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393886
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393888
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393889
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393898
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393899
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 393901
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393902
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 393911
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393912
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393913
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393915
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 393919
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 393923
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393924
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393928
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393930
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393931
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393933
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393937
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393938
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 393940
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393944
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 440
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 440
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 440
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 393952
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic cosine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 440
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 441
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 441
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 441
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 441
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 441
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 441
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 442
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 444
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 444
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 444
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 444
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 444
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 444
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 445
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 445
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 445
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 445
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 445
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 445
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 447
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 447
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 447
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 447
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 447
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 447
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 447
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 447
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/math.ci"
										, "line": 447
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 447
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 447
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393952
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 393954
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 393955
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393956
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393960
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 393962
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393963
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393965
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393967
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 393976
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 393977
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 393981
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 393983
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 393987
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 393996
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 393997
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 393999
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394000
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394002
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394006
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394008
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394009
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394013
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394014
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394023
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394024
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394026
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 455
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 455
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 455
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 173
	, "offs": 394032
	, "static": true
	, "const": false
	, "doc": "Returns the arc sine of the input\n Special cases are:\n   Asin(±0) = ±0\n   Asin(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 455
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 456
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 456
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 458
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 458
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 461
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 462
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 462
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 462
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 462
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 462
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 462
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 463
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 464
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 467
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 467
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 467
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 467
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 467
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 467
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 469
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 469
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 472
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 473
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 473
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 473
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 473
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 473
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 476
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 477
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 480
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 480
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 480
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 481
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 481
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 481
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 483
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 483
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394032
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 394034
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 394035
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394036
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 394040
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394043
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394044
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394045
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 394047
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 394048
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394049
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 394053
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394058
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 394062
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394063
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394065
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394066
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394068
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394070
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 394079
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394080
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394084
		, "size": 9
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394093
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394095
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394099
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394100
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394109
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394111
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394113
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 394114
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394115
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394119
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394121
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 394130
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394131
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394135
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394144
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394153
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394154
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394156
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394158
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 394162
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394163
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 394165
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394169
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394171
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394173
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394177
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394179
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 394183
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394184
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394188
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394190
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394191
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394193
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394197
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394198
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394200
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394204
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 490
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 490
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 490
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the arc cosine of the input\n Special case is:\n   Acos(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 490
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 490
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 490
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 490
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 490
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 490
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 490
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 490
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.radians(degrees: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "radians"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 514
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 514
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "degrees"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "degrees"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 514
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to radians from degrees."
	, "ast": {
		"": "float64(degrees * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 514
		, "args": [{
			"": "degrees * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 514
			, "left": {
				"": "degrees * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 514
				, "left": {
					"": "degrees"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 514
					, "value": "degrees"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 514
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 514
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 514
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.degrees(radians: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "degrees"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 517
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 517
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "radians"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "radians"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 517
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to degrees from radians."
	, "ast": {
		"": "float64(radians * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 517
		, "args": [{
			"": "radians * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 517
			, "left": {
				"": "radians * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 517
				, "left": {
					"": "radians"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 517
					, "value": "radians"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 517
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 517
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 517
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 2
	, "size": 16
	, "offs": 128792
	, "static": true
	, "const": true
	, "doc": "Complex number"
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "The real component of a complex number."
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 8
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "The imaginary component of a complex number."
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 8
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 394208
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 25
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 26
					}, {
						"": ".result.im := (0);"
						, "kind": ";"
						, "type": "void"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 394208
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 394211
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394212
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394214
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 394216
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 32
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 33
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 34
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 394216
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 394219
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394222
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(-a.re, -a.im);"
	, "ast": {
		"": "Complex(emit(struct(a), neg.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(a), neg.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "a"
				}]
			}, {
				"": "neg.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "neg"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re + b.re, a.im + b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re - b.re, a.im - b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "args": [{
			"": "emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 76
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "b"
				}]
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "x2"
				}
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "p2d"
				}
			}, {
				"": "add.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "add"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "f64"
				}
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "p2d"
				}
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "x2"
				}
			}, {
				"": "sub.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "sub"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "f64"
				}
			}]
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 81
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 139
	, "offs": 394224
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 90
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 91
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 92
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 93
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 94
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 95
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 98
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 99
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 100
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 101
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 102
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394224
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394226
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 394228
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 394229
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394230
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394234
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394236
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 394237
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394241
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394243
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394245
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394247
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 394249
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 394250
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394251
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394255
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394257
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 394258
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394262
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394264
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 394266
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 394267
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394271
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394273
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394275
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394276
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394278
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394280
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394282
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394283
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394284
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394286
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394288
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394290
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394291
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394292
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394294
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394295
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394297
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394299
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394301
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394303
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 394304
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394305
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394307
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394308
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394310
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394314
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394315
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394319
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394321
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394323
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394324
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394326
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394328
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394330
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394331
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394332
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394334
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394336
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394337
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394339
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394340
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394342
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394343
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394345
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394347
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394349
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394350
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 394352
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394353
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394355
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394356
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394358
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394362
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 112
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 394368
	, "static": true
	, "const": false
	, "doc": "Reciprocal of a complex number (1 / a)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 118
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 119
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 120
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 121
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394368
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394370
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394372
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394373
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394375
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394377
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394378
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394379
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394381
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394383
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394384
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394386
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394388
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394389
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 394391
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394392
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394394
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394398
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 132
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 394400
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 136
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 137
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 138
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 139
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 140
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 141
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 142
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x128 sp(5)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 394400
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394402
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394404
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394406
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394407
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394409
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394411
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394412
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394413
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394417
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394419
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(7)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 394423
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394425
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394427
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394429
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394433
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394435
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394439
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394441
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394443
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394444
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394446
		, "size": 2
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394448
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394452
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 394453
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394454
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394456
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394458
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394462
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 394464
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394465
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394467
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394468
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394472
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394473
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394475
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394477
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394481
		, "size": 1
	}, {
		"instruction": "set.x64 sp(19)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394482
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394484
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 394486
		, "size": 2
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394488
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 394492
		, "size": 1
	}, {
		"instruction": "set.x64 sp(21)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 394493
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394495
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394499
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 166
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 169
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 169
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 171
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 171
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 178
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 180
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 180
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 182
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 184
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 187
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}]
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 2
	, "size": 16
	, "offs": 152160
	, "static": true
	, "const": true
	, "doc": "A 4d vector (4x float32)"
}, {
	"": "vec4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec4f"
	, "type": "vec4f.<?>"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 141
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f.<?>.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec4f.<?>.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec4f.<?>.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
}, {
	"": "vec4f.<?>.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 9
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 11
		, "value": "w"
	}
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y, z, w components"
	, "ast": {
		"": "vec4f(emit(struct(w), struct(z), struct(y), struct(x)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "args": [{
			"": "emit(struct(w), struct(z), struct(y), struct(x))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 26
			, "args": [{
			}, {
				"": "struct(w)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "w"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "w"
				}]
			}, {
				"": "struct(z)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "z"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "z"
				}]
			}, {
				"": "struct(y)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "y"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "y"
				}]
			}, {
				"": "struct(x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with  (x: x, y: y, z: z, w: 1)"
	, "ast": {
		"": "vec4f(x, y, z, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "z"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with (x: x, y: y, z: 0, w: 1)"
	, "ast": {
		"": "vec4f(x, y, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "y"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z components using the components form the given vector, and w with the given value"
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z, w components with the given scalar value"
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns a negated copy of the vector."
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 71
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 75
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 77
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "value": "b"
		}]
	}
}, {
	"": "add(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sub(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "value": "b"
		}]
	}
}, {
	"": "sub(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "b"
			}]
		}]
	}
}, {
	"": "mul(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "value": "b"
		}]
	}
}, {
	"": "mul(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "value": "b"
		}]
	}
}, {
	"": "div(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "b"
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise minimum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), min.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 100
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "rhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise maximum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), max.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "rhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "val"
		, "name": "min"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "val"
		, "name": "max"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp the vector component wise to the range [min ... max]"
	, "ast": {
		"": "min(max(vec, min), max)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "args": [{
		}, {
			"": "max(vec, min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "vec"
			}, {
				"": "min"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "min"
			}]
		}, {
			"": "max"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "value": "max"
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 108
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "min"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "max"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp each component of the vector to the range [min ... max]"
	, "ast": {
		"": "clamp(vec, vec4f(min), vec4f(max))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "args": [{
		}, {
			"": "vec"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "value": "vec"
		}, {
			"": "vec4f(min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "min"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "min"
			}]
		}, {
			"": "vec4f(max)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "max"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "max"
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of the first 3 elements"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 112
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Homogeneous dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 116
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 120
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 123
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Cross product of the first 3 elements"
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "length(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Length of the vector(xyz)"
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 126
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Normalize the vector(xyz)"
	, "ast": {
		"": "div(v, vec4f(length(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "value": "v"
		}, {
			"": "vec4f(length(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "args": [{
				"": "length(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 128
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Evaluate as a polynomial in point x"
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 131
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math/Vector4f.ci"
							, "line": 131
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "cmplStd/lib/math/Vector4f.ci"
										, "line": 131
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 2
	, "size": 64
	, "offs": 173816
	, "static": true
	, "const": true
	, "doc": "A 4x4 matrix"
}, {
	"": "mat4f.m"
	, "kind": "variable"
	, "cast": "val"
	, "name": "m"
	, "owner": "mat4f"
	, "type": "float32[4][4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array: m[1][0]"
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 7
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as a flatten array: data[4] => m[1][0]"
}, {
	"": "mat4f.v"
	, "kind": "variable"
	, "cast": "val"
	, "name": "v"
	, "owner": "mat4f"
	, "type": "vec4f[4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 10
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array of vectors: v[1].x => m[1][0]"
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 14
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 16
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 18
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 20
		, "value": "w"
	}
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.xx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 4
	, "offs": 52
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 4
	, "offs": 56
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.ww"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "ww"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 4
	, "offs": 60
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.xx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 24
		, "value": "xx"
	}
}, {
	"": "mat4f.xy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 26
		, "value": "xy"
	}
}, {
	"": "mat4f.xz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 28
		, "value": "xz"
	}
}, {
	"": "mat4f.xw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 30
		, "value": "xw"
	}
}, {
	"": "mat4f.yx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 33
		, "value": "yx"
	}
}, {
	"": "mat4f.yy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 35
		, "value": "yy"
	}
}, {
	"": "mat4f.yz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 37
		, "value": "yz"
	}
}, {
	"": "mat4f.yw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 39
		, "value": "yw"
	}
}, {
	"": "mat4f.zx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 42
		, "value": "zx"
	}
}, {
	"": "mat4f.zy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 44
		, "value": "zy"
	}
}, {
	"": "mat4f.zz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 46
		, "value": "zz"
	}
}, {
	"": "mat4f.zw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 48
		, "value": "zw"
	}
}, {
	"": "mat4f.wx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 51
		, "value": "wx"
	}
}, {
	"": "mat4f.wy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 53
		, "value": "wy"
	}
}, {
	"": "mat4f.wz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 55
		, "value": "wz"
	}
}, {
	"": "mat4f.ww"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ww"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "ww"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 57
		, "value": "ww"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 394504
	, "static": true
	, "const": false
	, "doc": "Initialize all elements with the given values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 66
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xy := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xz := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xw := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.yx := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yy := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yz := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yw := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.zx := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zy := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zz := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zw := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.wx := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wy := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wz := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.ww := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394504
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394507
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394510
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394513
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394516
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394519
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394522
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394525
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394528
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394531
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394534
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394537
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394540
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394543
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394546
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394549
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394552
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 394560
	, "static": true
	, "const": false
	, "doc": "Initialize matrix with row vectors"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 76
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394560
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394562
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394563
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394565
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394567
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394568
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394570
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394572
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394573
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394575
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394577
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394578
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394580
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product of the first 3 elements"
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "value": "1.000000"
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: homogeneous dot product"
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product"
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "transpose(mat: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "transpose"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "val"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 128
		, "static": false
		, "const": true
	}]
	, "size": 49
	, "offs": 394584
	, "static": true
	, "const": false
	, "doc": "Transpose the matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 88
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := mat.xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xy := mat.yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xz := mat.zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xw := mat.wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.yx := mat.xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yy := mat.yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yz := mat.zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yw := mat.wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.zx := mat.xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zy := mat.yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zz := mat.zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zw := mat.wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.wx := mat.xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wy := mat.yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wz := mat.zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.ww := mat.ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394584
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394587
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394590
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394593
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394596
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394599
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394602
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394605
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394608
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394611
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394614
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394617
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394620
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394623
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394626
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 394629
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394632
		, "size": 1
	}]
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 245
	, "offs": 394640
	, "static": true
	, "const": false
	, "doc": "Multiply two matrices (rows * cols)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 98
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 99
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 100
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 101
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 102
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 103
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394640
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394644
		, "size": 2
	}, {
		"instruction": "load.sp(-60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394646
		, "size": 4
	}, {
		"instruction": "copy.mem -64"
		, "name": "copy.mem"
		, "code": "0x1e"
		, "offs": 394650
		, "size": 4
	}, {
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394654
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 394658
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 394663
		, "size": 1
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394664
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394668
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394672
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394674
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394676
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394680
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394681
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394683
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394684
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394685
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394687
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394691
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394692
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394694
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394695
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394696
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394698
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394702
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394703
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394705
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394706
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394707
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394709
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394710
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394712
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394713
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394714
		, "size": 2
	}, {
		"instruction": "set.x128 sp(23)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394716
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394718
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394722
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394724
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394728
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394730
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394734
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394735
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394737
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394738
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394739
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394741
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394745
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394746
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394748
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394749
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394750
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394752
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394756
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394757
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394759
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394760
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394761
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394763
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394764
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394766
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394767
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394768
		, "size": 2
	}, {
		"instruction": "set.x128 sp(27)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394770
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394772
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394776
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394778
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394782
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394784
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394788
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394789
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394791
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394792
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394793
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394795
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394799
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394800
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394802
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394803
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394804
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394806
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394810
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394811
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394813
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394814
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394815
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394817
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394818
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394820
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394821
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394822
		, "size": 2
	}, {
		"instruction": "set.x128 sp(31)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394824
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 394826
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394830
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394832
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394836
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394838
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394842
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394843
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394845
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394846
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394847
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394849
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394853
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394854
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394856
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394857
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394858
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394860
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394864
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394865
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394867
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394868
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394869
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394871
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394872
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394874
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 394875
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394876
		, "size": 2
	}, {
		"instruction": "set.x128 sp(35)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394878
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394880
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394884
		, "size": 1
	}]
}, {
	"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "center"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "center"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}]
	, "size": 454
	, "offs": 394888
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix\nadapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "stmt": [{
			"": "len"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 112
			, "value": "len"
		}, {
			"": "if ((len) < 0.000000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 113
			, "test": {
				"": "(len) < 0.000000"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "left": {
					"": "(len)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "args": [{
						"": "len"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 113
						, "value": "len"
					}]
				}
				, "right": {
					"": "0.000000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "value": "0.000000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "stmt": [{
					"": "trace(\"invalid direction of rotation\", direction);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 114
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 115
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "mat4f"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.x := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 116
							}, {
								"": ".result.y := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 117
							}, {
								"": ".result.z := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 118
							}, {
								"": ".result.w := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 119
							}]
						}
					}
				}]
			}
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 122
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 123
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 124
			, "value": "z"
		}, {
			"": "cx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 125
			, "value": "cx"
		}, {
			"": "cy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 126
			, "value": "cy"
		}, {
			"": "cz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 127
			, "value": "cz"
		}, {
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 128
			, "value": "xx"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 129
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 130
			, "value": "xz"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 131
			, "value": "yy"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 132
			, "value": "yz"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 133
			, "value": "zz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 135
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 136
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 137
			, "value": "k"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 139
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx + (yy + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 140
					}, {
						"": ".result.xy := xy * k - z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 141
					}, {
						"": ".result.xz := xz * k + y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 142
					}, {
						"": ".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 143
					}, {
						"": ".result.yx := xy * k + z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 145
					}, {
						"": ".result.yy := yy + (xx + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 146
					}, {
						"": ".result.yz := yz * k - x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 147
					}, {
						"": ".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 148
					}, {
						"": ".result.zx := xz * k - y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 150
					}, {
						"": ".result.zy := yz * k + x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 151
					}, {
						"": ".result.zz := zz + (xx + yy) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 152
					}, {
						"": ".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 153
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 155
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394888
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 394890
		, "size": 1
	}, {
		"instruction": "dup.x128 sp(0)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 394891
		, "size": 2
	}, {
		"instruction": "dup.x128 sp(4)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 394893
		, "size": 2
	}, {
		"instruction": "dp3.v4f"
		, "name": "dp3.v4f"
		, "code": "0x9a"
		, "offs": 394895
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394896
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 394900
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394902
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394906
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 394908
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 394909
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 394918
		, "size": 1
	}, {
		"instruction": "jz +69"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 394919
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 394923
		, "size": 5
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 394928
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 394933
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 394938
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 394943
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 394948
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394953
		, "size": 2
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 394955
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394959
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394960
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394961
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394962
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394963
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394965
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394966
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394967
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394968
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394969
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394971
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394972
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394973
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394974
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394975
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394977
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394978
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394979
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 394980
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 394981
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 394983
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 394987
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394988
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 394990
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394991
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 394993
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 394994
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 394996
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395000
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395001
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 395003
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395004
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395006
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395010
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395011
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 395013
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395014
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395016
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395017
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395019
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395023
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395024
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395026
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395030
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395031
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395033
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395035
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395036
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395038
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395040
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395041
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395043
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395045
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395046
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395048
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395050
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395051
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395053
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395055
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395056
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395058
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395060
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395061
		, "size": 2
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 395063
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395067
		, "size": 2
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 395069
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395073
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395078
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395080
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395081
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395083
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395085
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395087
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395088
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395090
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395091
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395092
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395094
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395096
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395098
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395099
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395101
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395103
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395104
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395105
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395107
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395109
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395111
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395112
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395114
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395116
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395117
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395118
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395120
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395122
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395124
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395126
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395127
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395128
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395130
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395132
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395134
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395135
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395137
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395139
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395140
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395141
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395142
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395143
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395145
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395146
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395148
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395150
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395151
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395153
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395155
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395156
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395157
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395159
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395160
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395161
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395163
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395165
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395167
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395168
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395170
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395172
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395173
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395174
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395176
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395178
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395180
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395182
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395183
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395185
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395186
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395187
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395189
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395191
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395193
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395194
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395196
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395198
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395199
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395200
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395202
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395204
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395206
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395208
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395209
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395210
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395212
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395214
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395216
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395217
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395219
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395221
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395222
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395223
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395224
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395225
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395227
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395228
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395230
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395232
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395233
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395235
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395237
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395238
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395239
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395241
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395242
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395243
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395245
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395247
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395249
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395250
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395252
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395254
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395255
		, "size": 1
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395256
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395258
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395260
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395262
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395263
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395265
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395267
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395268
		, "size": 1
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395269
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395271
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395273
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395275
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395277
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395278
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395280
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395281
		, "size": 1
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395282
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395284
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395286
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395288
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395290
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395291
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395292
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395294
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395296
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395298
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395299
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395301
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395303
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395304
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395305
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395306
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395307
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395309
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395310
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395312
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395314
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395315
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395317
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395319
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 395320
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395321
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395323
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 395324
		, "size": 1
	}, {
		"instruction": "set.x32 sp(32)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395325
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395327
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395332
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395333
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395334
		, "size": 1
	}, {
		"instruction": "set.x128 sp(36)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 395335
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395337
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395341
		, "size": 1
	}]
}, {
	"": "rotation(direction: vec4f, angle: float32): mat4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 160
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 64
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix"
	, "ast": {
		"": "rotation(vec4f(0), direction, angle)"
		, "kind": "()"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "args": [{
		}, {
			"": "vec4f(0)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "0"
			}]
		}, {
			"": "direction"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "direction"
		}, {
			"": "angle"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "angle"
		}]
	}
}, {
	"": "translation(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "translation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 163
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 88
	, "offs": 395344
	, "static": true
	, "const": false
	, "doc": "Build a translation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 164
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xw := direction.x * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yy := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yw := direction.y * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zz := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zw := direction.z * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395344
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395349
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395351
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395352
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395354
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395355
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395357
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395359
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395360
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395362
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395363
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395365
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395366
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395368
		, "size": 5
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395373
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395375
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395376
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395378
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395380
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395384
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395385
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395387
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395388
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395390
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395391
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395393
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395394
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395396
		, "size": 5
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395401
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395403
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395405
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395409
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395410
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395412
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395413
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395415
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395416
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395418
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395419
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395421
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395422
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395424
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395429
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395431
		, "size": 1
	}]
}, {
	"": "scale(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "scale"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 217
	, "offs": 395432
	, "static": true
	, "const": false
	, "doc": "Build a scaling matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "stmt": [{
			"": "rcp(val: float32): float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 174
			, "value": "rcp(val: float32): float32"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 175
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := rcp(direction.x * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yy := rcp(direction.y * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zz := rcp(direction.z * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395432
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395434
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395435
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395437
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395438
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395440
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 395441
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395442
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395446
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 395448
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395449
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395453
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 395455
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 395456
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 395465
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395466
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395470
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395471
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395475
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395480
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 395482
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395483
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395485
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395487
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395488
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395490
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395491
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395493
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395494
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395496
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395497
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395499
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395501
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395505
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395506
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395508
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395509
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395511
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 395512
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395513
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395517
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 395519
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395520
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395524
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 395526
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 395527
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 395536
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395537
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395541
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395542
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395546
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395551
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 395553
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395554
		, "size": 2
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395556
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395558
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395559
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395561
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395562
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395564
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395565
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395567
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395568
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395570
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395572
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 395576
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395577
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 395579
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395580
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395582
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 395583
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395584
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395588
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 395590
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395591
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395595
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 395597
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 395598
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 395607
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395608
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395612
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395613
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395617
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395622
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 395624
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395625
		, "size": 2
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395627
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395629
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395630
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395632
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395633
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395635
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395636
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395638
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395639
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 395641
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395646
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395648
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 2
	, "size": 16
	, "offs": 195544
	, "static": true
	, "const": true
	, "doc": "A 2d vector (2x float64)"
}, {
	"": "vec2d.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec2d"
	, "type": "vec2d.<?>"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 44
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.<?>.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec2d.<?>.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec2d.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec2d.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec2d.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec2d"
	, "type": "float64[2]"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 10
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 395656
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 15
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 16
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 17
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 395656
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 395659
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395662
		, "size": 1
	}]
}, {
	"": "add(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 22
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "mul(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), mul.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "args": [{
			"": "emit(struct(a), struct(b), mul.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 28
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "div(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), div.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "args": [{
			"": "emit(struct(a), struct(b), div.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "b"
				}]
			}, {
				"": "div.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "div"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "min(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the minimum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), min.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "args": [{
			"": "emit(struct(a), struct(b), min.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 34
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "b"
				}]
			}, {
				"": "min.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "min"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "max(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the maximum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), max.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "args": [{
			"": "emit(struct(a), struct(b), max.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "b"
				}]
			}, {
				"": "max.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "max"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "ceq(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceq"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Compare the two vectors for equality."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), ceq.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "args": [{
			"": "emit(struct(a), struct(b), ceq.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "ceq.p2d"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "left": {
					"": "ceq"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "ceq"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of thw two vectors"
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 38
	, "offs": 395664
	, "static": true
	, "const": false
	, "doc": "Computes the length of the string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 4
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 5
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 5
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/lib/string.ci"
					, "line": 5
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "cmplStd/lib/string.ci"
						, "line": 5
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/lib/string.ci"
					, "line": 5
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 5
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 6
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 6
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 8
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 9
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 9
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 9
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 9
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 9
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 9
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 11
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 11
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395664
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 395666
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395671
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395672
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395676
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395677
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395679
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395680
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395681
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395685
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395689
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395691
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395693
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395694
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395695
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395699
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395701
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 395704
	, "static": true
	, "const": false
	, "doc": "Returns the index of the first occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 15
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 16
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 16
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 16
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 16
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 16
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 17
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 17
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 17
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/string.ci"
								, "line": 17
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 17
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 17
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 17
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 18
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 18
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 21
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 21
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 21
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395704
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395705
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395709
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395711
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395713
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395714
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395715
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395719
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395720
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395721
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395725
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395727
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395728
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395732
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395734
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395736
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395737
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395738
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395742
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 395746
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395751
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395753
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 395760
	, "static": true
	, "const": false
	, "doc": "Returns the index of the last occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 25
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 26
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 27
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 27
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 27
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 27
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 27
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 28
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 28
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 28
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/string.ci"
								, "line": 28
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 28
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 28
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 28
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 29
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 32
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 32
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 395760
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395765
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395766
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395770
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395772
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395774
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395775
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395776
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395780
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395781
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395782
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(1, 0)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 395786
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395789
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395793
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395795
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395797
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395798
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395799
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395803
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 395807
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395809
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 395816
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 36
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 37
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 37
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 37
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 37
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 37
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 37
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 38
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 38
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 38
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 38
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 38
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 38
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 38
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 38
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 39
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/string.ci"
									, "line": 39
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 42
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 42
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395816
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395817
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395821
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395822
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395824
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395826
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395827
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395828
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395830
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395832
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395833
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395834
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 395836
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395837
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395841
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395842
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395843
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395847
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395848
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 395852
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395853
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395857
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395858
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395862
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395864
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395866
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395867
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395868
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395869
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395870
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395874
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 395878
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395883
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 395887
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395888
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 395896
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 46
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 47
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 48
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 49
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 49
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 49
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 49
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 49
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 50
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "cmplStd/lib/string.ci"
							, "line": 50
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 52
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 52
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 52
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 52
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 52
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 53
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 53
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 53
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 53
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 53
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/string.ci"
											, "line": 53
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/string.ci"
											, "line": 53
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 53
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 53
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 53
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 53
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 53
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 54
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/string.ci"
									, "line": 54
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 57
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 57
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395896
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395897
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 395899
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 395904
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395905
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395909
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395910
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 395912
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 395917
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395918
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395922
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395924
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 395926
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 395927
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395931
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395932
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 395936
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395937
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395941
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395942
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 395943
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395947
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395948
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395950
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395952
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 395954
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395955
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395957
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395958
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395959
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395960
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395962
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 395964
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 395965
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395966
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 395968
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395969
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395973
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 395974
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395975
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 395979
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 395980
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 395984
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 395985
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 395989
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 395990
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395994
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 395996
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 395998
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 395999
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396003
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396007
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396012
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396016
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396017
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396021
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 396024
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 61
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 62
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 63
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 63
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 63
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 63
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 63
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 64
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 65
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 65
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 65
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 65
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 65
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 65
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 65
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 65
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 66
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 69
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 69
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396024
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396025
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396026
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396030
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396031
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396033
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396035
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396036
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396037
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396039
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396041
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396042
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396043
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396045
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396046
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396050
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396052
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396054
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396056
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396057
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396058
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396059
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396060
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396064
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396068
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396072
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396074
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396075
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396076
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396080
		, "size": 4
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396084
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396086
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 396160
	, "static": true
	, "const": false
	, "doc": "ignore case character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 73
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 74
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 84
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 84
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 84
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 84
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 84
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 84
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396160
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396161
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396165
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396166
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396171
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396172
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396176
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396177
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396181
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396182
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396187
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396188
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 396192
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396193
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396195
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 396200
	, "static": true
	, "const": false
	, "doc": "default character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 88
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 89
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 89
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 89
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 89
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396200
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396204
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396205
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396209
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 396210
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396211
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396213
		, "size": 1
	}]
}, {
	"": "toHex(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toHex"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert lower part (4 bits) of the input value to the corresponding lower case hexadecimal character"
	, "ast": {
		"": "int32(\"0123456789abcdef\"[value & 15])"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 93
		, "args": [{
			"": "\"0123456789abcdef\"[value & 15]"
			, "kind": "[]"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 93
			, "left": {
				"": "\"0123456789abcdef\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/lib/string.ci"
				, "line": 93
				, "value": "\"0123456789abcdef\""
			}
			, "right": {
				"": "value & 15"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 93
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 93
					, "value": "value"
				}
				, "right": {
					"": "15"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 93
					, "value": "15"
				}
			}
		}]
	}
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 96
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using case-sensitive comparison"
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 96
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 96
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 96
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using case-sensitive comparison"
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 98
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 98
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 98
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 98
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 100
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 100
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 100
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/string.ci"
			, "line": 100
			, "value": "caseCmp"
		}]
	}
}, {
	"": "equals(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "equals"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 102
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 102
		, "left": {
			"": "compare(str, with, caseCmp)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 102
				, "value": "str"
			}, {
				"": "with"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 102
				, "value": "with"
			}, {
				"": "caseCmp"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 102
				, "value": "caseCmp"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 102
			, "value": "0"
		}
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 105
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string contains the given character"
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 105
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/string.ci"
				, "line": 105
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 105
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 105
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "cmplStd/lib/string.ci"
	, "line": 119
	, "size": 16
	, "offs": 219776
	, "static": true
	, "const": true
	, "doc": "Flags to convert numbers to string"
}, {
	"": "FormatFlags.showSign"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "showSign"
	, "owner": "FormatFlags"
	, "type": "bool"
	, "file": "cmplStd/lib/string.ci"
	, "line": 121
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "forced show sign"
	, "ast": {
		"": "false"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/lib/string.ci"
		, "line": 121
		, "value": "false"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/string.ci"
	, "line": 124
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
	, "doc": "precision or radix"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 124
		, "value": "0"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "cmplStd/lib/string.ci"
	, "line": 127
	, "size": 1
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "padding character"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 127
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/string.ci"
	, "line": 130
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "doc": "padding length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 130
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 134
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 84
	, "offs": 396216
	, "static": true
	, "const": false
	, "doc": "Append a string to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 134
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 135
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 135
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/string.ci"
				, "line": 135
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/string.ci"
					, "line": 135
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 135
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 135
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 135
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 135
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 135
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 135
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 135
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 136
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 136
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 136
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 136
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 136
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "cmplStd/lib/string.ci"
									, "line": 136
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 136
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 136
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 137
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 139
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 140
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 143
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 143
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 143
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 143
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 143
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 143
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 143
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 143
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 144
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 146
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 147
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 147
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396216
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396217
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396221
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396223
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396225
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396226
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396230
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396234
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396236
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396238
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396239
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396240
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396242
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396244
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396245
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396246
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396248
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396252
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396254
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396258
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396260
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396262
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396263
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396264
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396268
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396272
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396274
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396276
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396277
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396281
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396283
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396287
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396289
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396290
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396292
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396294
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396295
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(5, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 396296
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396299
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "sign"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "sign"
		, "type": "char"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 707
	, "offs": 396320
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 151
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 152
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 153
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 155
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 156
			, "value": "digits"
		}, {
			"": "if (format.showSign)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 158
			, "test": {
				"": "format.showSign"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 158
				, "left": {
					"": "format"
					, "kind": ".variable"
					, "type": "FormatFlags"
					, "file": "cmplStd/lib/string.ci"
					, "line": 158
					, "value": "format"
				}
				, "right": {
					"": "showSign"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 158
					, "value": "showSign"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 158
				, "stmt": [{
					"": "if ((sign) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 159
					, "test": {
						"": "(sign) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 159
						, "left": {
							"": "(sign)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 159
							, "args": [{
								"": "sign"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/string.ci"
								, "line": 159
								, "value": "sign"
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 159
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 159
						, "stmt": [{
							"": "sign := '+';"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 160
						}]
					}
				}]
			}
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 164
			, "value": "radix"
		}, {
			"": "if (radix == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 165
			, "test": {
				"": "radix == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 165
				, "left": {
					"": "radix"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "value": "radix"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 165
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 165
				, "stmt": [{
					"": "radix := 10;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 166
				}]
			}
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 168
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 169
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 172
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 172
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 172
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 172
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 172
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 172
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 172
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 172
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 172
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 172
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 172
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 172
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 173
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 175
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 175
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 175
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 175
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 175
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 176
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 179
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 181
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 182
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 182
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 182
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 182
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 182
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 183
				}]
			}
		}, {
			"": "if ((sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 187
			, "test": {
				"": "(sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 187
				, "left": {
					"": "(sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 187
					, "args": [{
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/string.ci"
						, "line": 187
						, "value": "sign"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 187
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 187
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 188
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 189
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "cmplStd/lib/string.ci"
						, "line": 189
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 189
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/string.ci"
							, "line": 189
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/string.ci"
						, "line": 189
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "cmplStd/lib/string.ci"
							, "line": 191
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "cmplStd/lib/string.ci"
								, "line": 191
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 191
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 191
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "cmplStd/lib/string.ci"
								, "line": 191
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 191
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/string.ci"
									, "line": 191
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 191
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/string.ci"
										, "line": 191
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/string.ci"
								, "line": 191
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 192
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 193
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/string.ci"
									, "line": 194
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 197
				}, {
					"": "output[pos] := sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 198
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 199
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 203
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 203
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 203
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 203
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 203
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 204
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 205
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 206
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 210
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 210
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 210
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 210
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 210
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 210
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 210
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 210
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 210
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 210
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 210
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 211
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 212
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 213
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 216
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 216
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 216
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 216
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 216
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/string.ci"
							, "line": 216
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 216
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/string.ci"
				, "line": 216
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/string.ci"
					, "line": 217
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 219
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 220
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 220
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396320
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396321
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396325
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396327
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396328
		, "size": 4
	}, {
		"instruction": "load.sp(+100)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396332
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396336
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396337
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396338
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396339
		, "size": 4
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396343
		, "size": 5
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396348
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396352
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396353
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396355
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 396359
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396360
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396362
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396363
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396364
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396368
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396373
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396375
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396377
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 396382
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396383
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396387
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396391
		, "size": 5
	}, {
		"instruction": "load.c32 168"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396396
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396401
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396406
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396411
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396416
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396421
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396425
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396429
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 396431
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396435
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396436
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396440
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396444
		, "size": 5
	}, {
		"instruction": "load.c32 169"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396449
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396454
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396459
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396464
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396469
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396474
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396478
		, "size": 4
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396482
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 396486
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(25)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396490
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396492
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 396494
		, "size": 1
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 396495
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 396496
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396497
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396498
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396499
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396503
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396505
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396509
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396511
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396513
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396514
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396515
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396517
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 396519
		, "size": 1
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 396520
		, "size": 1
	}, {
		"instruction": "set.x64 sp(26)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396521
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396523
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 396525
		, "size": 1
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 396526
		, "size": 1
	}, {
		"instruction": "jnz -41"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396527
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(21)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396531
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396533
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396534
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396535
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396539
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396544
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396548
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396550
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396554
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396556
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396558
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396559
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396560
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396562
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 396566
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396567
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 396569
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396570
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396572
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396576
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396577
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396581
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396582
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396583
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396584
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396588
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396593
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396597
		, "size": 1
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396598
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396602
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396603
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396604
		, "size": 1
	}, {
		"instruction": "jnz +200"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396605
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396609
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396611
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396615
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396617
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 396618
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396622
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396626
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396627
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396632
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396633
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396637
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396638
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396639
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396643
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396647
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396649
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396651
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396652
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396656
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396660
		, "size": 5
	}, {
		"instruction": "load.c32 192"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396665
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396670
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396675
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396680
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396685
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396690
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396695
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396699
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396703
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396704
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396706
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396708
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396709
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396710
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396712
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396716
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396718
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396720
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396724
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396726
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396728
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 396729
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396730
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396734
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396736
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396738
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396739
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396743
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396747
		, "size": 5
	}, {
		"instruction": "load.c32 197"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396752
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396757
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396762
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396767
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396772
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396777
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396782
		, "size": 4
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396786
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396790
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396791
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396793
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396795
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396796
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396797
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396799
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396803
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396805
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396809
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396811
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396813
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396814
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396818
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396822
		, "size": 5
	}, {
		"instruction": "load.c32 204"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396827
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396832
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396837
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396842
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396847
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396852
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396857
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396861
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396865
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396866
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396868
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396870
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396871
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396872
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396874
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396878
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396880
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396882
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396886
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396888
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396890
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 396891
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396892
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396896
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396897
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396901
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(33)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396903
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396905
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396906
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 396910
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396914
		, "size": 5
	}, {
		"instruction": "load.c32 211"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396919
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396924
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396929
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396934
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396939
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396944
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396949
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396953
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396957
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396959
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 396961
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396962
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 396963
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396964
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396966
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 396968
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 396969
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396970
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396972
		, "size": 4
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396976
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 396978
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396982
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396984
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396986
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 396987
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396991
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396995
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396997
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 396999
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 397000
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397004
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397006
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397010
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397012
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397013
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397015
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 397017
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397018
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(32, 29)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 397019
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397022
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397026
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 224
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 224
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 224
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 224
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 224
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 224
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 224
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 224
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 226
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 226
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 226
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 226
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 226
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 226
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 226
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 226
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 228
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 228
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 228
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 228
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 228
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 228
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/lib/string.ci"
				, "line": 228
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 228
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 230
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 230
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 230
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 230
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 230
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 230
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/lib/string.ci"
				, "line": 230
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 230
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 232
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < (0) ? ('-') : 0, uint64(value < (0) ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 232
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 232
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 232
			, "value": "pos"
		}, {
			"": "value < (0) ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 232
			, "test": {
				"": "value < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 232
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 232
						, "value": "0"
					}]
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 232
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 232
				, "value": "0"
			}
		}, {
			"": "uint64(value < (0) ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 232
			, "args": [{
				"": "value < (0) ? -value : value"
				, "kind": "?:"
				, "type": "int64"
				, "file": "cmplStd/lib/string.ci"
				, "line": 232
				, "test": {
					"": "value < (0)"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 232
						, "value": "value"
					}
					, "right": {
						"": "(0)"
						, "kind": "()"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 232
						, "args": [{
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/string.ci"
							, "line": 232
							, "value": "0"
						}]
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/string.ci"
						, "line": 232
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/string.ci"
					, "line": 232
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 232
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < 0 ? ('-') : 0, uint64(value < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 234
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 234
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 234
			, "value": "pos"
		}, {
			"": "value < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 234
			, "test": {
				"": "value < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "value": "value"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "value": "0"
			}
		}, {
			"": "uint64(value < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 234
			, "args": [{
				"": "value < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "test": {
					"": "value < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 234
						, "value": "value"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 234
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 234
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 234
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 234
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 236
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 236
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 236
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 236
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 236
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 236
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/string.ci"
						, "line": 236
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 236
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 236
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 236
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int16"
				, "file": "cmplStd/lib/string.ci"
				, "line": 236
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 236
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int16"
							, "file": "cmplStd/lib/string.ci"
							, "line": 236
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 236
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int16"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/string.ci"
						, "line": 236
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int16"
					, "file": "cmplStd/lib/string.ci"
					, "line": 236
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 236
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 238
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 238
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 238
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 238
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 238
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/string.ci"
				, "line": 238
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/string.ci"
						, "line": 238
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 238
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 238
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 238
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int8"
				, "file": "cmplStd/lib/string.ci"
				, "line": 238
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 238
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int8"
							, "file": "cmplStd/lib/string.ci"
							, "line": 238
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 238
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int8"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/string.ci"
						, "line": 238
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int8"
					, "file": "cmplStd/lib/string.ci"
					, "line": 238
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 238
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 241
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 236
	, "offs": 397032
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 241
		, "stmt": [{
			"": "formatInt"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 242
			, "value": "formatInt"
		}, {
			"": "formatDec"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 248
			, "value": "formatDec"
		}, {
			"": "sign"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/string.ci"
			, "line": 255
			, "value": "sign"
		}, {
			"": "fract"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 256
			, "value": "fract"
		}, {
			"": "pos := append(output, pos, sign, uint64(int64(value)), formatInt);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 257
		}, {
			"": "pos := append(output, pos, \".\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 259
		}, {
			"": "fract := fract * float64.pow(10, format.precision);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 260
		}, {
			"": "pos := append(output, pos, 0, uint64(int64(fract)), formatDec);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 261
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 262
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 262
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397032
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397036
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 397038
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397039
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397043
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397044
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397045
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397047
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397049
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 397053
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397054
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397058
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397059
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397061
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 397065
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397066
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397068
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 397072
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 397073
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397074
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397076
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397080
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397081
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397085
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397086
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397087
		, "size": 2
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397089
		, "size": 5
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397094
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397098
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397099
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397101
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 397105
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397106
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(10)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397108
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397110
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397111
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397112
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397116
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397121
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397125
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397126
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397127
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397129
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397131
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397132
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397133
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397137
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 397139
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397140
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397144
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397146
		, "size": 2
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397148
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397152
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397157
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397158
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397162
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397163
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397165
		, "size": 2
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397167
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 397171
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(18)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397172
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 397174
		, "size": 1
	}, {
		"instruction": "load.sp(+56)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397175
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397179
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397184
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397185
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397189
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397191
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397192
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397194
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397196
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397201
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397206
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397207
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397211
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397213
		, "size": 9
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397222
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397224
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 397228
		, "size": 1
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 397229
		, "size": 1
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 397230
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397234
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397235
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397236
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397238
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397240
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397241
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 397243
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397244
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397248
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397253
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397254
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397258
		, "size": 2
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 397260
		, "size": 3
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397263
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397267
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 266
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, float64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 266
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/string.ci"
			, "line": 266
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/string.ci"
			, "line": 266
			, "value": "pos"
		}, {
			"": "float64(value)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/string.ci"
			, "line": 266
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/string.ci"
				, "line": 266
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 266
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/string.ci"
	, "line": 269
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/string.ci"
		, "line": 269
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 397288
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/string.ci"
		, "line": 269
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/string.ci"
			, "line": 270
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/string.ci"
			, "line": 271
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/string.ci"
					, "line": 271
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "cmplStd/lib/string.ci"
						, "line": 271
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 271
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/string.ci"
						, "line": 271
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/string.ci"
						, "line": 271
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397288
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397290
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397291
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397293
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397295
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397297
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397298
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397299
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397303
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397308
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397312
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397313
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397315
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397316
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397317
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397321
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 397323
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397324
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397328
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 397330
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397331
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397336
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397341
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397342
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397346
		, "size": 2
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397348
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397350
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "cmplStd/test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 397352
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 397360
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 397368
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 397376
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 397384
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `emitA + emitB`"
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 13
	, "size": 4
	, "offs": 397392
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `10 / 5`"
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 16
	, "size": 4
	, "offs": 397400
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `float32.sin(3.14f / 2)`"
	, "ast": {
		"": "emit(float32(3.140000), float32(2), div.f32, float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "float32(3.140000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "3.140000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "3.140000"
			}]
		}, {
			"": "float32(2)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "2"
			}]
		}, {
			"": "div.f32"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "div"
			}
			, "right": {
				"": "f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "f32"
			}
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "function"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 32 bit floating point number as an 32 bit integer"
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 19
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 19
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 64 bit floating point number as an 64 bit integer"
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 23
	, "size": 4
	, "offs": 397408
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 23
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 23
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 24
	, "size": 8
	, "offs": 397416
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 24
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 24
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 25
	, "size": 4
	, "offs": 397424
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 25
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 25
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 26
	, "size": 8
	, "offs": 397432
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 26
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 26
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 29
	, "size": 8
	, "offs": 397440
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 397448
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 397456
	, "static": true
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 397464
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 397472
	, "static": true
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 397480
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 397488
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 397496
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 397504
	, "static": true
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 397512
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 397520
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 397528
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 397536
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 397544
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 397552
	, "static": true
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 397560
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 397568
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 397576
	, "static": true
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 397584
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 397592
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 397600
	, "static": true
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 397608
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 397616
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 397624
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 397632
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 397640
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 397648
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 397656
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 397664
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 397672
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 397680
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 397688
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 397696
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 397704
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 397712
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 397720
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 397728
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 397736
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 397744
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 397752
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 397760
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 397768
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 397776
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 397784
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 397792
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 397800
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 397808
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 397816
	, "static": true
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 397824
	, "static": true
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 397832
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 397840
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 397848
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 264384
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 264704
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 397856
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 397864
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 397872
	, "static": true
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 397880
	, "static": true
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 397888
	, "static": true
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 397896
	, "static": true
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R8G8B8 color format"
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R5G6B5 color format"
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 397904
	, "static": true
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 397912
	, "static": true
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 397920
	, "static": true
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 397928
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 397936
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 397944
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 397952
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 397960
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 397968
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 397976
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 397984
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 397992
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 398000
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 398008
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 398016
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 398024
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 398032
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 398040
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 398048
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 398056
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 398064
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 398072
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 398080
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 398088
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 398096
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 398104
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 398112
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 398120
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 398128
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 398136
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 398144
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 398152
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 398160
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 398168
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 398176
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 398184
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 398192
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 398200
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 398208
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 398216
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 398224
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 398232
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 398240
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 398248
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 398256
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 398264
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 398272
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 398280
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 398288
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 398296
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398296
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 398304
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 16
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 17
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398304
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398308
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 398312
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398313
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 398318
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398319
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398323
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398327
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 398328
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 21
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398328
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 398333
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 398334
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398335
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398339
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 398344
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 25
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 30
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 35
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398344
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398348
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 398353
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398355
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 398360
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398362
		, "size": 5
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 398367
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398369
		, "size": 5
	}, {
		"instruction": "load.c32 35"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398374
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398379
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398384
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398389
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398394
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398399
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398403
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398407
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398411
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 398416
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 39
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 40
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 398416
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 398421
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 398423
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398424
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398428
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 398432
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 44
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 398432
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398433
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 398440
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 398448
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 398456
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 398464
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 398472
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 398480
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 53
	, "size": 4
	, "offs": 398488
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "abortExecution"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 7
	, "size": 8
	, "offs": 398496
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 8
	, "size": 4
	, "offs": 398504
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 9
	, "size": 4
	, "offs": 398512
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 10
	, "size": 8
	, "offs": 398520
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 12
	, "size": 8
	, "offs": 398528
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 13
	, "size": 4
	, "offs": 398536
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 14
	, "size": 4
	, "offs": 398544
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 16
	, "size": 4
	, "offs": 398552
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 17
	, "size": 4
	, "offs": 398560
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 18
	, "size": 8
	, "offs": 398568
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 19
	, "size": 4
	, "offs": 398576
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 20
	, "size": 4
	, "offs": 398584
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 21
	, "size": 4
	, "offs": 398592
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 23
	, "size": 4
	, "offs": 398600
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 24
	, "size": 8
	, "offs": 398608
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 25
	, "size": 4
	, "offs": 398616
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 27
	, "size": 8
	, "offs": 398624
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 28
	, "size": 8
	, "offs": 398632
	, "static": true
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 29
	, "size": 4
	, "offs": 398640
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 30
	, "size": 4
	, "offs": 398648
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 31
	, "size": 8
	, "offs": 398656
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 32
	, "size": 4
	, "offs": 398664
	, "static": true
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 35
	, "size": 4
	, "offs": 398672
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 36
	, "size": 4
	, "offs": 398680
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 37
	, "size": 4
	, "offs": 398688
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 38
	, "size": 4
	, "offs": 398696
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 39
	, "size": 4
	, "offs": 398704
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 40
	, "size": 4
	, "offs": 398712
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 41
	, "size": 4
	, "offs": 398720
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 42
	, "size": 4
	, "offs": 398728
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 43
	, "size": 4
	, "offs": 398736
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 44
	, "size": 4
	, "offs": 398744
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 45
	, "size": 4
	, "offs": 398752
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 46
	, "size": 4
	, "offs": 398760
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 47
	, "size": 4
	, "offs": 398768
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 48
	, "size": 4
	, "offs": 398776
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 49
	, "size": 4
	, "offs": 398784
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 50
	, "size": 4
	, "offs": 398792
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 51
	, "size": 4
	, "offs": 398800
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 52
	, "size": 4
	, "offs": 398808
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 55
	, "size": 8
	, "offs": 398816
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 56
	, "size": 8
	, "offs": 398824
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 57
	, "size": 8
	, "offs": 398832
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 58
	, "size": 8
	, "offs": 398840
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 59
	, "size": 8
	, "offs": 398848
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 60
	, "size": 8
	, "offs": 398856
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 61
	, "size": 8
	, "offs": 398864
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 62
	, "size": 8
	, "offs": 398872
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 63
	, "size": 8
	, "offs": 398880
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 64
	, "size": 8
	, "offs": 398888
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 65
	, "size": 8
	, "offs": 398896
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 66
	, "size": 8
	, "offs": 398904
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 67
	, "size": 8
	, "offs": 398912
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 68
	, "size": 8
	, "offs": 398920
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 69
	, "size": 8
	, "offs": 398928
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 70
	, "size": 8
	, "offs": 398936
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 71
	, "size": 8
	, "offs": 398944
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 72
	, "size": 8
	, "offs": 398952
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 75
	, "size": 4
	, "offs": 398960
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 76
	, "size": 4
	, "offs": 398968
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 77
	, "size": 4
	, "offs": 398976
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 78
	, "size": 4
	, "offs": 398984
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 79
	, "size": 4
	, "offs": 398992
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 80
	, "size": 4
	, "offs": 399000
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 81
	, "size": 4
	, "offs": 399008
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 82
	, "size": 4
	, "offs": 399016
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 83
	, "size": 4
	, "offs": 399024
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 84
	, "size": 4
	, "offs": 399032
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 85
	, "size": 4
	, "offs": 399040
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 86
	, "size": 4
	, "offs": 399048
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 87
	, "size": 4
	, "offs": 399056
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 88
	, "size": 4
	, "offs": 399064
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 89
	, "size": 4
	, "offs": 399072
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 90
	, "size": 4
	, "offs": 399080
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 91
	, "size": 4
	, "offs": 399088
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 92
	, "size": 4
	, "offs": 399096
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 95
	, "size": 4
	, "offs": 399104
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 96
	, "size": 8
	, "offs": 399112
	, "static": true
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 97
	, "size": 4
	, "offs": 399120
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 99
	, "size": 4
	, "offs": 399128
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 105
	, "size": 8
	, "offs": 399136
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 108
	, "size": 4
	, "offs": 399144
	, "static": true
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "variable"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "variable"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 3
	, "size": 4
	, "offs": 399152
	, "static": true
	, "const": false
	, "doc": "Uninitialized variables will be initialized with default type initializer: 0"
}, {
	"": "constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 7
	, "size": 4
	, "offs": 399160
	, "static": true
	, "const": true
	, "doc": "Constant variables must be explicitly initialized"
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "ComplexVal"
	, "kind": "typename"
	, "cast": "val"
	, "name": "ComplexVal"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 9
	, "size": 16
	, "offs": 301072
	, "static": true
	, "const": true
}, {
	"": "ComplexVal.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "ComplexVal.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 11
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 11
		, "value": "0"
	}
}, {
	"": "ComplexObj"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "ComplexObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 13
	, "size": 20
	, "offs": 301552
	, "static": true
	, "const": true
}, {
	"": "ComplexObj.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 14
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "ComplexObj.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 15
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 15
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "valInitImplicit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "valInitImplicit"
	, "type": "ComplexVal"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 24
	, "size": 16
	, "offs": 399168
	, "static": true
	, "const": false
	, "doc": "Value types must be explicitly initialized\nthe initializer will be extended with implicit field initializers\n{re: 8} => {\nvalInitImplicit.re := 8;\nvalInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexVal"
		, "stmt": [{
			"": "valInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 24
		}, {
			"": "valInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitImplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitImplicit"
	, "type": "ComplexObj"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 33
	, "size": 4
	, "offs": 399184
	, "static": true
	, "const": false
	, "doc": "Reference types must be explicitly initialized\nthe initializer will be extended with instance creation\n{re: 8} => {\nobjInitImplicit := Object.create(ComplexObj);\nobjInitImplicit.re := 8;\nobjInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexObj"
		, "stmt": [{
			"": "objInitImplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitExplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitExplicit"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 41
	, "size": 4
	, "offs": 399192
	, "static": true
	, "const": false
	, "doc": "variable type can be base type of the explicit initializer type\nComplexObj {re: 8} => {\nobjInitExplicit := Object.create(ComplexObj);\nobjInitExplicit.re := 8;\nobjInitExplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "object"
		, "stmt": [{
			"": "objInitExplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 399200
	, "static": true
	, "const": false
	, "doc": "function with empty implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399200
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 399208
	, "static": true
	, "const": false
	, "doc": "function with implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 8
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 8
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399208
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399210
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 399212
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399213
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399215
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 12
	, "size": 4
	, "offs": 399216
	, "static": true
	, "const": false
	, "doc": "function invocation"
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 399224
	, "static": true
	, "const": false
	, "doc": "initialized function reference"
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 18
	, "size": 4
	, "offs": 399232
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 399240
	, "static": true
	, "const": false
	, "doc": "forward function reference (must be implemented somewhere)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 24
	, "size": 4
	, "offs": 399248
	, "static": true
	, "const": false
	, "doc": "forward function invocation"
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 399256
	, "static": true
	, "const": false
	, "doc": "initialized function reference (copy address)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 30
	, "size": 4
	, "offs": 399264
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 399272
	, "static": true
	, "const": false
	, "doc": "forward function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 34
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 34
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399272
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399274
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 399276
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399277
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399279
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 399280
	, "static": true
	, "const": false
	, "doc": "recursive function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 39
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 39
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 40
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 40
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 42
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 42
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399280
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399282
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 399287
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 399288
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399292
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399295
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399296
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399297
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399299
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399303
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 399308
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399309
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399313
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399314
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399316
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399320
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 399325
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399326
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 399330
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399331
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399333
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 46
	, "size": 4
	, "offs": 399336
	, "static": true
	, "const": false
	, "doc": "recursive function invocation"
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 46
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 46
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 399344
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 399352
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 399360
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 399368
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 399376
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 399384
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 399392
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 399400
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 399408
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 399416
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 399424
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 399432
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 399440
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 399448
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 399456
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 399464
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 399472
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 399480
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 311232
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 311552
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 399488
	, "static": true
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 399496
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 399504
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 399512
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 33
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "size"
		}
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 399520
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 399528
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 399536
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 399544
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 399552
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 399560
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 40
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "size"
		}
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 399568
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 399576
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 399584
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 399592
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 399600
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 399608
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 399616
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 399624
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 2
	, "size": 32
	, "offs": 315648
	, "static": true
	, "const": true
	, "doc": "test and documentation of member initializations"
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 4
	, "size": 8
	, "offs": 315808
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 10
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 13
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 16
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 16
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 19
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 19
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 22
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 25
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 34
	, "size": 4
	, "offs": 399632
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 37
	, "size": 4
	, "offs": 399640
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 37
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 40
	, "size": 4
	, "offs": 399648
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 40
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 43
	, "size": 8
	, "offs": 399656
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRec.constant := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 43
		}, {
			"": "globalRec.member := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 46
	, "size": 8
	, "offs": 399664
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 49
	, "size": 8
	, "offs": 399672
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 52
	, "size": 32
	, "offs": 399680
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 53
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 59
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 64
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 65
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 4
	, "size": 16
	, "offs": 319512
	, "static": true
	, "const": true
	, "doc": "static, virtual and abstract methods"
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 399712
	, "static": true
	, "const": false
	, "doc": "static method is like a `global function` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 11
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399712
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399717
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399722
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399727
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399732
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399737
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399742
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399746
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399750
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 399752
	, "static": true
	, "const": false
	, "doc": "static forward method is like a `forward function reference` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "abstract methods must be overridden when inheriting or instantiating\nthe compiler sees it as a `constant function reference` without `default type initializer`\n@see lang/member.ci"
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "virtual method (use to delegate)\nthe compiler sees it as a `constant function reference` with `default field initializer`\n@see lang/member.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 399760
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399760
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399765
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399770
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399775
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399780
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399785
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399790
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399794
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399798
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 399800
	, "static": true
	, "const": false
	, "doc": "static forward method implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399800
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399805
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399810
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399815
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399820
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399825
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399830
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399834
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399838
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 399840
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 58
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399840
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399845
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399850
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399855
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399860
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399865
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399870
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399874
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399878
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 62
	, "size": 16
	, "offs": 399880
	, "static": true
	, "const": false
	, "doc": "create an instance of the type "
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 64
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod;"
			, "kind": ";"
			, "type": "void"
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod;"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 399896
	, "static": true
	, "const": false
	, "doc": "extension function is defined, it has the highest priority."
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 85
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 86
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 86
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 87
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399896
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399901
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399906
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399911
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399912
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399917
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399922
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399927
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399931
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399935
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 399940
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 399941
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 399945
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399947
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399949
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399951
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 399956
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399957
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399961
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 399968
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 91
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 92
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 92
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 93
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399968
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399973
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399978
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399983
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399984
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399989
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399994
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399999
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400003
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400007
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400012
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400013
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 400017
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400019
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400021
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400023
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400025
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400026
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400030
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 325848
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 326488
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 327128
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 327608
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 400032
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 400040
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 400048
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 400056
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 400064
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 328856
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 329976
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 331096
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 332216
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 333336
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 334456
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 400072
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 400080
	, "static": true
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 400088
	, "static": true
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 400096
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 400104
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 400112
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 400120
	, "static": true
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 400128
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 400136
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 400144
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 400152
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 400160
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 400168
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 400176
	, "static": true
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 400184
	, "static": true
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 400192
	, "static": true
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 400200
	, "static": true
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 400208
	, "static": true
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 400216
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 400224
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 400232
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 400240
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 400248
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 400256
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 400264
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 400272
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 400280
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 400288
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 400296
	, "static": true
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 400304
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 400312
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 400320
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 400328
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 400336
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 400344
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 400352
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 400360
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 400368
	, "static": true
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 400376
	, "static": true
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 400384
	, "static": true
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 400392
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 400400
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 400408
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 400416
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 400424
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 400432
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 400440
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 400448
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 400456
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 400464
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 400472
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 400480
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 400488
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 400496
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 400504
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 400512
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 400520
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 400528
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 400536
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 400544
	, "static": true
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 400552
	, "static": true
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 400560
	, "static": true
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 400568
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 400576
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 400584
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 400592
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 400600
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 400608
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 400616
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 400624
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 400632
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 400640
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 400648
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 400656
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 400664
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 400672
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 400680
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 400688
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 400696
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 400704
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 400712
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 400720
	, "static": true
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 400728
	, "static": true
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 400736
	, "static": true
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 400744
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 400752
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 400760
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 400768
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 400776
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 400784
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 400792
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 400800
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 400808
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 400816
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 400824
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 400832
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 400840
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 400848
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 400856
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 400864
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 400872
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 400880
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 400888
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 400896
	, "static": true
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 400904
	, "static": true
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 400912
	, "static": true
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 400920
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 400928
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 400936
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 400944
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 400952
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 400960
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 400968
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 400976
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 400984
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 400992
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 401000
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 401008
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 401016
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 401024
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 401032
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 401040
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 401048
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 401056
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 401064
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 401072
	, "static": true
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 401080
	, "static": true
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 401088
	, "static": true
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 401096
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 401104
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 401112
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 401120
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 401128
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 401136
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 401144
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 401152
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 401160
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 401168
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 401176
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 401184
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 401192
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 401200
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 401208
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 401216
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 401224
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 401232
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 401240
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 401248
	, "static": true
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 401256
	, "static": true
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 401264
	, "static": true
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 401272
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 401280
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 401288
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 401296
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 401304
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 401312
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 401320
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 401328
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 401336
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 401344
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 401352
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 401360
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 401368
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 401376
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 401384
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 401392
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 401400
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 401408
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 401416
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 401424
	, "static": true
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 401432
	, "static": true
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 401440
	, "static": true
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 401448
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 401456
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 401464
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 401472
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 401480
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 401488
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 401496
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 401504
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 401512
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 401520
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 401528
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 401536
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 401544
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 401552
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 401560
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 401568
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 401576
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 401584
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 401592
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 401600
	, "static": true
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 401608
	, "static": true
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 401616
	, "static": true
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 401624
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 401632
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 401640
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 401648
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 401656
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 401664
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 401672
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 401680
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 401688
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 401696
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 401704
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 401712
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 401720
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 401728
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 401736
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 401744
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 401752
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 401760
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 401768
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 401776
	, "static": true
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 401784
	, "static": true
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 401792
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 401800
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 401808
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 401816
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 401824
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 401832
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 401840
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 401848
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 401856
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 401864
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 401872
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 401880
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 401888
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 401896
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 401904
	, "static": true
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 401912
	, "static": true
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 401920
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 401928
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 401936
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 401944
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 401952
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 401960
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 401968
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 401976
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 401984
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 401992
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 402000
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 402008
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 402016
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 402024
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 402032
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 402040
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.if.ci"
	, "line": 26
	, "size": 4
	, "offs": 402048
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/stmt.if.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.for.ci"
	, "line": 12
	, "size": 4
	, "offs": 402056
	, "static": true
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 402064
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 402072
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 402080
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 402088
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 402096
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 402104
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 402112
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 402120
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 402128
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 402136
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 402144
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 402152
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 402160
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 402168
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 402176
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 402184
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 402192
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 402200
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 402208
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 402216
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 402224
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 402232
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 402240
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 402248
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 402256
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 402264
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 402272
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 402280
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 402288
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 38
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 39
	, "size": 8
	, "offs": 402296
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 402304
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 402312
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 402320
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 43
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 44
	, "size": 8
	, "offs": 402328
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 44
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 44
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 402336
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 402344
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 402352
	, "static": true
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 48
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 49
	, "size": 8
	, "offs": 402360
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 49
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 49
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 402368
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 402376
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 402384
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 402392
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 402400
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 402408
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 402416
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 57
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 57
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 58
	, "size": 8
	, "offs": 402424
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 58
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 58
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 402432
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 402440
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 402448
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 402456
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 63
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 63
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 64
	, "size": 8
	, "offs": 402464
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 64
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 64
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 67
	, "size": 1
	, "offs": 402472
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 67
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 68
	, "size": 1
	, "offs": 402480
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 68
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 70
	, "size": 8
	, "offs": 402488
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 71
	, "size": 8
	, "offs": 402496
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 402504
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 402512
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 75
	, "size": 8
	, "offs": 402520
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 402528
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 402536
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 402544
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 80
	, "size": 8
	, "offs": 402552
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 402560
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 402568
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 84
	, "size": 4
	, "offs": 402576
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 85
	, "size": 4
	, "offs": 402584
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 402592
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 402600
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 89
	, "size": 4
	, "offs": 402608
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 402616
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 402624
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 402632
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 94
	, "size": 4
	, "offs": 402640
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 402648
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 402656
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 13382
	, "offs": 402660
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/stdlib.ci"
			, "line": 8
			, "stmt": [{
				"": "byte"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 8
				, "value": "byte"
			}, {
				"": "float"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 9
				, "value": "float"
			}, {
				"": "double"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 10
				, "value": "double"
			}, {
				"": "signed(value: uint8): int8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 13
				, "value": "signed(value: uint8): int8"
			}, {
				"": "signed(value: uint16): int16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 16
				, "value": "signed(value: uint16): int16"
			}, {
				"": "signed(value: uint32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 19
				, "value": "signed(value: uint32): int32"
			}, {
				"": "signed(value: uint64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 22
				, "value": "signed(value: uint64): int64"
			}, {
				"": "unsigned(value: int8): uint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 25
				, "value": "unsigned(value: int8): uint8"
			}, {
				"": "unsigned(value: int16): uint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 28
				, "value": "unsigned(value: int16): uint16"
			}, {
				"": "unsigned(value: int32): uint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 31
				, "value": "unsigned(value: int32): uint32"
			}, {
				"": "unsigned(value: int64): uint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 34
				, "value": "unsigned(value: int64): uint64"
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/stdlib.ci"
				, "line": 39
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "cmplStd/stdlib.ci"
							, "line": 39
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 4
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 9
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 11
						, "value": "debug(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 14
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 16
						, "value": "trace(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 19
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 21
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 24
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 26
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 29
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 31
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 34
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 36
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 38
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 41
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 43
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 45
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 48
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 61
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 74
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math.ci"
				, "line": 2
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 2
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 24
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 31
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 76
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 117
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 135
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 2
				, "value": "vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 29
				, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 32
				, "value": "vec4f(x: float32, y: float32): vec4f"
			}, {
				"": "vec4f(xyz: vec4f, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
			}, {
				"": "vec4f(val: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 38
				, "value": "vec4f(val: float32): vec4f"
			}, {
				"": "neg(rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "value": "neg(rhs: vec4f): vec4f"
			}, {
				"": "add(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "div(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "add(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "add(a: float32, b: vec4f): vec4f"
			}, {
				"": "add(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "add(a: vec4f, b: float32): vec4f"
			}, {
				"": "sub(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "sub(a: float32, b: vec4f): vec4f"
			}, {
				"": "sub(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "sub(a: vec4f, b: float32): vec4f"
			}, {
				"": "mul(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "mul(a: float32, b: vec4f): vec4f"
			}, {
				"": "mul(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "mul(a: vec4f, b: float32): vec4f"
			}, {
				"": "div(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "div(a: float32, b: vec4f): vec4f"
			}, {
				"": "div(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "div(a: vec4f, b: float32): vec4f"
			}, {
				"": "min(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "value": "min(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "max(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "value": "max(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
			}, {
				"": "dp3(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dph(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp4(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "cross(a: vec4f, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "value": "cross(a: vec4f, b: vec4f): vec4f"
			}, {
				"": "length(v: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "length(v: vec4f): float32"
			}, {
				"": "normalize(v: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "value": "normalize(v: vec4f): vec4f"
			}, {
				"": "eval(v: vec4f, x: float32): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "value": "eval(v: vec4f, x: float32): float32"
			}, {
				"": "mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 2
				, "value": "mat4f"
			}, {
				"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 62
				, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
			}, {
				"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 75
				, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
			}, {
				"": "dp3(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dph(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dp4(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "transpose(mat: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 87
				, "value": "transpose(mat: mat4f): mat4f"
			}, {
				"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 97
				, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
			}, {
				"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 111
				, "value": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
			}, {
				"": "rotation(direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "rotation(direction: vec4f, angle: float32): mat4f"
			}, {
				"": "translation(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 163
				, "value": "translation(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "scale(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 173
				, "value": "scale(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 2
				, "value": "vec2d"
			}, {
				"": "vec2d(x: float64, y: float64): vec2d"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 14
				, "value": "vec2d(x: float64, y: float64): vec2d"
			}, {
				"": "add(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "value": "add(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "sub(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "value": "sub(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "mul(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "value": "mul(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "div(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "value": "div(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "min(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "value": "min(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "max(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "value": "max(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "ceq(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "value": "ceq(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "dot(a: vec2d, b: vec2d): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "value": "dot(a: vec2d, b: vec2d): float64"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 4
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 15
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 25
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 36
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 46
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 61
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 73
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 88
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "toHex(value: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 93
				, "value": "toHex(value: int32): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 96
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 98
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 100
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "equals(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 102
				, "value": "equals(str: char[*], with: char[*]): bool"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 105
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 119
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 134
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 151
				, "value": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 224
				, "value": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 226
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 228
				, "value": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 230
				, "value": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 232
				, "value": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 234
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 236
				, "value": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 238
				, "value": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 241
				, "value": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/string.ci"
				, "line": 266
				, "value": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/string.ci"
				, "line": 269
				, "value": "append(output: char[], pos: int32, value: int32): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 23
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 24
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 25
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 26
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 20
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 24
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 38
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 43
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 53
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/init.reference.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/init.reference.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "variable"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 3
				, "value": "variable"
			}, {
				"": "constant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 7
				, "value": "constant"
			}, {
				"": "ComplexVal"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 9
				, "value": "ComplexVal"
			}, {
				"": "ComplexObj"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 13
				, "value": "ComplexObj"
			}, {
				"": "valInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexVal"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 24
				, "value": "valInitImplicit"
			}, {
				"": "objInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexObj"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 33
				, "value": "objInitImplicit"
			}, {
				"": "objInitExplicit"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 41
				, "value": "objInitExplicit"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 4
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 7
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 12
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 15
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 18
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 21
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 24
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 27
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 30
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 33
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 38
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 46
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 2
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 52
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 4
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 57
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 62
				, "value": "recordMethodTest"
			}, {
				"": "recordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 78
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 79
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 84
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 90
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 97
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 98
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 101
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 102
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 103
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 38
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 39
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 40
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 41
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 43
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 44
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 45
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 46
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 48
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 49
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 50
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 51
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 52
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 53
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 54
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 55
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 63
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 64
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 70
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 71
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 75
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 80
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 85
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 89
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 94
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402660
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402665
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402670
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402674
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402679
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402684
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402688
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402689
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 402694
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402695
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402696
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402700
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402701
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 402706
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402707
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402708
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402712
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402713
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 402717
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402718
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402722
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402727
		, "size": 4
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402731
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402736
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402740
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402744
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 402748
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402749
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402753
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402758
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 402763
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402764
		, "size": 4
	}, {
		"instruction": "load.f32 3.140000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 402768
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 402773
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 402778
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402779
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402783
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 402787
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402792
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 402796
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 402801
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402802
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402806
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 402815
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402816
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402820
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402829
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402833
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402838
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 402843
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402847
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402852
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402856
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402861
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402865
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402870
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402874
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402879
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402883
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402884
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402888
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402889
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402893
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402894
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402898
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402903
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402907
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402911
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402915
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402919
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402923
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402927
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402931
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402936
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402940
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402944
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402948
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 402952
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402953
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402957
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402961
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 402965
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402969
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 402973
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402974
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 402978
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402982
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402987
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402989
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402993
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 402995
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402999
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403004
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403006
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403010
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403014
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403016
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403020
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403022
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403026
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403030
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403032
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403036
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403040
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403044
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403046
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403050
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403052
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403056
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403060
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403064
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403066
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403070
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403074
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403079
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403084
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403086
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403088
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403089
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403093
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403095
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403099
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403101
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403103
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403107
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403111
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403115
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403119
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403121
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403123
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403124
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403128
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403130
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403134
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403136
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403138
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403142
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403146
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403150
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403154
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403158
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403162
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403164
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403166
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403167
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403171
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403173
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403177
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403179
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403181
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403185
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403189
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403193
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403198
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403203
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403205
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 403207
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403208
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403212
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403214
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403218
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403220
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403222
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403226
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403230
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403234
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403238
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403240
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 403242
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403243
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403247
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403249
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403253
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403255
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403257
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403261
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403265
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403269
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403273
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403277
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403281
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403283
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 403285
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403286
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403290
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403292
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403296
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403298
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403300
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403304
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403308
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403312
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403317
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403322
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403327
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403331
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403332
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403333
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403337
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403342
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403346
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403350
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403354
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403358
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403362
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403366
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403370
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403374
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403375
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403376
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403377
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403381
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403385
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403389
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403390
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403394
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403395
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403399
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403400
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403404
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403408
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403412
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403416
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403420
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403424
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403428
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403432
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403436
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403437
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403438
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403439
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403443
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403447
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403451
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403455
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403459
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403463
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403464
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403468
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403472
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403473
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403477
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403481
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403482
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403486
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403490
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403495
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403497
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403501
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403503
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403507
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403512
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403514
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403518
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403520
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403524
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403529
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403531
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403535
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403537
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403541
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403546
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403548
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403550
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403552
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403556
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403561
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403563
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403567
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403569
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403573
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403578
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403580
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403582
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403586
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403588
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403592
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403597
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403599
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403601
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403605
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403607
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403611
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403616
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403618
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403622
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403626
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403628
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403632
		, "size": 2
	}, {
		"instruction": "jmp +44"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403634
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403638
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403642
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403644
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403648
		, "size": 2
	}, {
		"instruction": "jmp +26"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403650
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403654
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403658
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403660
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403664
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403666
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403670
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403674
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403676
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403678
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403680
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403684
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403688
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403690
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403694
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403696
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403700
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403704
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403706
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403708
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403712
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403714
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403718
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403722
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403724
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403726
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403730
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403732
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403736
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403740
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403742
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403746
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403750
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403754
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403756
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403760
		, "size": 2
	}, {
		"instruction": "jmp +56"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403762
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403766
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403770
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403774
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403776
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403780
		, "size": 2
	}, {
		"instruction": "jmp +34"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403782
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403786
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403790
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403794
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403796
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403800
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403802
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403806
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403810
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403814
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403816
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403818
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403820
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403824
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403828
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403832
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403836
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403838
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403842
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403844
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403848
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403852
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403856
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403858
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403860
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403864
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403866
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403870
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403874
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403878
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403880
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403882
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403886
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403888
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 403892
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403896
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403900
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403902
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403906
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403910
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403915
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403920
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403925
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403930
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403932
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403934
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403935
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403939
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403941
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403945
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403947
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403949
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403953
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403955
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403957
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403958
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403962
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403964
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403968
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403970
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403972
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403976
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403978
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 403980
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403981
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403985
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403987
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403991
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403993
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403995
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 403999
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404003
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404008
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404013
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404015
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404017
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404018
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404022
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404024
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404028
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404030
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404032
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404036
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404041
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404043
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404045
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404046
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404050
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404052
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404056
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404058
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404060
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404064
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404069
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404071
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404073
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404074
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404078
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404080
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404084
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404086
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404088
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404092
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404096
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404100
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404104
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404108
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404112
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404114
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404116
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404117
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404121
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404123
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404127
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404129
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404131
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404135
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404137
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404139
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404140
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404144
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404146
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404150
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404152
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404154
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404158
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404160
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404162
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404163
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404167
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404169
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404173
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404175
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404177
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404181
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404185
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404189
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404193
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404195
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404197
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404198
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404202
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404204
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404208
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404210
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404212
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404216
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404220
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404222
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404224
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404225
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404229
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404231
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404235
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404237
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404239
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404243
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404247
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404249
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404251
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404252
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404256
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404258
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404262
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404264
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404266
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404270
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404274
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404278
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404282
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404286
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404290
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404294
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404298
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404302
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404306
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404308
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404310
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404311
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404315
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404317
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404321
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404323
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404325
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404329
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404331
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404333
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404334
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404338
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404340
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404344
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404346
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404348
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404352
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404354
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404356
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404357
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404361
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404363
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404367
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404369
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404371
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404375
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404379
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404383
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404387
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404391
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404395
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404399
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404401
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404403
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404404
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404408
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404410
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404414
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404416
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404418
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404422
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404426
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404430
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404432
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404434
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404435
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404439
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404441
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404445
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404447
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404449
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404453
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404457
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404461
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404463
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404465
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404466
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404470
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404472
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404476
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404478
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404480
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404484
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404488
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404492
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404497
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404502
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404507
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404512
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404514
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404516
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404517
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404521
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404523
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404527
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404529
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404531
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404535
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404537
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404539
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404540
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404544
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404546
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404550
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404552
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404554
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404558
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404560
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404562
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404563
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404567
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404569
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404573
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404575
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404577
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404581
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404585
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404590
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404595
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404597
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404599
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404600
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404604
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404606
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404610
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404612
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404614
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404618
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404623
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404625
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404627
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404628
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404632
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404634
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404638
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404640
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404642
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404646
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404651
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404653
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404655
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404656
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404660
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404662
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404666
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404668
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404670
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404674
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404678
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404682
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404686
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404690
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404694
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404696
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404698
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404699
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404703
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404705
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404709
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404711
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404713
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404717
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404719
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404721
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404722
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404726
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404728
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404732
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404734
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404736
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404740
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404742
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404744
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404745
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404749
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404751
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404755
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404757
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404759
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404763
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404767
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404771
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404775
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404777
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404779
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404780
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404784
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404786
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404790
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404792
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404794
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404798
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404802
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404804
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404806
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404807
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404811
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404813
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404817
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404819
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404821
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404825
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404829
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404831
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404833
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404834
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404838
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404840
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404844
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404846
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404848
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404852
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404856
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404860
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404864
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404868
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404872
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404876
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404880
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404884
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404888
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404890
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404892
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404893
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404897
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404899
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404903
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404905
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404907
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404911
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404913
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404915
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404916
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404920
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404922
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404926
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404928
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404930
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404934
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404936
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404938
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404939
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404943
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404945
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404949
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404951
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404953
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404957
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 404961
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404965
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404969
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404973
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404977
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404981
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404983
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404985
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404986
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404990
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404992
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404996
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404998
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405000
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405004
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405008
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405012
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405014
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 405016
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405017
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405021
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405023
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405027
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405029
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405031
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405035
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405039
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405043
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405045
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 405047
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405048
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405052
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405054
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405058
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405060
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405062
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405066
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405070
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405074
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405079
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405083
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405088
		, "size": 4
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405092
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405097
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405101
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405106
		, "size": 4
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405110
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405115
		, "size": 4
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405119
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405128
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405132
		, "size": 4
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405136
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405145
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405146
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 405155
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405156
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405160
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405169
		, "size": 4
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405173
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405182
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405186
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 405190
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405191
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405195
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 405199
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405200
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405204
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405209
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405211
		, "size": 4
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405215
		, "size": 5
	}, {
		"instruction": "b32.shl 0x02"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405220
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405222
		, "size": 4
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405226
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405231
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405233
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405237
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405241
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405243
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 405248
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405249
		, "size": 4
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405253
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405255
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 405260
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 405261
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405262
		, "size": 4
	}, {
		"instruction": "b32.sar 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405266
		, "size": 2
	}, {
		"instruction": "b32.and 0x1f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405268
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 405270
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405271
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405275
		, "size": 4
	}, {
		"instruction": "b32.shl 0x10"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405279
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405281
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 405286
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405287
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405291
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405293
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 405298
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 405299
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405300
		, "size": 4
	}, {
		"instruction": "b32.and 0xff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 405304
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 405306
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405307
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405311
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405315
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405320
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405325
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405329
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405333
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405337
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405342
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405347
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405351
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405355
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405359
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405360
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405365
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405369
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405373
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405377
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405382
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405387
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405391
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405395
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405399
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405404
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405409
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405413
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405417
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405421
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405422
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405427
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405431
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405435
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405439
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405444
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405449
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405453
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405457
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405461
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405466
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405471
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405475
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405479
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405483
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405484
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405489
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405493
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405497
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405501
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405506
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405511
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405515
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405519
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405523
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405528
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405533
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405537
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405541
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405545
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405546
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405551
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405555
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405559
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405563
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 405572
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405573
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405577
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405581
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405585
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 405594
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405595
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405599
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405603
		, "size": 4
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405607
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 405616
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405617
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405621
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405625
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405629
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405633
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405634
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405638
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405639
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405643
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405647
		, "size": 9
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405656
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405660
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405664
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405668
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405672
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405673
		, "size": 9
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405682
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405686
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405690
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405694
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405698
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405699
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405703
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405707
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405711
		, "size": 9
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405720
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 405724
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405728
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405732
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 405737
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405738
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405742
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405746
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405750
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 405755
		, "size": 1
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405756
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405760
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405764
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405768
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 405773
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405774
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405778
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405782
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405786
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 405790
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405791
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 405795
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405796
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405800
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405804
		, "size": 5
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405809
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405813
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405817
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405821
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 405825
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405826
		, "size": 5
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405831
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405835
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405839
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405843
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 405847
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405848
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405852
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405856
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 405860
		, "size": 5
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405865
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405869
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405873
		, "size": 4
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405877
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405881
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405885
		, "size": 4
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405889
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405893
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405897
		, "size": 4
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405901
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405905
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405909
		, "size": 4
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405913
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405917
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405921
		, "size": 4
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405925
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405929
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405933
		, "size": 4
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405937
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405941
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405945
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405949
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405950
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405955
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405959
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405963
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405967
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405968
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405973
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405977
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 405981
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 405985
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405986
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405987
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405992
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 405996
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 405997
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406001
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 406005
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 406006
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 406007
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406012
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 406016
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406017
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406021
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 406026
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406031
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406035
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406039
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 406044
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406049
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406053
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406057
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 406062
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406067
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406071
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406075
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 406080
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406085
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406089
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 406093
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406102
		, "size": 4
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 406106
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406115
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406119
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406124
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406129
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406133
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406137
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406142
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406147
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406151
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406155
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406160
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406165
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406169
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406173
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406178
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406183
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406187
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406191
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406196
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406201
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406205
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406209
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406214
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406219
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406223
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406227
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406232
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 406237
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406241
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 406245
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406254
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406258
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406263
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406267
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406272
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406276
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406281
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406286
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406290
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 406294
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406295
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406299
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406303
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406307
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406311
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406315
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406320
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406324
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406329
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406333
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406338
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406343
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406347
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406352
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406356
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406361
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406365
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406370
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406374
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406379
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406383
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406388
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406393
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406397
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406402
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 406406
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406410
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 406414
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406418
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406422
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406426
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406430
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406434
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 406438
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406442
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 406446
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406450
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406454
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406459
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406463
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406468
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406472
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406477
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406481
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406486
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406490
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406495
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406499
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406504
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406508
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406513
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406517
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406522
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406526
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406531
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406535
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406540
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406544
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406549
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406553
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406558
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406562
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406567
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406571
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406576
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406580
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406585
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406589
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406594
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406598
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406603
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406607
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406612
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406616
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406621
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406626
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406630
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406635
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406640
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406644
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406649
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406654
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406658
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406663
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406668
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406672
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406677
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406682
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406686
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406691
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406696
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406700
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406705
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406710
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406714
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406719
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406724
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406728
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406733
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406738
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406742
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406747
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406752
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406756
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406761
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406766
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406770
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406775
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406780
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406784
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406789
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406794
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406798
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406803
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406808
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406812
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406817
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406822
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406826
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406831
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406836
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406840
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406845
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406850
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406854
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406859
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 406864
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406868
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406873
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406877
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406882
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406886
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406891
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406895
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406900
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406904
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406909
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406913
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406918
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406922
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406927
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406931
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406936
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406940
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406945
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406949
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406954
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406958
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406963
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406967
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406972
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406976
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406981
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406985
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406990
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 406994
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 406999
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407003
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407008
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407012
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407017
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407021
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407026
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407030
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407035
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407039
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407044
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407049
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407053
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407058
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407062
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407067
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407071
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407076
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407080
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407084
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407088
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407092
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407093
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407097
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407102
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 407106
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407115
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 407119
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407120
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407124
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407129
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407133
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 407137
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407146
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407150
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 407154
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 407155
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407156
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407160
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 407164
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407165
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407170
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407174
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 407178
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407187
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407191
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 407195
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 407196
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407197
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407201
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 407205
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407206
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407207
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407212
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407217
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407222
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407223
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407227
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407231
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407236
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407240
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407241
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407246
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407251
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407255
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407256
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407260
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407264
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407269
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407273
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407274
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407279
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407284
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407288
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407289
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407293
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407297
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407301
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407305
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407306
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407311
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407316
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407320
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407321
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407325
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407329
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407330
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407335
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407340
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407341
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407345
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407349
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407354
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407358
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407362
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407367
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407371
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407375
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407380
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407384
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407388
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407393
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407397
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407401
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407406
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407410
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407414
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407419
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407423
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407427
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407432
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407436
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407440
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407445
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407449
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407453
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407458
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407462
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407466
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407471
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407475
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407479
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407484
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407488
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407492
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407497
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407501
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407505
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407510
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407514
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407518
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407523
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407527
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407531
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407536
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407540
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407544
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407549
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407553
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407557
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407562
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407566
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407570
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407575
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407579
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407583
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407588
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407592
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407596
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407600
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407604
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407608
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407612
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407613
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407617
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407621
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407625
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407626
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407630
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407634
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407638
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407642
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407646
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407650
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407654
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407658
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407662
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407666
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407670
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407674
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407678
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407682
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407686
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407687
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407691
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407695
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407699
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407700
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407704
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407708
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407712
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407716
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407720
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407724
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407728
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407732
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407736
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407740
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407744
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407748
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407749
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407753
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407757
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407761
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407762
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407766
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407770
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407774
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407778
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407782
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407786
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407787
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407791
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407795
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407799
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407800
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407804
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407805
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407809
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407814
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407818
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407823
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407827
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407832
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407836
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407837
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407841
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407846
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407850
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407855
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407859
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407864
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407868
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407873
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407877
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407882
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407886
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407891
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407895
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407900
		, "size": 4
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407904
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407909
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407913
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407918
		, "size": 4
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407922
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407927
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407931
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407936
		, "size": 4
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407940
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407945
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407949
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407954
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407958
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407963
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407967
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407971
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407975
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407980
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407984
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407985
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 407990
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407991
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407992
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 407997
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407998
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407999
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408004
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408005
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408006
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408011
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408012
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408017
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408022
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408023
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408024
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408029
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408030
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408035
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408040
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408041
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408046
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408051
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408052
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408057
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408062
		, "size": 1
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408063
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408068
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408072
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408073
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408078
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408079
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408080
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408085
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408086
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408091
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408096
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408097
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408102
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408106
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408111
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408116
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408122
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408127
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408128
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408133
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408134
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408139
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 408140
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408141
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408146
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408147
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408152
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408153
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408158
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 408159
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408160
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408165
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408166
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408171
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408172
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408177
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 408178
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408179
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408184
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408185
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408190
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408191
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408192
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408197
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408198
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408203
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408204
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408209
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408210
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408211
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408216
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408217
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408222
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408223
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408228
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408229
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408230
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408231
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408236
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408237
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408242
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408243
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408248
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408249
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408250
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408255
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408256
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408261
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408262
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408267
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 408268
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408269
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408270
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408275
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408276
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408281
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408282
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408287
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 408288
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408289
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408294
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408295
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408300
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408301
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408306
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408307
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408309
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408314
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408315
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408320
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408325
		, "size": 1
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408326
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408331
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408336
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408337
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408342
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408343
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408348
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408349
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408354
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 408355
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408356
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408361
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408362
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408367
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 408368
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408369
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408374
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408375
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408380
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408381
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408386
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408387
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408388
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408393
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408394
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408399
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408400
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408405
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 408406
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408407
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408412
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408413
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408418
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408419
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408424
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 408425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408426
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408431
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408432
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408438
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408443
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 408444
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408445
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408450
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408451
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408457
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408462
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 408463
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408464
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408469
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408470
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408475
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408476
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408481
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 408482
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408483
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408488
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408489
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408494
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408495
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408500
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 408501
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408502
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408507
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408508
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408513
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408514
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408519
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 408520
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408521
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408526
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408527
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408532
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408533
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 408537
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408538
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408543
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408544
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408549
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408550
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 408554
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408555
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408561
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408566
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 408567
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408568
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408569
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408574
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408575
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408580
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408581
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408587
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408588
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408593
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408594
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408599
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408600
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408605
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408606
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408607
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408608
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408613
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408614
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408619
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408620
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408625
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408626
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408627
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408632
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408633
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408638
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408639
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408644
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 408645
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408646
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408647
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408652
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408653
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408658
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408659
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408664
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 408665
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408666
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408671
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408672
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408677
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408678
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408683
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408684
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408686
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408691
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408692
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408697
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408702
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408703
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408708
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408713
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408714
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408719
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408720
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408725
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408726
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408731
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 408732
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408733
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408738
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408739
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408744
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 408745
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408746
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408751
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408752
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408757
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408758
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408763
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408764
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408765
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408770
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408771
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408776
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408777
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408782
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 408783
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408784
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408789
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408790
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408795
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408796
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408801
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 408802
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408803
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408808
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408809
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408814
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408815
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408820
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 408821
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408822
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408827
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408828
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408833
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408834
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408839
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 408840
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408841
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408846
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408847
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408852
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408853
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408858
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 408859
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408860
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408865
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408866
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408871
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408872
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408877
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 408878
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408879
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408884
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408885
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408890
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408891
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408896
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 408897
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408898
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408903
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408904
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408909
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408910
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 408914
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408915
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408920
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408921
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408926
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408927
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 408931
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408932
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408937
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408938
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408943
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 408944
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408945
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408946
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408951
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408952
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408957
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408958
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408963
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408964
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408965
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408970
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408971
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408976
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408977
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408982
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408983
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 408984
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408985
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 408990
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408991
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 408996
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408997
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409002
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409003
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409004
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409009
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409010
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409015
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409016
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409021
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409022
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409023
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409024
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409029
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409030
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409035
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409036
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409041
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409042
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409043
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409048
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409049
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409054
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409055
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409060
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409061
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409062
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409063
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409068
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409069
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409079
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409080
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409085
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409090
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409091
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409096
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409097
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409102
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409103
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409108
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 409109
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409110
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409115
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409116
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409121
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 409122
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409123
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409128
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409129
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409134
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409135
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409140
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 409141
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409142
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409147
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409148
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409153
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409154
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409159
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 409160
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409161
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409166
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409167
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409172
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409173
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409178
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 409179
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409180
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409185
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409186
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409191
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409192
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409197
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 409198
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409199
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409204
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409205
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409210
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409211
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409216
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 409217
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409218
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409223
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409224
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409229
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409230
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409235
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 409236
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409237
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409242
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409243
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409248
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409249
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409254
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 409255
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409256
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409261
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409262
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409267
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409268
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409273
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 409274
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409275
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409280
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409281
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409286
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409287
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 409291
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409292
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409297
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409298
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409303
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409304
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 409308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409309
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409314
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409315
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409320
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 409321
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409322
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409323
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409328
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409329
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409334
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409335
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409340
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 409341
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409342
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409347
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409348
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409353
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409354
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409359
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 409360
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409361
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409362
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409367
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409368
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409373
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409374
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409379
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 409380
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409381
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409386
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409387
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409392
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409393
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409398
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 409399
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409400
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409401
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409406
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409407
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409412
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409413
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409418
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 409419
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409420
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409426
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409431
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409432
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 409437
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 409438
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409439
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409440
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409445
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409446
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409451
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409456
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409457
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409462
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409467
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409468
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409473
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409474
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409479
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409480
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409485
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 409486
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409487
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409492
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409493
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409498
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 409499
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409500
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409505
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409506
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409511
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409512
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409517
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 409518
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409519
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409524
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409525
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409530
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409531
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409536
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 409537
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409538
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409543
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409544
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409549
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409550
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409555
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 409556
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409557
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409562
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409563
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409568
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409569
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409574
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 409575
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409576
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409581
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409582
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409587
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409588
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409593
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 409594
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409595
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409600
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409601
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409606
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409607
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409612
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 409613
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409614
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409619
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409620
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409625
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409626
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409631
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 409632
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409633
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409638
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409639
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409644
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409645
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409650
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 409651
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409652
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409657
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409658
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409663
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409664
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 409668
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409669
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409674
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409675
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409680
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409681
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 409685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409686
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409691
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409692
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409697
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 409698
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409699
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409700
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409705
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409706
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409711
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409712
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409717
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 409718
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409719
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409724
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409725
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409730
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409731
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409736
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 409737
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409738
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409739
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409744
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409745
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409750
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409751
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409756
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409757
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409758
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409763
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409764
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409769
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409770
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409775
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409776
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409777
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409778
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409783
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409784
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409789
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409790
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409795
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409796
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409797
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409802
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409803
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409808
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409809
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409814
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409815
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 409816
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409817
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 409822
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409823
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409828
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409833
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409834
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409839
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409844
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409845
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409850
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409851
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409856
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409857
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409862
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 409863
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409864
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409869
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409870
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409875
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 409876
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409877
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409882
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409883
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409888
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409889
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409894
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 409895
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409896
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409901
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409902
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409907
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409908
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409913
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 409914
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409915
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409920
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409921
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409926
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409927
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409932
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 409933
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409934
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409939
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409940
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409945
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409946
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409951
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 409952
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409953
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409958
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409959
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409964
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409965
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409970
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 409971
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409972
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409977
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409978
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409983
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409984
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 409989
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 409990
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409991
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 409996
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 409997
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410002
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410003
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410008
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410009
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410010
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 410015
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410016
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410021
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410022
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410027
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 410028
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410029
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 410034
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410035
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410040
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410041
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 410045
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410046
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 410051
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410052
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410057
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410058
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 410062
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410063
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 410068
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410069
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410074
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 410075
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410076
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410077
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410082
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410083
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410088
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410089
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410094
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410095
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410096
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410101
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410102
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410107
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410108
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410113
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410114
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410115
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410116
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410121
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410122
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410127
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410128
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410133
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 410134
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410135
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410140
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410141
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410146
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410147
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410152
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 410153
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410154
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410155
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410160
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410161
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410166
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410167
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410172
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 410173
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410174
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410179
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410180
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410185
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410186
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 410191
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 410192
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410193
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410194
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410199
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410200
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410205
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410209
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410214
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410218
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410222
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410226
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 410230
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410231
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410235
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 410239
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410240
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410244
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410248
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 410252
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410253
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410257
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410261
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 410265
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410266
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410270
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410274
		, "size": 4
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 410278
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410279
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410283
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410287
		, "size": 4
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 410291
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410292
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410296
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410300
		, "size": 4
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 410304
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410305
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410309
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410313
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410317
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410318
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410322
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410326
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410330
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410331
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410335
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410339
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 410343
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410344
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410348
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410352
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 410356
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410357
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410361
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410365
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 410369
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410370
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410374
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 410378
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410379
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410380
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410385
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410386
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410390
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410394
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410395
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410400
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410401
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410405
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410409
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410410
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410411
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410416
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410417
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410421
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 410425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410426
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410431
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410432
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410436
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 410440
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410441
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410442
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410447
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410448
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410452
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 410456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410457
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410462
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410463
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410467
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 410471
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410472
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410473
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410478
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410479
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410484
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410488
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410493
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410497
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410501
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410505
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 410509
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410510
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410514
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 410518
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410519
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410523
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410527
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 410531
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410532
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410536
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410540
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 410544
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410545
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410549
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410553
		, "size": 4
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 410557
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410558
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410562
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410566
		, "size": 4
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 410570
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410571
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410575
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410579
		, "size": 4
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 410583
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410584
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410588
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410592
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410596
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410597
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410601
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410605
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410609
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410610
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410614
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410618
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 410622
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410623
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410627
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410631
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 410635
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410636
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410640
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410644
		, "size": 4
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 410648
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410649
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410653
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 410657
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410658
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410659
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410664
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410665
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410669
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410673
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410674
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410679
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410680
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410684
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 410688
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410689
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410690
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410695
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410696
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410700
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 410704
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410705
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410710
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410711
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410715
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 410719
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410720
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410721
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410726
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410727
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410731
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 410735
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410736
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410741
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410742
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410746
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 410750
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410751
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410752
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410757
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 410758
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410767
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 410771
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410780
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410784
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410788
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410792
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 410796
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410797
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410801
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 410805
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410806
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410810
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410814
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 410818
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410819
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410823
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410827
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 410831
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410832
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410836
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410840
		, "size": 4
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 410844
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410845
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410849
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410853
		, "size": 4
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 410857
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410858
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410862
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410866
		, "size": 4
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 410870
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410871
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410875
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410879
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 410883
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410884
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410888
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410892
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 410896
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410897
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410901
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410905
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 410909
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410910
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410914
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410918
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 410922
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410923
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410927
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410931
		, "size": 4
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 410935
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410936
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410940
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 410944
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410945
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410946
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410951
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410952
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410956
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 410960
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410961
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410966
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410967
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410971
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 410975
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 410976
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410977
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410982
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410983
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410987
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 410991
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410992
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 410997
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410998
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411002
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 411006
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411007
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411008
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411013
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411014
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411018
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 411022
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411023
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411028
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411029
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411033
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 411037
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411038
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411039
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411044
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 411045
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411054
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 411058
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411067
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411071
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411075
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411079
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 411083
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411084
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411088
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 411092
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411093
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411097
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411101
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 411105
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411106
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411110
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411114
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 411118
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411119
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411123
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411127
		, "size": 4
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 411131
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411132
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411136
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411140
		, "size": 4
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 411144
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411145
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411149
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411153
		, "size": 4
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 411157
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411158
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411162
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411166
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 411170
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411171
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411175
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411179
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 411183
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411184
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411188
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411192
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 411196
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411197
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411201
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411205
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 411209
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411210
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411214
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411218
		, "size": 4
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 411222
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411223
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411227
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 411231
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411232
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411233
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411238
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411239
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411243
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 411247
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411248
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411253
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411254
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411258
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 411262
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411263
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411264
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411269
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411270
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411274
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 411278
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411279
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411284
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411285
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411289
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 411293
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411294
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411295
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411300
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411301
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411305
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 411309
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411310
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411315
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411316
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411320
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 411324
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411325
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411326
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411331
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411332
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411337
		, "size": 4
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411341
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411346
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411350
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411354
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411358
		, "size": 4
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 411362
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411363
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411367
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411371
		, "size": 4
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 411375
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411376
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411380
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411384
		, "size": 4
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 411388
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411389
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411393
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411397
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 411401
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411402
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411406
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411410
		, "size": 4
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 411414
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411415
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411419
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411423
		, "size": 4
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 411427
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411428
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411432
		, "size": 4
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7c"
		, "offs": 411436
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411438
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411443
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411444
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411448
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 411452
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411453
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411458
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411459
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411463
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 411467
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411468
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411469
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411474
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411475
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411479
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 411483
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411484
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411489
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411490
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411494
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 411498
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411499
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411500
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411505
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411506
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411510
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 411514
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411515
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411520
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411521
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411525
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 411529
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411530
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411531
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411536
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411537
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411546
		, "size": 4
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411550
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411559
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411563
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411567
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411571
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 411575
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411576
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411580
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411584
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 411588
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411589
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411593
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411597
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 411601
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411602
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411606
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411610
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 411614
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411615
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411619
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411623
		, "size": 4
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 411627
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411628
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411632
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411636
		, "size": 4
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 411640
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411641
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411645
		, "size": 4
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 411649
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411650
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411651
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411656
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411657
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411661
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 411665
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411666
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411671
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411672
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411676
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 411680
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411681
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411682
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411687
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411688
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411692
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 411696
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411697
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411702
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411703
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411707
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 411711
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411712
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411713
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411718
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411719
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411723
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 411727
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411728
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411733
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411734
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411738
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 411742
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411743
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411744
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411749
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411750
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411755
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411759
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411764
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411768
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411772
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 411776
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411777
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411782
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411783
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411787
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 411791
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 411792
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411793
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411798
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411799
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411800
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411804
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411805
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411809
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411810
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411819
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411824
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411825
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411829
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411833
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411834
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411843
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411848
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411849
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411853
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411857
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411858
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411867
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411872
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411873
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411877
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411881
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411882
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411891
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411896
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411897
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411901
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411905
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411906
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411915
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411920
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411921
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411925
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411929
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411930
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411939
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411944
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411945
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411949
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411953
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 411962
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411964
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 411965
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 411966
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411968
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 411969
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 411970
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411971
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411973
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 411977
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411978
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411982
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 411983
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411985
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 411986
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 411987
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411989
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 411990
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 411991
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411992
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411994
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 411998
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411999
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412003
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412012
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412014
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 412015
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412016
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412018
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 412019
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 412020
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412021
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412023
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 412027
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412028
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412032
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412037
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412039
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 412040
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412041
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412043
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412044
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 412045
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412046
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 412048
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412049
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412053
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412054
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412056
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 412057
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412058
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412060
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412061
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 412062
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412063
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 412065
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412066
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412070
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412075
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412077
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 412078
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412079
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412081
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412082
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 412083
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412084
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 412086
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412087
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412091
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412100
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412102
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 412103
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412104
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412108
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 412110
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412111
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412115
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412117
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412119
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412123
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412124
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412126
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 412127
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412128
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412132
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 412134
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412135
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412139
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412141
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412143
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412147
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412156
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412158
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 412159
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412160
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412164
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 412166
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412167
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412171
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412173
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412175
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412179
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412184
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412186
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412187
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412188
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412192
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 412194
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412195
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412199
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412201
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412203
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412204
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412208
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412209
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412211
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412212
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412213
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412217
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 412219
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412220
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412224
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412226
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412228
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412229
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412233
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412238
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412240
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412241
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412242
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412246
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 412248
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412249
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412253
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412255
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412257
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412258
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412262
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412267
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412272
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412274
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 412276
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412277
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412281
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412283
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412287
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412289
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412291
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412295
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412296
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412300
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412305
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412310
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412312
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 412314
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412315
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412319
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412321
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412325
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412327
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412329
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412333
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412334
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412338
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412347
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412356
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412358
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 412360
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412361
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412365
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412367
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412371
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412373
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412375
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412379
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412383
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412392
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412401
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412403
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 412405
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412406
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412410
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412412
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412416
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412418
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412420
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412424
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412428
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412429
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412434
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412435
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412440
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412445
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412446
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412450
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412451
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412455
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412456
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412465
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412466
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412475
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412480
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412481
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412485
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412489
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412490
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412492
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412497
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412502
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 412504
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 412505
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 412506
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412507
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412509
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412510
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412514
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412515
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412517
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412526
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412535
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 412537
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 412538
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 412539
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412540
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412542
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412546
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412547
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412548
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412553
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 412555
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412556
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412561
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 412563
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 412564
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412565
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412566
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412571
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412576
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412577
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412581
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412583
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 412585
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412586
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 412591
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412596
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 412598
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 412599
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 412600
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412601
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412603
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 412605
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412606
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 412610
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412611
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412620
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 412622
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412623
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412632
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 412634
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 412635
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412636
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412637
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412646
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412651
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412652
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412656
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412658
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 412660
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412661
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412670
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412679
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 412681
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 412682
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 412683
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412684
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 412686
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412688
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412692
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 412693
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412697
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412698
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412700
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412705
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 412706
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412709
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412713
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412717
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412726
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412735
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412744
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412753
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412762
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412771
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412780
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412789
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412798
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 412803
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412807
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412808
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412810
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412815
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 412816
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412819
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412823
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412827
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 412828
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412832
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412833
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412835
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412840
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 412841
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412844
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412848
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412852
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412861
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412870
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412879
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412888
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412897
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412906
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412915
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412924
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412933
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 412938
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412942
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412943
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412945
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412950
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 412951
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412954
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412958
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412962
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 412963
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 412967
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 412968
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412970
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412975
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 412976
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412979
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 412983
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 412987
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412996
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413001
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413005
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413006
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413008
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413013
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413014
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413017
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413021
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413025
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413034
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413043
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413048
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413052
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413053
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413055
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413060
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(8, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413061
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413064
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413068
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413072
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413081
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413090
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413099
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413108
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413117
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413126
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413135
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413144
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413153
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413162
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413167
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413171
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413172
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413174
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413179
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(24, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413180
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413183
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413187
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413191
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413200
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413204
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413205
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413209
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413210
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413214
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413216
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413221
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413222
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413225
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413229
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413233
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413242
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413246
		, "size": 9
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413255
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413259
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413268
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413269
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413270
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413274
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413278
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413287
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413289
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413298
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413300
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413309
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413310
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413311
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413312
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 413313
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413315
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413319
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413323
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413332
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413334
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413336
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413345
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413347
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413356
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413358
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413367
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413368
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413369
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413370
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 413371
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413373
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413374
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 413375
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413377
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413381
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413390
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413399
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413408
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413417
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413426
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413431
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413435
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413436
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413440
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413442
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413447
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(16, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413448
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413451
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413455
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413459
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413468
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413477
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413486
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413495
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413504
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413513
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 413518
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413522
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413523
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413527
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413529
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413534
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(18, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 413535
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413538
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413542
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413546
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413547
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413556
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413565
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413566
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413567
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413572
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413573
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413577
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413581
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413582
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413591
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413600
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413601
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413603
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 413604
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413605
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413609
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 413611
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413612
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 413616
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 413618
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413620
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413625
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413630
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413631
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413635
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413639
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413640
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413649
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413658
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413659
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413664
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413665
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413669
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413673
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413674
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413683
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413692
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413693
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413698
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413699
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413703
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413707
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413708
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413717
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413726
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413727
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413732
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413733
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413737
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413741
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413742
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413751
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413756
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413757
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413761
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413765
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413774
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 413783
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413784
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413785
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413794
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413799
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413800
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 413804
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413805
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413809
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413810
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413815
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413820
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413825
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413830
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413831
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413835
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413836
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413837
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413842
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413843
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413844
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413853
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413862
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413871
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413876
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413877
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 413881
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413882
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413883
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413888
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413889
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413890
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413899
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413908
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413913
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413914
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413918
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 413922
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413923
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413932
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413937
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413938
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413942
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413946
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413947
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413956
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413965
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 413970
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413971
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413975
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 413979
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413980
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413989
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413998
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414003
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414004
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414008
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414012
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414013
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414022
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414031
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414036
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414037
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414041
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414045
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414046
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414055
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414064
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414069
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414070
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414074
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414078
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414079
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414088
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414097
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414102
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414103
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414107
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414111
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414112
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414121
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414130
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414135
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414136
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414140
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414144
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414145
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414154
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414163
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414168
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414169
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414173
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414177
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414178
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414187
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414196
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414201
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414202
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414206
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 414210
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414211
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414220
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414229
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414234
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414235
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414239
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414243
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414244
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414249
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414254
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414259
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414260
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414264
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414268
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414269
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414270
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414275
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414280
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414281
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414285
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414289
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414290
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414295
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414300
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414305
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414306
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414310
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414314
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414315
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414320
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414325
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414330
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414331
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414335
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414339
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414340
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414345
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414350
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414355
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414356
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414360
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414364
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414365
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414370
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414375
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414380
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414381
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414385
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414389
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414390
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414395
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414400
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414405
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414406
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414410
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414414
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414415
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414420
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414425
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414430
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414431
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414435
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414439
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414440
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414445
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414450
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414455
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414456
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414460
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414464
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414465
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414470
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414475
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414480
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414481
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414485
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414489
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414490
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414495
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414500
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414505
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414506
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414510
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414514
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414518
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414519
		, "size": 5
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414524
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414528
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414532
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414536
		, "size": 4
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414540
		, "size": 5
	}, {
		"instruction": "nfc(15)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414545
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414549
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414553
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414557
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414558
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414562
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414566
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414570
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414571
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414575
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414579
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414583
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414584
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414588
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414592
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414596
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414597
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414601
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414605
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414610
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414615
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414620
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414621
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414626
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414631
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414636
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414640
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414645
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414650
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414655
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414656
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414661
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414666
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414671
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414675
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414680
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414685
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414690
		, "size": 4
	}, {
		"instruction": "nfc(16)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414694
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414698
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414702
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414707
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414708
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414713
		, "size": 4
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414717
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414721
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414725
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414730
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414735
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414740
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414741
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414746
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414751
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414756
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414760
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414765
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414770
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414775
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414776
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414781
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414786
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414791
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414795
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414799
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 414804
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414806
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414811
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414812
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414816
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414820
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 414825
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414827
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414831
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414832
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414836
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414840
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414845
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414850
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414851
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414855
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414859
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414864
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414869
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414870
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414874
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414878
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 414883
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414885
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414890
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414891
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414895
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414899
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 414904
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414906
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414911
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414912
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 414916
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414920
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 414925
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414927
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 414931
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 414932
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414936
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414941
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414946
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414951
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414956
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414961
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414966
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414971
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414975
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414980
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414985
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414990
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414995
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415000
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415005
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415010
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415014
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415019
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415024
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415029
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415034
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415039
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415044
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415049
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415053
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415057
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415058
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415059
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415063
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415068
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415073
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415078
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415083
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415088
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415093
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415098
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415102
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415106
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415107
		, "size": 1
	}, {
		"instruction": "jnz +43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 415108
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415112
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415117
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415122
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415127
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415132
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415137
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415142
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415147
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415151
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415155
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415156
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415157
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415161
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415166
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415171
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415176
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415181
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415186
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415191
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415196
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415200
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415204
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415209
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415214
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415219
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415224
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415229
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415234
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415239
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415243
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415247
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415248
		, "size": 1
	}, {
		"instruction": "jnz +47"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 415249
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415253
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415258
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415263
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415268
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415273
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415278
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415283
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415288
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415292
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415296
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415301
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415306
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415311
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415316
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415321
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415326
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415331
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415335
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415339
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415340
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415341
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415345
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415350
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415355
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415360
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415365
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415370
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415375
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415380
		, "size": 4
	}, {
		"instruction": "jmp +328"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415384
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415388
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415392
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415397
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415398
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415402
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415407
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415412
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415417
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415422
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415427
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415432
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415437
		, "size": 4
	}, {
		"instruction": "jmp +271"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415441
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415445
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415449
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415454
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415455
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415459
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415464
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415469
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415474
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415479
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415484
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415489
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415494
		, "size": 4
	}, {
		"instruction": "jmp +214"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415498
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415502
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415506
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415511
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415512
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415516
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415521
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415526
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415531
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415536
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415541
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415546
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415551
		, "size": 4
	}, {
		"instruction": "jmp +157"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415555
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415559
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415563
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415568
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415569
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415573
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415578
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415583
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415588
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415593
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415598
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415603
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415608
		, "size": 4
	}, {
		"instruction": "jmp +100"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415612
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415616
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415620
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415625
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415626
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415630
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415635
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415640
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415645
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415650
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415655
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415660
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415665
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415669
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415673
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415678
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415683
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415688
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415693
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415698
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415703
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415708
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415712
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415716
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415721
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415726
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415731
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415732
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415737
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415742
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415747
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415751
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415755
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415759
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415760
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415764
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415769
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415774
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415779
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415780
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415785
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 415790
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415794
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415798
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 415802
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415804
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415809
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 415810
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 415814
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415818
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415819
		, "size": 4
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415823
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415827
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415832
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415837
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415842
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415843
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415848
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415853
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415858
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415862
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415866
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415870
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415874
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415878
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415883
		, "size": 1
	}, {
		"instruction": "jnz -57"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 415884
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415888
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415889
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 415893
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415895
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415900
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415901
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415905
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415909
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415914
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415919
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415924
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415925
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415930
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 415935
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415939
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415943
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 415947
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415949
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415954
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 415955
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 415959
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415963
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415964
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 415968
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415970
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 415975
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 415976
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 415980
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415984
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415989
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415994
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415999
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416000
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416005
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 416010
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416014
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416018
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416022
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416024
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 416029
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 416030
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416034
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416038
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
138018,0,402660,
 138022,0,48672,
 138027,0,-1,
 138038,0,42368,
 138041,0,-1,
 138043,0,42368,
 138044,0,-1,
 138046,0,42368,
 138047,0,-1,
 138049,0,43224,
 138051,0,-1,
 138052,0,43224,
 138054,0,-1,
 138055,0,43224,
 138057,0,-1,
 138058,0,42368,
 138060,0,-1,
 138061,0,42368,
 138063,0,-1,
 138064,0,42368,
 138066,0,-1,
 138068,0,43224,
 138069,0,-1,
 138071,0,43224,
 138072,0,-1,
 138074,0,43224,
 138075,0,-1,
 138077,0,53272,
 138083,0,-1,
 138085,0,53800,
 138087,0,-1,
 138089,0,54328,
 138091,0,-1,
 138093,0,54856,
 138096,0,-1,
 138098,0,55384,
 138099,0,-1,
 138101,0,56072,
 138103,0,-1,
 138105,0,56600,
 138106,0,-1,
 138108,0,57288,
 138112,0,-1,
 138114,0,48672,
 138115,0,-1,
 138117,0,49208,
 138119,0,-1,
 138121,0,49744,
 138124,0,-1,
 138125,0,50280,
 138127,0,-1,
 138129,0,50816,
 138130,0,-1,
 138132,0,51512,
 138134,0,-1,
 138135,0,52048,
 138137,0,-1,
 138139,0,52744,
 138141,0,-1,
 138142,0,43760,
 138144,0,-1,
 138145,0,44296,
 138147,0,-1,
 138148,0,44832,
 138150,0,-1,
 138152,0,45368,
 138153,0,-1,
 138155,0,45904,
 138156,0,-1,
 138158,0,46440,
 138160,0,-1,
 138161,0,42368,
 138163,0,-1,
 138164,0,43224,
 138166,0,-1,
 138167,0,47288,
 138169,0,-1,
 138171,0,48136,
 138172,0,-1,
 138174,0,35624,
 138176,1024,-1,
 138178,1024,35624,
 138179,1104,-1,
 138181,1104,35624,
 138182,1264,-1,
 138184,1264,35624,
 138187,2096,-1,
 138189,2096,34920,
  138207,2096,398296,
  138209,2096,-1,
  138211,2096,24280,
  138212,2096,-1,
 138214,2096,-1,
 138215,2096,34920,
 138238,2096,-1,
 138240,2096,34920,
  138245,2096,398304,
   138246,2096,398304,
    138248,2096,398304,
     138250,2096,398304,
      138251,2096,398304,
       138253,2096,398304,
        138254,2096,398304,
         138256,2096,398304,
          138258,2096,398304,
           138259,2096,398304,
            138261,2096,398304,
             138262,2096,398304,
              138264,2096,398304,
               138266,2096,398304,
                138267,2096,398304,
                 138270,2096,398304,
                  138272,2096,398304,
                   138275,2096,398304,
                    138278,2096,398304,
                     138284,2096,398304,
                      138286,2096,398304,
                       138288,2096,398304,
                        138290,2096,398304,
                         138292,2096,398304,
                          138295,2096,398304,
                           138297,2096,398304,
                            138300,2096,398304,
                             138302,2096,398304,
                              138304,2096,398304,
                               138306,2096,398304,
                                138308,2096,398304,
                                 138309,2096,398304,
                                  138311,2096,398304,
                                   138313,2096,398304,
                                    138314,2096,398304,
                                     138316,2096,398304,
                                      138318,2096,398304,
                                       138319,2096,398304,
                                        138321,2096,398304,
                                         138323,2096,398304,
                                          138324,2096,398304,
                                           138326,2096,398304,
                                            138328,2096,398304,
                                             138329,2096,398304,
                                              138331,2096,398304,
                                               138333,2096,398304,
                                                138334,2096,398304,
                                                 138336,2096,398304,
                                                  138338,2096,398304,
                                                   138339,2096,398304,
                                                    138341,2096,398304,
                                                     138342,2096,398304,
                                                      138344,2096,398304,
                                                       138346,2096,398304,
                                                        138348,2096,398304,
                                                         138349,2096,398304,
                                                          138351,2096,398304,
                                                           138353,2096,398304,
                                                            138354,2096,398304,
                                                             138356,2096,398304,
                                                              138358,2096,398304,
                                                               138359,2096,398304,
                                                                138361,2096,398304,
                                                                 138363,2096,398304,
                                                                  138365,2096,398304,
                                                                   138366,2096,398304,
                                                                    138368,2096,398304,
                                                                     138370,2096,398304,
                                                                      138371,2096,398304,
                                                                       138374,2096,398304,
                                                                        138377,2096,398304,
                                                                         138380,2096,398304,
                                                                          138382,2096,398304,
                                                                           138384,2096,398304,
                                                                            138386,2096,398304,
                                                                             138388,2096,398304,
                                                                              138389,2096,398304,
                                                                               138391,2096,398304,
                                                                                138395,2096,398304,
                                                                                 138396,2096,398304,
                                                                                  138398,2096,398304,
                                                                                   138400,2096,398304,
                                                                                    138402,2096,398304,
                                                                                     138404,2096,398304,
                                                                                      138406,2096,398304,
                                                                                       138408,2096,398304,
                                                                                        138409,2096,398304,
                                                                                         138411,2096,398304,
                                                                                          138413,2096,398304,
                                                                                           138415,2096,398304,
                                                                                            138416,2096,398304,
                                                                                             138418,2096,398304,
                                                                                              138420,2096,398304,
                                                                                               138422,2096,398304,
                                                                                                138424,2096,398304,
                                                                                                 138425,2096,398304,
                                                                                                  138427,2096,398304,
                                                                                                   138429,2096,398304,
                                                                                                    138431,2096,398304,
                                                                                                     138433,2096,398304,
                                                                                                      138434,2096,398304,
                                                                                                       138436,2096,398304,
                                                                                                        138438,2096,398304,
                                                                                                         138440,2096,398304,
                                                                                                          138442,2096,398304,
                                                                                                           138443,2096,398304,
                                                                                                            138445,2096,398304,
                                                                                                             138447,2096,398304,
                                                                                                              138449,2096,398304,
                                                                                                               138450,2096,398304,
                                                                                                                138452,2096,398304,
                                                                                                                 138454,2096,398304,
                                                                                                                  138456,2096,398304,
                                                                                                                   138459,2096,398304,
                                                                                                                    138461,2096,398304,
                                                                                                                     138463,2096,398304,
                                                                                                                      138465,2096,398304,
                                                                                                                       138466,2096,398304,
                                                                                                                        138468,2096,398304,
                                                                                                                         138470,2096,398304,
                                                                                                                          138472,2096,398304,
                                                                                                                           138474,2096,398304,
                                                                                                                            138475,2096,398304,
                                                                                                                             138477,2096,398304,
                                                                                                                              138479,2096,398304,
                                                                                                                               138481,2096,398304,
                                                                                                                                138482,2096,398304,
                                                                                                                                 138484,2096,398304,
                                                                                                                                 138486,2096,-1,
                                                                                                                                138488,2096,-1,
                                                                                                                               138490,2096,-1,
                                                                                                                              138492,2096,-1,
                                                                                                                             138493,2096,-1,
                                                                                                                            138495,2096,-1,
                                                                                                                           138497,2096,-1,
                                                                                                                          138499,2096,-1,
                                                                                                                         138501,2096,-1,
                                                                                                                        138502,2096,-1,
                                                                                                                       138504,2096,-1,
                                                                                                                      138506,2096,-1,
                                                                                                                     138508,2096,-1,
                                                                                                                    138509,2096,-1,
                                                                                                                   138512,2096,-1,
                                                                                                                  138514,2096,-1,
                                                                                                                 138516,2096,-1,
                                                                                                                138518,2096,-1,
                                                                                                               138520,2096,-1,
                                                                                                              138521,2096,-1,
                                                                                                             138523,2096,-1,
                                                                                                            138525,2096,-1,
                                                                                                           138527,2096,-1,
                                                                                                          138528,2096,-1,
                                                                                                         138530,2096,-1,
                                                                                                        138532,2096,-1,
                                                                                                       138534,2096,-1,
                                                                                                      138535,2096,-1,
                                                                                                     138537,2096,-1,
                                                                                                    138539,2096,-1,
                                                                                                   138541,2096,-1,
                                                                                                  138542,2096,-1,
                                                                                                 138544,2096,-1,
                                                                                                138546,2096,-1,
                                                                                               138548,2096,-1,
                                                                                              138549,2096,-1,
                                                                                             138551,2096,-1,
                                                                                            138553,2096,-1,
                                                                                           138554,2096,-1,
                                                                                          138556,2096,-1,
                                                                                         138558,2096,-1,
                                                                                        138560,2096,-1,
                                                                                       138561,2096,-1,
                                                                                      138563,2096,-1,
                                                                                     138565,2096,-1,
                                                                                    138566,2096,-1,
                                                                                   138568,2096,-1,
                                                                                  138570,2096,-1,
                                                                                 138572,2096,-1,
                                                                                138573,2096,-1,
                                                                               138577,2096,-1,
                                                                              138578,2096,-1,
                                                                             138580,2096,-1,
                                                                            138582,2096,-1,
                                                                           138584,2096,-1,
                                                                          138585,2096,-1,
                                                                         138587,2096,-1,
                                                                        138589,2096,-1,
                                                                       138590,2096,-1,
                                                                      138592,2096,-1,
                                                                     138594,2096,-1,
                                                                    138595,2096,-1,
                                                                   138597,2096,-1,
                                                                  138599,2096,-1,
                                                                 138600,2096,-1,
                                                                138602,2096,-1,
                                                               138604,2096,-1,
                                                              138605,2096,-1,
                                                             138607,2096,-1,
                                                            138609,2096,-1,
                                                           138610,2096,-1,
                                                          138612,2096,-1,
                                                         138614,2096,-1,
                                                        138615,2096,-1,
                                                       138617,2096,-1,
                                                      138619,2096,-1,
                                                     138620,2096,-1,
                                                    138622,2096,-1,
                                                   138624,2096,-1,
                                                  138625,2096,-1,
                                                 138627,2096,-1,
                                                138629,2096,-1,
                                               138630,2096,-1,
                                              138632,2096,-1,
                                             138634,2096,-1,
                                            138635,2096,-1,
                                           138637,2096,-1,
                                          138639,2096,-1,
                                         138640,2096,-1,
                                        138642,2096,-1,
                                       138644,2096,-1,
                                      138645,2096,-1,
                                     138647,2096,-1,
                                    138648,2096,-1,
                                   138650,2096,-1,
                                  138652,2096,-1,
                                 138653,2096,-1,
                                138655,2096,-1,
                               138657,2096,-1,
                              138658,2096,-1,
                             138660,2096,-1,
                            138662,2096,-1,
                           138663,2096,-1,
                          138665,2096,-1,
                         138666,2096,-1,
                        138668,2096,-1,
                       138670,2096,-1,
                      138671,2096,-1,
                     138673,2096,-1,
                    138674,2096,-1,
                   138676,2096,-1,
                  138678,2096,-1,
                 138679,2096,-1,
                138681,2096,-1,
               138682,2096,-1,
              138685,2096,-1,
             138687,2096,-1,
            138689,2096,-1,
           138692,2096,-1,
          138694,2096,-1,
         138697,2096,-1,
        138699,2096,-1,
       138701,2096,-1,
      138703,2096,-1,
     138704,2096,-1,
    138706,2096,-1,
   138707,2096,-1,
  138709,2096,-1,
 138711,2096,-1,
 138712,2096,34920,
  138718,2096,398328,
  138720,2096,-1,
 138721,2096,-1,
 138723,2096,34920,
  138727,2096,398432,
  138729,2096,-1,
 138730,2096,-1,
 138732,2096,34920,
  138736,2096,398416,
  138737,2096,-1,
 138739,2096,-1,
 138741,2096,34920,
  138745,2096,398344,
   138747,2096,32536,
   138832,2096,-1,
  138835,2096,-1,
 138836,2096,-1,
 138839,2096,28696,
 138845,2128,-1,
 138847,2128,28696,
 138851,2160,-1,
 138853,2160,399208,
 138855,2160,-1,
 138856,2160,399208,
 138858,2160,-1,
 138860,2160,399272,
 138861,2160,-1,
 138863,2160,399272,
 138865,2160,-1,
 138866,2160,399280,
  138868,2160,399280,
   138870,2160,399280,
    138871,2160,399280,
     138873,2160,399280,
      138874,2160,399280,
       138876,2160,399280,
        138877,2160,399280,
         138879,2160,399280,
          138881,2160,399280,
           138882,2160,399280,
            138884,2160,399280,
             138886,2160,399280,
             138887,2160,-1,
             138889,2160,399280,
             138890,2160,-1,
            138892,2160,-1,
            138894,2160,399280,
            138895,2160,-1,
           138897,2160,-1,
           138899,2160,399280,
            138900,2160,399280,
            138902,2160,-1,
            138904,2160,399280,
            138905,2160,-1,
           138907,2160,-1,
          138909,2160,-1,
          138910,2160,399280,
           138912,2160,399280,
            138913,2160,399280,
            138915,2160,-1,
            138917,2160,399280,
            138918,2160,-1,
           138920,2160,-1,
           138921,2160,399280,
           138923,2160,-1,
          138925,2160,-1,
         138926,2160,-1,
         138928,2160,399280,
          138930,2160,399280,
           138931,2160,399280,
            138933,2160,399280,
            138934,2160,-1,
            138936,2160,399280,
            138938,2160,-1,
           138939,2160,-1,
           138941,2160,399280,
           138942,2160,-1,
          138944,2160,-1,
          138946,2160,399280,
           138947,2160,399280,
           138949,2160,-1,
           138951,2160,399280,
           138952,2160,-1,
          138954,2160,-1,
         138955,2160,-1,
        138957,2160,-1,
        138959,2160,399280,
         138960,2160,399280,
          138962,2160,399280,
           138963,2160,399280,
            138965,2160,399280,
            138967,2160,-1,
            138968,2160,399280,
            138970,2160,-1,
           138972,2160,-1,
           138973,2160,399280,
           138975,2160,-1,
          138977,2160,-1,
          138978,2160,399280,
           138980,2160,399280,
           138982,2160,-1,
           138983,2160,399280,
           138985,2160,-1,
          138987,2160,-1,
         138988,2160,-1,
         138990,2160,399280,
          138991,2160,399280,
           138993,2160,399280,
           138995,2160,-1,
           138996,2160,399280,
           138998,2160,-1,
          139001,2160,-1,
          139003,2160,399280,
          139006,2160,-1,
         139008,2160,-1,
        139011,2160,-1,
       139012,2160,-1,
       139014,2160,399280,
        139016,2160,399280,
         139017,2160,399280,
          139019,2160,399280,
           139020,2160,399280,
            139022,2160,399280,
            139024,2160,-1,
            139025,2160,399280,
            139027,2160,-1,
           139029,2160,-1,
           139030,2160,399280,
           139032,2160,-1,
          139033,2160,-1,
          139035,2160,399280,
           139037,2160,399280,
           139038,2160,-1,
           139040,2160,399280,
           139042,2160,-1,
          139043,2160,-1,
         139045,2160,-1,
         139046,2160,399280,
          139048,2160,399280,
           139050,2160,399280,
           139051,2160,-1,
           139055,2160,399280,
           139057,2160,-1,
          139059,2160,-1,
          139060,2160,399280,
          139062,2160,-1,
         139064,2160,-1,
        139065,2160,-1,
        139067,2160,399280,
         139068,2160,399280,
          139070,2160,399280,
           139072,2160,399280,
           139073,2160,-1,
           139075,2160,399280,
           139077,2160,-1,
          139078,2160,-1,
          139080,2160,399280,
          139081,2160,-1,
         139083,2160,-1,
         139085,2160,399280,
          139086,2160,399280,
          139088,2160,-1,
          139090,2160,399280,
          139091,2160,-1,
         139093,2160,-1,
        139094,2160,-1,
       139096,2160,-1,
      139098,2160,-1,
      139099,2160,399280,
       139101,2160,399280,
        139102,2160,399280,
         139104,2160,399280,
          139105,2160,399280,
           139107,2160,399280,
            139109,2160,399280,
            139110,2160,-1,
            139112,2160,399280,
            139114,2160,-1,
           139115,2160,-1,
           139117,2160,399280,
           139118,2160,-1,
          139120,2160,-1,
          139122,2160,399280,
           139123,2160,399280,
           139125,2160,-1,
           139126,2160,399280,
           139128,2160,-1,
          139130,2160,-1,
         139131,2160,-1,
         139133,2160,399280,
          139134,2160,399280,
           139136,2160,399280,
           139138,2160,-1,
           139139,2160,399280,
           139141,2160,-1,
          139142,2160,-1,
          139144,2160,399280,
          139146,2160,-1,
         139147,2160,-1,
        139149,2160,-1,
        139150,2160,399280,
         139152,2160,399280,
          139154,2160,399280,
           139155,2160,399280,
           139157,2160,-1,
           139158,2160,399280,
           139160,2160,-1,
          139162,2160,-1,
          139163,2160,399280,
          139165,2160,-1,
         139166,2160,-1,
         139168,2160,399280,
          139169,2160,399280,
          139171,2160,-1,
          139173,2160,399280,
          139174,2160,-1,
         139176,2160,-1,
        139178,2160,-1,
       139179,2160,-1,
       139181,2160,399280,
        139182,2160,399280,
         139184,2160,399280,
          139186,2160,399280,
           139187,2160,399280,
           139189,2160,-1,
           139190,2160,399280,
           139192,2160,-1,
          139194,2160,-1,
          139195,2160,399280,
          139197,2160,-1,
         139198,2160,-1,
         139200,2160,399280,
          139202,2160,399280,
          139203,2160,-1,
          139205,2160,399280,
          139207,2160,-1,
         139208,2160,-1,
        139210,2160,-1,
        139211,2160,399280,
         139213,2160,399280,
          139214,2160,399280,
          139216,2160,-1,
          139218,2160,399280,
          139219,2160,-1,
         139221,2160,-1,
         139223,2160,399280,
         139224,2160,-1,
        139226,2160,-1,
       139227,2160,-1,
      139229,2160,-1,
     139231,2160,-1,
     139232,2160,399280,
      139234,2160,399280,
       139235,2160,399280,
        139237,2160,399280,
         139238,2160,399280,
          139240,2160,399280,
           139242,2160,399280,
            139243,2160,399280,
            139245,2160,-1,
            139246,2160,399280,
            139248,2160,-1,
           139250,2160,-1,
           139251,2160,399280,
           139253,2160,-1,
          139255,2160,-1,
          139256,2160,399280,
           139258,2160,399280,
           139259,2160,-1,
           139261,2160,399280,
           139263,2160,-1,
          139264,2160,-1,
         139266,2160,-1,
         139267,2160,399280,
          139269,2160,399280,
           139271,2160,399280,
           139272,2160,-1,
           139274,2160,399280,
           139275,2160,-1,
          139277,2160,-1,
          139279,2160,399280,
          139280,2160,-1,
         139282,2160,-1,
        139284,2160,-1,
        139285,2160,399280,
         139287,2160,399280,
          139288,2160,399280,
           139290,2160,399280,
           139292,2160,-1,
           139295,2160,399280,
           139296,2160,-1,
          139298,2160,-1,
          139300,2160,399280,
          139301,2160,-1,
         139303,2160,-1,
         139304,2160,399280,
          139306,2160,399280,
          139308,2160,-1,
          139309,2160,399280,
          139311,2160,-1,
         139313,2160,-1,
        139314,2160,-1,
       139316,2160,-1,
       139317,2160,399280,
        139319,2160,399280,
         139321,2160,399280,
          139324,2160,399280,
           139326,2160,399280,
           139329,2160,-1,
           139331,2160,399280,
           139333,2160,-1,
          139335,2160,-1,
          139337,2160,399280,
          139338,2160,-1,
         139340,2160,-1,
         139342,2160,399280,
          139343,2160,399280,
          139345,2160,-1,
          139346,2160,399280,
          139348,2160,-1,
         139350,2160,-1,
        139351,2160,-1,
        139353,2160,399280,
         139354,2160,399280,
          139356,2160,399280,
          139358,2160,-1,
          139359,2160,399280,
          139361,2160,-1,
         139363,2160,-1,
         139364,2160,399280,
         139366,2160,-1,
        139367,2160,-1,
       139369,2160,-1,
      139371,2160,-1,
      139372,2160,399280,
       139374,2160,399280,
        139376,2160,399280,
         139377,2160,399280,
          139379,2160,399280,
           139380,2160,399280,
           139382,2160,-1,
           139384,2160,399280,
           139385,2160,-1,
          139387,2160,-1,
          139389,2160,399280,
          139390,2160,-1,
         139392,2160,-1,
         139393,2160,399280,
          139395,2160,399280,
          139397,2160,-1,
          139398,2160,399280,
          139400,2160,-1,
         139402,2160,-1,
        139403,2160,-1,
        139405,2160,399280,
         139406,2160,399280,
          139408,2160,399280,
          139409,2160,-1,
          139411,2160,399280,
          139413,2160,-1,
         139414,2160,-1,
         139416,2160,399280,
         139418,2160,-1,
        139419,2160,-1,
       139421,2160,-1,
       139422,2160,399280,
        139424,2160,399280,
         139425,2160,399280,
          139427,2160,399280,
          139429,2160,-1,
          139430,2160,399280,
          139432,2160,-1,
         139434,2160,-1,
         139435,2160,399280,
         139437,2160,-1,
        139439,2160,-1,
        139440,2160,399280,
         139442,2160,399280,
         139444,2160,-1,
         139446,2160,399280,
         139448,2160,-1,
        139451,2160,-1,
       139453,2160,-1,
      139456,2160,-1,
     139459,2160,-1,
    139461,2160,-1,
    139463,2160,399280,
     139465,2160,399280,
      139467,2160,399280,
       139469,2160,399280,
        139472,2160,399280,
         139474,2160,399280,
          139477,2160,399280,
           139480,2160,399280,
            139482,2160,399280,
            139484,2160,-1,
            139485,2160,399280,
            139487,2160,-1,
           139489,2160,-1,
           139490,2160,399280,
           139492,2160,-1,
          139494,2160,-1,
          139495,2160,399280,
           139497,2160,399280,
           139498,2160,-1,
           139500,2160,399280,
           139502,2160,-1,
          139503,2160,-1,
         139505,2160,-1,
         139506,2160,399280,
          139508,2160,399280,
           139510,2160,399280,
           139511,2160,-1,
           139513,2160,399280,
           139515,2160,-1,
          139516,2160,-1,
          139518,2160,399280,
          139519,2160,-1,
         139521,2160,-1,
        139523,2160,-1,
        139524,2160,399280,
         139526,2160,399280,
          139527,2160,399280,
           139529,2160,399280,
           139531,2160,-1,
           139532,2160,399280,
           139534,2160,-1,
          139536,2160,-1,
          139537,2160,399280,
          139539,2160,-1,
         139540,2160,-1,
         139542,2160,399280,
          139544,2160,399280,
          139545,2160,-1,
          139547,2160,399280,
          139548,2160,-1,
         139550,2160,-1,
        139552,2160,-1,
       139553,2160,-1,
       139557,2160,399280,
        139559,2160,399280,
         139560,2160,399280,
          139562,2160,399280,
           139563,2160,399280,
           139565,2160,-1,
           139567,2160,399280,
           139568,2160,-1,
          139570,2160,-1,
          139571,2160,399280,
          139573,2160,-1,
         139575,2160,-1,
         139576,2160,399280,
          139578,2160,399280,
          139579,2160,-1,
          139581,2160,399280,
          139583,2160,-1,
         139584,2160,-1,
        139586,2160,-1,
        139587,2160,399280,
         139589,2160,399280,
          139591,2160,399280,
          139592,2160,-1,
          139594,2160,399280,
          139595,2160,-1,
         139597,2160,-1,
         139599,2160,399280,
         139600,2160,-1,
        139602,2160,-1,
       139603,2160,-1,
      139605,2160,-1,
      139607,2160,399280,
       139608,2160,399280,
        139610,2160,399280,
         139611,2160,399280,
          139613,2160,399280,
           139615,2160,399280,
           139616,2160,-1,
           139618,2160,399280,
           139620,2160,-1,
          139621,2160,-1,
          139623,2160,399280,
          139624,2160,-1,
         139626,2160,-1,
         139628,2160,399280,
          139629,2160,399280,
          139631,2160,-1,
          139632,2160,399280,
          139634,2160,-1,
         139636,2160,-1,
        139637,2160,-1,
        139639,2160,399280,
         139640,2160,399280,
          139642,2160,399280,
          139644,2160,-1,
          139645,2160,399280,
          139647,2160,-1,
         139649,2160,-1,
         139650,2160,399280,
         139652,2160,-1,
        139654,2160,-1,
       139655,2160,-1,
       139657,2160,399280,
        139658,2160,399280,
         139660,2160,399280,
          139662,2160,399280,
          139663,2160,-1,
          139665,2160,399280,
          139666,2160,-1,
         139668,2160,-1,
         139670,2160,399280,
         139671,2160,-1,
        139673,2160,-1,
        139675,2160,399280,
         139676,2160,399280,
         139679,2160,-1,
         139681,2160,399280,
         139683,2160,-1,
        139686,2160,-1,
       139689,2160,-1,
      139690,2160,-1,
     139692,2160,-1,
     139694,2160,399280,
      139695,2160,399280,
       139697,2160,399280,
        139698,2160,399280,
         139700,2160,399280,
          139701,2160,399280,
           139703,2160,399280,
           139705,2160,-1,
           139706,2160,399280,
           139708,2160,-1,
          139710,2160,-1,
          139711,2160,399280,
          139713,2160,-1,
         139714,2160,-1,
         139716,2160,399280,
          139718,2160,399280,
          139719,2160,-1,
          139721,2160,399280,
          139722,2160,-1,
         139724,2160,-1,
        139726,2160,-1,
        139727,2160,399280,
         139729,2160,399280,
          139730,2160,399280,
          139732,2160,-1,
          139734,2160,399280,
          139736,2160,-1,
         139737,2160,-1,
         139739,2160,399280,
         139740,2160,-1,
        139742,2160,-1,
       139744,2160,-1,
       139745,2160,399280,
        139747,2160,399280,
         139748,2160,399280,
          139750,2160,399280,
          139752,2160,-1,
          139753,2160,399280,
          139755,2160,-1,
         139756,2160,-1,
         139758,2160,399280,
         139760,2160,-1,
        139761,2160,-1,
        139763,2160,399280,
         139765,2160,399280,
         139766,2160,-1,
         139768,2160,399280,
         139769,2160,-1,
        139771,2160,-1,
       139773,2160,-1,
      139774,2160,-1,
      139776,2160,399280,
       139777,2160,399280,
        139779,2160,399280,
         139781,2160,399280,
          139782,2160,399280,
          139784,2160,-1,
          139785,2160,399280,
          139787,2160,-1,
         139789,2160,-1,
         139790,2160,399280,
         139792,2160,-1,
        139793,2160,-1,
        139795,2160,399280,
         139797,2160,399280,
         139798,2160,-1,
         139800,2160,399280,
         139801,2160,-1,
        139803,2160,-1,
       139805,2160,-1,
       139808,2160,399280,
        139810,2160,399280,
         139811,2160,399280,
         139813,2160,-1,
         139814,2160,399280,
         139816,2160,-1,
        139818,2160,-1,
        139819,2160,399280,
        139821,2160,-1,
       139822,2160,-1,
      139824,2160,-1,
     139826,2160,-1,
    139827,2160,-1,
   139829,2160,-1,
   139830,2160,399280,
    139832,2160,399280,
     139833,2160,399280,
      139835,2160,399280,
       139837,2160,399280,
        139838,2160,399280,
         139840,2160,399280,
          139841,2160,399280,
           139843,2160,399280,
            139844,2160,399280,
            139846,2160,-1,
            139848,2160,399280,
            139849,2160,-1,
           139851,2160,-1,
           139853,2160,399280,
           139854,2160,-1,
          139856,2160,-1,
          139857,2160,399280,
           139859,2160,399280,
           139861,2160,-1,
           139862,2160,399280,
           139864,2160,-1,
          139865,2160,-1,
         139867,2160,-1,
         139869,2160,399280,
          139870,2160,399280,
           139872,2160,399280,
           139873,2160,-1,
           139875,2160,399280,
           139877,2160,-1,
          139878,2160,-1,
          139880,2160,399280,
          139881,2160,-1,
         139883,2160,-1,
        139885,2160,-1,
        139886,2160,399280,
         139888,2160,399280,
          139889,2160,399280,
           139891,2160,399280,
           139893,2160,-1,
           139894,2160,399280,
           139896,2160,-1,
          139897,2160,-1,
          139899,2160,399280,
          139901,2160,-1,
         139902,2160,-1,
         139904,2160,399280,
          139905,2160,399280,
          139907,2160,-1,
          139909,2160,399280,
          139910,2160,-1,
         139912,2160,-1,
        139914,2160,-1,
       139915,2160,-1,
       139917,2160,399280,
        139918,2160,399280,
         139920,2160,399280,
          139921,2160,399280,
           139923,2160,399280,
           139925,2160,-1,
           139926,2160,399280,
           139928,2160,-1,
          139930,2160,-1,
          139931,2160,399280,
          139933,2160,-1,
         139934,2160,-1,
         139936,2160,399280,
          139938,2160,399280,
          139939,2160,-1,
          139941,2160,399280,
          139942,2160,-1,
         139944,2160,-1,
        139946,2160,-1,
        139947,2160,399280,
         139949,2160,399280,
          139950,2160,399280,
          139952,2160,-1,
          139954,2160,399280,
          139955,2160,-1,
         139957,2160,-1,
         139958,2160,399280,
         139960,2160,-1,
        139962,2160,-1,
       139963,2160,-1,
      139965,2160,-1,
      139966,2160,399280,
       139968,2160,399280,
        139970,2160,399280,
         139971,2160,399280,
          139973,2160,399280,
           139974,2160,399280,
           139976,2160,-1,
           139978,2160,399280,
           139979,2160,-1,
          139981,2160,-1,
          139982,2160,399280,
          139984,2160,-1,
         139986,2160,-1,
         139987,2160,399280,
          139989,2160,399280,
          139990,2160,-1,
          139993,2160,399280,
          139995,2160,-1,
         139997,2160,-1,
        140000,2160,-1,
        140003,2160,399280,
         140005,2160,399280,
          140007,2160,399280,
          140008,2160,-1,
          140010,2160,399280,
          140012,2160,-1,
         140013,2160,-1,
         140015,2160,399280,
         140016,2160,-1,
        140018,2160,-1,
       140020,2160,-1,
       140021,2160,399280,
        140023,2160,399280,
         140024,2160,399280,
          140026,2160,399280,
          140028,2160,-1,
          140029,2160,399280,
          140031,2160,-1,
         140033,2160,-1,
         140034,2160,399280,
         140036,2160,-1,
        140037,2160,-1,
        140039,2160,399280,
         140041,2160,399280,
         140042,2160,-1,
         140044,2160,399280,
         140046,2160,-1,
        140047,2160,-1,
       140049,2160,-1,
      140051,2160,-1,
     140052,2160,-1,
     140054,2160,399280,
      140057,2160,399280,
       140059,2160,399280,
        140060,2160,399280,
         140062,2160,399280,
          140064,2160,399280,
           140065,2160,399280,
           140067,2160,-1,
           140069,2160,399280,
           140070,2160,-1,
          140072,2160,-1,
          140074,2160,399280,
          140075,2160,-1,
         140077,2160,-1,
         140078,2160,399280,
          140080,2160,399280,
          140082,2160,-1,
          140083,2160,399280,
          140085,2160,-1,
         140087,2160,-1,
        140088,2160,-1,
        140090,2160,399280,
         140091,2160,399280,
          140093,2160,399280,
          140095,2160,-1,
          140096,2160,399280,
          140098,2160,-1,
         140099,2160,-1,
         140101,2160,399280,
         140103,2160,-1,
        140104,2160,-1,
       140106,2160,-1,
       140107,2160,399280,
        140109,2160,399280,
         140111,2160,399280,
          140112,2160,399280,
          140114,2160,-1,
          140116,2160,399280,
          140117,2160,-1,
         140119,2160,-1,
         140120,2160,399280,
         140122,2160,-1,
        140124,2160,-1,
        140125,2160,399280,
         140127,2160,399280,
         140129,2160,-1,
         140130,2160,399280,
         140132,2160,-1,
        140133,2160,-1,
       140135,2160,-1,
      140137,2160,-1,
      140138,2160,399280,
       140140,2160,399280,
        140141,2160,399280,
         140143,2160,399280,
          140144,2160,399280,
          140146,2160,-1,
          140148,2160,399280,
          140149,2160,-1,
         140151,2160,-1,
         140152,2160,399280,
         140154,2160,-1,
        140156,2160,-1,
        140157,2160,399280,
         140159,2160,399280,
         140161,2160,-1,
         140162,2160,399280,
         140164,2160,-1,
        140165,2160,-1,
       140167,2160,-1,
       140169,2160,399280,
        140170,2160,399280,
         140172,2160,399280,
         140173,2160,-1,
         140175,2160,399280,
         140177,2160,-1,
        140178,2160,-1,
        140180,2160,399280,
        140181,2160,-1,
       140183,2160,-1,
      140185,2160,-1,
     140186,2160,-1,
    140188,2160,-1,
    140189,2160,399280,
     140191,2160,399280,
      140193,2160,399280,
       140194,2160,399280,
        140196,2160,399280,
         140197,2160,399280,
          140199,2160,399280,
           140200,2160,399280,
           140202,2160,-1,
           140204,2160,399280,
           140205,2160,-1,
          140207,2160,-1,
          140208,2160,399280,
          140210,2160,-1,
         140212,2160,-1,
         140213,2160,399280,
          140215,2160,399280,
          140217,2160,-1,
          140218,2160,399280,
          140220,2160,-1,
         140221,2160,-1,
        140223,2160,-1,
        140225,2160,399280,
         140226,2160,399280,
          140228,2160,399280,
          140229,2160,-1,
          140231,2160,399280,
          140233,2160,-1,
         140234,2160,-1,
         140236,2160,399280,
         140238,2160,-1,
        140239,2160,-1,
       140241,2160,-1,
       140242,2160,399280,
        140244,2160,399280,
         140245,2160,399280,
          140247,2160,399280,
          140249,2160,-1,
          140250,2160,399280,
          140252,2160,-1,
         140254,2160,-1,
         140255,2160,399280,
         140257,2160,-1,
        140258,2160,-1,
        140260,2160,399280,
         140262,2160,399280,
         140263,2160,-1,
         140265,2160,399280,
         140266,2160,-1,
        140268,2160,-1,
       140270,2160,-1,
      140271,2160,-1,
      140273,2160,399280,
       140274,2160,399280,
        140276,2160,399280,
         140278,2160,399280,
          140279,2160,399280,
          140281,2160,-1,
          140282,2160,399280,
          140284,2160,-1,
         140286,2160,-1,
         140288,2160,399280,
         140290,2160,-1,
        140292,2160,-1,
        140295,2160,399280,
         140297,2160,399280,
         140299,2160,-1,
         140300,2160,399280,
         140302,2160,-1,
        140303,2160,-1,
       140305,2160,-1,
       140308,2160,399280,
        140310,2160,399280,
         140312,2160,399280,
         140313,2160,-1,
         140315,2160,399280,
         140316,2160,-1,
        140318,2160,-1,
        140320,2160,399280,
        140321,2160,-1,
       140323,2160,-1,
      140325,2160,-1,
     140327,2160,-1,
     140329,2160,399280,
      140331,2160,399280,
       140333,2160,399280,
        140336,2160,399280,
         140338,2160,399280,
          140340,2160,399280,
          140343,2160,-1,
          140345,2160,399280,
          140346,2160,-1,
         140348,2160,-1,
         140349,2160,399280,
         140351,2160,-1,
        140353,2160,-1,
        140354,2160,399280,
         140356,2160,399280,
         140358,2160,-1,
         140359,2160,399280,
         140361,2160,-1,
        140362,2160,-1,
       140364,2160,-1,
       140365,2160,399280,
        140367,2160,399280,
         140369,2160,399280,
         140370,2160,-1,
         140372,2160,399280,
         140373,2160,-1,
        140375,2160,-1,
        140377,2160,399280,
        140379,2160,-1,
       140380,2160,-1,
      140382,2160,-1,
      140384,2160,399280,
       140385,2160,399280,
        140387,2160,399280,
         140388,2160,399280,
         140390,2160,-1,
         140391,2160,399280,
         140393,2160,-1,
        140395,2160,-1,
        140396,2160,399280,
        140398,2160,-1,
       140400,2160,-1,
       140401,2160,399280,
        140403,2160,399280,
        140405,2160,-1,
        140406,2160,399280,
        140408,2160,-1,
       140409,2160,-1,
      140411,2160,-1,
     140413,2160,-1,
    140414,2160,-1,
   140416,2160,-1,
  140417,2160,-1,
  140419,2160,399280,
   140420,2160,399280,
    140422,2160,399280,
     140424,2160,399280,
      140425,2160,399280,
       140427,2160,399280,
        140428,2160,399280,
         140430,2160,399280,
          140432,2160,399280,
           140433,2160,399280,
            140435,2160,399280,
            140436,2160,-1,
            140438,2160,399280,
            140440,2160,-1,
           140441,2160,-1,
           140443,2160,399280,
           140444,2160,-1,
          140446,2160,-1,
          140448,2160,399280,
           140449,2160,399280,
           140451,2160,-1,
           140452,2160,399280,
           140454,2160,-1,
          140456,2160,-1,
         140457,2160,-1,
         140459,2160,399280,
          140461,2160,399280,
           140462,2160,399280,
           140464,2160,-1,
           140465,2160,399280,
           140467,2160,-1,
          140468,2160,-1,
          140470,2160,399280,
          140472,2160,-1,
         140473,2160,-1,
        140475,2160,-1,
        140476,2160,399280,
         140478,2160,399280,
          140480,2160,399280,
           140481,2160,399280,
           140483,2160,-1,
           140485,2160,399280,
           140486,2160,-1,
          140488,2160,-1,
          140489,2160,399280,
          140491,2160,-1,
         140493,2160,-1,
         140494,2160,399280,
          140496,2160,399280,
          140497,2160,-1,
          140499,2160,399280,
          140501,2160,-1,
         140502,2160,-1,
        140504,2160,-1,
       140506,2160,-1,
       140507,2160,399280,
        140509,2160,399280,
         140510,2160,399280,
          140512,2160,399280,
           140513,2160,399280,
           140515,2160,-1,
           140517,2160,399280,
           140518,2160,-1,
          140520,2160,-1,
          140522,2160,399280,
          140523,2160,-1,
         140525,2160,-1,
         140526,2160,399280,
          140528,2160,399280,
          140530,2160,-1,
          140531,2160,399280,
          140533,2160,-1,
         140534,2160,-1,
        140536,2160,-1,
        140538,2160,399280,
         140539,2160,399280,
          140541,2160,399280,
          140542,2160,-1,
          140544,2160,399280,
          140546,2160,-1,
         140547,2160,-1,
         140549,2160,399280,
         140550,2160,-1,
        140552,2160,-1,
       140554,2160,-1,
      140555,2160,-1,
      140557,2160,399280,
       140558,2160,399280,
        140560,2160,399280,
         140563,2160,399280,
          140565,2160,399280,
           140567,2160,399280,
           140568,2160,-1,
           140570,2160,399280,
           140572,2160,-1,
          140573,2160,-1,
          140575,2160,399280,
          140576,2160,-1,
         140578,2160,-1,
         140580,2160,399280,
          140581,2160,399280,
          140583,2160,-1,
          140584,2160,399280,
          140586,2160,-1,
         140588,2160,-1,
        140589,2160,-1,
        140591,2160,399280,
         140592,2160,399280,
          140594,2160,399280,
          140596,2160,-1,
          140597,2160,399280,
          140599,2160,-1,
         140600,2160,-1,
         140602,2160,399280,
         140604,2160,-1,
        140605,2160,-1,
       140607,2160,-1,
       140608,2160,399280,
        140610,2160,399280,
         140612,2160,399280,
          140613,2160,399280,
          140615,2160,-1,
          140617,2160,399280,
          140619,2160,-1,
         140620,2160,-1,
         140622,2160,399280,
         140623,2160,-1,
        140625,2160,-1,
        140627,2160,399280,
         140628,2160,399280,
         140630,2160,-1,
         140631,2160,399280,
         140633,2160,-1,
        140635,2160,-1,
       140637,2160,-1,
      140640,2160,-1,
     140642,2160,-1,
     140645,2160,399280,
      140647,2160,399280,
       140648,2160,399280,
        140650,2160,399280,
         140652,2160,399280,
          140653,2160,399280,
           140655,2160,399280,
           140657,2160,-1,
           140658,2160,399280,
           140660,2160,-1,
          140661,2160,-1,
          140663,2160,399280,
          140665,2160,-1,
         140666,2160,-1,
         140668,2160,399280,
          140669,2160,399280,
          140671,2160,-1,
          140673,2160,399280,
          140674,2160,-1,
         140676,2160,-1,
        140678,2160,-1,
        140679,2160,399280,
         140681,2160,399280,
          140682,2160,399280,
          140684,2160,-1,
          140686,2160,399280,
          140688,2160,-1,
         140689,2160,-1,
         140691,2160,399280,
         140692,2160,-1,
        140694,2160,-1,
       140696,2160,-1,
       140697,2160,399280,
        140699,2160,399280,
         140700,2160,399280,
          140702,2160,399280,
          140704,2160,-1,
          140705,2160,399280,
          140707,2160,-1,
         140709,2160,-1,
         140710,2160,399280,
         140712,2160,-1,
        140713,2160,-1,
        140715,2160,399280,
         140717,2160,399280,
         140718,2160,-1,
         140720,2160,399280,
         140722,2160,-1,
        140723,2160,-1,
       140725,2160,-1,
      140726,2160,-1,
      140728,2160,399280,
       140729,2160,399280,
        140731,2160,399280,
         140733,2160,399280,
          140734,2160,399280,
          140736,2160,-1,
          140738,2160,399280,
          140739,2160,-1,
         140741,2160,-1,
         140742,2160,399280,
         140744,2160,-1,
        140745,2160,-1,
        140747,2160,399280,
         140749,2160,399280,
         140750,2160,-1,
         140752,2160,399280,
         140753,2160,-1,
        140755,2160,-1,
       140757,2160,-1,
       140758,2160,399280,
        140760,2160,399280,
         140761,2160,399280,
         140763,2160,-1,
         140765,2160,399280,
         140766,2160,-1,
        140768,2160,-1,
        140769,2160,399280,
        140771,2160,-1,
       140773,2160,-1,
      140774,2160,-1,
     140776,2160,-1,
    140777,2160,-1,
    140779,2160,399280,
     140781,2160,399280,
      140782,2160,399280,
       140784,2160,399280,
        140785,2160,399280,
         140787,2160,399280,
          140788,2160,399280,
           140790,2160,399280,
           140792,2160,-1,
           140793,2160,399280,
           140795,2160,-1,
          140796,2160,-1,
          140798,2160,399280,
          140800,2160,-1,
         140801,2160,-1,
         140803,2160,399280,
          140804,2160,399280,
          140806,2160,-1,
          140808,2160,399280,
          140809,2160,-1,
         140811,2160,-1,
        140814,2160,-1,
        140816,2160,399280,
         140817,2160,399280,
          140819,2160,399280,
          140821,2160,-1,
          140822,2160,399280,
          140824,2160,-1,
         140825,2160,-1,
         140827,2160,399280,
         140829,2160,-1,
        140830,2160,-1,
       140832,2160,-1,
       140833,2160,399280,
        140835,2160,399280,
         140836,2160,399280,
          140838,2160,399280,
          140840,2160,-1,
          140841,2160,399280,
          140843,2160,-1,
         140844,2160,-1,
         140846,2160,399280,
         140848,2160,-1,
        140849,2160,-1,
        140851,2160,399280,
         140853,2160,399280,
         140854,2160,-1,
         140856,2160,399280,
         140857,2160,-1,
        140859,2160,-1,
       140860,2160,-1,
      140862,2160,-1,
      140864,2160,399280,
       140865,2160,399280,
        140867,2160,399280,
         140868,2160,399280,
          140870,2160,399280,
          140872,2160,-1,
          140873,2160,399280,
          140875,2160,-1,
         140876,2160,-1,
         140878,2160,399280,
         140880,2160,-1,
        140881,2160,-1,
        140883,2160,399280,
         140884,2160,399280,
         140886,2160,-1,
         140888,2160,399280,
         140889,2160,-1,
        140891,2160,-1,
       140893,2160,-1,
       140894,2160,399280,
        140896,2160,399280,
         140897,2160,399280,
         140899,2160,-1,
         140900,2160,399280,
         140902,2160,-1,
        140904,2160,-1,
        140905,2160,399280,
        140907,2160,-1,
       140908,2160,-1,
      140910,2160,-1,
     140912,2160,-1,
     140913,2160,399280,
      140915,2160,399280,
       140917,2160,399280,
        140920,2160,399280,
         140922,2160,399280,
          140925,2160,399280,
          140927,2160,-1,
          140929,2160,399280,
          140931,2160,-1,
         140932,2160,-1,
         140934,2160,399280,
         140936,2160,-1,
        140937,2160,-1,
        140939,2160,399280,
         140940,2160,399280,
         140942,2160,-1,
         140944,2160,399280,
         140945,2160,-1,
        140947,2160,-1,
       140949,2160,-1,
       140950,2160,399280,
        140952,2160,399280,
         140953,2160,399280,
         140955,2160,-1,
         140957,2160,399280,
         140958,2160,-1,
        140960,2160,-1,
        140961,2160,399280,
        140963,2160,-1,
       140965,2160,-1,
      140966,2160,-1,
      140968,2160,399280,
       140970,2160,399280,
        140971,2160,399280,
         140973,2160,399280,
         140974,2160,-1,
         140976,2160,399280,
         140978,2160,-1,
        140979,2160,-1,
        140981,2160,399280,
        140982,2160,-1,
       140984,2160,-1,
       140986,2160,399280,
        140987,2160,399280,
        140989,2160,-1,
        140990,2160,399280,
        140992,2160,-1,
       140994,2160,-1,
      140996,2160,-1,
     140997,2160,-1,
    140999,2160,-1,
   141000,2160,-1,
   141002,2160,399280,
    141003,2160,399280,
     141005,2160,399280,
      141007,2160,399280,
       141008,2160,399280,
        141010,2160,399280,
         141011,2160,399280,
          141013,2160,399280,
           141014,2160,399280,
           141016,2160,-1,
           141018,2160,399280,
           141019,2160,-1,
          141021,2160,-1,
          141023,2160,399280,
          141024,2160,-1,
         141026,2160,-1,
         141027,2160,399280,
          141029,2160,399280,
          141031,2160,-1,
          141032,2160,399280,
          141034,2160,-1,
         141035,2160,-1,
        141037,2160,-1,
        141039,2160,399280,
         141040,2160,399280,
          141042,2160,399280,
          141043,2160,-1,
          141045,2160,399280,
          141046,2160,-1,
         141048,2160,-1,
         141050,2160,399280,
         141051,2160,-1,
        141053,2160,-1,
       141055,2160,-1,
       141056,2160,399280,
        141058,2160,399280,
         141059,2160,399280,
          141061,2160,399280,
          141062,2160,-1,
          141064,2160,399280,
          141066,2160,-1,
         141069,2160,-1,
         141071,2160,399280,
         141072,2160,-1,
        141074,2160,-1,
        141075,2160,399280,
         141077,2160,399280,
         141079,2160,-1,
         141080,2160,399280,
         141082,2160,-1,
        141083,2160,-1,
       141085,2160,-1,
      141087,2160,-1,
      141088,2160,399280,
       141090,2160,399280,
        141091,2160,399280,
         141093,2160,399280,
          141095,2160,399280,
          141096,2160,-1,
          141098,2160,399280,
          141099,2160,-1,
         141101,2160,-1,
         141103,2160,399280,
         141104,2160,-1,
        141106,2160,-1,
        141107,2160,399280,
         141109,2160,399280,
         141111,2160,-1,
         141112,2160,399280,
         141114,2160,-1,
        141116,2160,-1,
       141117,2160,-1,
       141119,2160,399280,
        141120,2160,399280,
         141122,2160,399280,
         141124,2160,-1,
         141125,2160,399280,
         141127,2160,-1,
        141128,2160,-1,
        141130,2160,399280,
        141132,2160,-1,
       141133,2160,-1,
      141135,2160,-1,
     141136,2160,-1,
     141138,2160,399280,
      141140,2160,399280,
       141141,2160,399280,
        141143,2160,399280,
         141144,2160,399280,
          141146,2160,399280,
          141148,2160,-1,
          141149,2160,399280,
          141151,2160,-1,
         141152,2160,-1,
         141154,2160,399280,
         141156,2160,-1,
        141157,2160,-1,
        141159,2160,399280,
         141160,2160,399280,
         141162,2160,-1,
         141164,2160,399280,
         141165,2160,-1,
        141167,2160,-1,
       141169,2160,-1,
       141170,2160,399280,
        141172,2160,399280,
         141173,2160,399280,
         141175,2160,-1,
         141176,2160,399280,
         141178,2160,-1,
        141180,2160,-1,
        141183,2160,399280,
        141185,2160,-1,
       141188,2160,-1,
      141191,2160,-1,
      141193,2160,399280,
       141195,2160,399280,
        141197,2160,399280,
         141198,2160,399280,
         141200,2160,-1,
         141202,2160,399280,
         141204,2160,-1,
        141206,2160,-1,
        141209,2160,399280,
        141211,2160,-1,
       141213,2160,-1,
       141216,2160,399280,
        141218,2160,399280,
        141221,2160,-1,
        141223,2160,399280,
        141226,2160,-1,
       141228,2160,-1,
      141230,2160,-1,
     141231,2160,-1,
    141233,2160,-1,
    141236,2160,399280,
     141238,2160,399280,
      141241,2160,399280,
       141243,2160,399280,
        141246,2160,399280,
         141248,2160,399280,
          141251,2160,399280,
          141254,2160,-1,
          141256,2160,399280,
          141257,2160,-1,
         141259,2160,-1,
         141262,2160,399280,
         141264,2160,-1,
        141267,2160,-1,
        141269,2160,399280,
         141272,2160,399280,
         141275,2160,-1,
         141277,2160,399280,
         141279,2160,-1,
        141281,2160,-1,
       141282,2160,-1,
       141285,2160,399280,
        141287,2160,399280,
         141290,2160,399280,
         141292,2160,-1,
         141295,2160,399280,
         141297,2160,-1,
        141300,2160,-1,
        141302,2160,399280,
        141305,2160,-1,
       141307,2160,-1,
      141310,2160,-1,
      141312,2160,399280,
       141315,2160,399280,
        141316,2160,399280,
         141318,2160,399280,
         141320,2160,-1,
         141322,2160,399280,
         141324,2160,-1,
        141326,2160,-1,
        141328,2160,399280,
        141330,2160,-1,
       141332,2160,-1,
       141334,2160,399280,
        141336,2160,399280,
        141337,2160,-1,
        141339,2160,399280,
        141341,2160,-1,
       141343,2160,-1,
      141345,2160,-1,
     141347,2160,-1,
     141349,2160,399280,
      141351,2160,399280,
       141352,2160,399280,
        141354,2160,399280,
         141356,2160,399280,
         141358,2160,-1,
         141360,2160,399280,
         141361,2160,-1,
        141363,2160,-1,
        141365,2160,399280,
        141366,2160,-1,
       141368,2160,-1,
       141370,2160,399280,
        141374,2160,399280,
        141376,2160,-1,
        141377,2160,399280,
        141379,2160,-1,
       141381,2160,-1,
      141382,2160,-1,
      141384,2160,399280,
       141385,2160,399280,
        141387,2160,399280,
        141389,2160,-1,
        141390,2160,399280,
        141392,2160,-1,
       141394,2160,-1,
       141395,2160,399280,
       141397,2160,-1,
      141398,2160,-1,
     141400,2160,-1,
    141402,2160,-1,
   141403,2160,-1,
  141405,2160,-1,
 141406,2160,-1,
 141408,2160,27992,
 141410,2160,-1,
 141412,2160,27992,
 141414,2160,-1,
 141417,2160,27992,
 141419,2160,-1,
 141422,2160,27992,
 141424,2160,-1,
 141425,2160,27992,
 141427,2160,-1,
 141428,2160,27992,
 141430,2160,-1,
 141431,2160,27992,
 141433,2160,-1,
 141434,2160,27992,
 141436,2160,-1,
 141437,2160,27992,
 141439,2160,-1,
 141440,2160,27992,
 141442,2160,-1,
 141443,2160,27992,
 141445,2160,-1,
 141446,2160,27992,
 141448,2160,-1,
 141449,2160,27992,
 141451,2160,-1,
 141453,2160,27992,
 141454,2160,-1,
 141456,2160,27992,
 141457,2160,-1,
 141459,2160,27992,
 141460,2160,-1,
 141462,2160,27992,
 141463,2160,-1,
 141465,2160,27992,
 141466,2160,-1,
 141468,2160,27464,
 141475,2160,-1,
 141477,2160,26392,
 141482,2160,-1,
 141484,2160,26928,
 141488,2160,-1,
 141490,2160,25856,
 141494,2160,-1,
 141496,2160,27464,
 141500,2160,-1,
 141502,2160,26392,
 141506,2160,-1,
 141508,2160,26928,
 141512,2160,-1,
 141514,2160,25856,
 141518,2160,-1,
 141520,2160,25856,
 141521,2160,-1,
 141534,2160,392432,
  141536,2160,392344,
  141538,2160,-1,
 141540,2160,-1,
 141541,2160,392432,
  141543,2160,392344,
  141544,2160,-1,
 141546,2160,-1,
 141548,2160,392432,
  141549,2160,392344,
  141551,2160,-1,
 141552,2160,-1,
 141554,2160,392432,
  141555,2160,392344,
   141557,2160,392344,
   141559,2160,-1,
  141560,2160,-1,
 141562,2160,-1,
 141563,2160,392432,
  141565,2160,392344,
   141567,2160,392344,
   141568,2160,-1,
  141570,2160,-1,
 141571,2160,-1,
 141573,2160,392432,
  141574,2160,392344,
   141576,2160,392344,
   141578,2160,-1,
  141579,2160,-1,
 141581,2160,-1,
 141584,2160,392520,
 141586,2160,-1,
 141587,2160,392552,
 141589,2160,-1,
 141591,2160,392520,
 141593,2160,-1,
 141594,2160,392552,
 141596,2160,-1,
 141598,2160,392584,
 141599,2160,-1,
 141601,2160,392584,
 141603,2160,-1,
 141605,2160,392664,
 141607,2160,-1,
 141608,2160,392664,
 141610,2160,-1,
 141612,2160,392744,
 141614,2160,-1,
 141615,2160,392744,
 141617,2160,-1,
 141618,2160,392744,
 141620,2160,-1,
 141622,2160,392744,
 141624,2160,-1,
 141626,2160,392808,
 141627,2160,-1,
 141629,2160,392808,
 141631,2160,-1,
 141633,2160,392808,
 141635,2160,-1,
 141636,2160,392984,
 141639,2160,-1,
 141641,2160,392984,
 141643,2160,-1,
 141644,2160,393320,
  141646,2160,392344,
  141648,2160,-1,
 141650,2160,-1,
 141652,2160,393704,
  141653,2160,55384,
  141655,2160,-1,
  141657,2160,55384,
  141658,2160,-1,
 141661,2160,-1,
 141663,2160,393952,
  141666,2160,55384,
  141668,2160,-1,
  141671,2160,55384,
  141673,2160,-1,
 141674,2160,-1,
 141676,2160,394032,
  141678,2160,56600,
  141679,2160,-1,
  141681,2160,57288,
  141683,2160,-1,
 141685,2160,-1,
 141686,2160,394032,
  141688,2160,56600,
  141690,2160,-1,
  141691,2160,57288,
  141693,2160,-1,
 141695,2160,-1,
 141696,2160,392856,
 141698,2160,-1,
 141700,2160,392920,
 141701,2160,-1,
 141703,2160,392488,
 141705,2160,-1,
 141706,2160,392488,
 141708,2160,-1,
 141710,2160,392488,
 141711,2160,-1,
 141713,2160,392488,
 141714,2160,-1,
 141716,2160,392488,
 141718,2160,-1,
 141719,2160,392488,
 141721,2160,-1,
 141722,2160,392488,
 141724,2160,-1,
 141725,2160,392488,
 141727,2160,-1,
 141729,2160,392488,
 141730,2160,-1,
 141732,2160,392488,
 141733,2160,-1,
 141735,2160,392488,
 141737,2160,-1,
 141741,2160,392456,
 141745,2160,-1,
 141747,2160,392456,
 141750,2160,-1,
 141752,2160,392456,
 141753,2160,-1,
 141755,2160,392456,
 141756,2160,-1,
 141758,2160,392456,
 141760,2160,-1,
 141761,2160,392456,
 141763,2160,-1,
 141764,2160,392456,
 141766,2160,-1,
 141767,2160,392456,
 141769,2160,-1,
 141771,2160,392456,
 141775,2160,-1,
 141776,2160,392456,
 141778,2160,-1,
 141780,2160,392456,
 141781,2160,-1,
 141783,2160,36488,
 141784,2160,-1,
 141786,2160,37352,
 141788,2160,-1,
 141790,2160,35624,
 141791,1136,-1,
 141793,1136,35624,
 141795,1056,-1,
 141796,1056,35624,
 141798,896,-1,
 141799,896,35624,
 141801,64,-1,
 141802,64,32536,
 141817,64,-1,
 141819,64,32536,
 141831,64,-1,
 141833,64,27992,
 141835,64,-1,
 141836,64,38208,
 141838,64,-1,
 141840,64,27992,
 141841,64,-1,
 141843,64,36488,
 141845,64,-1,
 141846,64,32536,
 141857,64,-1,
 141859,64,32536,
 141869,64,-1,
 141871,64,399712,
  141873,64,32536,
  141922,64,-1,
 141925,64,-1,
 141926,64,399760,
  141928,64,32536,
  141979,64,-1,
 141982,64,-1,
 141983,64,399896,
  141985,64,32536,
  141994,64,-1,
  141996,64,399712,
   141997,64,32536,
   142069,64,-1,
  142072,64,-1,
 142073,64,-1,
 142075,64,399968,
  142077,64,32536,
  142085,64,-1,
  142087,64,399760,
   142089,64,32536,
   142150,64,-1,
  142152,64,-1,
 142154,64,-1,
 142156,64,399712,
  142157,64,32536,
  142197,64,-1,
 142201,64,-1,
 142202,64,399760,
  142204,64,32536,
  142228,64,-1,
 142231,64,-1,
 142232,64,399760,
  142234,64,32536,
  142281,64,-1,
 142283,64,-1,
 142284,64,32536,
 142303,64,-1,
 142305,64,32536,
 142322,64,-1,
 142324,64,32536,
 142342,64,-1,
 142344,64,32536,
 142367,64,-1,
 142369,64,32536,
 142389,64,-1,
 142391,64,32536,
 142412,64,-1,
 142414,64,32536,
 142435,64,-1,
 142438,64,32536,
 142447,64,-1,
 142449,64,32536,
 142462,64,-1,
 142463,64,32536,
 142480,64,-1,
 142484,64,32536,
 142496,64,-1,
 142498,64,32536,
 142509,64,-1,
 142511,64,32536,
 142522,64,-1,
 142524,64,32536,
 142535,64,-1,
 142537,64,32536,
 142544,64,-1,
 142546,64,32536,
 142552,64,-1,
 142553,64,32536,
 142560,64,-1,
 142561,64,32536,
 142567,64,-1,
 142569,64,32536,
 142579,64,-1,
 142581,64,32536,
 142593,64,-1,
 142595,64,24280,
 142596,64,-1,
142598,64,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 24280
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25856
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 9
		, "total": 9
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26392
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 9
		, "total": 9
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26928
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 9
		, "total": 9
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27464
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 10
		, "total": 10
		, "fails": 0
	}, {
		"": "typename.size(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "size"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27992
		, "static": true
		, "const": true
		, "hits": 20
		, "time": 34
		, "total": 34
		, "fails": 0
	}, {
		"": "object.create(type: typename): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "create"
		, "owner": "object"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28696
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 10
		, "total": 10
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": true
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": true
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": true
		}]
		, "size": 0
		, "offs": 32536
		, "static": true
		, "const": true
		, "hits": 34
		, "time": 761
		, "total": 761
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34920
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 638
		, "total": 638
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35624
		, "static": true
		, "const": true
		, "hits": 8
		, "time": 14
		, "total": 14
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "value"
			, "type": "uint8"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36488
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 37352
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 38208
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42368
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 12
		, "total": 12
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43224
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 11
		, "total": 11
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43760
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44296
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44832
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45368
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45904
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46440
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47288
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48136
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48672
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 7
		, "total": 7
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49208
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49744
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50280
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50816
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51512
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52048
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52744
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53272
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53800
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54328
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54856
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 55384
		, "static": true
		, "const": true
		, "hits": 5
		, "time": 12
		, "total": 12
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56072
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56600
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 57288
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 8
		, "total": 8
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 392344
		, "static": true
		, "const": false
		, "hits": 10
		, "time": 21
		, "total": 21
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 392432
		, "static": true
		, "const": false
		, "hits": 6
		, "time": 19
		, "total": 39
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 392456
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 25
		, "total": 25
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 392488
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 18
		, "total": 18
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 392520
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 163
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 163
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 163
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 163
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 163
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 392552
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 392584
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 208
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 208
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 208
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 392664
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 222
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 222
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 222
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 392744
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 7
		, "total": 7
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 248
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 248
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 248
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 392808
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 392856
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 272
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 272
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 272
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 272
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 272
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 392920
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 287
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 287
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 287
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 287
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 392984
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 344
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 344
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 344
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 378
		, "offs": 393320
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 5
		, "total": 6
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 401
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 401
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 401
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 393704
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 5
		, "total": 9
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 440
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 440
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 440
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 393952
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 5
		, "total": 11
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 455
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 455
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 455
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 173
		, "offs": 394032
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 11
		, "total": 17
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 398296
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 398304
		, "static": true
		, "const": false
		, "hits": 128
		, "time": 465
		, "total": 465
		, "fails": 128
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 398328
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 398344
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 4
		, "total": 90
		, "fails": 1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 398416
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 398432
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 1
		, "total": 1
		, "fails": 1
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 399208
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 399272
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 399280
		, "static": true
		, "const": false
		, "hits": 753
		, "time": 2540
		, "total": 2540
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 399712
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 12
		, "total": 172
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 399760
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 16
		, "total": 199
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 399896
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 6
		, "total": 90
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 399968
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 6
		, "total": 79
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 13382
		, "offs": 402660
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 341
		, "total": 4581
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 112
	, "statementCount": 1179
}
}
